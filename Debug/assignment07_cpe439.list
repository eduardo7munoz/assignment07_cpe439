
assignment07_cpe439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08007f60  08007f60  00017f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800824c  0800824c  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800824c  0800824c  0001824c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008254  08008254  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008254  08008254  00018254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008258  08008258  00018258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800825c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  200000e0  0800833c  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200006d4  0800833c  000206d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000235f1  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c3b  00000000  00000000  00043701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb0  00000000  00000000  00048340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d98  00000000  00000000  0004a2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005bbd  00000000  00000000  0004c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000231a7  00000000  00000000  00051c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e52f  00000000  00000000  00074dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018331b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008664  00000000  00000000  0018336c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f48 	.word	0x08007f48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	08007f48 	.word	0x08007f48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009d0:	f000 b974 	b.w	8000cbc <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468e      	mov	lr, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14d      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4694      	mov	ip, r2
 80009fe:	d969      	bls.n	8000ad4 <__udivmoddi4+0xe8>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b152      	cbz	r2, 8000a1c <__udivmoddi4+0x30>
 8000a06:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0a:	f1c2 0120 	rsb	r1, r2, #32
 8000a0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	0c21      	lsrs	r1, r4, #16
 8000a22:	fbbe f6f8 	udiv	r6, lr, r8
 8000a26:	fa1f f78c 	uxth.w	r7, ip
 8000a2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a32:	fb06 f107 	mul.w	r1, r6, r7
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a42:	f080 811f 	bcs.w	8000c84 <__udivmoddi4+0x298>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 811c 	bls.w	8000c84 <__udivmoddi4+0x298>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb00 f707 	mul.w	r7, r0, r7
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x92>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a70:	f080 810a 	bcs.w	8000c88 <__udivmoddi4+0x29c>
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	f240 8107 	bls.w	8000c88 <__udivmoddi4+0x29c>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	1be4      	subs	r4, r4, r7
 8000a84:	2600      	movs	r6, #0
 8000a86:	b11d      	cbz	r5, 8000a90 <__udivmoddi4+0xa4>
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0xc2>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	f000 80ef 	beq.w	8000c7e <__udivmoddi4+0x292>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	fab3 f683 	clz	r6, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d14a      	bne.n	8000b4c <__udivmoddi4+0x160>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xd4>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	f200 80f9 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000ac0:	1a84      	subs	r4, r0, r2
 8000ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	469e      	mov	lr, r3
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e0      	beq.n	8000a90 <__udivmoddi4+0xa4>
 8000ace:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad2:	e7dd      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000ad4:	b902      	cbnz	r2, 8000ad8 <__udivmoddi4+0xec>
 8000ad6:	deff      	udf	#255	; 0xff
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8092 	bne.w	8000c06 <__udivmoddi4+0x21a>
 8000ae2:	eba1 010c 	sub.w	r1, r1, ip
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af6:	fb07 1113 	mls	r1, r7, r3, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb0e f003 	mul.w	r0, lr, r3
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x12c>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x12a>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2c0>
 8000b16:	4643      	mov	r3, r8
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b20:	fb07 1110 	mls	r1, r7, r0, r1
 8000b24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x156>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x154>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2ca>
 8000b40:	4608      	mov	r0, r1
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x9a>
 8000b4c:	f1c6 0720 	rsb	r7, r6, #32
 8000b50:	40b3      	lsls	r3, r6
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b62:	431c      	orrs	r4, r3
 8000b64:	40f9      	lsrs	r1, r7
 8000b66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b72:	0c20      	lsrs	r0, r4, #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fb09 1118 	mls	r1, r9, r8, r1
 8000b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b80:	fb08 f00e 	mul.w	r0, r8, lr
 8000b84:	4288      	cmp	r0, r1
 8000b86:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b8>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1a09      	subs	r1, r1, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bac:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	458e      	cmp	lr, r1
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1e2>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bc6:	458e      	cmp	lr, r1
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4461      	add	r1, ip
 8000bce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd6:	eba1 010e 	sub.w	r1, r1, lr
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46a6      	mov	lr, r4
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x2a4>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x2a0>
 8000be4:	b15d      	cbz	r5, 8000bfe <__udivmoddi4+0x212>
 8000be6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bea:	eb61 010e 	sbc.w	r1, r1, lr
 8000bee:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf6:	40f1      	lsrs	r1, r6
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfe:	2600      	movs	r6, #0
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	40d8      	lsrs	r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa21 f303 	lsr.w	r3, r1, r3
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4301      	orrs	r1, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c24:	fb07 3610 	mls	r6, r7, r0, r3
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c32:	429e      	cmp	r6, r3
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x260>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c54:	fb07 3316 	mls	r3, r7, r6, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x28a>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c72:	3e02      	subs	r6, #2
 8000c74:	4461      	add	r1, ip
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0x104>
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e705      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e3      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6f8      	b.n	8000a7e <__udivmoddi4+0x92>
 8000c8c:	454b      	cmp	r3, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f8>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f8>
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x28a>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1e2>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x260>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b8>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x12c>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e709      	b.n	8000aca <__udivmoddi4+0xde>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x156>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b44      	ldr	r3, [pc, #272]	; (8000de8 <MX_GPIO_Init+0x128>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a43      	ldr	r2, [pc, #268]	; (8000de8 <MX_GPIO_Init+0x128>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <MX_GPIO_Init+0x128>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cee:	4b3e      	ldr	r3, [pc, #248]	; (8000de8 <MX_GPIO_Init+0x128>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a3d      	ldr	r2, [pc, #244]	; (8000de8 <MX_GPIO_Init+0x128>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <MX_GPIO_Init+0x128>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <MX_GPIO_Init+0x128>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	4a37      	ldr	r2, [pc, #220]	; (8000de8 <MX_GPIO_Init+0x128>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d12:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <MX_GPIO_Init+0x128>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <MX_GPIO_Init+0x128>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a31      	ldr	r2, [pc, #196]	; (8000de8 <MX_GPIO_Init+0x128>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <MX_GPIO_Init+0x128>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SDN_GPIO_Port, SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d40:	f003 fb5a 	bl	80043f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2140      	movs	r1, #64	; 0x40
 8000d48:	4828      	ldr	r0, [pc, #160]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000d4a:	f003 fb55 	bl	80043f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4822      	ldr	r0, [pc, #136]	; (8000df0 <MX_GPIO_Init+0x130>)
 8000d66:	f003 f99d 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	481c      	ldr	r0, [pc, #112]	; (8000df0 <MX_GPIO_Init+0x130>)
 8000d80:	f003 f990 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin;
 8000d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPIRIT1_SDN_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f003 f980 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 8000da4:	2340      	movs	r3, #64	; 0x40
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <MX_GPIO_Init+0x12c>)
 8000dbc:	f003 f972 	bl	80040a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2105      	movs	r1, #5
 8000dc4:	2017      	movs	r0, #23
 8000dc6:	f003 f935 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dca:	2017      	movs	r0, #23
 8000dcc:	f003 f94e 	bl	800406c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2105      	movs	r1, #5
 8000dd4:	2028      	movs	r0, #40	; 0x28
 8000dd6:	f003 f92d 	bl	8004034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dda:	2028      	movs	r0, #40	; 0x28
 8000ddc:	f003 f946 	bl	800406c <HAL_NVIC_EnableIRQ>

}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	; 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40021000 	.word	0x40021000
 8000dec:	48000400 	.word	0x48000400
 8000df0:	48000800 	.word	0x48000800

08000df4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b09c      	sub	sp, #112	; 0x70
 8000df8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	char payloadRX[PAYLOAD_SIZE] = "I am Ed!\r\n";
 8000dfa:	4a45      	ldr	r2, [pc, #276]	; (8000f10 <main+0x11c>)
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e02:	c303      	stmia	r3!, {r0, r1}
 8000e04:	801a      	strh	r2, [r3, #0]
 8000e06:	3302      	adds	r3, #2
 8000e08:	0c12      	lsrs	r2, r2, #16
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	f107 0313 	add.w	r3, r7, #19
 8000e10:	2259      	movs	r2, #89	; 0x59
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f007 f807 	bl	8007e28 <memset>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e1a:	f002 ffcb 	bl	8003db4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e1e:	f000 f88f 	bl	8000f40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e22:	f7ff ff4d 	bl	8000cc0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000e26:	f000 f92f 	bl	8001088 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8000e2a:	f000 fb99 	bl	8001560 <MX_USART2_UART_Init>
	UART_escapes("[H");
 8000e2e:	4839      	ldr	r0, [pc, #228]	; (8000f14 <main+0x120>)
 8000e30:	f000 fcc2 	bl	80017b8 <UART_escapes>
	/* USER CODE BEGIN 2 */

	SPSGRF_Init();
 8000e34:	f000 f9c6 	bl	80011c4 <SPSGRF_Init>
	/* Start scheduler */
//	osKernelStart();
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
    SpiritPktCommonSetDestinationAddress(0xFF);
 8000e38:	20ff      	movs	r0, #255	; 0xff
 8000e3a:	f001 f9bd 	bl	80021b8 <SpiritPktCommonSetDestinationAddress>
	SpiritPktStackSetPayloadLength(PAYLOAD_SIZE);
 8000e3e:	2064      	movs	r0, #100	; 0x64
 8000e40:	f001 fb2a 	bl	8002498 <SpiritPktStackSetPayloadLength>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		while(RXorTX==3);
 8000e44:	bf00      	nop
 8000e46:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <main+0x124>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d0fb      	beq.n	8000e46 <main+0x52>
		if(RXorTX)
 8000e4e:	4b32      	ldr	r3, [pc, #200]	; (8000f18 <main+0x124>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d029      	beq.n	8000eaa <main+0xb6>
			{
			    if(sendflag)
 8000e56:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <main+0x128>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f2      	beq.n	8000e44 <main+0x50>
			    {

					xTxDoneFlag = S_RESET;
 8000e5e:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <main+0x12c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]

					// Send the payload
					SPSGRF_StartTx(payload, strlen(payload));
 8000e64:	482f      	ldr	r0, [pc, #188]	; (8000f24 <main+0x130>)
 8000e66:	f7ff f9b3 	bl	80001d0 <strlen>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4619      	mov	r1, r3
 8000e70:	482c      	ldr	r0, [pc, #176]	; (8000f24 <main+0x130>)
 8000e72:	f000 fa55 	bl	8001320 <SPSGRF_StartTx>
					while(!xTxDoneFlag);
 8000e76:	bf00      	nop
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <main+0x12c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d0fa      	beq.n	8000e78 <main+0x84>

					HAL_UART_Transmit(&huart2, "Payload Sent\r\n", 14, HAL_MAX_DELAY);
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e86:	220e      	movs	r2, #14
 8000e88:	4927      	ldr	r1, [pc, #156]	; (8000f28 <main+0x134>)
 8000e8a:	4828      	ldr	r0, [pc, #160]	; (8000f2c <main+0x138>)
 8000e8c:	f006 f866 	bl	8006f5c <HAL_UART_Transmit>

					HAL_Delay(2000); // Block for 2000 ms
 8000e90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e94:	f002 ffce 	bl	8003e34 <HAL_Delay>
//
			    	sendflag = 0;
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <main+0x128>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
			    	memset(payload,'\0',100);
 8000e9e:	2264      	movs	r2, #100	; 0x64
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4820      	ldr	r0, [pc, #128]	; (8000f24 <main+0x130>)
 8000ea4:	f006 ffc0 	bl	8007e28 <memset>
 8000ea8:	e7cc      	b.n	8000e44 <main+0x50>
			    }
			}
			else
			{
			xRxDoneFlag = S_RESET;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <main+0x13c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
			SPSGRF_StartRx();
 8000eb0:	f000 fa57 	bl	8001362 <SPSGRF_StartRx>
			while (!xRxDoneFlag);
 8000eb4:	bf00      	nop
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <main+0x13c>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0fa      	beq.n	8000eb6 <main+0xc2>
			uint8_t sAddress = SpiritPktCommonGetReceivedSourceAddress();
 8000ec0:	f001 f994 	bl	80021ec <SpiritPktCommonGetReceivedSourceAddress>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			rxLen = SPSGRF_GetRxData(payloadRX);
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fa50 	bl	8001374 <SPSGRF_GetRxData>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
			char sAddString[4];
			itoa(sAddress, sAddString, 16);
 8000eda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ede:	1d39      	adds	r1, r7, #4
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f006 ff9e 	bl	8007e24 <itoa>
			UART_print("x");
 8000ee8:	4812      	ldr	r0, [pc, #72]	; (8000f34 <main+0x140>)
 8000eea:	f000 fbd9 	bl	80016a0 <UART_print>
			UART_print(sAddString);
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 fbd5 	bl	80016a0 <UART_print>
			UART_print(" :");
 8000ef6:	4810      	ldr	r0, [pc, #64]	; (8000f38 <main+0x144>)
 8000ef8:	f000 fbd2 	bl	80016a0 <UART_print>
			UART_print(payloadRX);
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 fbcd 	bl	80016a0 <UART_print>
			UART_print("\n\r");
 8000f06:	480d      	ldr	r0, [pc, #52]	; (8000f3c <main+0x148>)
 8000f08:	f000 fbca 	bl	80016a0 <UART_print>
		while(RXorTX==3);
 8000f0c:	e79a      	b.n	8000e44 <main+0x50>
 8000f0e:	bf00      	nop
 8000f10:	08007f80 	.word	0x08007f80
 8000f14:	08007f60 	.word	0x08007f60
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	200000fc 	.word	0x200000fc
 8000f20:	200000fd 	.word	0x200000fd
 8000f24:	20000004 	.word	0x20000004
 8000f28:	08007f64 	.word	0x08007f64
 8000f2c:	200001b0 	.word	0x200001b0
 8000f30:	200000fe 	.word	0x200000fe
 8000f34:	08007f74 	.word	0x08007f74
 8000f38:	08007f78 	.word	0x08007f78
 8000f3c:	08007f7c 	.word	0x08007f7c

08000f40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b096      	sub	sp, #88	; 0x58
 8000f44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2244      	movs	r2, #68	; 0x44
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f006 ff6a 	bl	8007e28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f66:	f003 fa85 	bl	8004474 <HAL_PWREx_ControlVoltageScaling>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000f70:	f000 f884 	bl	800107c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f74:	2302      	movs	r3, #2
 8000f76:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7e:	2310      	movs	r3, #16
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f82:	2302      	movs	r3, #2
 8000f84:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f86:	2302      	movs	r3, #2
 8000f88:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000f8e:	230a      	movs	r3, #10
 8000f90:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f92:	2307      	movs	r3, #7
 8000f94:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f96:	2302      	movs	r3, #2
 8000f98:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f003 fabc 	bl	8004520 <HAL_RCC_OscConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000fae:	f000 f865 	bl	800107c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2104      	movs	r1, #4
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 fe84 	bl	8004cd8 <HAL_RCC_ClockConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000fd6:	f000 f851 	bl	800107c <Error_Handler>
	}
}
 8000fda:	bf00      	nop
 8000fdc:	3758      	adds	r7, #88	; 0x58
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	SpiritIrqs xIrqStatus;

	if (GPIO_Pin != SPIRIT1_GPIO3_Pin)
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	2b80      	cmp	r3, #128	; 0x80
 8000ff2:	d128      	bne.n	8001046 <HAL_GPIO_EXTI_Callback+0x62>
	{
		return;
	}

	SpiritIrqGetStatus(&xIrqStatus);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fdd3 	bl	8001ba4 <SpiritIrqGetStatus>
	if (xIrqStatus.IRQ_TX_DATA_SENT)
 8000ffe:	7b3b      	ldrb	r3, [r7, #12]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		xTxDoneFlag = S_SET;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_GPIO_EXTI_Callback+0x6c>)
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_READY)
 8001010:	7b3b      	ldrb	r3, [r7, #12]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		xRxDoneFlag = S_SET;
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_GPIO_EXTI_Callback+0x70>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_DISC || xIrqStatus.IRQ_RX_TIMEOUT)
 8001022:	7b3b      	ldrb	r3, [r7, #12]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d105      	bne.n	800103a <HAL_GPIO_EXTI_Callback+0x56>
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	f003 0320 	and.w	r3, r3, #32
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d006      	beq.n	8001048 <HAL_GPIO_EXTI_Callback+0x64>
	{
		SpiritCmdStrobeRx();
 800103a:	f001 f813 	bl	8002064 <SpiritManagementWaCmdStrobeRx>
 800103e:	2061      	movs	r0, #97	; 0x61
 8001040:	f000 fce2 	bl	8001a08 <SpiritCmdStrobeCommand>
 8001044:	e000      	b.n	8001048 <HAL_GPIO_EXTI_Callback+0x64>
		return;
 8001046:	bf00      	nop
	}
}
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000fd 	.word	0x200000fd
 8001054:	200000fe 	.word	0x200000fe

08001058 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800106a:	f002 fec3 	bl	8003df4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40001000 	.word	0x40001000

0800107c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>
	...

08001088 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_SPI1_Init+0x74>)
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <MX_SPI1_Init+0x78>)
 8001090:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_SPI1_Init+0x74>)
 8001094:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001098:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_SPI1_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_SPI1_Init+0x74>)
 80010a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_SPI1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_SPI1_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_SPI1_Init+0x74>)
 80010b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_SPI1_Init+0x74>)
 80010be:	2208      	movs	r2, #8
 80010c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_SPI1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_SPI1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_SPI1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_SPI1_Init+0x74>)
 80010d6:	2207      	movs	r2, #7
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_SPI1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_SPI1_Init+0x74>)
 80010e2:	2208      	movs	r2, #8
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_SPI1_Init+0x74>)
 80010e8:	f004 fd08 	bl	8005afc <HAL_SPI_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010f2:	f7ff ffc3 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000100 	.word	0x20000100
 8001100:	40013000 	.word	0x40013000

08001104 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a25      	ldr	r2, [pc, #148]	; (80011b8 <HAL_SPI_MspInit+0xb4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d144      	bne.n	80011b0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	4a24      	ldr	r2, [pc, #144]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 800112c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001130:	6613      	str	r3, [r2, #96]	; 0x60
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a18      	ldr	r2, [pc, #96]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800116e:	23c0      	movs	r3, #192	; 0xc0
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800117e:	2305      	movs	r3, #5
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f002 ff8a 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001190:	2308      	movs	r3, #8
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a0:	2305      	movs	r3, #5
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <HAL_SPI_MspInit+0xbc>)
 80011ac:	f002 ff7a 	bl	80040a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	; 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40013000 	.word	0x40013000
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48000400 	.word	0x48000400

080011c4 <SPSGRF_Init>:
* @brief  Initialize the SPIRIT1 transceiver in the SPSGRF module.
* @param  None
* @retval None
*/
void SPSGRF_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b090      	sub	sp, #64	; 0x40
 80011c8:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktStackInit xStackInit;
  PktStackAddressesInit xStackAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 80011ca:	f002 fc61 	bl	8003a90 <RadioSpiInit>

  // restart the radio
  SpiritEnterShutdown();
 80011ce:	f002 fdd7 	bl	8003d80 <RadioEnterShutdown>
  SpiritExitShutdown();
 80011d2:	f002 fde0 	bl	8003d96 <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 80011d6:	f000 ff75 	bl	80020c4 <SpiritManagementWaExtraCurrent>

  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 80011da:	2300      	movs	r3, #0
 80011dc:	71fb      	strb	r3, [r7, #7]
 80011de:	e004      	b.n	80011ea <SPSGRF_Init+0x26>
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	3301      	adds	r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2bff      	cmp	r3, #255	; 0xff
 80011f0:	d1f6      	bne.n	80011e0 <SPSGRF_Init+0x1c>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 80011f2:	f002 fc2b 	bl	8003a4c <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 80011f6:	4b45      	ldr	r3, [pc, #276]	; (800130c <SPSGRF_Init+0x148>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b03      	cmp	r3, #3
 8001202:	d1ea      	bne.n	80011da <SPSGRF_Init+0x16>

  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 8001204:	2300      	movs	r3, #0
 8001206:	84bb      	strh	r3, [r7, #36]	; 0x24
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 8001208:	4b41      	ldr	r3, [pc, #260]	; (8001310 <SPSGRF_Init+0x14c>)
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 800120c:	4b41      	ldr	r3, [pc, #260]	; (8001314 <SPSGRF_Init+0x150>)
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 8001210:	2300      	movs	r3, #0
 8001212:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 8001216:	2300      	movs	r3, #0
 8001218:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  xRadioInit.lDatarate = DATARATE;
 800121c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 8001222:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001226:	63bb      	str	r3, [r7, #56]	; 0x38
  xRadioInit.lBandwidth = BANDWIDTH;
 8001228:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <SPSGRF_Init+0x150>)
 800122a:	63fb      	str	r3, [r7, #60]	; 0x3c
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 800122c:	483a      	ldr	r0, [pc, #232]	; (8001318 <SPSGRF_Init+0x154>)
 800122e:	f002 fb9b 	bl	8003968 <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	4618      	mov	r0, r3
 8001238:	f001 f9e8 	bl	800260c <SpiritRadioInit>

  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 800123c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800131c <SPSGRF_Init+0x158>
 8001240:	2007      	movs	r0, #7
 8001242:	f002 fa2d 	bl	80036a0 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 8001246:	2007      	movs	r0, #7
 8001248:	f002 fa80 	bl	800374c <SpiritRadioSetPALevelMaxIndex>

  // Configure packet handler to use the Basic packet format
  xStackInit.xPreambleLength = PREAMBLE_LENGTH;
 800124c:	2318      	movs	r3, #24
 800124e:	753b      	strb	r3, [r7, #20]
  xStackInit.xSyncLength = SYNC_LENGTH;
 8001250:	2306      	movs	r3, #6
 8001252:	757b      	strb	r3, [r7, #21]
  xStackInit.lSyncWords = SYNC_WORD;
 8001254:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 8001258:	61bb      	str	r3, [r7, #24]
  xStackInit.xFixVarLength = LENGTH_TYPE;
 800125a:	2301      	movs	r3, #1
 800125c:	773b      	strb	r3, [r7, #28]
  xStackInit.cPktLengthWidth = LENGTH_WIDTH;
 800125e:	2307      	movs	r3, #7
 8001260:	777b      	strb	r3, [r7, #29]
  xStackInit.xCrcMode = CRC_MODE;
 8001262:	2320      	movs	r3, #32
 8001264:	77bb      	strb	r3, [r7, #30]
  xStackInit.xControlLength = CONTROL_LENGTH;
 8001266:	2300      	movs	r3, #0
 8001268:	77fb      	strb	r3, [r7, #31]
  xStackInit.xFec = EN_FEC;
 800126a:	2300      	movs	r3, #0
 800126c:	f887 3020 	strb.w	r3, [r7, #32]
  xStackInit.xDataWhitening = EN_WHITENING;
 8001270:	2301      	movs	r3, #1
 8001272:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  SpiritPktStackInit(&xStackInit);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4618      	mov	r0, r3
 800127c:	f000 ffce 	bl	800221c <SpiritPktStackInit>

  // Configure destination address criteria for automatic packet filtering
  xStackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8001280:	2301      	movs	r3, #1
 8001282:	733b      	strb	r3, [r7, #12]
  xStackAddress.cMyAddress = MY_ADDRESS;
 8001284:	2311      	movs	r3, #17
 8001286:	737b      	strb	r3, [r7, #13]
  xStackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8001288:	2301      	movs	r3, #1
 800128a:	73bb      	strb	r3, [r7, #14]
  xStackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 800128c:	23ee      	movs	r3, #238	; 0xee
 800128e:	73fb      	strb	r3, [r7, #15]
  xStackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 8001290:	2301      	movs	r3, #1
 8001292:	743b      	strb	r3, [r7, #16]
  xStackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8001294:	23ff      	movs	r3, #255	; 0xff
 8001296:	747b      	strb	r3, [r7, #17]
  SpiritPktStackAddressesInit(&xStackAddress);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4618      	mov	r0, r3
 800129e:	f001 f88d 	bl	80023bc <SpiritPktStackAddressesInit>

  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 80012a2:	2302      	movs	r3, #2
 80012a4:	723b      	strb	r3, [r7, #8]
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	727b      	strb	r3, [r7, #9]
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 80012aa:	2300      	movs	r3, #0
 80012ac:	72bb      	strb	r3, [r7, #10]
  SpiritGpioInit(&xGpioInit);
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fbc0 	bl	8001a38 <SpiritGpioInit>

  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f000 fbe1 	bl	8001a80 <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 80012be:	2101      	movs	r1, #1
 80012c0:	2004      	movs	r0, #4
 80012c2:	f000 fc09 	bl	8001ad8 <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 80012c6:	2101      	movs	r1, #1
 80012c8:	2001      	movs	r0, #1
 80012ca:	f000 fc05 	bl	8001ad8 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 80012ce:	2101      	movs	r1, #1
 80012d0:	2002      	movs	r0, #2
 80012d2:	f000 fc01 	bl	8001ad8 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 80012d6:	2101      	movs	r1, #1
 80012d8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80012dc:	f000 fbfc 	bl	8001ad8 <SpiritIrq>
  SpiritIrqClearStatus();
 80012e0:	f000 fc92 	bl	8001c08 <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f001 f93d 	bl	8002564 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f001 f902 	bl	80024f4 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 80012f0:	f06f 0077 	mvn.w	r0, #119	; 0x77
 80012f4:	f001 f96a 	bl	80025cc <SpiritQiSetRssiThresholddBm>

  // Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
  SpiritTimerSetRxTimeoutMs(2000.0);
#else
  SET_INFINITE_RX_TIMEOUT();
 80012f8:	2000      	movs	r0, #0
 80012fa:	f002 fb45 	bl	8003988 <SpiritTimerSetRxTimeoutCounter>
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 80012fe:	2002      	movs	r0, #2
 8001300:	f002 fb5c 	bl	80039bc <SpiritTimerSetRxTimeoutStopCondition>
}
 8001304:	bf00      	nop
 8001306:	3740      	adds	r7, #64	; 0x40
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000240 	.word	0x20000240
 8001310:	3689cac0 	.word	0x3689cac0
 8001314:	000186a0 	.word	0x000186a0
 8001318:	02faf080 	.word	0x02faf080
 800131c:	4139999a 	.word	0x4139999a

08001320 <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 800132c:	2072      	movs	r0, #114	; 0x72
 800132e:	f000 fb6b 	bl	8001a08 <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	2b60      	cmp	r3, #96	; 0x60
 8001336:	bf28      	it	cs
 8001338:	2360      	movcs	r3, #96	; 0x60
 800133a:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	4618      	mov	r0, r3
 8001342:	f002 fc8d 	bl	8003c60 <RadioSpiWriteFifo>
  SpiritPktStackSetPayloadLength(txLen);
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	b29b      	uxth	r3, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f001 f8a4 	bl	8002498 <SpiritPktStackSetPayloadLength>
  SpiritCmdStrobeTx();
 8001350:	f000 fe50 	bl	8001ff4 <SpiritManagementWaCmdStrobeTx>
 8001354:	2060      	movs	r0, #96	; 0x60
 8001356:	f000 fb57 	bl	8001a08 <SpiritCmdStrobeCommand>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 8001366:	f000 fe7d 	bl	8002064 <SpiritManagementWaCmdStrobeRx>
 800136a:	2061      	movs	r0, #97	; 0x61
 800136c:	f000 fb4c 	bl	8001a08 <SpiritCmdStrobeCommand>
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 800137c:	f000 fc5c 	bl	8001c38 <SpiritLinearFifoReadNumElementsRxFifo>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fcb1 	bl	8003cf0 <RadioSpiReadFifo>

  return len;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_MspInit+0x4c>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a2:	4a10      	ldr	r2, [pc, #64]	; (80013e4 <HAL_MspInit+0x4c>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6613      	str	r3, [r2, #96]	; 0x60
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_MspInit+0x4c>)
 80013ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_MspInit+0x4c>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <HAL_MspInit+0x4c>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	6593      	str	r3, [r2, #88]	; 0x58
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_MspInit+0x4c>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	210f      	movs	r1, #15
 80013d2:	f06f 0001 	mvn.w	r0, #1
 80013d6:	f002 fe2d 	bl	8004034 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013f6:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <HAL_InitTick+0xe0>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	4a33      	ldr	r2, [pc, #204]	; (80014c8 <HAL_InitTick+0xe0>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	6593      	str	r3, [r2, #88]	; 0x58
 8001402:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <HAL_InitTick+0xe0>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800140e:	f107 0210 	add.w	r2, r7, #16
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f003 fe21 	bl	8005060 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001424:	2b00      	cmp	r3, #0
 8001426:	d103      	bne.n	8001430 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001428:	f003 fdee 	bl	8005008 <HAL_RCC_GetPCLK1Freq>
 800142c:	6378      	str	r0, [r7, #52]	; 0x34
 800142e:	e004      	b.n	800143a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001430:	f003 fdea 	bl	8005008 <HAL_RCC_GetPCLK1Freq>
 8001434:	4603      	mov	r3, r0
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143c:	4a23      	ldr	r2, [pc, #140]	; (80014cc <HAL_InitTick+0xe4>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	0c9b      	lsrs	r3, r3, #18
 8001444:	3b01      	subs	r3, #1
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <HAL_InitTick+0xe8>)
 800144a:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <HAL_InitTick+0xec>)
 800144c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_InitTick+0xe8>)
 8001450:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001454:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001456:	4a1e      	ldr	r2, [pc, #120]	; (80014d0 <HAL_InitTick+0xe8>)
 8001458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <HAL_InitTick+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <HAL_InitTick+0xe8>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_InitTick+0xe8>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800146e:	4818      	ldr	r0, [pc, #96]	; (80014d0 <HAL_InitTick+0xe8>)
 8001470:	f005 fa54 	bl	800691c <HAL_TIM_Base_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800147a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800147e:	2b00      	cmp	r3, #0
 8001480:	d11b      	bne.n	80014ba <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001482:	4813      	ldr	r0, [pc, #76]	; (80014d0 <HAL_InitTick+0xe8>)
 8001484:	f005 faac 	bl	80069e0 <HAL_TIM_Base_Start_IT>
 8001488:	4603      	mov	r3, r0
 800148a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800148e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001492:	2b00      	cmp	r3, #0
 8001494:	d111      	bne.n	80014ba <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001496:	2036      	movs	r0, #54	; 0x36
 8001498:	f002 fde8 	bl	800406c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b0f      	cmp	r3, #15
 80014a0:	d808      	bhi.n	80014b4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014a2:	2200      	movs	r2, #0
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	2036      	movs	r0, #54	; 0x36
 80014a8:	f002 fdc4 	bl	8004034 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ac:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <HAL_InitTick+0xf0>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e002      	b.n	80014ba <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3738      	adds	r7, #56	; 0x38
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	431bde83 	.word	0x431bde83
 80014d0:	20000164 	.word	0x20000164
 80014d4:	40001000 	.word	0x40001000
 80014d8:	20000074 	.word	0x20000074

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <NMI_Handler+0x4>

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler+0x4>

080014ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 800150c:	2080      	movs	r0, #128	; 0x80
 800150e:	f002 ff8b 	bl	8004428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}

08001516 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800151a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800151e:	f002 ff83 	bl	8004428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <TIM6_DAC_IRQHandler+0x10>)
 800152e:	f005 fac7 	bl	8006ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000164 	.word	0x20000164

0800153c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <MX_USART2_UART_Init>:


/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
	  huart2.Instance = USART2;
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_USART2_UART_Init+0x5c>)
 8001566:	4a16      	ldr	r2, [pc, #88]	; (80015c0 <MX_USART2_UART_Init+0x60>)
 8001568:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_USART2_UART_Init+0x5c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_USART2_UART_Init+0x5c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <MX_USART2_UART_Init+0x5c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_USART2_UART_Init+0x5c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <MX_USART2_UART_Init+0x5c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_USART2_UART_Init+0x5c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <MX_USART2_UART_Init+0x5c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_USART2_UART_Init+0x5c>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <MX_USART2_UART_Init+0x5c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 80015a2:	b662      	cpsie	i
}
 80015a4:	bf00      	nop
	  __enable_irq();

  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_USART2_UART_Init+0x5c>)
 80015a8:	f005 fc8a 	bl	8006ec0 <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80015b2:	f7ff fd63 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200001b0 	.word	0x200001b0
 80015c0:	40004400 	.word	0x40004400

080015c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0ac      	sub	sp, #176	; 0xb0
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2288      	movs	r2, #136	; 0x88
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f006 fc1f 	bl	8007e28 <memset>
  if(uartHandle->Instance==USART2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a29      	ldr	r2, [pc, #164]	; (8001694 <HAL_UART_MspInit+0xd0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d14b      	bne.n	800168c <HAL_UART_MspInit+0xc8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fdbf 	bl	8005184 <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800160c:	f7ff fd36 	bl	800107c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001610:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_UART_MspInit+0xd4>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	4a20      	ldr	r2, [pc, #128]	; (8001698 <HAL_UART_MspInit+0xd4>)
 8001616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161a:	6593      	str	r3, [r2, #88]	; 0x58
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <HAL_UART_MspInit+0xd4>)
 800161e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_UART_MspInit+0xd4>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_UART_MspInit+0xd4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_UART_MspInit+0xd4>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001640:	230c      	movs	r3, #12
 8001642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001658:	2307      	movs	r3, #7
 800165a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001668:	f002 fd1c 	bl	80040a4 <HAL_GPIO_Init>
    __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_UART_MspInit+0xd8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_UART_MspInit+0xd8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0220 	orr.w	r2, r2, #32
 800167a:	601a      	str	r2, [r3, #0]
    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2105      	movs	r1, #5
 8001680:	2026      	movs	r0, #38	; 0x26
 8001682:	f002 fcd7 	bl	8004034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001686:	2026      	movs	r0, #38	; 0x26
 8001688:	f002 fcf0 	bl	800406c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800168c:	bf00      	nop
 800168e:	37b0      	adds	r7, #176	; 0xb0
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40004400 	.word	0x40004400
 8001698:	40021000 	.word	0x40021000
 800169c:	200001b0 	.word	0x200001b0

080016a0 <UART_print>:
}

/* USER CODE BEGIN 1 */

void UART_print(char *outputstring)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	81fb      	strh	r3, [r7, #14]
 80016ac:	e010      	b.n	80016d0 <UART_print+0x30>
	{
		while(!(USART2->ISR & USART_ISR_TXE)); //Transmit data register empty, using negation since value of 0 means data has not been transferred
 80016ae:	bf00      	nop
 80016b0:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <UART_print+0x48>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f9      	beq.n	80016b0 <UART_print+0x10>

		USART2->TDR = outputstring[currchar];
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <UART_print+0x48>)
 80016c6:	b292      	uxth	r2, r2
 80016c8:	851a      	strh	r2, [r3, #40]	; 0x28
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 80016ca:	89fb      	ldrh	r3, [r7, #14]
 80016cc:	3301      	adds	r3, #1
 80016ce:	81fb      	strh	r3, [r7, #14]
 80016d0:	89fc      	ldrh	r4, [r7, #14]
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7fe fd7c 	bl	80001d0 <strlen>
 80016d8:	4603      	mov	r3, r0
 80016da:	429c      	cmp	r4, r3
 80016dc:	d3e7      	bcc.n	80016ae <UART_print+0xe>
	}

}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd90      	pop	{r4, r7, pc}
 80016e8:	40004400 	.word	0x40004400

080016ec <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
	uint8_t RX = USART2->RDR;
 80016f2:	4b27      	ldr	r3, [pc, #156]	; (8001790 <USART2_IRQHandler+0xa4>)
 80016f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	71fb      	strb	r3, [r7, #7]
	char tempstr[6]={'\0'};
 80016fa:	2300      	movs	r3, #0
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	2300      	movs	r3, #0
 8001700:	80bb      	strh	r3, [r7, #4]
	switch(RX)
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	2b54      	cmp	r3, #84	; 0x54
 8001706:	d014      	beq.n	8001732 <USART2_IRQHandler+0x46>
 8001708:	2b54      	cmp	r3, #84	; 0x54
 800170a:	dc25      	bgt.n	8001758 <USART2_IRQHandler+0x6c>
 800170c:	2b52      	cmp	r3, #82	; 0x52
 800170e:	d009      	beq.n	8001724 <USART2_IRQHandler+0x38>
 8001710:	2b52      	cmp	r3, #82	; 0x52
 8001712:	dc21      	bgt.n	8001758 <USART2_IRQHandler+0x6c>
 8001714:	2b0d      	cmp	r3, #13
 8001716:	d013      	beq.n	8001740 <USART2_IRQHandler+0x54>
 8001718:	2b4a      	cmp	r3, #74	; 0x4a
 800171a:	d11d      	bne.n	8001758 <USART2_IRQHandler+0x6c>
	{

			break;
		case 'J':
			UART_escapes("[2J"); //clear everything
 800171c:	481d      	ldr	r0, [pc, #116]	; (8001794 <USART2_IRQHandler+0xa8>)
 800171e:	f000 f84b 	bl	80017b8 <UART_escapes>
			break;
 8001722:	e031      	b.n	8001788 <USART2_IRQHandler+0x9c>

		case 'R':
			RXorTX = 0x0;
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <USART2_IRQHandler+0xac>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
			UART_print("Receive Mode\n\r");
 800172a:	481c      	ldr	r0, [pc, #112]	; (800179c <USART2_IRQHandler+0xb0>)
 800172c:	f7ff ffb8 	bl	80016a0 <UART_print>
			break;
 8001730:	e02a      	b.n	8001788 <USART2_IRQHandler+0x9c>
		case 'T':
			RXorTX = 0x1;
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <USART2_IRQHandler+0xac>)
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
			UART_print("Transmit Mode\n\r");
 8001738:	4819      	ldr	r0, [pc, #100]	; (80017a0 <USART2_IRQHandler+0xb4>)
 800173a:	f7ff ffb1 	bl	80016a0 <UART_print>
			break;
 800173e:	e023      	b.n	8001788 <USART2_IRQHandler+0x9c>
		case '\r':
			UART_escapes("[1B");//move down 1 line
 8001740:	4818      	ldr	r0, [pc, #96]	; (80017a4 <USART2_IRQHandler+0xb8>)
 8001742:	f000 f839 	bl	80017b8 <UART_escapes>
			UART_escapes("\r"); //carriage return
 8001746:	4818      	ldr	r0, [pc, #96]	; (80017a8 <USART2_IRQHandler+0xbc>)
 8001748:	f000 f836 	bl	80017b8 <UART_escapes>
			sendflag = 1;
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <USART2_IRQHandler+0xc0>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
			count = 0;
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <USART2_IRQHandler+0xc4>)
 8001754:	2200      	movs	r2, #0
 8001756:	801a      	strh	r2, [r3, #0]
//			if(RX-0x30>=0 && RX-0x30<=9)
//			{
//
//			}

			payload[count] = RX;
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <USART2_IRQHandler+0xc4>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <USART2_IRQHandler+0xc8>)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	5453      	strb	r3, [r2, r1]
			++count;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <USART2_IRQHandler+0xc4>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <USART2_IRQHandler+0xc4>)
 800176e:	801a      	strh	r2, [r3, #0]
			while(!(USART2->ISR & USART_ISR_TXE));
 8001770:	bf00      	nop
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <USART2_IRQHandler+0xa4>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f9      	beq.n	8001772 <USART2_IRQHandler+0x86>
						USART2->TDR=RX;
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <USART2_IRQHandler+0xa4>)
 8001780:	79fa      	ldrb	r2, [r7, #7]
 8001782:	b292      	uxth	r2, r2
 8001784:	851a      	strh	r2, [r3, #40]	; 0x28


				break;
 8001786:	bf00      	nop
	}
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40004400 	.word	0x40004400
 8001794:	08007fe4 	.word	0x08007fe4
 8001798:	20000000 	.word	0x20000000
 800179c:	08007fe8 	.word	0x08007fe8
 80017a0:	08007ff8 	.word	0x08007ff8
 80017a4:	08008008 	.word	0x08008008
 80017a8:	0800800c 	.word	0x0800800c
 80017ac:	200000fc 	.word	0x200000fc
 80017b0:	20000234 	.word	0x20000234
 80017b4:	20000004 	.word	0x20000004

080017b8 <UART_escapes>:

void UART_escapes(char *escstring)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & USART_ISR_TXE));//do not advance until receiving transmit flag
 80017c0:	bf00      	nop
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <UART_escapes+0x2c>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f9      	beq.n	80017c2 <UART_escapes+0xa>
	USART2->TDR = (0x1B);  // ESC
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <UART_escapes+0x2c>)
 80017d0:	221b      	movs	r2, #27
 80017d2:	851a      	strh	r2, [r3, #40]	; 0x28
	UART_print(escstring);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff63 	bl	80016a0 <UART_print>

}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40004400 	.word	0x40004400

080017e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017ec:	f7ff fea6 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	; (8001828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <LoopForever+0xe>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	; (8001834 <LoopForever+0x16>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001816:	f006 fac9 	bl	8007dac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181a:	f7ff faeb 	bl	8000df4 <main>

0800181e <LoopForever>:

LoopForever:
    b LoopForever
 800181e:	e7fe      	b.n	800181e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001820:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 800182c:	0800825c 	.word	0x0800825c
  ldr r2, =_sbss
 8001830:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001834:	200006d4 	.word	0x200006d4

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>
	...

0800183c <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001846:	f107 030f 	add.w	r3, r7, #15
 800184a:	461a      	mov	r2, r3
 800184c:	2101      	movs	r1, #1
 800184e:	2050      	movs	r0, #80	; 0x50
 8001850:	f002 f97a 	bl	8003b48 <RadioSpiReadRegisters>
 8001854:	4602      	mov	r2, r0
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <SpiritCalibrationVco+0x6c>)
 8001858:	b212      	sxth	r2, r2
 800185a:	4611      	mov	r1, r2
 800185c:	7019      	strb	r1, [r3, #0]
 800185e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001862:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d105      	bne.n	8001876 <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	b2db      	uxtb	r3, r3
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	e004      	b.n	8001880 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	f023 0302 	bic.w	r3, r3, #2
 800187c:	b2db      	uxtb	r3, r3
 800187e:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001880:	f107 030f 	add.w	r3, r7, #15
 8001884:	461a      	mov	r2, r3
 8001886:	2101      	movs	r1, #1
 8001888:	2050      	movs	r0, #80	; 0x50
 800188a:	f002 f911 	bl	8003ab0 <RadioSpiWriteRegisters>
 800188e:	4602      	mov	r2, r0
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SpiritCalibrationVco+0x6c>)
 8001892:	b212      	sxth	r2, r2
 8001894:	4611      	mov	r1, r2
 8001896:	7019      	strb	r1, [r3, #0]
 8001898:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800189c:	705a      	strb	r2, [r3, #1]

}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000240 	.word	0x20000240

080018ac <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	461a      	mov	r2, r3
 80018b6:	2101      	movs	r1, #1
 80018b8:	20e5      	movs	r0, #229	; 0xe5
 80018ba:	f002 f945 	bl	8003b48 <RadioSpiReadRegisters>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <SpiritCalibrationGetVcoCalData+0x34>)
 80018c2:	b212      	sxth	r2, r2
 80018c4:	4611      	mov	r1, r2
 80018c6:	7019      	strb	r1, [r3, #0]
 80018c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80018cc:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018d4:	b2db      	uxtb	r3, r3

}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000240 	.word	0x20000240

080018e4 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 80018ee:	f107 030f 	add.w	r3, r7, #15
 80018f2:	461a      	mov	r2, r3
 80018f4:	2101      	movs	r1, #1
 80018f6:	206e      	movs	r0, #110	; 0x6e
 80018f8:	f002 f926 	bl	8003b48 <RadioSpiReadRegisters>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001900:	b212      	sxth	r2, r2
 8001902:	4611      	mov	r1, r2
 8001904:	7019      	strb	r1, [r3, #0]
 8001906:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800190a:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001912:	b2db      	uxtb	r3, r3
 8001914:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	4313      	orrs	r3, r2
 800191c:	b2db      	uxtb	r3, r3
 800191e:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001920:	f107 030f 	add.w	r3, r7, #15
 8001924:	461a      	mov	r2, r3
 8001926:	2101      	movs	r1, #1
 8001928:	206e      	movs	r0, #110	; 0x6e
 800192a:	f002 f8c1 	bl	8003ab0 <RadioSpiWriteRegisters>
 800192e:	4602      	mov	r2, r0
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001932:	b212      	sxth	r2, r2
 8001934:	4611      	mov	r1, r2
 8001936:	7019      	strb	r1, [r3, #0]
 8001938:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800193c:	705a      	strb	r2, [r3, #1]

}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000240 	.word	0x20000240

0800194c <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001956:	f107 030f 	add.w	r3, r7, #15
 800195a:	461a      	mov	r2, r3
 800195c:	2101      	movs	r1, #1
 800195e:	206f      	movs	r0, #111	; 0x6f
 8001960:	f002 f8f2 	bl	8003b48 <RadioSpiReadRegisters>
 8001964:	4602      	mov	r2, r0
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001968:	b212      	sxth	r2, r2
 800196a:	4611      	mov	r1, r2
 800196c:	7019      	strb	r1, [r3, #0]
 800196e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001972:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800197a:	b2db      	uxtb	r3, r3
 800197c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 800197e:	7bfa      	ldrb	r2, [r7, #15]
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	4313      	orrs	r3, r2
 8001984:	b2db      	uxtb	r3, r3
 8001986:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001988:	f107 030f 	add.w	r3, r7, #15
 800198c:	461a      	mov	r2, r3
 800198e:	2101      	movs	r1, #1
 8001990:	206f      	movs	r0, #111	; 0x6f
 8001992:	f002 f88d 	bl	8003ab0 <RadioSpiWriteRegisters>
 8001996:	4602      	mov	r2, r0
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 800199a:	b212      	sxth	r2, r2
 800199c:	4611      	mov	r1, r2
 800199e:	7019      	strb	r1, [r3, #0]
 80019a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80019a4:	705a      	strb	r2, [r3, #1]

}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000240 	.word	0x20000240

080019b4 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80019be:	f107 030f 	add.w	r3, r7, #15
 80019c2:	461a      	mov	r2, r3
 80019c4:	2101      	movs	r1, #1
 80019c6:	209e      	movs	r0, #158	; 0x9e
 80019c8:	f002 f8be 	bl	8003b48 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	f023 0306 	bic.w	r3, r3, #6
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	73fb      	strb	r3, [r7, #15]
 80019e6:	e004      	b.n	80019f2 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 80019f2:	f107 030f 	add.w	r3, r7, #15
 80019f6:	461a      	mov	r2, r3
 80019f8:	2101      	movs	r1, #1
 80019fa:	209e      	movs	r0, #158	; 0x9e
 80019fc:	f002 f858 	bl	8003ab0 <RadioSpiWriteRegisters>
  
}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 f8e3 	bl	8003be0 <RadioSpiCommandStrobes>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <SpiritCmdStrobeCommand+0x2c>)
 8001a1e:	b212      	sxth	r2, r2
 8001a20:	4611      	mov	r1, r2
 8001a22:	7019      	strb	r1, [r3, #0]
 8001a24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001a28:	705a      	strb	r2, [r3, #1]
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000240 	.word	0x20000240

08001a38 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	785a      	ldrb	r2, [r3, #1]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	789b      	ldrb	r3, [r3, #2]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	f107 020f 	add.w	r2, r7, #15
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 f827 	bl	8003ab0 <RadioSpiWriteRegisters>
 8001a62:	4602      	mov	r2, r0
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SpiritGpioInit+0x44>)
 8001a66:	b212      	sxth	r2, r2
 8001a68:	4611      	mov	r1, r2
 8001a6a:	7019      	strb	r1, [r3, #0]
 8001a6c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001a70:	705a      	strb	r2, [r3, #1]

}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000240 	.word	0x20000240

08001a80 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00c      	beq.n	8001aac <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8001a92:	f107 0308 	add.w	r3, r7, #8
 8001a96:	2204      	movs	r2, #4
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f006 f9c4 	bl	8007e28 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f107 0308 	add.w	r3, r7, #8
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2104      	movs	r1, #4
 8001ab4:	2090      	movs	r0, #144	; 0x90
 8001ab6:	f001 fffb 	bl	8003ab0 <RadioSpiWriteRegisters>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <SpiritIrqDeInit+0x54>)
 8001abe:	b212      	sxth	r2, r2
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	7019      	strb	r1, [r3, #0]
 8001ac4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ac8:	705a      	strb	r2, [r3, #1]
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000240 	.word	0x20000240

08001ad8 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	461a      	mov	r2, r3
 8001aee:	2104      	movs	r1, #4
 8001af0:	2090      	movs	r0, #144	; 0x90
 8001af2:	f002 f829 	bl	8003b48 <RadioSpiReadRegisters>
 8001af6:	4602      	mov	r2, r0
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <SpiritIrq+0xc8>)
 8001afa:	b212      	sxth	r2, r2
 8001afc:	4611      	mov	r1, r2
 8001afe:	7019      	strb	r1, [r3, #0]
 8001b00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b04:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	74fb      	strb	r3, [r7, #19]
 8001b0a:	e011      	b.n	8001b30 <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8001b0c:	7cfb      	ldrb	r3, [r7, #19]
 8001b0e:	3318      	adds	r3, #24
 8001b10:	443b      	add	r3, r7
 8001b12:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001b16:	461a      	mov	r2, r3
 8001b18:	7cfb      	ldrb	r3, [r7, #19]
 8001b1a:	f1c3 0303 	rsb	r3, r3, #3
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	4413      	add	r3, r2
 8001b28:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001b2a:	7cfb      	ldrb	r3, [r7, #19]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	74fb      	strb	r3, [r7, #19]
 8001b30:	7cfb      	ldrb	r3, [r7, #19]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d9ea      	bls.n	8001b0c <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d105      	bne.n	8001b48 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4013      	ands	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e003      	b.n	8001b50 <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	74bb      	strb	r3, [r7, #18]
 8001b54:	e00e      	b.n	8001b74 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8001b56:	7cbb      	ldrb	r3, [r7, #18]
 8001b58:	f1c3 0303 	rsb	r3, r3, #3
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	40da      	lsrs	r2, r3
 8001b62:	7cbb      	ldrb	r3, [r7, #18]
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	3318      	adds	r3, #24
 8001b68:	443b      	add	r3, r7
 8001b6a:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8001b6e:	7cbb      	ldrb	r3, [r7, #18]
 8001b70:	3301      	adds	r3, #1
 8001b72:	74bb      	strb	r3, [r7, #18]
 8001b74:	7cbb      	ldrb	r3, [r7, #18]
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d9ed      	bls.n	8001b56 <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2104      	movs	r1, #4
 8001b82:	2090      	movs	r0, #144	; 0x90
 8001b84:	f001 ff94 	bl	8003ab0 <RadioSpiWriteRegisters>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SpiritIrq+0xc8>)
 8001b8c:	b212      	sxth	r2, r2
 8001b8e:	4611      	mov	r1, r2
 8001b90:	7019      	strb	r1, [r3, #0]
 8001b92:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b96:	705a      	strb	r2, [r3, #1]

}
 8001b98:	bf00      	nop
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000240 	.word	0x20000240

08001ba4 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	20fa      	movs	r0, #250	; 0xfa
 8001bba:	f001 ffc5 	bl	8003b48 <RadioSpiReadRegisters>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <SpiritIrqGetStatus+0x60>)
 8001bc2:	b212      	sxth	r2, r2
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	7019      	strb	r1, [r3, #0]
 8001bc8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001bcc:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	74fb      	strb	r3, [r7, #19]
 8001bd2:	e00e      	b.n	8001bf2 <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8001bd4:	7cfb      	ldrb	r3, [r7, #19]
 8001bd6:	f1c3 0303 	rsb	r3, r3, #3
 8001bda:	3318      	adds	r3, #24
 8001bdc:	443b      	add	r3, r7
 8001bde:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001bec:	7cfb      	ldrb	r3, [r7, #19]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	74fb      	strb	r3, [r7, #19]
 8001bf2:	7cfb      	ldrb	r3, [r7, #19]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d9ed      	bls.n	8001bd4 <SpiritIrqGetStatus+0x30>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000240 	.word	0x20000240

08001c08 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	461a      	mov	r2, r3
 8001c12:	2104      	movs	r1, #4
 8001c14:	20fa      	movs	r0, #250	; 0xfa
 8001c16:	f001 ff97 	bl	8003b48 <RadioSpiReadRegisters>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <SpiritIrqClearStatus+0x2c>)
 8001c1e:	b212      	sxth	r2, r2
 8001c20:	4611      	mov	r1, r2
 8001c22:	7019      	strb	r1, [r3, #0]
 8001c24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c28:	705a      	strb	r2, [r3, #1]

}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000240 	.word	0x20000240

08001c38 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	461a      	mov	r2, r3
 8001c42:	2101      	movs	r1, #1
 8001c44:	20e7      	movs	r0, #231	; 0xe7
 8001c46:	f001 ff7f 	bl	8003b48 <RadioSpiReadRegisters>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 8001c4e:	b212      	sxth	r2, r2
 8001c50:	4611      	mov	r1, r2
 8001c52:	7019      	strb	r1, [r3, #0]
 8001c54:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c58:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c60:	b2db      	uxtb	r3, r3

}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000240 	.word	0x20000240

08001c70 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8001c70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c74:	b08a      	sub	sp, #40	; 0x28
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a70      	ldr	r2, [pc, #448]	; (8001e40 <SpiritManagementSetFrequencyBase+0x1d0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d307      	bcc.n	8001c92 <SpiritManagementSetFrequencyBase+0x22>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a6f      	ldr	r2, [pc, #444]	; (8001e44 <SpiritManagementSetFrequencyBase+0x1d4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d803      	bhi.n	8001c92 <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c90:	e01a      	b.n	8001cc8 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a6c      	ldr	r2, [pc, #432]	; (8001e48 <SpiritManagementSetFrequencyBase+0x1d8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d907      	bls.n	8001caa <SpiritManagementSetFrequencyBase+0x3a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a6b      	ldr	r2, [pc, #428]	; (8001e4c <SpiritManagementSetFrequencyBase+0x1dc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d803      	bhi.n	8001caa <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ca8:	e00e      	b.n	8001cc8 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a68      	ldr	r2, [pc, #416]	; (8001e50 <SpiritManagementSetFrequencyBase+0x1e0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d907      	bls.n	8001cc2 <SpiritManagementSetFrequencyBase+0x52>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a67      	ldr	r2, [pc, #412]	; (8001e54 <SpiritManagementSetFrequencyBase+0x1e4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d803      	bhi.n	8001cc2 <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cc0:	e002      	b.n	8001cc8 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8001cc8:	f000 ffde 	bl	8002c88 <SpiritRadioGetFrequencyOffset>
 8001ccc:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8001cce:	f000 ffbb 	bl	8002c48 <SpiritRadioGetChannelSpace>
 8001cd2:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8001cd4:	f000 ffa0 	bl	8002c18 <SpiritRadioGetChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8001cdc:	6a3a      	ldr	r2, [r7, #32]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	441a      	add	r2, r3
 8001ce2:	7efb      	ldrb	r3, [r7, #27]
 8001ce4:	69f9      	ldr	r1, [r7, #28]
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8001cee:	f001 fdbb 	bl	8003868 <SpiritRadioGetRefDiv>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 8001cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d83a      	bhi.n	8001d76 <SpiritManagementSetFrequencyBase+0x106>
 8001d00:	a201      	add	r2, pc, #4	; (adr r2, 8001d08 <SpiritManagementSetFrequencyBase+0x98>)
 8001d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d06:	bf00      	nop
 8001d08:	08001d61 	.word	0x08001d61
 8001d0c:	08001d49 	.word	0x08001d49
 8001d10:	08001d31 	.word	0x08001d31
 8001d14:	08001d19 	.word	0x08001d19
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	4a4f      	ldr	r2, [pc, #316]	; (8001e58 <SpiritManagementSetFrequencyBase+0x1e8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d803      	bhi.n	8001d28 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7ff fe47 	bl	80019b4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001d26:	e026      	b.n	8001d76 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f7ff fe43 	bl	80019b4 <SpiritCalibrationSelectVco>
    break;
 8001d2e:	e022      	b.n	8001d76 <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	4a4a      	ldr	r2, [pc, #296]	; (8001e5c <SpiritManagementSetFrequencyBase+0x1ec>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d803      	bhi.n	8001d40 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff fe3b 	bl	80019b4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001d3e:	e01a      	b.n	8001d76 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001d40:	2001      	movs	r0, #1
 8001d42:	f7ff fe37 	bl	80019b4 <SpiritCalibrationSelectVco>
    break;
 8001d46:	e016      	b.n	8001d76 <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	4a45      	ldr	r2, [pc, #276]	; (8001e60 <SpiritManagementSetFrequencyBase+0x1f0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d803      	bhi.n	8001d58 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fe2f 	bl	80019b4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001d56:	e00e      	b.n	8001d76 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7ff fe2b 	bl	80019b4 <SpiritCalibrationSelectVco>
    break;
 8001d5e:	e00a      	b.n	8001d76 <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	4a40      	ldr	r2, [pc, #256]	; (8001e64 <SpiritManagementSetFrequencyBase+0x1f4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d803      	bhi.n	8001d70 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff fe23 	bl	80019b4 <SpiritCalibrationSelectVco>
 8001d6e:	e002      	b.n	8001d76 <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8001d70:	2001      	movs	r0, #1
 8001d72:	f7ff fe1f 	bl	80019b4 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f000 fe66 	bl	8002a48 <SpiritRadioSearchWCP>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7fe fb6f 	bl	8000464 <__aeabi_ui2d>
 8001d86:	4604      	mov	r4, r0
 8001d88:	460d      	mov	r5, r1
 8001d8a:	7cfb      	ldrb	r3, [r7, #19]
 8001d8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001d90:	4935      	ldr	r1, [pc, #212]	; (8001e68 <SpiritManagementSetFrequencyBase+0x1f8>)
 8001d92:	5c8a      	ldrb	r2, [r1, r2]
 8001d94:	fb02 f303 	mul.w	r3, r2, r3
 8001d98:	049b      	lsls	r3, r3, #18
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fb72 	bl	8000484 <__aeabi_i2d>
 8001da0:	4680      	mov	r8, r0
 8001da2:	4689      	mov	r9, r1
 8001da4:	f001 fdd4 	bl	8003950 <SpiritRadioGetXtalFrequency>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fb5a 	bl	8000464 <__aeabi_ui2d>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4640      	mov	r0, r8
 8001db6:	4649      	mov	r1, r9
 8001db8:	f7fe fcf8 	bl	80007ac <__aeabi_ddiv>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	f7fe fbc8 	bl	8000558 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f7fe fdd4 	bl	800097c <__aeabi_d2uiz>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	0d5b      	lsrs	r3, r3, #21
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	7cbb      	ldrb	r3, [r7, #18]
 8001de6:	015b      	lsls	r3, r3, #5
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	4313      	orrs	r3, r2
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	0b5b      	lsrs	r3, r3, #13
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e0c:	4917      	ldr	r1, [pc, #92]	; (8001e6c <SpiritManagementSetFrequencyBase+0x1fc>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8001e16:	f107 0308 	add.w	r3, r7, #8
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	2008      	movs	r0, #8
 8001e20:	f001 fe46 	bl	8003ab0 <RadioSpiWriteRegisters>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <SpiritManagementSetFrequencyBase+0x200>)
 8001e28:	b212      	sxth	r2, r2
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	7019      	strb	r1, [r3, #0]
 8001e2e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e32:	705a      	strb	r2, [r3, #1]
}
 8001e34:	bf00      	nop
 8001e36:	3728      	adds	r7, #40	; 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e3e:	bf00      	nop
 8001e40:	2e5f5680 	.word	0x2e5f5680
 8001e44:	390c2fe0 	.word	0x390c2fe0
 8001e48:	1701e47f 	.word	0x1701e47f
 8001e4c:	1c146a60 	.word	0x1c146a60
 8001e50:	11d260bf 	.word	0x11d260bf
 8001e54:	14ced7e0 	.word	0x14ced7e0
 8001e58:	099cf4e1 	.word	0x099cf4e1
 8001e5c:	1339e9c3 	.word	0x1339e9c3
 8001e60:	19a28d05 	.word	0x19a28d05
 8001e64:	33451a0a 	.word	0x33451a0a
 8001e68:	0800806c 	.word	0x0800806c
 8001e6c:	08008068 	.word	0x08008068
 8001e70:	20000240 	.word	0x20000240

08001e74 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8001e82:	f001 fd65 	bl	8003950 <SpiritRadioGetXtalFrequency>
 8001e86:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4a57      	ldr	r2, [pc, #348]	; (8001fec <SpiritManagementWaVcoCalibration+0x178>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d90f      	bls.n	8001eb4 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8001e94:	f001 fce8 	bl	8003868 <SpiritRadioGetRefDiv>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10a      	bne.n	8001eb4 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 8001ea2:	f001 f853 	bl	8002f4c <SpiritRadioGetFrequencyBase>
 8001ea6:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f001 fcad 	bl	8003808 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fede 	bl	8001c70 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8001eb4:	f001 f84a 	bl	8002f4c <SpiritRadioGetFrequencyBase>
 8001eb8:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 8001eba:	2325      	movs	r3, #37	; 0x25
 8001ebc:	707b      	strb	r3, [r7, #1]
 8001ebe:	1c7b      	adds	r3, r7, #1
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	20a1      	movs	r0, #161	; 0xa1
 8001ec6:	f001 fdf3 	bl	8003ab0 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f7ff fcb6 	bl	800183c <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8001ed0:	f001 fdbc 	bl	8003a4c <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8001ed4:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <SpiritManagementWaVcoCalibration+0x17c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b40      	cmp	r3, #64	; 0x40
 8001ee0:	d10d      	bne.n	8001efe <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 8001ee6:	2062      	movs	r0, #98	; 0x62
 8001ee8:	f7ff fd8e 	bl	8001a08 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8001eec:	f001 fdae 	bl	8003a4c <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8001ef0:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <SpiritManagementWaVcoCalibration+0x17c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d1f6      	bne.n	8001eec <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 8001efe:	2066      	movs	r0, #102	; 0x66
 8001f00:	f7ff fd82 	bl	8001a08 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8001f08:	f001 fda0 	bl	8003a4c <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8001f0c:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <SpiritManagementWaVcoCalibration+0x17c>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b13      	cmp	r3, #19
 8001f18:	d106      	bne.n	8001f28 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 8001f1a:	7b7b      	ldrb	r3, [r7, #13]
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	737a      	strb	r2, [r7, #13]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d101      	bne.n	8001f28 <SpiritManagementWaVcoCalibration+0xb4>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e05d      	b.n	8001fe4 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8001f28:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <SpiritManagementWaVcoCalibration+0x17c>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	d1e8      	bne.n	8001f08 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 8001f36:	f7ff fcb9 	bl	80018ac <SpiritCalibrationGetVcoCalData>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 8001f3e:	2062      	movs	r0, #98	; 0x62
 8001f40:	f7ff fd62 	bl	8001a08 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8001f44:	f001 fd82 	bl	8003a4c <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8001f48:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <SpiritManagementWaVcoCalibration+0x17c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d1f6      	bne.n	8001f44 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 8001f56:	2065      	movs	r0, #101	; 0x65
 8001f58:	f7ff fd56 	bl	8001a08 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8001f60:	f001 fd74 	bl	8003a4c <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <SpiritManagementWaVcoCalibration+0x17c>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b13      	cmp	r3, #19
 8001f70:	d106      	bne.n	8001f80 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 8001f72:	7b7b      	ldrb	r3, [r7, #13]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	737a      	strb	r2, [r7, #13]
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	d101      	bne.n	8001f80 <SpiritManagementWaVcoCalibration+0x10c>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e031      	b.n	8001fe4 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <SpiritManagementWaVcoCalibration+0x17c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	d1e8      	bne.n	8001f60 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8001f8e:	f7ff fc8d 	bl	80018ac <SpiritCalibrationGetVcoCalData>
 8001f92:	4603      	mov	r3, r0
 8001f94:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 8001f96:	2062      	movs	r0, #98	; 0x62
 8001f98:	f7ff fd36 	bl	8001a08 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8001f9c:	f001 fd56 	bl	8003a4c <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <SpiritManagementWaVcoCalibration+0x17c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d1f6      	bne.n	8001f9c <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8001fae:	7bbb      	ldrb	r3, [r7, #14]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d102      	bne.n	8001fba <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8001fb4:	2063      	movs	r0, #99	; 0x63
 8001fb6:	f7ff fd27 	bl	8001a08 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff fc3e 	bl	800183c <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f001 fc1e 	bl	8003808 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fe4f 	bl	8001c70 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fc85 	bl	80018e4 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 8001fda:	78bb      	ldrb	r3, [r7, #2]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fcb5 	bl	800194c <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	01c9c380 	.word	0x01c9c380
 8001ff0:	20000240 	.word	0x20000240

08001ff4 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <SpiritManagementWaCmdStrobeTx+0x60>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d023      	beq.n	800204c <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <SpiritManagementWaCmdStrobeTx+0x68>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d908      	bls.n	8002020 <SpiritManagementWaCmdStrobeTx+0x2c>
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a13      	ldr	r2, [pc, #76]	; (8002060 <SpiritManagementWaCmdStrobeTx+0x6c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d803      	bhi.n	8002020 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 8002018:	20c0      	movs	r0, #192	; 0xc0
 800201a:	f001 fb6b 	bl	80036f4 <SpiritRadioSetPACwc>
 800201e:	e002      	b.n	8002026 <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 8002020:	2000      	movs	r0, #0
 8002022:	f001 fb67 	bl	80036f4 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 8002026:	2311      	movs	r3, #17
 8002028:	71fb      	strb	r3, [r7, #7]
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	461a      	mov	r2, r3
 800202e:	2101      	movs	r1, #1
 8002030:	20a9      	movs	r0, #169	; 0xa9
 8002032:	f001 fd3d 	bl	8003ab0 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 8002036:	2320      	movs	r3, #32
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	461a      	mov	r2, r3
 800203e:	2101      	movs	r1, #1
 8002040:	20a5      	movs	r0, #165	; 0xa5
 8002042:	f001 fd35 	bl	8003ab0 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 8002046:	4b03      	ldr	r3, [pc, #12]	; (8002054 <SpiritManagementWaCmdStrobeTx+0x60>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
  }
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2000006c 	.word	0x2000006c
 8002058:	20000238 	.word	0x20000238
 800205c:	08f0d17f 	.word	0x08f0d17f
 8002060:	1c03a180 	.word	0x1c03a180

08002064 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <SpiritManagementWaCmdStrobeRx+0x34>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d00d      	beq.n	8002090 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002074:	2398      	movs	r3, #152	; 0x98
 8002076:	71fb      	strb	r3, [r7, #7]
 8002078:	1dfb      	adds	r3, r7, #7
 800207a:	461a      	mov	r2, r3
 800207c:	2101      	movs	r1, #1
 800207e:	20a5      	movs	r0, #165	; 0xa5
 8002080:	f001 fd16 	bl	8003ab0 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002084:	2000      	movs	r0, #0
 8002086:	f001 fb35 	bl	80036f4 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 800208a:	4b03      	ldr	r3, [pc, #12]	; (8002098 <SpiritManagementWaCmdStrobeRx+0x34>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
  }
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	2000006c 	.word	0x2000006c

0800209c <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <SpiritManagementWaTRxFcMem+0x20>)
 80020a6:	2202      	movs	r2, #2
 80020a8:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <SpiritManagementWaTRxFcMem+0x24>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	2000006c 	.word	0x2000006c
 80020c0:	20000238 	.word	0x20000238

080020c4 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 80020ca:	23ca      	movs	r3, #202	; 0xca
 80020cc:	71fb      	strb	r3, [r7, #7]
 80020ce:	1dfb      	adds	r3, r7, #7
 80020d0:	461a      	mov	r2, r3
 80020d2:	2101      	movs	r1, #1
 80020d4:	20b2      	movs	r0, #178	; 0xb2
 80020d6:	f001 fceb 	bl	8003ab0 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80020da:	2304      	movs	r3, #4
 80020dc:	71fb      	strb	r3, [r7, #7]
 80020de:	1dfb      	adds	r3, r7, #7
 80020e0:	461a      	mov	r2, r3
 80020e2:	2101      	movs	r1, #1
 80020e4:	20a8      	movs	r0, #168	; 0xa8
 80020e6:	f001 fce3 	bl	8003ab0 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 80020ea:	1dfb      	adds	r3, r7, #7
 80020ec:	461a      	mov	r2, r3
 80020ee:	2101      	movs	r1, #1
 80020f0:	20a8      	movs	r0, #168	; 0xa8
 80020f2:	f001 fd29 	bl	8003b48 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80020f6:	2300      	movs	r3, #0
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	1dfb      	adds	r3, r7, #7
 80020fc:	461a      	mov	r2, r3
 80020fe:	2101      	movs	r1, #1
 8002100:	20a8      	movs	r0, #168	; 0xa8
 8002102:	f001 fcd5 	bl	8003ab0 <RadioSpiWriteRegisters>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002116:	1dfb      	adds	r3, r7, #7
 8002118:	461a      	mov	r2, r3
 800211a:	2101      	movs	r1, #1
 800211c:	2030      	movs	r0, #48	; 0x30
 800211e:	f001 fd13 	bl	8003b48 <RadioSpiReadRegisters>
 8002122:	4602      	mov	r2, r0
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <SpiritPktCommonGetControlLength+0x34>)
 8002126:	b212      	sxth	r2, r2
 8002128:	4611      	mov	r1, r2
 800212a:	7019      	strb	r1, [r3, #0]
 800212c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002130:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	b2db      	uxtb	r3, r3

}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000240 	.word	0x20000240

08002148 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002152:	f107 030f 	add.w	r3, r7, #15
 8002156:	461a      	mov	r2, r3
 8002158:	2101      	movs	r1, #1
 800215a:	204f      	movs	r0, #79	; 0x4f
 800215c:	f001 fcf4 	bl	8003b48 <RadioSpiReadRegisters>
 8002160:	4602      	mov	r2, r0
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002164:	b212      	sxth	r2, r2
 8002166:	4611      	mov	r1, r2
 8002168:	7019      	strb	r1, [r3, #0]
 800216a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800216e:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d105      	bne.n	8002182 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	b2db      	uxtb	r3, r3
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e004      	b.n	800218c <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
 800218a:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 800218c:	f107 030f 	add.w	r3, r7, #15
 8002190:	461a      	mov	r2, r3
 8002192:	2101      	movs	r1, #1
 8002194:	204f      	movs	r0, #79	; 0x4f
 8002196:	f001 fc8b 	bl	8003ab0 <RadioSpiWriteRegisters>
 800219a:	4602      	mov	r2, r0
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SpiritPktCommonFilterOnCrc+0x6c>)
 800219e:	b212      	sxth	r2, r2
 80021a0:	4611      	mov	r1, r2
 80021a2:	7019      	strb	r1, [r3, #0]
 80021a4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021a8:	705a      	strb	r2, [r3, #1]

}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000240 	.word	0x20000240

080021b8 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 80021c2:	1dfb      	adds	r3, r7, #7
 80021c4:	461a      	mov	r2, r3
 80021c6:	2101      	movs	r1, #1
 80021c8:	204b      	movs	r0, #75	; 0x4b
 80021ca:	f001 fc71 	bl	8003ab0 <RadioSpiWriteRegisters>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <SpiritPktCommonSetDestinationAddress+0x30>)
 80021d2:	b212      	sxth	r2, r2
 80021d4:	4611      	mov	r1, r2
 80021d6:	7019      	strb	r1, [r3, #0]
 80021d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021dc:	705a      	strb	r2, [r3, #1]

}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000240 	.word	0x20000240

080021ec <SpiritPktCommonGetReceivedSourceAddress>:
 * @brief  Returns the source address of the received packet.
 * @param  None.
 * @retval uint8_t Source address of the received packet.
 */
uint8_t SpiritPktCommonGetReceivedSourceAddress(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD1 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD1_BASE, 1, &tempRegValue);
 80021f2:	1dfb      	adds	r3, r7, #7
 80021f4:	461a      	mov	r2, r3
 80021f6:	2101      	movs	r1, #1
 80021f8:	20d2      	movs	r0, #210	; 0xd2
 80021fa:	f001 fca5 	bl	8003b48 <RadioSpiReadRegisters>
 80021fe:	4602      	mov	r2, r0
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <SpiritPktCommonGetReceivedSourceAddress+0x2c>)
 8002202:	b212      	sxth	r2, r2
 8002204:	4611      	mov	r1, r2
 8002206:	7019      	strb	r1, [r3, #0]
 8002208:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800220c:	705a      	strb	r2, [r3, #1]

  /* Returns value */
  return tempRegValue;
 800220e:	79fb      	ldrb	r3, [r7, #7]

}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000240 	.word	0x20000240

0800221c <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002224:	f107 0308 	add.w	r3, r7, #8
 8002228:	461a      	mov	r2, r3
 800222a:	2101      	movs	r1, #1
 800222c:	2051      	movs	r0, #81	; 0x51
 800222e:	f001 fc8b 	bl	8003b48 <RadioSpiReadRegisters>
 8002232:	4602      	mov	r2, r0
 8002234:	4b60      	ldr	r3, [pc, #384]	; (80023b8 <SpiritPktStackInit+0x19c>)
 8002236:	b212      	sxth	r2, r2
 8002238:	4611      	mov	r1, r2
 800223a:	7019      	strb	r1, [r3, #0]
 800223c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002240:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8002242:	7a3b      	ldrb	r3, [r7, #8]
 8002244:	f023 0320 	bic.w	r3, r3, #32
 8002248:	b2db      	uxtb	r3, r3
 800224a:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 800224c:	7a3b      	ldrb	r3, [r7, #8]
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	b2db      	uxtb	r3, r3
 8002254:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	461a      	mov	r2, r3
 800225c:	2101      	movs	r1, #1
 800225e:	2051      	movs	r0, #81	; 0x51
 8002260:	f001 fc26 	bl	8003ab0 <RadioSpiWriteRegisters>
 8002264:	4602      	mov	r2, r0
 8002266:	4b54      	ldr	r3, [pc, #336]	; (80023b8 <SpiritPktStackInit+0x19c>)
 8002268:	b212      	sxth	r2, r2
 800226a:	4611      	mov	r1, r2
 800226c:	7019      	strb	r1, [r3, #0]
 800226e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002272:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002274:	f107 0308 	add.w	r3, r7, #8
 8002278:	461a      	mov	r2, r3
 800227a:	2101      	movs	r1, #1
 800227c:	204f      	movs	r0, #79	; 0x4f
 800227e:	f001 fc63 	bl	8003b48 <RadioSpiReadRegisters>
 8002282:	4602      	mov	r2, r0
 8002284:	4b4c      	ldr	r3, [pc, #304]	; (80023b8 <SpiritPktStackInit+0x19c>)
 8002286:	b212      	sxth	r2, r2
 8002288:	4611      	mov	r1, r2
 800228a:	7019      	strb	r1, [r3, #0]
 800228c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002290:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8002292:	7a3b      	ldrb	r3, [r7, #8]
 8002294:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002298:	b2db      	uxtb	r3, r3
 800229a:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800229c:	f107 0308 	add.w	r3, r7, #8
 80022a0:	461a      	mov	r2, r3
 80022a2:	2101      	movs	r1, #1
 80022a4:	204f      	movs	r0, #79	; 0x4f
 80022a6:	f001 fc03 	bl	8003ab0 <RadioSpiWriteRegisters>
 80022aa:	4602      	mov	r2, r0
 80022ac:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <SpiritPktStackInit+0x19c>)
 80022ae:	b212      	sxth	r2, r2
 80022b0:	4611      	mov	r1, r2
 80022b2:	7019      	strb	r1, [r3, #0]
 80022b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022b8:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7adb      	ldrb	r3, [r3, #11]
 80022be:	f043 0310 	orr.w	r3, r3, #16
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7a5b      	ldrb	r3, [r3, #9]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <SpiritPktStackInit+0xb8>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7a5b      	ldrb	r3, [r3, #9]
 80022d8:	3b01      	subs	r3, #1
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	785b      	ldrb	r3, [r3, #1]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 80022f4:	4313      	orrs	r3, r2
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7a9b      	ldrb	r3, [r3, #10]
 80022fe:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7b5b      	ldrb	r3, [r3, #13]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d104      	bne.n	8002312 <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002308:	7afb      	ldrb	r3, [r7, #11]
 800230a:	f043 0310 	orr.w	r3, r3, #16
 800230e:	b2db      	uxtb	r3, r3
 8002310:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7b1b      	ldrb	r3, [r3, #12]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d104      	bne.n	8002324 <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 800231a:	7afb      	ldrb	r3, [r7, #11]
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	461a      	mov	r2, r3
 800232a:	2104      	movs	r1, #4
 800232c:	2030      	movs	r0, #48	; 0x30
 800232e:	f001 fbbf 	bl	8003ab0 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8002332:	2300      	movs	r3, #0
 8002334:	73fb      	strb	r3, [r7, #15]
 8002336:	e01d      	b.n	8002374 <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	085b      	lsrs	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f1c3 0303 	rsb	r3, r3, #3
 8002346:	429a      	cmp	r2, r3
 8002348:	da06      	bge.n	8002358 <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	3310      	adds	r3, #16
 800234e:	443b      	add	r3, r7
 8002350:	2200      	movs	r2, #0
 8002352:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002356:	e00a      	b.n	800236e <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	40da      	lsrs	r2, r3
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	3310      	adds	r3, #16
 8002368:	443b      	add	r3, r7
 800236a:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	3301      	adds	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d9de      	bls.n	8002338 <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7a9b      	ldrb	r3, [r3, #10]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 8002382:	2000      	movs	r0, #0
 8002384:	f7ff fee0 	bl	8002148 <SpiritPktCommonFilterOnCrc>
 8002388:	e002      	b.n	8002390 <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 800238a:	2001      	movs	r0, #1
 800238c:	f7ff fedc 	bl	8002148 <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002390:	f107 0308 	add.w	r3, r7, #8
 8002394:	461a      	mov	r2, r3
 8002396:	2104      	movs	r1, #4
 8002398:	2036      	movs	r0, #54	; 0x36
 800239a:	f001 fb89 	bl	8003ab0 <RadioSpiWriteRegisters>
 800239e:	4602      	mov	r2, r0
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <SpiritPktStackInit+0x19c>)
 80023a2:	b212      	sxth	r2, r2
 80023a4:	4611      	mov	r1, r2
 80023a6:	7019      	strb	r1, [r3, #0]
 80023a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023ac:	705a      	strb	r2, [r3, #1]

}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000240 	.word	0x20000240

080023bc <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	461a      	mov	r2, r3
 80023ca:	2101      	movs	r1, #1
 80023cc:	204f      	movs	r0, #79	; 0x4f
 80023ce:	f001 fbbb 	bl	8003b48 <RadioSpiReadRegisters>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b2f      	ldr	r3, [pc, #188]	; (8002494 <SpiritPktStackAddressesInit+0xd8>)
 80023d6:	b212      	sxth	r2, r2
 80023d8:	4611      	mov	r1, r2
 80023da:	7019      	strb	r1, [r3, #0]
 80023dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023e0:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d105      	bne.n	80023f6 <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80023ea:	7b3b      	ldrb	r3, [r7, #12]
 80023ec:	f043 0308 	orr.w	r3, r3, #8
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	733b      	strb	r3, [r7, #12]
 80023f4:	e004      	b.n	8002400 <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80023f6:	7b3b      	ldrb	r3, [r7, #12]
 80023f8:	f023 0308 	bic.w	r3, r3, #8
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	789b      	ldrb	r3, [r3, #2]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002408:	7b3b      	ldrb	r3, [r7, #12]
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	b2db      	uxtb	r3, r3
 8002410:	733b      	strb	r3, [r7, #12]
 8002412:	e004      	b.n	800241e <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002414:	7b3b      	ldrb	r3, [r7, #12]
 8002416:	f023 0304 	bic.w	r3, r3, #4
 800241a:	b2db      	uxtb	r3, r3
 800241c:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	791b      	ldrb	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d105      	bne.n	8002432 <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002426:	7b3b      	ldrb	r3, [r7, #12]
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	b2db      	uxtb	r3, r3
 800242e:	733b      	strb	r3, [r7, #12]
 8002430:	e004      	b.n	800243c <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002432:	7b3b      	ldrb	r3, [r7, #12]
 8002434:	f023 0302 	bic.w	r3, r3, #2
 8002438:	b2db      	uxtb	r3, r3
 800243a:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	461a      	mov	r2, r3
 8002442:	2101      	movs	r1, #1
 8002444:	204f      	movs	r0, #79	; 0x4f
 8002446:	f001 fb33 	bl	8003ab0 <RadioSpiWriteRegisters>
 800244a:	4602      	mov	r2, r0
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <SpiritPktStackAddressesInit+0xd8>)
 800244e:	b212      	sxth	r2, r2
 8002450:	4611      	mov	r1, r2
 8002452:	7019      	strb	r1, [r3, #0]
 8002454:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002458:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	795b      	ldrb	r3, [r3, #5]
 800245e:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	78db      	ldrb	r3, [r3, #3]
 8002464:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	785b      	ldrb	r3, [r3, #1]
 800246a:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	461a      	mov	r2, r3
 8002472:	2103      	movs	r1, #3
 8002474:	204c      	movs	r0, #76	; 0x4c
 8002476:	f001 fb1b 	bl	8003ab0 <RadioSpiWriteRegisters>
 800247a:	4602      	mov	r2, r0
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <SpiritPktStackAddressesInit+0xd8>)
 800247e:	b212      	sxth	r2, r2
 8002480:	4611      	mov	r1, r2
 8002482:	7019      	strb	r1, [r3, #0]
 8002484:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002488:	705a      	strb	r2, [r3, #1]
  
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000240 	.word	0x20000240

08002498 <SpiritPktStackSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter can be any value of uint16_t.
 * @retval None.
 */
void SpiritPktStackSetPayloadLength(uint16_t nPayloadLength)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];

  /* Computes the oversize (address + control) size */
  uint16_t overSize = 2 + (uint16_t) SpiritPktStackGetControlLength();
 80024a2:	f7ff fe35 	bl	8002110 <SpiritPktCommonGetControlLength>
 80024a6:	4603      	mov	r3, r0
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3302      	adds	r3, #2
 80024ac:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from lPayloadLength */
  tempRegValue[1]=STACK_BUILD_PCKTLEN0(nPayloadLength+overSize);
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	89fb      	ldrh	r3, [r7, #14]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from lPayloadLength */
  tempRegValue[0]=STACK_BUILD_PCKTLEN1(nPayloadLength+overSize);
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	89fb      	ldrh	r3, [r7, #14]
 80024c0:	4413      	add	r3, r2
 80024c2:	121b      	asrs	r3, r3, #8
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	733b      	strb	r3, [r7, #12]

  /* Writes the value on the PCKTLENx registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 80024c8:	f107 030c 	add.w	r3, r7, #12
 80024cc:	461a      	mov	r2, r3
 80024ce:	2102      	movs	r1, #2
 80024d0:	2034      	movs	r0, #52	; 0x34
 80024d2:	f001 faed 	bl	8003ab0 <RadioSpiWriteRegisters>
 80024d6:	4602      	mov	r2, r0
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <SpiritPktStackSetPayloadLength+0x58>)
 80024da:	b212      	sxth	r2, r2
 80024dc:	4611      	mov	r1, r2
 80024de:	7019      	strb	r1, [r3, #0]
 80024e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024e4:	705a      	strb	r2, [r3, #1]

}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000240 	.word	0x20000240

080024f4 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 80024fe:	f107 030f 	add.w	r3, r7, #15
 8002502:	461a      	mov	r2, r3
 8002504:	2101      	movs	r1, #1
 8002506:	203a      	movs	r0, #58	; 0x3a
 8002508:	f001 fb1e 	bl	8003b48 <RadioSpiReadRegisters>
 800250c:	4602      	mov	r2, r0
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <SpiritQiSqiCheck+0x6c>)
 8002510:	b212      	sxth	r2, r2
 8002512:	4611      	mov	r1, r2
 8002514:	7019      	strb	r1, [r3, #0]
 8002516:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800251a:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d105      	bne.n	800252e <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	b2db      	uxtb	r3, r3
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	e004      	b.n	8002538 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	f023 0302 	bic.w	r3, r3, #2
 8002534:	b2db      	uxtb	r3, r3
 8002536:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002538:	f107 030f 	add.w	r3, r7, #15
 800253c:	461a      	mov	r2, r3
 800253e:	2101      	movs	r1, #1
 8002540:	203a      	movs	r0, #58	; 0x3a
 8002542:	f001 fab5 	bl	8003ab0 <RadioSpiWriteRegisters>
 8002546:	4602      	mov	r2, r0
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <SpiritQiSqiCheck+0x6c>)
 800254a:	b212      	sxth	r2, r2
 800254c:	4611      	mov	r1, r2
 800254e:	7019      	strb	r1, [r3, #0]
 8002550:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002554:	705a      	strb	r2, [r3, #1]

}
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000240 	.word	0x20000240

08002564 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 800256e:	f107 030f 	add.w	r3, r7, #15
 8002572:	461a      	mov	r2, r3
 8002574:	2101      	movs	r1, #1
 8002576:	203a      	movs	r0, #58	; 0x3a
 8002578:	f001 fae6 	bl	8003b48 <RadioSpiReadRegisters>
 800257c:	4602      	mov	r2, r0
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <SpiritQiSetSqiThreshold+0x64>)
 8002580:	b212      	sxth	r2, r2
 8002582:	4611      	mov	r1, r2
 8002584:	7019      	strb	r1, [r3, #0]
 8002586:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800258a:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002592:	b2db      	uxtb	r3, r3
 8002594:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	4313      	orrs	r3, r2
 800259c:	b2db      	uxtb	r3, r3
 800259e:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 80025a0:	f107 030f 	add.w	r3, r7, #15
 80025a4:	461a      	mov	r2, r3
 80025a6:	2101      	movs	r1, #1
 80025a8:	203a      	movs	r0, #58	; 0x3a
 80025aa:	f001 fa81 	bl	8003ab0 <RadioSpiWriteRegisters>
 80025ae:	4602      	mov	r2, r0
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <SpiritQiSetSqiThreshold+0x64>)
 80025b2:	b212      	sxth	r2, r2
 80025b4:	4611      	mov	r1, r2
 80025b6:	7019      	strb	r1, [r3, #0]
 80025b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025bc:	705a      	strb	r2, [r3, #1]

}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000240 	.word	0x20000240

080025cc <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3382      	adds	r3, #130	; 0x82
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 80025e0:	f107 030f 	add.w	r3, r7, #15
 80025e4:	461a      	mov	r2, r3
 80025e6:	2101      	movs	r1, #1
 80025e8:	2022      	movs	r0, #34	; 0x22
 80025ea:	f001 fa61 	bl	8003ab0 <RadioSpiWriteRegisters>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <SpiritQiSetRssiThresholddBm+0x3c>)
 80025f2:	b212      	sxth	r2, r2
 80025f4:	4611      	mov	r1, r2
 80025f6:	7019      	strb	r1, [r3, #0]
 80025f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025fc:	705a      	strb	r2, [r3, #1]

}
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000240 	.word	0x20000240

0800260c <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08c      	sub	sp, #48	; 0x30
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002614:	23a0      	movs	r3, #160	; 0xa0
 8002616:	747b      	strb	r3, [r7, #17]
 8002618:	f107 0311 	add.w	r3, r7, #17
 800261c:	461a      	mov	r2, r3
 800261e:	2101      	movs	r1, #1
 8002620:	209f      	movs	r0, #159	; 0x9f
 8002622:	f001 fa45 	bl	8003ab0 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	ee07 3a90 	vmov	s15, r3
 800263c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002644:	eddf 6aae 	vldr	s13, [pc, #696]	; 8002900 <SpiritRadioInit+0x2f4>
 8002648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800264c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002650:	ee17 3a90 	vmov	r3, s15
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002656:	2063      	movs	r0, #99	; 0x63
 8002658:	f001 fac2 	bl	8003be0 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 800265c:	2300      	movs	r3, #0
 800265e:	73bb      	strb	r3, [r7, #14]
 8002660:	e004      	b.n	800266c <SpiritRadioInit+0x60>
 8002662:	7bbb      	ldrb	r3, [r7, #14]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	3301      	adds	r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	73bb      	strb	r3, [r7, #14]
 800266c:	7bbb      	ldrb	r3, [r7, #14]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2bff      	cmp	r3, #255	; 0xff
 8002672:	d1f6      	bne.n	8002662 <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002674:	f001 f9ea 	bl	8003a4c <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002678:	4ba2      	ldr	r3, [pc, #648]	; (8002904 <SpiritRadioInit+0x2f8>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b40      	cmp	r3, #64	; 0x40
 8002684:	d1ea      	bne.n	800265c <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002686:	4ba0      	ldr	r3, [pc, #640]	; (8002908 <SpiritRadioInit+0x2fc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4aa0      	ldr	r2, [pc, #640]	; (800290c <SpiritRadioInit+0x300>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d803      	bhi.n	8002698 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002690:	2000      	movs	r0, #0
 8002692:	f001 f90b 	bl	80038ac <SpiritRadioSetDigDiv>
 8002696:	e002      	b.n	800269e <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002698:	2001      	movs	r0, #1
 800269a:	f001 f907 	bl	80038ac <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 800269e:	2062      	movs	r0, #98	; 0x62
 80026a0:	f001 fa9e 	bl	8003be0 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 80026a4:	2300      	movs	r3, #0
 80026a6:	737b      	strb	r3, [r7, #13]
 80026a8:	e004      	b.n	80026b4 <SpiritRadioInit+0xa8>
 80026aa:	7b7b      	ldrb	r3, [r7, #13]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	3301      	adds	r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	737b      	strb	r3, [r7, #13]
 80026b4:	7b7b      	ldrb	r3, [r7, #13]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2bff      	cmp	r3, #255	; 0xff
 80026ba:	d1f6      	bne.n	80026aa <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80026bc:	f001 f9c6 	bl	8003a4c <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 80026c0:	4b90      	ldr	r3, [pc, #576]	; (8002904 <SpiritRadioInit+0x2f8>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d1ea      	bne.n	80026a4 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	ee07 3a90 	vmov	s15, r3
 80026d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d8:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8002910 <SpiritRadioInit+0x304>
 80026dc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80026e0:	4b89      	ldr	r3, [pc, #548]	; (8002908 <SpiritRadioInit+0x2fc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	ee07 3a90 	vmov	s15, r3
 80026e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f4:	ee17 3a90 	vmov	r3, s15
 80026f8:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 80026fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	b29b      	uxth	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	b2db      	uxtb	r3, r3
 8002708:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 800270a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800270c:	b2db      	uxtb	r3, r3
 800270e:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	025a      	lsls	r2, r3, #9
 8002716:	4b7c      	ldr	r3, [pc, #496]	; (8002908 <SpiritRadioInit+0x2fc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	3301      	adds	r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fcb5 	bl	800209c <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002732:	f107 0310 	add.w	r3, r7, #16
 8002736:	461a      	mov	r2, r3
 8002738:	2101      	movs	r1, #1
 800273a:	20a3      	movs	r0, #163	; 0xa3
 800273c:	f001 fa04 	bl	8003b48 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002740:	7c3b      	ldrb	r3, [r7, #16]
 8002742:	f023 0302 	bic.w	r3, r3, #2
 8002746:	b2db      	uxtb	r3, r3
 8002748:	743b      	strb	r3, [r7, #16]
 800274a:	f107 0310 	add.w	r3, r7, #16
 800274e:	461a      	mov	r2, r3
 8002750:	2101      	movs	r1, #1
 8002752:	20a3      	movs	r0, #163	; 0xa3
 8002754:	f001 f9ac 	bl	8003ab0 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f107 0216 	add.w	r2, r7, #22
 8002760:	f107 0117 	add.w	r1, r7, #23
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fc3d 	bl	8002fe4 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7b5a      	ldrb	r2, [r3, #13]
 8002772:	7dbb      	ldrb	r3, [r7, #22]
 8002774:	4313      	orrs	r3, r2
 8002776:	b2db      	uxtb	r3, r3
 8002778:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 800277a:	f107 0310 	add.w	r3, r7, #16
 800277e:	461a      	mov	r2, r3
 8002780:	2101      	movs	r1, #1
 8002782:	201c      	movs	r0, #28
 8002784:	f001 f9e0 	bl	8003b48 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	f107 0214 	add.w	r2, r7, #20
 8002790:	f107 0115 	add.w	r1, r7, #21
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fdbd 	bl	8003314 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 800279a:	7d3b      	ldrb	r3, [r7, #20]
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	b25a      	sxtb	r2, r3
 80027a0:	7c3b      	ldrb	r3, [r7, #16]
 80027a2:	b25b      	sxtb	r3, r3
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	b25b      	sxtb	r3, r3
 80027aa:	4313      	orrs	r3, r2
 80027ac:	b25a      	sxtb	r2, r3
 80027ae:	7d7b      	ldrb	r3, [r7, #21]
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	4313      	orrs	r3, r2
 80027b4:	b25b      	sxtb	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f107 0212 	add.w	r2, r7, #18
 80027c2:	f107 0113 	add.w	r1, r7, #19
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fcbe 	bl	8003148 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	b25a      	sxtb	r2, r3
 80027d2:	7cbb      	ldrb	r3, [r7, #18]
 80027d4:	b25b      	sxtb	r3, r3
 80027d6:	4313      	orrs	r3, r2
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 80027de:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <SpiritRadioInit+0x2fc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0b1b      	lsrs	r3, r3, #12
 80027e4:	ee07 3a90 	vmov	s15, r3
 80027e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ec:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002914 <SpiritRadioInit+0x308>
 80027f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027f4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002918 <SpiritRadioInit+0x30c>
 80027f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002800:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002814:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800281c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002820:	dd09      	ble.n	8002836 <SpiritRadioInit+0x22a>
 8002822:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800282a:	edc7 7a00 	vstr	s15, [r7]
 800282e:	783b      	ldrb	r3, [r7, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	b2db      	uxtb	r3, r3
 8002834:	e006      	b.n	8002844 <SpiritRadioInit+0x238>
 8002836:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800283a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800283e:	edc7 7a00 	vstr	s15, [r7]
 8002842:	783b      	ldrb	r3, [r7, #0]
 8002844:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002846:	4b30      	ldr	r3, [pc, #192]	; (8002908 <SpiritRadioInit+0x2fc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a30      	ldr	r2, [pc, #192]	; (800290c <SpiritRadioInit+0x300>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d802      	bhi.n	8002856 <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	777b      	strb	r3, [r7, #29]
 8002854:	e033      	b.n	80028be <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002856:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <SpiritRadioInit+0x2fc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	0b5b      	lsrs	r3, r3, #13
 800285c:	ee07 3a90 	vmov	s15, r3
 8002860:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002864:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002914 <SpiritRadioInit+0x308>
 8002868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800286c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002918 <SpiritRadioInit+0x30c>
 8002870:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002874:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002878:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800287c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002884:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002898:	dd09      	ble.n	80028ae <SpiritRadioInit+0x2a2>
 800289a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800289e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a2:	edc7 7a00 	vstr	s15, [r7]
 80028a6:	783b      	ldrb	r3, [r7, #0]
 80028a8:	3301      	adds	r3, #1
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	e006      	b.n	80028bc <SpiritRadioInit+0x2b0>
 80028ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028b6:	edc7 7a00 	vstr	s15, [r7]
 80028ba:	783b      	ldrb	r3, [r7, #0]
 80028bc:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 80028be:	f107 030f 	add.w	r3, r7, #15
 80028c2:	461a      	mov	r2, r3
 80028c4:	2101      	movs	r1, #1
 80028c6:	2007      	movs	r0, #7
 80028c8:	f001 f8f2 	bl	8003ab0 <RadioSpiWriteRegisters>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <SpiritRadioInit+0x2f8>)
 80028d0:	b212      	sxth	r2, r2
 80028d2:	4611      	mov	r1, r2
 80028d4:	7019      	strb	r1, [r3, #0]
 80028d6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028da:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <SpiritRadioInit+0x2fc>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0e      	ldr	r2, [pc, #56]	; (800291c <SpiritRadioInit+0x310>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d91e      	bls.n	8002924 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 80028e6:	4b08      	ldr	r3, [pc, #32]	; (8002908 <SpiritRadioInit+0x2fc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <SpiritRadioInit+0x314>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	bf8c      	ite	hi
 80028f0:	2301      	movhi	r3, #1
 80028f2:	2300      	movls	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f86c 	bl	80029d4 <SpiritRadioSetXtalFlag>
 80028fc:	e01d      	b.n	800293a <SpiritRadioInit+0x32e>
 80028fe:	bf00      	nop
 8002900:	49742400 	.word	0x49742400
 8002904:	20000240 	.word	0x20000240
 8002908:	2000023c 	.word	0x2000023c
 800290c:	01c9c37f 	.word	0x01c9c37f
 8002910:	48800000 	.word	0x48800000
 8002914:	49afd520 	.word	0x49afd520
 8002918:	42800000 	.word	0x42800000
 800291c:	01c9c380 	.word	0x01c9c380
 8002920:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002924:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <SpiritRadioInit+0x3bc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a28      	ldr	r2, [pc, #160]	; (80029cc <SpiritRadioInit+0x3c0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	bf8c      	ite	hi
 800292e:	2301      	movhi	r3, #1
 8002930:	2300      	movls	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	4618      	mov	r0, r3
 8002936:	f000 f84d 	bl	80029d4 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	330c      	adds	r3, #12
 800293e:	461a      	mov	r2, r3
 8002940:	2101      	movs	r1, #1
 8002942:	206c      	movs	r0, #108	; 0x6c
 8002944:	f001 f8b4 	bl	8003ab0 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	461a      	mov	r2, r3
 800294e:	2104      	movs	r1, #4
 8002950:	200c      	movs	r0, #12
 8002952:	f001 f8ad 	bl	8003ab0 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002956:	f107 0318 	add.w	r3, r7, #24
 800295a:	461a      	mov	r2, r3
 800295c:	2104      	movs	r1, #4
 800295e:	201a      	movs	r0, #26
 8002960:	f001 f8a6 	bl	8003ab0 <RadioSpiWriteRegisters>
 8002964:	4602      	mov	r2, r0
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <SpiritRadioInit+0x3c4>)
 8002968:	b212      	sxth	r2, r2
 800296a:	4611      	mov	r1, r2
 800296c:	7019      	strb	r1, [r3, #0]
 800296e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002972:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002974:	2001      	movs	r0, #1
 8002976:	f000 ff15 	bl	80037a4 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 800297e:	23e3      	movs	r3, #227	; 0xe3
 8002980:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002982:	f107 031c 	add.w	r3, r7, #28
 8002986:	461a      	mov	r2, r3
 8002988:	2102      	movs	r1, #2
 800298a:	2099      	movs	r0, #153	; 0x99
 800298c:	f001 f890 	bl	8003ab0 <RadioSpiWriteRegisters>
 8002990:	4602      	mov	r2, r0
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <SpiritRadioInit+0x3c4>)
 8002994:	b212      	sxth	r2, r2
 8002996:	4611      	mov	r1, r2
 8002998:	7019      	strb	r1, [r3, #0]
 800299a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800299e:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 80029a0:	2322      	movs	r3, #34	; 0x22
 80029a2:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	461a      	mov	r2, r3
 80029aa:	2101      	movs	r1, #1
 80029ac:	20bc      	movs	r0, #188	; 0xbc
 80029ae:	f001 f87f 	bl	8003ab0 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f9aa 	bl	8002d10 <SpiritRadioSetFrequencyBase>
 80029bc:	4603      	mov	r3, r0
  
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3730      	adds	r7, #48	; 0x30
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2000023c 	.word	0x2000023c
 80029cc:	017d783f 	.word	0x017d783f
 80029d0:	20000240 	.word	0x20000240

080029d4 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80029de:	2300      	movs	r3, #0
 80029e0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80029e2:	f107 030f 	add.w	r3, r7, #15
 80029e6:	461a      	mov	r2, r3
 80029e8:	2101      	movs	r1, #1
 80029ea:	2001      	movs	r0, #1
 80029ec:	f001 f8ac 	bl	8003b48 <RadioSpiReadRegisters>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <SpiritRadioSetXtalFlag+0x70>)
 80029f4:	b212      	sxth	r2, r2
 80029f6:	4611      	mov	r1, r2
 80029f8:	7019      	strb	r1, [r3, #0]
 80029fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029fe:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d105      	bne.n	8002a12 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	e004      	b.n	8002a1c <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002a1c:	f107 030f 	add.w	r3, r7, #15
 8002a20:	461a      	mov	r2, r3
 8002a22:	2101      	movs	r1, #1
 8002a24:	2001      	movs	r0, #1
 8002a26:	f001 f843 	bl	8003ab0 <RadioSpiWriteRegisters>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <SpiritRadioSetXtalFlag+0x70>)
 8002a2e:	b212      	sxth	r2, r2
 8002a30:	4611      	mov	r1, r2
 8002a32:	7019      	strb	r1, [r3, #0]
 8002a34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a38:	705a      	strb	r2, [r3, #1]
  
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000240 	.word	0x20000240

08002a48 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a3a      	ldr	r2, [pc, #232]	; (8002b48 <SpiritRadioSearchWCP+0x100>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d306      	bcc.n	8002a72 <SpiritRadioSearchWCP+0x2a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a39      	ldr	r2, [pc, #228]	; (8002b4c <SpiritRadioSearchWCP+0x104>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d802      	bhi.n	8002a72 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002a6c:	2306      	movs	r3, #6
 8002a6e:	73bb      	strb	r3, [r7, #14]
 8002a70:	e01f      	b.n	8002ab2 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a36      	ldr	r2, [pc, #216]	; (8002b50 <SpiritRadioSearchWCP+0x108>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d906      	bls.n	8002a88 <SpiritRadioSearchWCP+0x40>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a35      	ldr	r2, [pc, #212]	; (8002b54 <SpiritRadioSearchWCP+0x10c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d802      	bhi.n	8002a88 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8002a82:	230c      	movs	r3, #12
 8002a84:	73bb      	strb	r3, [r7, #14]
 8002a86:	e014      	b.n	8002ab2 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a33      	ldr	r2, [pc, #204]	; (8002b58 <SpiritRadioSearchWCP+0x110>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d906      	bls.n	8002a9e <SpiritRadioSearchWCP+0x56>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a32      	ldr	r2, [pc, #200]	; (8002b5c <SpiritRadioSearchWCP+0x114>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d802      	bhi.n	8002a9e <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8002a98:	2310      	movs	r3, #16
 8002a9a:	73bb      	strb	r3, [r7, #14]
 8002a9c:	e009      	b.n	8002ab2 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a2f      	ldr	r2, [pc, #188]	; (8002b60 <SpiritRadioSearchWCP+0x118>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d905      	bls.n	8002ab2 <SpiritRadioSearchWCP+0x6a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a2e      	ldr	r2, [pc, #184]	; (8002b64 <SpiritRadioSearchWCP+0x11c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d801      	bhi.n	8002ab2 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8002aae:	2320      	movs	r3, #32
 8002ab0:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a2c      	ldr	r2, [pc, #176]	; (8002b68 <SpiritRadioSearchWCP+0x120>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	099b      	lsrs	r3, r3, #6
 8002abc:	7bba      	ldrb	r2, [r7, #14]
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8002ac4:	f241 631f 	movw	r3, #5663	; 0x161f
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d302      	bcc.n	8002ade <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8002ad8:	230f      	movs	r3, #15
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e023      	b.n	8002b26 <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]
 8002ae2:	e005      	b.n	8002af0 <SpiritRadioSearchWCP+0xa8>
 8002ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	3301      	adds	r3, #1
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	73fb      	strb	r3, [r7, #15]
 8002af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af4:	2b0e      	cmp	r3, #14
 8002af6:	dc0c      	bgt.n	8002b12 <SpiritRadioSearchWCP+0xca>
 8002af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afc:	4a1b      	ldr	r2, [pc, #108]	; (8002b6c <SpiritRadioSearchWCP+0x124>)
 8002afe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b08:	fb02 f303 	mul.w	r3, r2, r3
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d8e8      	bhi.n	8002ae4 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8002b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <SpiritRadioSearchWCP+0xde>
      i--;
 8002b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8002b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2a:	425a      	negs	r2, r3
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	f002 0207 	and.w	r2, r2, #7
 8002b34:	bf58      	it	pl
 8002b36:	4253      	negpl	r3, r2
 8002b38:	b25b      	sxtb	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
  
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	2e5f5680 	.word	0x2e5f5680
 8002b4c:	390c2fe0 	.word	0x390c2fe0
 8002b50:	1701e47f 	.word	0x1701e47f
 8002b54:	1c146a60 	.word	0x1c146a60
 8002b58:	11d260bf 	.word	0x11d260bf
 8002b5c:	14ced7e0 	.word	0x14ced7e0
 8002b60:	08e18f3f 	.word	0x08e18f3f
 8002b64:	0a6fd060 	.word	0x0a6fd060
 8002b68:	10624dd3 	.word	0x10624dd3
 8002b6c:	0800812c 	.word	0x0800812c

08002b70 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2104      	movs	r1, #4
 8002b7c:	2008      	movs	r0, #8
 8002b7e:	f000 ffe3 	bl	8003b48 <RadioSpiReadRegisters>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <SpiritRadioGetSynthWord+0x48>)
 8002b86:	b212      	sxth	r2, r2
 8002b88:	4611      	mov	r1, r2
 8002b8a:	7019      	strb	r1, [r3, #0]
 8002b8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b90:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002b92:	793b      	ldrb	r3, [r7, #4]
 8002b94:	055b      	lsls	r3, r3, #21
 8002b96:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 8002b9a:	797b      	ldrb	r3, [r7, #5]
 8002b9c:	035b      	lsls	r3, r3, #13
 8002b9e:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002ba0:	79bb      	ldrb	r3, [r7, #6]
 8002ba2:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002ba4:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002ba6:	79fa      	ldrb	r2, [r7, #7]
 8002ba8:	08d2      	lsrs	r2, r2, #3
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	4413      	add	r3, r2
  
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000240 	.word	0x20000240

08002bbc <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	200b      	movs	r0, #11
 8002bca:	f000 ffbd 	bl	8003b48 <RadioSpiReadRegisters>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <SpiritRadioGetBand+0x58>)
 8002bd2:	b212      	sxth	r2, r2
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	7019      	strb	r1, [r3, #0]
 8002bd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bdc:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e00e      	b.n	8002c0a <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d101      	bne.n	8002bfa <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e007      	b.n	8002c0a <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d101      	bne.n	8002c08 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8002c04:	2302      	movs	r3, #2
 8002c06:	e000      	b.n	8002c0a <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8002c08:	2303      	movs	r3, #3
  }
  
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000240 	.word	0x20000240

08002c18 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8002c1e:	1dfb      	adds	r3, r7, #7
 8002c20:	461a      	mov	r2, r3
 8002c22:	2101      	movs	r1, #1
 8002c24:	206c      	movs	r0, #108	; 0x6c
 8002c26:	f000 ff8f 	bl	8003b48 <RadioSpiReadRegisters>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <SpiritRadioGetChannel+0x2c>)
 8002c2e:	b212      	sxth	r2, r2
 8002c30:	4611      	mov	r1, r2
 8002c32:	7019      	strb	r1, [r3, #0]
 8002c34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c38:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
  
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000240 	.word	0x20000240

08002c48 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8002c4e:	1dfb      	adds	r3, r7, #7
 8002c50:	461a      	mov	r2, r3
 8002c52:	2101      	movs	r1, #1
 8002c54:	200c      	movs	r0, #12
 8002c56:	f000 ff77 	bl	8003b48 <RadioSpiReadRegisters>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <SpiritRadioGetChannelSpace+0x38>)
 8002c5e:	b212      	sxth	r2, r2
 8002c60:	4611      	mov	r1, r2
 8002c62:	7019      	strb	r1, [r3, #0]
 8002c64:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c68:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <SpiritRadioGetChannelSpace+0x3c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	0bdb      	lsrs	r3, r3, #15
  
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000240 	.word	0x20000240
 8002c84:	2000023c 	.word	0x2000023c

08002c88 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	461a      	mov	r2, r3
 8002c92:	2102      	movs	r1, #2
 8002c94:	200e      	movs	r0, #14
 8002c96:	f000 ff57 	bl	8003b48 <RadioSpiReadRegisters>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <SpiritRadioGetFrequencyOffset+0x80>)
 8002c9e:	b212      	sxth	r2, r2
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	7019      	strb	r1, [r3, #0]
 8002ca4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ca8:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 8002caa:	793b      	ldrb	r3, [r7, #4]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	797b      	ldrb	r3, [r7, #5]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 8002cbc:	887b      	ldrh	r3, [r7, #2]
 8002cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002ccc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	807b      	strh	r3, [r7, #2]
 8002cd4:	e004      	b.n	8002ce0 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8002cd6:	887b      	ldrh	r3, [r7, #2]
 8002cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8002ce0:	1cbb      	adds	r3, r7, #2
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8002ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cea:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <SpiritRadioGetFrequencyOffset+0x84>)
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	da03      	bge.n	8002cfe <SpiritRadioGetFrequencyOffset+0x76>
 8002cf6:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8002cfa:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002cfe:	149b      	asrs	r3, r3, #18
  
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000240 	.word	0x20000240
 8002d0c:	2000023c 	.word	0x2000023c

08002d10 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8002d10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d14:	b08a      	sub	sp, #40	; 0x28
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a79      	ldr	r2, [pc, #484]	; (8002f08 <SpiritRadioSetFrequencyBase+0x1f8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d307      	bcc.n	8002d38 <SpiritRadioSetFrequencyBase+0x28>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a78      	ldr	r2, [pc, #480]	; (8002f0c <SpiritRadioSetFrequencyBase+0x1fc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d803      	bhi.n	8002d38 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d36:	e022      	b.n	8002d7e <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a75      	ldr	r2, [pc, #468]	; (8002f10 <SpiritRadioSetFrequencyBase+0x200>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d907      	bls.n	8002d50 <SpiritRadioSetFrequencyBase+0x40>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a74      	ldr	r2, [pc, #464]	; (8002f14 <SpiritRadioSetFrequencyBase+0x204>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d803      	bhi.n	8002d50 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d4e:	e016      	b.n	8002d7e <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a71      	ldr	r2, [pc, #452]	; (8002f18 <SpiritRadioSetFrequencyBase+0x208>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d907      	bls.n	8002d68 <SpiritRadioSetFrequencyBase+0x58>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a70      	ldr	r2, [pc, #448]	; (8002f1c <SpiritRadioSetFrequencyBase+0x20c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d803      	bhi.n	8002d68 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8002d60:	2302      	movs	r3, #2
 8002d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d66:	e00a      	b.n	8002d7e <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a6d      	ldr	r2, [pc, #436]	; (8002f20 <SpiritRadioSetFrequencyBase+0x210>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d906      	bls.n	8002d7e <SpiritRadioSetFrequencyBase+0x6e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a6c      	ldr	r2, [pc, #432]	; (8002f24 <SpiritRadioSetFrequencyBase+0x214>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d802      	bhi.n	8002d7e <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002d7e:	f7ff ff83 	bl	8002c88 <SpiritRadioGetFrequencyOffset>
 8002d82:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002d84:	f7ff ff60 	bl	8002c48 <SpiritRadioGetChannelSpace>
 8002d88:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002d8a:	f7ff ff45 	bl	8002c18 <SpiritRadioGetChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002d92:	6a3a      	ldr	r2, [r7, #32]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	441a      	add	r2, r3
 8002d98:	7efb      	ldrb	r3, [r7, #27]
 8002d9a:	69f9      	ldr	r1, [r7, #28]
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8002da4:	f000 fd60 	bl	8003868 <SpiritRadioGetRefDiv>
 8002da8:	4603      	mov	r3, r0
 8002daa:	3301      	adds	r3, #1
 8002dac:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 8002dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d839      	bhi.n	8002e2a <SpiritRadioSetFrequencyBase+0x11a>
 8002db6:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <SpiritRadioSetFrequencyBase+0xac>)
 8002db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbc:	08002e15 	.word	0x08002e15
 8002dc0:	08002dfd 	.word	0x08002dfd
 8002dc4:	08002de5 	.word	0x08002de5
 8002dc8:	08002dcd 	.word	0x08002dcd
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	4a56      	ldr	r2, [pc, #344]	; (8002f28 <SpiritRadioSetFrequencyBase+0x218>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d803      	bhi.n	8002ddc <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f7fe fded 	bl	80019b4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002dda:	e026      	b.n	8002e2a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f7fe fde9 	bl	80019b4 <SpiritCalibrationSelectVco>
    break;
 8002de2:	e022      	b.n	8002e2a <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	4a51      	ldr	r2, [pc, #324]	; (8002f2c <SpiritRadioSetFrequencyBase+0x21c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d803      	bhi.n	8002df4 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002dec:	2000      	movs	r0, #0
 8002dee:	f7fe fde1 	bl	80019b4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002df2:	e01a      	b.n	8002e2a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8002df4:	2001      	movs	r0, #1
 8002df6:	f7fe fddd 	bl	80019b4 <SpiritCalibrationSelectVco>
    break;
 8002dfa:	e016      	b.n	8002e2a <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	4a4c      	ldr	r2, [pc, #304]	; (8002f30 <SpiritRadioSetFrequencyBase+0x220>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d803      	bhi.n	8002e0c <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7fe fdd5 	bl	80019b4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002e0a:	e00e      	b.n	8002e2a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f7fe fdd1 	bl	80019b4 <SpiritCalibrationSelectVco>
    break;
 8002e12:	e00a      	b.n	8002e2a <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	4a47      	ldr	r2, [pc, #284]	; (8002f34 <SpiritRadioSetFrequencyBase+0x224>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d803      	bhi.n	8002e24 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7fe fdc9 	bl	80019b4 <SpiritCalibrationSelectVco>
 8002e22:	e002      	b.n	8002e2a <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002e24:	2001      	movs	r0, #1
 8002e26:	f7fe fdc5 	bl	80019b4 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f7ff fe0c 	bl	8002a48 <SpiritRadioSearchWCP>
 8002e30:	4603      	mov	r3, r0
 8002e32:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8002e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e38:	4a3f      	ldr	r2, [pc, #252]	; (8002f38 <SpiritRadioSetFrequencyBase+0x228>)
 8002e3a:	5cd3      	ldrb	r3, [r2, r3]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fb0d 	bl	8000464 <__aeabi_ui2d>
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	460d      	mov	r5, r1
 8002e4e:	7cfb      	ldrb	r3, [r7, #19]
 8002e50:	049b      	lsls	r3, r3, #18
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fb16 	bl	8000484 <__aeabi_i2d>
 8002e58:	4680      	mov	r8, r0
 8002e5a:	4689      	mov	r9, r1
 8002e5c:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <SpiritRadioSetFrequencyBase+0x22c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd faff 	bl	8000464 <__aeabi_ui2d>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4640      	mov	r0, r8
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	f7fd fc9d 	bl	80007ac <__aeabi_ddiv>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4620      	mov	r0, r4
 8002e78:	4629      	mov	r1, r5
 8002e7a:	f7fd fb6d 	bl	8000558 <__aeabi_dmul>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f7fd fd79 	bl	800097c <__aeabi_d2uiz>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	0d5b      	lsrs	r3, r3, #21
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	7cbb      	ldrb	r3, [r7, #18]
 8002e9c:	015b      	lsls	r3, r3, #5
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	0b5b      	lsrs	r3, r3, #13
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	095b      	lsrs	r3, r3, #5
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ec2:	491f      	ldr	r1, [pc, #124]	; (8002f40 <SpiritRadioSetFrequencyBase+0x230>)
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8002ecc:	f107 0308 	add.w	r3, r7, #8
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2104      	movs	r1, #4
 8002ed4:	2008      	movs	r0, #8
 8002ed6:	f000 fdeb 	bl	8003ab0 <RadioSpiWriteRegisters>
 8002eda:	4602      	mov	r2, r0
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <SpiritRadioSetFrequencyBase+0x234>)
 8002ede:	b212      	sxth	r2, r2
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	7019      	strb	r1, [r3, #0]
 8002ee4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ee8:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 8002eea:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <SpiritRadioSetFrequencyBase+0x238>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d103      	bne.n	8002efa <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 8002ef2:	f7fe ffbf 	bl	8001e74 <SpiritManagementWaVcoCalibration>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	e000      	b.n	8002efc <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3728      	adds	r7, #40	; 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f06:	bf00      	nop
 8002f08:	2e5f5680 	.word	0x2e5f5680
 8002f0c:	390c2fe0 	.word	0x390c2fe0
 8002f10:	1701e47f 	.word	0x1701e47f
 8002f14:	1c146a60 	.word	0x1c146a60
 8002f18:	11d260bf 	.word	0x11d260bf
 8002f1c:	14ced7e0 	.word	0x14ced7e0
 8002f20:	08e18f3f 	.word	0x08e18f3f
 8002f24:	0a6fd060 	.word	0x0a6fd060
 8002f28:	099cf4e1 	.word	0x099cf4e1
 8002f2c:	1339e9c3 	.word	0x1339e9c3
 8002f30:	19a28d05 	.word	0x19a28d05
 8002f34:	33451a0a 	.word	0x33451a0a
 8002f38:	08008070 	.word	0x08008070
 8002f3c:	2000023c 	.word	0x2000023c
 8002f40:	08008074 	.word	0x08008074
 8002f44:	20000240 	.word	0x20000240
 8002f48:	2000006d 	.word	0x2000006d

08002f4c <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8002f4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8002f54:	f7ff fe0c 	bl	8002b70 <SpiritRadioGetSynthWord>
 8002f58:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 8002f5a:	f7ff fe2f 	bl	8002bbc <SpiritRadioGetBand>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8002f62:	f000 fc81 	bl	8003868 <SpiritRadioGetRefDiv>
 8002f66:	4603      	mov	r3, r0
 8002f68:	3301      	adds	r3, #1
 8002f6a:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7fd fa79 	bl	8000464 <__aeabi_ui2d>
 8002f72:	4604      	mov	r4, r0
 8002f74:	460d      	mov	r5, r1
 8002f76:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <SpiritRadioGetFrequencyBase+0x90>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fa72 	bl	8000464 <__aeabi_ui2d>
 8002f80:	4680      	mov	r8, r0
 8002f82:	4689      	mov	r9, r1
 8002f84:	78bb      	ldrb	r3, [r7, #2]
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	4915      	ldr	r1, [pc, #84]	; (8002fe0 <SpiritRadioGetFrequencyBase+0x94>)
 8002f8a:	5c8a      	ldrb	r2, [r1, r2]
 8002f8c:	fb02 f303 	mul.w	r3, r2, r3
 8002f90:	049b      	lsls	r3, r3, #18
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fa76 	bl	8000484 <__aeabi_i2d>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4640      	mov	r0, r8
 8002f9e:	4649      	mov	r1, r9
 8002fa0:	f7fd fc04 	bl	80007ac <__aeabi_ddiv>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4620      	mov	r0, r4
 8002faa:	4629      	mov	r1, r5
 8002fac:	f7fd fad4 	bl	8000558 <__aeabi_dmul>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	ec43 2b17 	vmov	d7, r2, r3
 8002fb8:	eeb0 0a47 	vmov.f32	s0, s14
 8002fbc:	eef0 0a67 	vmov.f32	s1, s15
 8002fc0:	f004 ff7c 	bl	8007ebc <round>
 8002fc4:	ec53 2b10 	vmov	r2, r3, d0
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f7fd fcd6 	bl	800097c <__aeabi_d2uiz>
 8002fd0:	4603      	mov	r3, r0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fdc:	2000023c 	.word	0x2000023c
 8002fe0:	08008070 	.word	0x08008070

08002fe4 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8002ff4:	230f      	movs	r3, #15
 8002ff6:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8002ffc:	f000 fc86 	bl	800390c <SpiritRadioGetDigDiv>
 8003000:	4603      	mov	r3, r0
 8003002:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003004:	e015      	b.n	8003032 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8003006:	4b4f      	ldr	r3, [pc, #316]	; (8003144 <SpiritRadioSearchDatarateME+0x160>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800300e:	f1c3 0114 	rsb	r1, r3, #20
 8003012:	7ebb      	ldrb	r3, [r7, #26]
 8003014:	440b      	add	r3, r1
 8003016:	fa22 f303 	lsr.w	r3, r2, r3
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	429a      	cmp	r2, r3
 800301e:	d302      	bcc.n	8003026 <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 8003020:	2301      	movs	r3, #1
 8003022:	763b      	strb	r3, [r7, #24]
 8003024:	e005      	b.n	8003032 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 8003026:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b2db      	uxtb	r3, r3
 8003030:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8003032:	7e3b      	ldrb	r3, [r7, #24]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <SpiritRadioSearchDatarateME+0x5e>
 800303a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800303e:	2b00      	cmp	r3, #0
 8003040:	dae1      	bge.n	8003006 <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 8003042:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003046:	2b00      	cmp	r3, #0
 8003048:	da01      	bge.n	800304e <SpiritRadioSearchDatarateME+0x6a>
 800304a:	2300      	movs	r3, #0
 800304c:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 800304e:	7ffa      	ldrb	r2, [r7, #31]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003054:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003058:	f1c3 0317 	rsb	r3, r3, #23
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	409a      	lsls	r2, r3
 8003060:	4b38      	ldr	r3, [pc, #224]	; (8003144 <SpiritRadioSearchDatarateME+0x160>)
 8003062:	6819      	ldr	r1, [r3, #0]
 8003064:	7ebb      	ldrb	r3, [r7, #26]
 8003066:	3305      	adds	r3, #5
 8003068:	fa21 f303 	lsr.w	r3, r1, r3
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8003072:	2300      	movs	r3, #0
 8003074:	77bb      	strb	r3, [r7, #30]
 8003076:	e031      	b.n	80030dc <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 8003078:	7e7a      	ldrb	r2, [r7, #25]
 800307a:	7fbb      	ldrb	r3, [r7, #30]
 800307c:	4413      	add	r3, r2
 800307e:	2b01      	cmp	r3, #1
 8003080:	d021      	beq.n	80030c6 <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	b29a      	uxth	r2, r3
 8003086:	7e7b      	ldrb	r3, [r7, #25]
 8003088:	f503 7180 	add.w	r1, r3, #256	; 0x100
 800308c:	7fbb      	ldrb	r3, [r7, #30]
 800308e:	440b      	add	r3, r1
 8003090:	3b01      	subs	r3, #1
 8003092:	4618      	mov	r0, r3
 8003094:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <SpiritRadioSearchDatarateME+0x160>)
 8003096:	6819      	ldr	r1, [r3, #0]
 8003098:	7ebb      	ldrb	r3, [r7, #26]
 800309a:	3305      	adds	r3, #5
 800309c:	fa21 f303 	lsr.w	r3, r1, r3
 80030a0:	fb03 f100 	mul.w	r1, r3, r0
 80030a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030a8:	f1c3 0317 	rsb	r3, r3, #23
 80030ac:	fa21 f303 	lsr.w	r3, r1, r3
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	7fbb      	ldrb	r3, [r7, #30]
 80030b8:	b212      	sxth	r2, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	3320      	adds	r3, #32
 80030be:	443b      	add	r3, r7
 80030c0:	f823 2c10 	strh.w	r2, [r3, #-16]
 80030c4:	e007      	b.n	80030d6 <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 80030c6:	7fbb      	ldrb	r3, [r7, #30]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	3320      	adds	r3, #32
 80030cc:	443b      	add	r3, r7
 80030ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80030d2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 80030d6:	7fbb      	ldrb	r3, [r7, #30]
 80030d8:	3301      	adds	r3, #1
 80030da:	77bb      	strb	r3, [r7, #30]
 80030dc:	7fbb      	ldrb	r3, [r7, #30]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d9ca      	bls.n	8003078 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 80030e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030e6:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 80030e8:	2300      	movs	r3, #0
 80030ea:	76fb      	strb	r3, [r7, #27]
 80030ec:	e021      	b.n	8003132 <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 80030ee:	7efb      	ldrb	r3, [r7, #27]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	3320      	adds	r3, #32
 80030f4:	443b      	add	r3, r7
 80030f6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bfb8      	it	lt
 80030fe:	425b      	neglt	r3, r3
 8003100:	b29b      	uxth	r3, r3
 8003102:	8bba      	ldrh	r2, [r7, #28]
 8003104:	429a      	cmp	r2, r3
 8003106:	d911      	bls.n	800312c <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8003108:	7efb      	ldrb	r3, [r7, #27]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	3320      	adds	r3, #32
 800310e:	443b      	add	r3, r7
 8003110:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	bfb8      	it	lt
 8003118:	425b      	neglt	r3, r3
 800311a:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 800311c:	7e7a      	ldrb	r2, [r7, #25]
 800311e:	7efb      	ldrb	r3, [r7, #27]
 8003120:	4413      	add	r3, r2
 8003122:	b2db      	uxtb	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b2da      	uxtb	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 800312c:	7efb      	ldrb	r3, [r7, #27]
 800312e:	3301      	adds	r3, #1
 8003130:	76fb      	strb	r3, [r7, #27]
 8003132:	7efb      	ldrb	r3, [r7, #27]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d9da      	bls.n	80030ee <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	2000023c 	.word	0x2000023c

08003148 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 800315a:	f000 fbd7 	bl	800390c <SpiritRadioGetDigDiv>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003164:	2302      	movs	r3, #2
 8003166:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800316a:	e002      	b.n	8003172 <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8003172:	4b63      	ldr	r3, [pc, #396]	; (8003300 <SpiritRadioSearchChannelBwME+0x1b8>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	4a61      	ldr	r2, [pc, #388]	; (8003304 <SpiritRadioSearchChannelBwME+0x1bc>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8003188:	2300      	movs	r3, #0
 800318a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800318e:	e006      	b.n	800319e <SpiritRadioSearchChannelBwME+0x56>
 8003190:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003194:	b2db      	uxtb	r3, r3
 8003196:	3301      	adds	r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800319e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80031a2:	2b59      	cmp	r3, #89	; 0x59
 80031a4:	dc0f      	bgt.n	80031c6 <SpiritRadioSearchChannelBwME+0x7e>
 80031a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80031aa:	4a57      	ldr	r2, [pc, #348]	; (8003308 <SpiritRadioSearchChannelBwME+0x1c0>)
 80031ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031b0:	461a      	mov	r2, r3
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	fb02 f303 	mul.w	r3, r2, r3
 80031b8:	4a54      	ldr	r2, [pc, #336]	; (800330c <SpiritRadioSearchChannelBwME+0x1c4>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	0adb      	lsrs	r3, r3, #11
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d3e4      	bcc.n	8003190 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 80031c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d077      	beq.n	80032be <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 80031ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031d2:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 80031d4:	2300      	movs	r3, #0
 80031d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80031da:	e03a      	b.n	8003252 <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 80031dc:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80031e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80031e4:	4413      	add	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	dc06      	bgt.n	80031f8 <SpiritRadioSearchChannelBwME+0xb0>
 80031ea:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80031ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80031f2:	4413      	add	r3, r2
 80031f4:	2b5a      	cmp	r3, #90	; 0x5a
 80031f6:	dc1e      	bgt.n	8003236 <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003200:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003204:	440b      	add	r3, r1
 8003206:	3b01      	subs	r3, #1
 8003208:	493f      	ldr	r1, [pc, #252]	; (8003308 <SpiritRadioSearchChannelBwME+0x1c0>)
 800320a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800320e:	4619      	mov	r1, r3
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	493d      	ldr	r1, [pc, #244]	; (800330c <SpiritRadioSearchChannelBwME+0x1c4>)
 8003218:	fba1 1303 	umull	r1, r3, r1, r3
 800321c:	0adb      	lsrs	r3, r3, #11
 800321e:	b29b      	uxth	r3, r3
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	b29a      	uxth	r2, r3
 8003224:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003228:	b212      	sxth	r2, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	3328      	adds	r3, #40	; 0x28
 800322e:	443b      	add	r3, r7
 8003230:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003234:	e008      	b.n	8003248 <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8003236:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	3328      	adds	r3, #40	; 0x28
 800323e:	443b      	add	r3, r7
 8003240:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003244:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003248:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800324c:	3301      	adds	r3, #1
 800324e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003252:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003256:	2b02      	cmp	r3, #2
 8003258:	d9c0      	bls.n	80031dc <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 800325a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800325e:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003260:	2300      	movs	r3, #0
 8003262:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003266:	e026      	b.n	80032b6 <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003268:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	3328      	adds	r3, #40	; 0x28
 8003270:	443b      	add	r3, r7
 8003272:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	bfb8      	it	lt
 800327a:	425b      	neglt	r3, r3
 800327c:	b29b      	uxth	r3, r3
 800327e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003280:	429a      	cmp	r2, r3
 8003282:	d913      	bls.n	80032ac <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003284:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	3328      	adds	r3, #40	; 0x28
 800328c:	443b      	add	r3, r7
 800328e:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	bfb8      	it	lt
 8003296:	425b      	neglt	r3, r3
 8003298:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 800329a:	7efa      	ldrb	r2, [r7, #27]
 800329c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80032a0:	4413      	add	r3, r2
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 80032ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80032b0:	3301      	adds	r3, #1
 80032b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80032b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d9d4      	bls.n	8003268 <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 80032be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80032c2:	4a13      	ldr	r2, [pc, #76]	; (8003310 <SpiritRadioSearchChannelBwME+0x1c8>)
 80032c4:	fb82 1203 	smull	r1, r2, r2, r3
 80032c8:	1052      	asrs	r2, r2, #1
 80032ca:	17db      	asrs	r3, r3, #31
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	b25b      	sxtb	r3, r3
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 80032d6:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 80032da:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <SpiritRadioSearchChannelBwME+0x1c8>)
 80032dc:	fb83 1302 	smull	r1, r3, r3, r2
 80032e0:	1059      	asrs	r1, r3, #1
 80032e2:	17d3      	asrs	r3, r2, #31
 80032e4:	1ac9      	subs	r1, r1, r3
 80032e6:	460b      	mov	r3, r1
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	b25b      	sxtb	r3, r3
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	701a      	strb	r2, [r3, #0]
  
}
 80032f6:	bf00      	nop
 80032f8:	3728      	adds	r7, #40	; 0x28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	2000023c 	.word	0x2000023c
 8003304:	51eb851f 	.word	0x51eb851f
 8003308:	08008078 	.word	0x08008078
 800330c:	c9a633fd 	.word	0xc9a633fd
 8003310:	38e38e39 	.word	0x38e38e39

08003314 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003314:	b5b0      	push	{r4, r5, r7, lr}
 8003316:	b08a      	sub	sp, #40	; 0x28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003324:	4b53      	ldr	r3, [pc, #332]	; (8003474 <SpiritRadioSearchFreqDevME+0x160>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	ee07 3a90 	vmov	s15, r3
 800332c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003330:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003478 <SpiritRadioSearchFreqDevME+0x164>
 8003334:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003338:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 800333c:	2300      	movs	r3, #0
 800333e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003342:	e028      	b.n	8003396 <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003348:	2201      	movs	r2, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd f898 	bl	8000484 <__aeabi_i2d>
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	4b48      	ldr	r3, [pc, #288]	; (800347c <SpiritRadioSearchFreqDevME+0x168>)
 800335a:	f7fd f8fd 	bl	8000558 <__aeabi_dmul>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4610      	mov	r0, r2
 8003364:	4619      	mov	r1, r3
 8003366:	f7fd fb09 	bl	800097c <__aeabi_d2uiz>
 800336a:	ee07 0a90 	vmov	s15, r0
 800336e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003372:	edd7 7a06 	vldr	s15, [r7, #24]
 8003376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800337e:	ee17 3a90 	vmov	r3, s15
 8003382:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	429a      	cmp	r2, r3
 800338a:	d309      	bcc.n	80033a0 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 800338c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003390:	3301      	adds	r3, #1
 8003392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800339a:	2b09      	cmp	r3, #9
 800339c:	d9d2      	bls.n	8003344 <SpiritRadioSearchFreqDevME+0x30>
 800339e:	e000      	b.n	80033a2 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 80033a0:	bf00      	nop
  }
  (*pcE) = i;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80033a8:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033b0:	e043      	b.n	800343a <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 80033b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd f862 	bl	8000484 <__aeabi_i2d>
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	4b2e      	ldr	r3, [pc, #184]	; (8003480 <SpiritRadioSearchFreqDevME+0x16c>)
 80033c6:	f7fc ff11 	bl	80001ec <__adddf3>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033da:	f7fd f9e7 	bl	80007ac <__aeabi_ddiv>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4614      	mov	r4, r2
 80033e4:	461d      	mov	r5, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	2301      	movs	r3, #1
 80033ee:	4093      	lsls	r3, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd f847 	bl	8000484 <__aeabi_i2d>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4620      	mov	r0, r4
 80033fc:	4629      	mov	r1, r5
 80033fe:	f7fd f8ab 	bl	8000558 <__aeabi_dmul>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	f7fd fab7 	bl	800097c <__aeabi_d2uiz>
 800340e:	ee07 0a90 	vmov	s15, r0
 8003412:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003416:	edd7 7a06 	vldr	s15, [r7, #24]
 800341a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003422:	ee17 3a90 	vmov	r3, s15
 8003426:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	429a      	cmp	r2, r3
 800342e:	d309      	bcc.n	8003444 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003434:	3301      	adds	r3, #1
 8003436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800343a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800343e:	2b07      	cmp	r3, #7
 8003440:	d9b7      	bls.n	80033b2 <SpiritRadioSearchFreqDevME+0x9e>
 8003442:	e000      	b.n	8003446 <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003444:	bf00      	nop
  }
  
  (*pcM)=i;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800344c:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	1ad2      	subs	r2, r2, r3
 8003454:	69f9      	ldr	r1, [r7, #28]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1acb      	subs	r3, r1, r3
 800345a:	429a      	cmp	r2, r3
 800345c:	d205      	bcs.n	800346a <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	3b01      	subs	r3, #1
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	701a      	strb	r2, [r3, #0]
  
}
 800346a:	bf00      	nop
 800346c:	3728      	adds	r7, #40	; 0x28
 800346e:	46bd      	mov	sp, r7
 8003470:	bdb0      	pop	{r4, r5, r7, pc}
 8003472:	bf00      	nop
 8003474:	2000023c 	.word	0x2000023c
 8003478:	48800000 	.word	0x48800000
 800347c:	401e0000 	.word	0x401e0000
 8003480:	40200000 	.word	0x40200000

08003484 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003490:	2300      	movs	r3, #0
 8003492:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 8003494:	2300      	movs	r3, #0
 8003496:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a74      	ldr	r2, [pc, #464]	; (800366c <SpiritRadioGetdBm2Reg+0x1e8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d30c      	bcc.n	80034ba <SpiritRadioGetdBm2Reg+0x36>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4a73      	ldr	r2, [pc, #460]	; (8003670 <SpiritRadioGetdBm2Reg+0x1ec>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d808      	bhi.n	80034ba <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a71      	ldr	r2, [pc, #452]	; (8003674 <SpiritRadioGetdBm2Reg+0x1f0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d822      	bhi.n	80034fa <SpiritRadioGetdBm2Reg+0x76>
 80034b4:	2301      	movs	r3, #1
 80034b6:	75fb      	strb	r3, [r7, #23]
 80034b8:	e01f      	b.n	80034fa <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4a6e      	ldr	r2, [pc, #440]	; (8003678 <SpiritRadioGetdBm2Reg+0x1f4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d906      	bls.n	80034d0 <SpiritRadioGetdBm2Reg+0x4c>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a6d      	ldr	r2, [pc, #436]	; (800367c <SpiritRadioGetdBm2Reg+0x1f8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d802      	bhi.n	80034d0 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 80034ca:	2302      	movs	r3, #2
 80034cc:	75fb      	strb	r3, [r7, #23]
 80034ce:	e014      	b.n	80034fa <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4a6b      	ldr	r2, [pc, #428]	; (8003680 <SpiritRadioGetdBm2Reg+0x1fc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d906      	bls.n	80034e6 <SpiritRadioGetdBm2Reg+0x62>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a6a      	ldr	r2, [pc, #424]	; (8003684 <SpiritRadioGetdBm2Reg+0x200>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d802      	bhi.n	80034e6 <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 80034e0:	2303      	movs	r3, #3
 80034e2:	75fb      	strb	r3, [r7, #23]
 80034e4:	e009      	b.n	80034fa <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4a67      	ldr	r2, [pc, #412]	; (8003688 <SpiritRadioGetdBm2Reg+0x204>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d905      	bls.n	80034fa <SpiritRadioGetdBm2Reg+0x76>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4a66      	ldr	r2, [pc, #408]	; (800368c <SpiritRadioGetdBm2Reg+0x208>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d801      	bhi.n	80034fa <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 80034f6:	2304      	movs	r3, #4
 80034f8:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 80034fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003502:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350a:	dd2f      	ble.n	800356c <SpiritRadioGetdBm2Reg+0xe8>
 800350c:	7dfa      	ldrb	r2, [r7, #23]
 800350e:	4960      	ldr	r1, [pc, #384]	; (8003690 <SpiritRadioGetdBm2Reg+0x20c>)
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	440b      	add	r3, r1
 800351a:	3308      	adds	r3, #8
 800351c:	edd3 7a00 	vldr	s15, [r3]
 8003520:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8003524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003528:	7dfa      	ldrb	r2, [r7, #23]
 800352a:	4959      	ldr	r1, [pc, #356]	; (8003690 <SpiritRadioGetdBm2Reg+0x20c>)
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	330c      	adds	r3, #12
 8003538:	ed93 6a00 	vldr	s12, [r3]
 800353c:	7dfa      	ldrb	r2, [r7, #23]
 800353e:	4954      	ldr	r1, [pc, #336]	; (8003690 <SpiritRadioGetdBm2Reg+0x20c>)
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	3308      	adds	r3, #8
 800354c:	edd3 6a00 	vldr	s13, [r3]
 8003550:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003558:	ed97 7a02 	vldr	s14, [r7, #8]
 800355c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003564:	dd02      	ble.n	800356c <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 8003566:	2300      	movs	r3, #0
 8003568:	75bb      	strb	r3, [r7, #22]
 800356a:	e035      	b.n	80035d8 <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 800356c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003570:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003578:	d82e      	bhi.n	80035d8 <SpiritRadioGetdBm2Reg+0x154>
 800357a:	7dfa      	ldrb	r2, [r7, #23]
 800357c:	4944      	ldr	r1, [pc, #272]	; (8003690 <SpiritRadioGetdBm2Reg+0x20c>)
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	440b      	add	r3, r1
 8003588:	3308      	adds	r3, #8
 800358a:	edd3 7a00 	vldr	s15, [r3]
 800358e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003694 <SpiritRadioGetdBm2Reg+0x210>
 8003592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003596:	7dfa      	ldrb	r2, [r7, #23]
 8003598:	493d      	ldr	r1, [pc, #244]	; (8003690 <SpiritRadioGetdBm2Reg+0x20c>)
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	330c      	adds	r3, #12
 80035a6:	ed93 6a00 	vldr	s12, [r3]
 80035aa:	7dfa      	ldrb	r2, [r7, #23]
 80035ac:	4938      	ldr	r1, [pc, #224]	; (8003690 <SpiritRadioGetdBm2Reg+0x20c>)
 80035ae:	4613      	mov	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	3308      	adds	r3, #8
 80035ba:	edd3 6a00 	vldr	s13, [r3]
 80035be:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80035c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80035ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d2:	d501      	bpl.n	80035d8 <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 80035d4:	2302      	movs	r3, #2
 80035d6:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 80035d8:	7dfa      	ldrb	r2, [r7, #23]
 80035da:	7dbb      	ldrb	r3, [r7, #22]
 80035dc:	0059      	lsls	r1, r3, #1
 80035de:	482c      	ldr	r0, [pc, #176]	; (8003690 <SpiritRadioGetdBm2Reg+0x20c>)
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	440b      	add	r3, r1
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4403      	add	r3, r0
 80035ee:	ed93 7a00 	vldr	s14, [r3]
 80035f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80035f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035fa:	7dfa      	ldrb	r2, [r7, #23]
 80035fc:	7dbb      	ldrb	r3, [r7, #22]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	1c59      	adds	r1, r3, #1
 8003602:	4823      	ldr	r0, [pc, #140]	; (8003690 <SpiritRadioGetdBm2Reg+0x20c>)
 8003604:	4613      	mov	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4413      	add	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	440b      	add	r3, r1
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4403      	add	r3, r0
 8003612:	edd3 7a00 	vldr	s15, [r3]
 8003616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800361a:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 800361e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362e:	d503      	bpl.n	8003638 <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8003630:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	e00a      	b.n	800364e <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 8003638:	edd7 7a04 	vldr	s15, [r7, #16]
 800363c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003698 <SpiritRadioGetdBm2Reg+0x214>
 8003640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003648:	dd01      	ble.n	800364e <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 800364a:	4b14      	ldr	r3, [pc, #80]	; (800369c <SpiritRadioGetdBm2Reg+0x218>)
 800364c:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 800364e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003656:	edc7 7a01 	vstr	s15, [r7, #4]
 800365a:	793b      	ldrb	r3, [r7, #4]
 800365c:	b2db      	uxtb	r3, r3
}
 800365e:	4618      	mov	r0, r3
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	2e5f5680 	.word	0x2e5f5680
 8003670:	390c2fe0 	.word	0x390c2fe0
 8003674:	35a4e8ff 	.word	0x35a4e8ff
 8003678:	1701e47f 	.word	0x1701e47f
 800367c:	1c146a60 	.word	0x1c146a60
 8003680:	11d260bf 	.word	0x11d260bf
 8003684:	14ced7e0 	.word	0x14ced7e0
 8003688:	08e18f3f 	.word	0x08e18f3f
 800368c:	0a6fd060 	.word	0x0a6fd060
 8003690:	0800814c 	.word	0x0800814c
 8003694:	42200000 	.word	0x42200000
 8003698:	42b40000 	.word	0x42b40000
 800369c:	42b40000 	.word	0x42b40000

080036a0 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	ed87 0a00 	vstr	s0, [r7]
 80036ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 80036ae:	f7ff fc4d 	bl	8002f4c <SpiritRadioGetFrequencyBase>
 80036b2:	4603      	mov	r3, r0
 80036b4:	ed97 0a00 	vldr	s0, [r7]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fee3 	bl	8003484 <SpiritRadioGetdBm2Reg>
 80036be:	4603      	mov	r3, r0
 80036c0:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	f1c3 0317 	rsb	r3, r3, #23
 80036c8:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 80036ca:	f107 020e 	add.w	r2, r7, #14
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	2101      	movs	r1, #1
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f9ec 	bl	8003ab0 <RadioSpiWriteRegisters>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <SpiritRadioSetPALeveldBm+0x50>)
 80036dc:	b212      	sxth	r2, r2
 80036de:	4611      	mov	r1, r2
 80036e0:	7019      	strb	r1, [r3, #0]
 80036e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80036e6:	705a      	strb	r2, [r3, #1]
  
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000240 	.word	0x20000240

080036f4 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80036fe:	f107 030f 	add.w	r3, r7, #15
 8003702:	461a      	mov	r2, r3
 8003704:	2101      	movs	r1, #1
 8003706:	2018      	movs	r0, #24
 8003708:	f000 fa1e 	bl	8003b48 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003712:	b2db      	uxtb	r3, r3
 8003714:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003716:	7bfa      	ldrb	r2, [r7, #15]
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	4313      	orrs	r3, r2
 800371c:	b2db      	uxtb	r3, r3
 800371e:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003720:	f107 030f 	add.w	r3, r7, #15
 8003724:	461a      	mov	r2, r3
 8003726:	2101      	movs	r1, #1
 8003728:	2018      	movs	r0, #24
 800372a:	f000 f9c1 	bl	8003ab0 <RadioSpiWriteRegisters>
 800372e:	4602      	mov	r2, r0
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <SpiritRadioSetPACwc+0x54>)
 8003732:	b212      	sxth	r2, r2
 8003734:	4611      	mov	r1, r2
 8003736:	7019      	strb	r1, [r3, #0]
 8003738:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800373c:	705a      	strb	r2, [r3, #1]
  
}
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000240 	.word	0x20000240

0800374c <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003756:	f107 030f 	add.w	r3, r7, #15
 800375a:	461a      	mov	r2, r3
 800375c:	2101      	movs	r1, #1
 800375e:	2018      	movs	r0, #24
 8003760:	f000 f9f2 	bl	8003b48 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	f023 0307 	bic.w	r3, r3, #7
 800376a:	b2db      	uxtb	r3, r3
 800376c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	4313      	orrs	r3, r2
 8003774:	b2db      	uxtb	r3, r3
 8003776:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003778:	f107 030f 	add.w	r3, r7, #15
 800377c:	461a      	mov	r2, r3
 800377e:	2101      	movs	r1, #1
 8003780:	2018      	movs	r0, #24
 8003782:	f000 f995 	bl	8003ab0 <RadioSpiWriteRegisters>
 8003786:	4602      	mov	r2, r0
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <SpiritRadioSetPALevelMaxIndex+0x54>)
 800378a:	b212      	sxth	r2, r2
 800378c:	4611      	mov	r1, r2
 800378e:	7019      	strb	r1, [r3, #0]
 8003790:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003794:	705a      	strb	r2, [r3, #1]
  
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000240 	.word	0x20000240

080037a4 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 80037b2:	f107 030f 	add.w	r3, r7, #15
 80037b6:	461a      	mov	r2, r3
 80037b8:	2101      	movs	r1, #1
 80037ba:	201e      	movs	r0, #30
 80037bc:	f000 f9c4 	bl	8003b48 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d105      	bne.n	80037d2 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	73fb      	strb	r3, [r7, #15]
 80037d0:	e004      	b.n	80037dc <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 80037dc:	f107 030f 	add.w	r3, r7, #15
 80037e0:	461a      	mov	r2, r3
 80037e2:	2101      	movs	r1, #1
 80037e4:	201e      	movs	r0, #30
 80037e6:	f000 f963 	bl	8003ab0 <RadioSpiWriteRegisters>
 80037ea:	4602      	mov	r2, r0
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <SpiritRadioAFCFreezeOnSync+0x60>)
 80037ee:	b212      	sxth	r2, r2
 80037f0:	4611      	mov	r1, r2
 80037f2:	7019      	strb	r1, [r3, #0]
 80037f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80037f8:	705a      	strb	r2, [r3, #1]
  
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000240 	.word	0x20000240

08003808 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003812:	f107 030f 	add.w	r3, r7, #15
 8003816:	461a      	mov	r2, r3
 8003818:	2101      	movs	r1, #1
 800381a:	209e      	movs	r0, #158	; 0x9e
 800381c:	f000 f994 	bl	8003b48 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d105      	bne.n	8003832 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800382c:	b2db      	uxtb	r3, r3
 800382e:	73fb      	strb	r3, [r7, #15]
 8003830:	e004      	b.n	800383c <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003838:	b2db      	uxtb	r3, r3
 800383a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800383c:	f107 030f 	add.w	r3, r7, #15
 8003840:	461a      	mov	r2, r3
 8003842:	2101      	movs	r1, #1
 8003844:	209e      	movs	r0, #158	; 0x9e
 8003846:	f000 f933 	bl	8003ab0 <RadioSpiWriteRegisters>
 800384a:	4602      	mov	r2, r0
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <SpiritRadioSetRefDiv+0x5c>)
 800384e:	b212      	sxth	r2, r2
 8003850:	4611      	mov	r1, r2
 8003852:	7019      	strb	r1, [r3, #0]
 8003854:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003858:	705a      	strb	r2, [r3, #1]
  
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000240 	.word	0x20000240

08003868 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800386e:	1dfb      	adds	r3, r7, #7
 8003870:	461a      	mov	r2, r3
 8003872:	2101      	movs	r1, #1
 8003874:	209e      	movs	r0, #158	; 0x9e
 8003876:	f000 f967 	bl	8003b48 <RadioSpiReadRegisters>
 800387a:	4602      	mov	r2, r0
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <SpiritRadioGetRefDiv+0x40>)
 800387e:	b212      	sxth	r2, r2
 8003880:	4611      	mov	r1, r2
 8003882:	7019      	strb	r1, [r3, #0]
 8003884:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003888:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	09db      	lsrs	r3, r3, #7
 800388e:	b2db      	uxtb	r3, r3
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 800389c:	2300      	movs	r3, #0
  }
  
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000240 	.word	0x20000240

080038ac <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80038b6:	f107 030f 	add.w	r3, r7, #15
 80038ba:	461a      	mov	r2, r3
 80038bc:	2101      	movs	r1, #1
 80038be:	20b4      	movs	r0, #180	; 0xb4
 80038c0:	f000 f942 	bl	8003b48 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d105      	bne.n	80038d6 <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	f023 0308 	bic.w	r3, r3, #8
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	73fb      	strb	r3, [r7, #15]
 80038d4:	e004      	b.n	80038e0 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	f043 0308 	orr.w	r3, r3, #8
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80038e0:	f107 030f 	add.w	r3, r7, #15
 80038e4:	461a      	mov	r2, r3
 80038e6:	2101      	movs	r1, #1
 80038e8:	20b4      	movs	r0, #180	; 0xb4
 80038ea:	f000 f8e1 	bl	8003ab0 <RadioSpiWriteRegisters>
 80038ee:	4602      	mov	r2, r0
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <SpiritRadioSetDigDiv+0x5c>)
 80038f2:	b212      	sxth	r2, r2
 80038f4:	4611      	mov	r1, r2
 80038f6:	7019      	strb	r1, [r3, #0]
 80038f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80038fc:	705a      	strb	r2, [r3, #1]
  
}
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000240 	.word	0x20000240

0800390c <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003912:	1dfb      	adds	r3, r7, #7
 8003914:	461a      	mov	r2, r3
 8003916:	2101      	movs	r1, #1
 8003918:	20b4      	movs	r0, #180	; 0xb4
 800391a:	f000 f915 	bl	8003b48 <RadioSpiReadRegisters>
 800391e:	4602      	mov	r2, r0
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <SpiritRadioGetDigDiv+0x40>)
 8003922:	b212      	sxth	r2, r2
 8003924:	4611      	mov	r1, r2
 8003926:	7019      	strb	r1, [r3, #0]
 8003928:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800392c:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	08db      	lsrs	r3, r3, #3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003940:	2301      	movs	r3, #1
  }
  
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000240 	.word	0x20000240

08003950 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <SpiritRadioGetXtalFrequency+0x14>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	2000023c 	.word	0x2000023c

08003968 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8003970:	4a04      	ldr	r2, [pc, #16]	; (8003984 <SpiritRadioSetXtalFrequency+0x1c>)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6013      	str	r3, [r2, #0]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	2000023c 	.word	0x2000023c

08003988 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 8003992:	1dfb      	adds	r3, r7, #7
 8003994:	461a      	mov	r2, r3
 8003996:	2101      	movs	r1, #1
 8003998:	2054      	movs	r0, #84	; 0x54
 800399a:	f000 f889 	bl	8003ab0 <RadioSpiWriteRegisters>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <SpiritTimerSetRxTimeoutCounter+0x30>)
 80039a2:	b212      	sxth	r2, r2
 80039a4:	4611      	mov	r1, r2
 80039a6:	7019      	strb	r1, [r3, #0]
 80039a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80039ac:	705a      	strb	r2, [r3, #1]

}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000240 	.word	0x20000240

080039bc <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 80039c6:	f107 030c 	add.w	r3, r7, #12
 80039ca:	461a      	mov	r2, r3
 80039cc:	2102      	movs	r1, #2
 80039ce:	204f      	movs	r0, #79	; 0x4f
 80039d0:	f000 f8ba 	bl	8003b48 <RadioSpiReadRegisters>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 80039d8:	b212      	sxth	r2, r2
 80039da:	4611      	mov	r1, r2
 80039dc:	7019      	strb	r1, [r3, #0]
 80039de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80039e2:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 80039e4:	7b3b      	ldrb	r3, [r7, #12]
 80039e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 80039ee:	7b3b      	ldrb	r3, [r7, #12]
 80039f0:	b25a      	sxtb	r2, r3
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	b25b      	sxtb	r3, r3
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	b25b      	sxtb	r3, r3
 80039fe:	4313      	orrs	r3, r2
 8003a00:	b25b      	sxtb	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8003a06:	7b7b      	ldrb	r3, [r7, #13]
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8003a10:	7b7b      	ldrb	r3, [r7, #13]
 8003a12:	b25a      	sxtb	r2, r3
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	015b      	lsls	r3, r3, #5
 8003a18:	b25b      	sxtb	r3, r3
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	b25b      	sxtb	r3, r3
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003a22:	f107 030c 	add.w	r3, r7, #12
 8003a26:	461a      	mov	r2, r3
 8003a28:	2102      	movs	r1, #2
 8003a2a:	204f      	movs	r0, #79	; 0x4f
 8003a2c:	f000 f840 	bl	8003ab0 <RadioSpiWriteRegisters>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003a34:	b212      	sxth	r2, r2
 8003a36:	4611      	mov	r1, r2
 8003a38:	7019      	strb	r1, [r3, #0]
 8003a3a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a3e:	705a      	strb	r2, [r3, #1]

}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000240 	.word	0x20000240

08003a4c <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	461a      	mov	r2, r3
 8003a56:	2102      	movs	r1, #2
 8003a58:	20c0      	movs	r0, #192	; 0xc0
 8003a5a:	f000 f875 	bl	8003b48 <RadioSpiReadRegisters>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <SpiritRefreshStatus+0x3c>)
 8003a62:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <SpiritRefreshStatus+0x3c>)
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d1f1      	bne.n	8003a52 <SpiritRefreshStatus+0x6>
 8003a6e:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <SpiritRefreshStatus+0x40>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d1ea      	bne.n	8003a52 <SpiritRefreshStatus+0x6>

}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000240 	.word	0x20000240
 8003a8c:	20000241 	.word	0x20000241

08003a90 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <RadioSpiInit+0x1c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <RadioSpiInit+0x16>
  {
    Error_Handler();
 8003aa2:	f7fd faeb 	bl	800107c <Error_Handler>
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000070 	.word	0x20000070

08003ab0 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	603a      	str	r2, [r7, #0]
 8003aba:	71fb      	strb	r3, [r7, #7]
 8003abc:	460b      	mov	r3, r1
 8003abe:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	743b      	strb	r3, [r7, #16]
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003ac8:	2017      	movs	r0, #23
 8003aca:	f000 fadd 	bl	8004088 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2140      	movs	r1, #64	; 0x40
 8003ad2:	481b      	ldr	r0, [pc, #108]	; (8003b40 <RadioSpiWriteRegisters+0x90>)
 8003ad4:	f000 fc90 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003ad8:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <RadioSpiWriteRegisters+0x94>)
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	f107 020c 	add.w	r2, r7, #12
 8003ae0:	f107 0110 	add.w	r1, r7, #16
 8003ae4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	2302      	movs	r3, #2
 8003aec:	f002 fb47 	bl	800617e <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8003af0:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <RadioSpiWriteRegisters+0x94>)
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	79bb      	ldrb	r3, [r7, #6]
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003afc:	6839      	ldr	r1, [r7, #0]
 8003afe:	f002 f8a0 	bl	8005c42 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003b02:	2201      	movs	r2, #1
 8003b04:	2140      	movs	r1, #64	; 0x40
 8003b06:	480e      	ldr	r0, [pc, #56]	; (8003b40 <RadioSpiWriteRegisters+0x90>)
 8003b08:	f000 fc76 	bl	80043f8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003b0c:	2017      	movs	r0, #23
 8003b0e:	f000 faad 	bl	800406c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003b12:	f107 0308 	add.w	r3, r7, #8
 8003b16:	3301      	adds	r3, #1
 8003b18:	7b3a      	ldrb	r2, [r7, #12]
 8003b1a:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003b1c:	f107 0308 	add.w	r3, r7, #8
 8003b20:	7b7a      	ldrb	r2, [r7, #13]
 8003b22:	701a      	strb	r2, [r3, #0]

  return status;
 8003b24:	893b      	ldrh	r3, [r7, #8]
 8003b26:	82bb      	strh	r3, [r7, #20]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	7d3a      	ldrb	r2, [r7, #20]
 8003b2c:	f362 0307 	bfi	r3, r2, #0, #8
 8003b30:	7d7a      	ldrb	r2, [r7, #21]
 8003b32:	f362 230f 	bfi	r3, r2, #8, #8

}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	48000400 	.word	0x48000400
 8003b44:	20000070 	.word	0x20000070

08003b48 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	4603      	mov	r3, r0
 8003b50:	603a      	str	r2, [r7, #0]
 8003b52:	71fb      	strb	r3, [r7, #7]
 8003b54:	460b      	mov	r3, r1
 8003b56:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 8003b58:	2301      	movs	r3, #1
 8003b5a:	743b      	strb	r3, [r7, #16]
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003b60:	2017      	movs	r0, #23
 8003b62:	f000 fa91 	bl	8004088 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8003b66:	2200      	movs	r2, #0
 8003b68:	2140      	movs	r1, #64	; 0x40
 8003b6a:	481b      	ldr	r0, [pc, #108]	; (8003bd8 <RadioSpiReadRegisters+0x90>)
 8003b6c:	f000 fc44 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003b70:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <RadioSpiReadRegisters+0x94>)
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	f107 020c 	add.w	r2, r7, #12
 8003b78:	f107 0110 	add.w	r1, r7, #16
 8003b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2302      	movs	r3, #2
 8003b84:	f002 fafb 	bl	800617e <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <RadioSpiReadRegisters+0x94>)
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	79bb      	ldrb	r3, [r7, #6]
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b94:	6839      	ldr	r1, [r7, #0]
 8003b96:	f002 f9c2 	bl	8005f1e <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	2140      	movs	r1, #64	; 0x40
 8003b9e:	480e      	ldr	r0, [pc, #56]	; (8003bd8 <RadioSpiReadRegisters+0x90>)
 8003ba0:	f000 fc2a 	bl	80043f8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003ba4:	2017      	movs	r0, #23
 8003ba6:	f000 fa61 	bl	800406c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003baa:	f107 0308 	add.w	r3, r7, #8
 8003bae:	3301      	adds	r3, #1
 8003bb0:	7b3a      	ldrb	r2, [r7, #12]
 8003bb2:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003bb4:	f107 0308 	add.w	r3, r7, #8
 8003bb8:	7b7a      	ldrb	r2, [r7, #13]
 8003bba:	701a      	strb	r2, [r3, #0]

  return status;
 8003bbc:	893b      	ldrh	r3, [r7, #8]
 8003bbe:	82bb      	strh	r3, [r7, #20]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	7d3a      	ldrb	r2, [r7, #20]
 8003bc4:	f362 0307 	bfi	r3, r2, #0, #8
 8003bc8:	7d7a      	ldrb	r2, [r7, #21]
 8003bca:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	48000400 	.word	0x48000400
 8003bdc:	20000070 	.word	0x20000070

08003be0 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	743b      	strb	r3, [r7, #16]
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003bf2:	2017      	movs	r0, #23
 8003bf4:	f000 fa48 	bl	8004088 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2140      	movs	r1, #64	; 0x40
 8003bfc:	4816      	ldr	r0, [pc, #88]	; (8003c58 <RadioSpiCommandStrobes+0x78>)
 8003bfe:	f000 fbfb 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003c02:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <RadioSpiCommandStrobes+0x7c>)
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	f107 020c 	add.w	r2, r7, #12
 8003c0a:	f107 0110 	add.w	r1, r7, #16
 8003c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	2302      	movs	r3, #2
 8003c16:	f002 fab2 	bl	800617e <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	2140      	movs	r1, #64	; 0x40
 8003c1e:	480e      	ldr	r0, [pc, #56]	; (8003c58 <RadioSpiCommandStrobes+0x78>)
 8003c20:	f000 fbea 	bl	80043f8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003c24:	2017      	movs	r0, #23
 8003c26:	f000 fa21 	bl	800406c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003c2a:	f107 0308 	add.w	r3, r7, #8
 8003c2e:	3301      	adds	r3, #1
 8003c30:	7b3a      	ldrb	r2, [r7, #12]
 8003c32:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003c34:	f107 0308 	add.w	r3, r7, #8
 8003c38:	7b7a      	ldrb	r2, [r7, #13]
 8003c3a:	701a      	strb	r2, [r3, #0]

  return status;
 8003c3c:	893b      	ldrh	r3, [r7, #8]
 8003c3e:	82bb      	strh	r3, [r7, #20]
 8003c40:	2300      	movs	r3, #0
 8003c42:	7d3a      	ldrb	r2, [r7, #20]
 8003c44:	f362 0307 	bfi	r3, r2, #0, #8
 8003c48:	7d7a      	ldrb	r2, [r7, #21]
 8003c4a:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	48000400 	.word	0x48000400
 8003c5c:	20000070 	.word	0x20000070

08003c60 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	4603      	mov	r3, r0
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8003c6c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003c70:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003c72:	2017      	movs	r0, #23
 8003c74:	f000 fa08 	bl	8004088 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2140      	movs	r1, #64	; 0x40
 8003c7c:	481a      	ldr	r0, [pc, #104]	; (8003ce8 <RadioSpiWriteFifo+0x88>)
 8003c7e:	f000 fbbb 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003c82:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <RadioSpiWriteFifo+0x8c>)
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	f107 020c 	add.w	r2, r7, #12
 8003c8a:	f107 0110 	add.w	r1, r7, #16
 8003c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2302      	movs	r3, #2
 8003c96:	f002 fa72 	bl	800617e <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8003c9a:	4b14      	ldr	r3, [pc, #80]	; (8003cec <RadioSpiWriteFifo+0x8c>)
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ca6:	6839      	ldr	r1, [r7, #0]
 8003ca8:	f001 ffcb 	bl	8005c42 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003cac:	2201      	movs	r2, #1
 8003cae:	2140      	movs	r1, #64	; 0x40
 8003cb0:	480d      	ldr	r0, [pc, #52]	; (8003ce8 <RadioSpiWriteFifo+0x88>)
 8003cb2:	f000 fba1 	bl	80043f8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003cb6:	2017      	movs	r0, #23
 8003cb8:	f000 f9d8 	bl	800406c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003cbc:	f107 0308 	add.w	r3, r7, #8
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	7b3a      	ldrb	r2, [r7, #12]
 8003cc4:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003cc6:	f107 0308 	add.w	r3, r7, #8
 8003cca:	7b7a      	ldrb	r2, [r7, #13]
 8003ccc:	701a      	strb	r2, [r3, #0]

  return status;
 8003cce:	893b      	ldrh	r3, [r7, #8]
 8003cd0:	82bb      	strh	r3, [r7, #20]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	7d3a      	ldrb	r2, [r7, #20]
 8003cd6:	f362 0307 	bfi	r3, r2, #0, #8
 8003cda:	7d7a      	ldrb	r2, [r7, #21]
 8003cdc:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	48000400 	.word	0x48000400
 8003cec:	20000070 	.word	0x20000070

08003cf0 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	6039      	str	r1, [r7, #0]
 8003cfa:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 8003cfc:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003d00:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003d02:	2017      	movs	r0, #23
 8003d04:	f000 f9c0 	bl	8004088 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2140      	movs	r1, #64	; 0x40
 8003d0c:	481a      	ldr	r0, [pc, #104]	; (8003d78 <RadioSpiReadFifo+0x88>)
 8003d0e:	f000 fb73 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003d12:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <RadioSpiReadFifo+0x8c>)
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	f107 020c 	add.w	r2, r7, #12
 8003d1a:	f107 0110 	add.w	r1, r7, #16
 8003d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	2302      	movs	r3, #2
 8003d26:	f002 fa2a 	bl	800617e <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8003d2a:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <RadioSpiReadFifo+0x8c>)
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d36:	6839      	ldr	r1, [r7, #0]
 8003d38:	f002 f8f1 	bl	8005f1e <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	2140      	movs	r1, #64	; 0x40
 8003d40:	480d      	ldr	r0, [pc, #52]	; (8003d78 <RadioSpiReadFifo+0x88>)
 8003d42:	f000 fb59 	bl	80043f8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003d46:	2017      	movs	r0, #23
 8003d48:	f000 f990 	bl	800406c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003d4c:	f107 0308 	add.w	r3, r7, #8
 8003d50:	3301      	adds	r3, #1
 8003d52:	7b3a      	ldrb	r2, [r7, #12]
 8003d54:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003d56:	f107 0308 	add.w	r3, r7, #8
 8003d5a:	7b7a      	ldrb	r2, [r7, #13]
 8003d5c:	701a      	strb	r2, [r3, #0]

  return status;
 8003d5e:	893b      	ldrh	r3, [r7, #8]
 8003d60:	82bb      	strh	r3, [r7, #20]
 8003d62:	2300      	movs	r3, #0
 8003d64:	7d3a      	ldrb	r2, [r7, #20]
 8003d66:	f362 0307 	bfi	r3, r2, #0, #8
 8003d6a:	7d7a      	ldrb	r2, [r7, #21]
 8003d6c:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	48000400 	.word	0x48000400
 8003d7c:	20000070 	.word	0x20000070

08003d80 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 8003d84:	2201      	movs	r2, #1
 8003d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d8e:	f000 fb33 	bl	80043f8 <HAL_GPIO_WritePin>
}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003da4:	f000 fb28 	bl	80043f8 <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 8003da8:	2001      	movs	r0, #1
 8003daa:	f000 f843 	bl	8003e34 <HAL_Delay>
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <HAL_Init+0x3c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a0b      	ldr	r2, [pc, #44]	; (8003df0 <HAL_Init+0x3c>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dca:	2003      	movs	r0, #3
 8003dcc:	f000 f927 	bl	800401e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dd0:	200f      	movs	r0, #15
 8003dd2:	f7fd fb09 	bl	80013e8 <HAL_InitTick>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	71fb      	strb	r3, [r7, #7]
 8003de0:	e001      	b.n	8003de6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003de2:	f7fd fad9 	bl	8001398 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003de6:	79fb      	ldrb	r3, [r7, #7]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40022000 	.word	0x40022000

08003df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_IncTick+0x20>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_IncTick+0x24>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4413      	add	r3, r2
 8003e04:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <HAL_IncTick+0x24>)
 8003e06:	6013      	str	r3, [r2, #0]
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000078 	.word	0x20000078
 8003e18:	20000244 	.word	0x20000244

08003e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <HAL_GetTick+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000244 	.word	0x20000244

08003e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e3c:	f7ff ffee 	bl	8003e1c <HAL_GetTick>
 8003e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e4c:	d005      	beq.n	8003e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <HAL_Delay+0x44>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e5a:	bf00      	nop
 8003e5c:	f7ff ffde 	bl	8003e1c <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d8f7      	bhi.n	8003e5c <HAL_Delay+0x28>
  {
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000078 	.word	0x20000078

08003e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eae:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	60d3      	str	r3, [r2, #12]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <__NVIC_GetPriorityGrouping+0x18>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	0a1b      	lsrs	r3, r3, #8
 8003ece:	f003 0307 	and.w	r3, r3, #7
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	db0b      	blt.n	8003f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	f003 021f 	and.w	r2, r3, #31
 8003ef8:	4907      	ldr	r1, [pc, #28]	; (8003f18 <__NVIC_EnableIRQ+0x38>)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2001      	movs	r0, #1
 8003f02:	fa00 f202 	lsl.w	r2, r0, r2
 8003f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	e000e100 	.word	0xe000e100

08003f1c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	db12      	blt.n	8003f54 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	f003 021f 	and.w	r2, r3, #31
 8003f34:	490a      	ldr	r1, [pc, #40]	; (8003f60 <__NVIC_DisableIRQ+0x44>)
 8003f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f42:	3320      	adds	r3, #32
 8003f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f48:	f3bf 8f4f 	dsb	sy
}
 8003f4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f4e:	f3bf 8f6f 	isb	sy
}
 8003f52:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	e000e100 	.word	0xe000e100

08003f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	6039      	str	r1, [r7, #0]
 8003f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	db0a      	blt.n	8003f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	490c      	ldr	r1, [pc, #48]	; (8003fb0 <__NVIC_SetPriority+0x4c>)
 8003f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f82:	0112      	lsls	r2, r2, #4
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	440b      	add	r3, r1
 8003f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f8c:	e00a      	b.n	8003fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	4908      	ldr	r1, [pc, #32]	; (8003fb4 <__NVIC_SetPriority+0x50>)
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	3b04      	subs	r3, #4
 8003f9c:	0112      	lsls	r2, r2, #4
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	761a      	strb	r2, [r3, #24]
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	e000e100 	.word	0xe000e100
 8003fb4:	e000ed00 	.word	0xe000ed00

08003fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b089      	sub	sp, #36	; 0x24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f1c3 0307 	rsb	r3, r3, #7
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	bf28      	it	cs
 8003fd6:	2304      	movcs	r3, #4
 8003fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d902      	bls.n	8003fe8 <NVIC_EncodePriority+0x30>
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	3b03      	subs	r3, #3
 8003fe6:	e000      	b.n	8003fea <NVIC_EncodePriority+0x32>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43da      	mvns	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	401a      	ands	r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004000:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	fa01 f303 	lsl.w	r3, r1, r3
 800400a:	43d9      	mvns	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004010:	4313      	orrs	r3, r2
         );
}
 8004012:	4618      	mov	r0, r3
 8004014:	3724      	adds	r7, #36	; 0x24
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff ff28 	bl	8003e7c <__NVIC_SetPriorityGrouping>
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004046:	f7ff ff3d 	bl	8003ec4 <__NVIC_GetPriorityGrouping>
 800404a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	6978      	ldr	r0, [r7, #20]
 8004052:	f7ff ffb1 	bl	8003fb8 <NVIC_EncodePriority>
 8004056:	4602      	mov	r2, r0
 8004058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff ff80 	bl	8003f64 <__NVIC_SetPriority>
}
 8004064:	bf00      	nop
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff ff30 	bl	8003ee0 <__NVIC_EnableIRQ>
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff ff40 	bl	8003f1c <__NVIC_DisableIRQ>
}
 800409c:	bf00      	nop
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b2:	e17f      	b.n	80043b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8171 	beq.w	80043ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d005      	beq.n	80040e4 <HAL_GPIO_Init+0x40>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d130      	bne.n	8004146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800411a:	2201      	movs	r2, #1
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	f003 0201 	and.w	r2, r3, #1
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b03      	cmp	r3, #3
 8004150:	d118      	bne.n	8004184 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004158:	2201      	movs	r2, #1
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	08db      	lsrs	r3, r3, #3
 800416e:	f003 0201 	and.w	r2, r3, #1
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	2b03      	cmp	r3, #3
 800418e:	d017      	beq.n	80041c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	2203      	movs	r2, #3
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4013      	ands	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d123      	bne.n	8004214 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	08da      	lsrs	r2, r3, #3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3208      	adds	r2, #8
 80041d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	220f      	movs	r2, #15
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4013      	ands	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	08da      	lsrs	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3208      	adds	r2, #8
 800420e:	6939      	ldr	r1, [r7, #16]
 8004210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	2203      	movs	r2, #3
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4013      	ands	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 0203 	and.w	r2, r3, #3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 80ac 	beq.w	80043ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004256:	4b5f      	ldr	r3, [pc, #380]	; (80043d4 <HAL_GPIO_Init+0x330>)
 8004258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425a:	4a5e      	ldr	r2, [pc, #376]	; (80043d4 <HAL_GPIO_Init+0x330>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6613      	str	r3, [r2, #96]	; 0x60
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <HAL_GPIO_Init+0x330>)
 8004264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800426e:	4a5a      	ldr	r2, [pc, #360]	; (80043d8 <HAL_GPIO_Init+0x334>)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	3302      	adds	r3, #2
 8004276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	220f      	movs	r2, #15
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004298:	d025      	beq.n	80042e6 <HAL_GPIO_Init+0x242>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a4f      	ldr	r2, [pc, #316]	; (80043dc <HAL_GPIO_Init+0x338>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01f      	beq.n	80042e2 <HAL_GPIO_Init+0x23e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4e      	ldr	r2, [pc, #312]	; (80043e0 <HAL_GPIO_Init+0x33c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d019      	beq.n	80042de <HAL_GPIO_Init+0x23a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4d      	ldr	r2, [pc, #308]	; (80043e4 <HAL_GPIO_Init+0x340>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <HAL_GPIO_Init+0x236>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4c      	ldr	r2, [pc, #304]	; (80043e8 <HAL_GPIO_Init+0x344>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00d      	beq.n	80042d6 <HAL_GPIO_Init+0x232>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4b      	ldr	r2, [pc, #300]	; (80043ec <HAL_GPIO_Init+0x348>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <HAL_GPIO_Init+0x22e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a4a      	ldr	r2, [pc, #296]	; (80043f0 <HAL_GPIO_Init+0x34c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_GPIO_Init+0x22a>
 80042ca:	2306      	movs	r3, #6
 80042cc:	e00c      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042ce:	2307      	movs	r3, #7
 80042d0:	e00a      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042d2:	2305      	movs	r3, #5
 80042d4:	e008      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042d6:	2304      	movs	r3, #4
 80042d8:	e006      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042da:	2303      	movs	r3, #3
 80042dc:	e004      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042de:	2302      	movs	r3, #2
 80042e0:	e002      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042e6:	2300      	movs	r3, #0
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	f002 0203 	and.w	r2, r2, #3
 80042ee:	0092      	lsls	r2, r2, #2
 80042f0:	4093      	lsls	r3, r2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042f8:	4937      	ldr	r1, [pc, #220]	; (80043d8 <HAL_GPIO_Init+0x334>)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	089b      	lsrs	r3, r3, #2
 80042fe:	3302      	adds	r3, #2
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004306:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	43db      	mvns	r3, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800432a:	4a32      	ldr	r2, [pc, #200]	; (80043f4 <HAL_GPIO_Init+0x350>)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004330:	4b30      	ldr	r3, [pc, #192]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	43db      	mvns	r3, r3
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004354:	4a27      	ldr	r2, [pc, #156]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <HAL_GPIO_Init+0x350>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	43db      	mvns	r3, r3
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4013      	ands	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800437e:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	43db      	mvns	r3, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043a8:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <HAL_GPIO_Init+0x350>)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	3301      	adds	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	fa22 f303 	lsr.w	r3, r2, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f47f ae78 	bne.w	80040b4 <HAL_GPIO_Init+0x10>
  }
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40010000 	.word	0x40010000
 80043dc:	48000400 	.word	0x48000400
 80043e0:	48000800 	.word	0x48000800
 80043e4:	48000c00 	.word	0x48000c00
 80043e8:	48001000 	.word	0x48001000
 80043ec:	48001400 	.word	0x48001400
 80043f0:	48001800 	.word	0x48001800
 80043f4:	40010400 	.word	0x40010400

080043f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
 8004404:	4613      	mov	r3, r2
 8004406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004408:	787b      	ldrb	r3, [r7, #1]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800440e:	887a      	ldrh	r2, [r7, #2]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004414:	e002      	b.n	800441c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d006      	beq.n	800444c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800443e:	4a05      	ldr	r2, [pc, #20]	; (8004454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc fdcc 	bl	8000fe4 <HAL_GPIO_EXTI_Callback>
  }
}
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40010400 	.word	0x40010400

08004458 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800445c:	4b04      	ldr	r3, [pc, #16]	; (8004470 <HAL_PWREx_GetVoltageRange+0x18>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40007000 	.word	0x40007000

08004474 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004482:	d130      	bne.n	80044e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004484:	4b23      	ldr	r3, [pc, #140]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800448c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004490:	d038      	beq.n	8004504 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004492:	4b20      	ldr	r3, [pc, #128]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800449a:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800449c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044a2:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2232      	movs	r2, #50	; 0x32
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	4a1b      	ldr	r2, [pc, #108]	; (800451c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	0c9b      	lsrs	r3, r3, #18
 80044b4:	3301      	adds	r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044b8:	e002      	b.n	80044c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3b01      	subs	r3, #1
 80044be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044c0:	4b14      	ldr	r3, [pc, #80]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044cc:	d102      	bne.n	80044d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f2      	bne.n	80044ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044d4:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e0:	d110      	bne.n	8004504 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e00f      	b.n	8004506 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044e6:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f2:	d007      	beq.n	8004504 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044f4:	4b07      	ldr	r3, [pc, #28]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044fc:	4a05      	ldr	r2, [pc, #20]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004502:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40007000 	.word	0x40007000
 8004518:	20000068 	.word	0x20000068
 800451c:	431bde83 	.word	0x431bde83

08004520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e3ca      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004532:	4b97      	ldr	r3, [pc, #604]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800453c:	4b94      	ldr	r3, [pc, #592]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80e4 	beq.w	800471c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_RCC_OscConfig+0x4a>
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b0c      	cmp	r3, #12
 800455e:	f040 808b 	bne.w	8004678 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b01      	cmp	r3, #1
 8004566:	f040 8087 	bne.w	8004678 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800456a:	4b89      	ldr	r3, [pc, #548]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_RCC_OscConfig+0x62>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e3a2      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1a      	ldr	r2, [r3, #32]
 8004586:	4b82      	ldr	r3, [pc, #520]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d004      	beq.n	800459c <HAL_RCC_OscConfig+0x7c>
 8004592:	4b7f      	ldr	r3, [pc, #508]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800459a:	e005      	b.n	80045a8 <HAL_RCC_OscConfig+0x88>
 800459c:	4b7c      	ldr	r3, [pc, #496]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 800459e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a2:	091b      	lsrs	r3, r3, #4
 80045a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d223      	bcs.n	80045f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fd87 	bl	80050c4 <RCC_SetFlashLatencyFromMSIRange>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e383      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045c0:	4b73      	ldr	r3, [pc, #460]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a72      	ldr	r2, [pc, #456]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80045c6:	f043 0308 	orr.w	r3, r3, #8
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b70      	ldr	r3, [pc, #448]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	496d      	ldr	r1, [pc, #436]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045de:	4b6c      	ldr	r3, [pc, #432]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	4968      	ldr	r1, [pc, #416]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	604b      	str	r3, [r1, #4]
 80045f2:	e025      	b.n	8004640 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f4:	4b66      	ldr	r3, [pc, #408]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a65      	ldr	r2, [pc, #404]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80045fa:	f043 0308 	orr.w	r3, r3, #8
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	4b63      	ldr	r3, [pc, #396]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	4960      	ldr	r1, [pc, #384]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 800460e:	4313      	orrs	r3, r2
 8004610:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004612:	4b5f      	ldr	r3, [pc, #380]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	495b      	ldr	r1, [pc, #364]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 8004622:	4313      	orrs	r3, r2
 8004624:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fd47 	bl	80050c4 <RCC_SetFlashLatencyFromMSIRange>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e343      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004640:	f000 fc4a 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8004644:	4602      	mov	r2, r0
 8004646:	4b52      	ldr	r3, [pc, #328]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	4950      	ldr	r1, [pc, #320]	; (8004794 <HAL_RCC_OscConfig+0x274>)
 8004652:	5ccb      	ldrb	r3, [r1, r3]
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
 800465c:	4a4e      	ldr	r2, [pc, #312]	; (8004798 <HAL_RCC_OscConfig+0x278>)
 800465e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004660:	4b4e      	ldr	r3, [pc, #312]	; (800479c <HAL_RCC_OscConfig+0x27c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f7fc febf 	bl	80013e8 <HAL_InitTick>
 800466a:	4603      	mov	r3, r0
 800466c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d052      	beq.n	800471a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	e327      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d032      	beq.n	80046e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004680:	4b43      	ldr	r3, [pc, #268]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a42      	ldr	r2, [pc, #264]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800468c:	f7ff fbc6 	bl	8003e1c <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004694:	f7ff fbc2 	bl	8003e1c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e310      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046a6:	4b3a      	ldr	r3, [pc, #232]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046b2:	4b37      	ldr	r3, [pc, #220]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a36      	ldr	r2, [pc, #216]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80046b8:	f043 0308 	orr.w	r3, r3, #8
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b34      	ldr	r3, [pc, #208]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	4931      	ldr	r1, [pc, #196]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046d0:	4b2f      	ldr	r3, [pc, #188]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	492c      	ldr	r1, [pc, #176]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	604b      	str	r3, [r1, #4]
 80046e4:	e01a      	b.n	800471c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046e6:	4b2a      	ldr	r3, [pc, #168]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a29      	ldr	r2, [pc, #164]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046f2:	f7ff fb93 	bl	8003e1c <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046fa:	f7ff fb8f 	bl	8003e1c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e2dd      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800470c:	4b20      	ldr	r3, [pc, #128]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f0      	bne.n	80046fa <HAL_RCC_OscConfig+0x1da>
 8004718:	e000      	b.n	800471c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800471a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d074      	beq.n	8004812 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	2b08      	cmp	r3, #8
 800472c:	d005      	beq.n	800473a <HAL_RCC_OscConfig+0x21a>
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b0c      	cmp	r3, #12
 8004732:	d10e      	bne.n	8004752 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b03      	cmp	r3, #3
 8004738:	d10b      	bne.n	8004752 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800473a:	4b15      	ldr	r3, [pc, #84]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d064      	beq.n	8004810 <HAL_RCC_OscConfig+0x2f0>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d160      	bne.n	8004810 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e2ba      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475a:	d106      	bne.n	800476a <HAL_RCC_OscConfig+0x24a>
 800475c:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a0b      	ldr	r2, [pc, #44]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 8004762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	e026      	b.n	80047b8 <HAL_RCC_OscConfig+0x298>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004772:	d115      	bne.n	80047a0 <HAL_RCC_OscConfig+0x280>
 8004774:	4b06      	ldr	r3, [pc, #24]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a05      	ldr	r2, [pc, #20]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 800477a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b03      	ldr	r3, [pc, #12]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a02      	ldr	r2, [pc, #8]	; (8004790 <HAL_RCC_OscConfig+0x270>)
 8004786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	e014      	b.n	80047b8 <HAL_RCC_OscConfig+0x298>
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000
 8004794:	08008020 	.word	0x08008020
 8004798:	20000068 	.word	0x20000068
 800479c:	20000074 	.word	0x20000074
 80047a0:	4ba0      	ldr	r3, [pc, #640]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a9f      	ldr	r2, [pc, #636]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 80047a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4b9d      	ldr	r3, [pc, #628]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a9c      	ldr	r2, [pc, #624]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 80047b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d013      	beq.n	80047e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7ff fb2c 	bl	8003e1c <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c8:	f7ff fb28 	bl	8003e1c <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	; 0x64
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e276      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047da:	4b92      	ldr	r3, [pc, #584]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0x2a8>
 80047e6:	e014      	b.n	8004812 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e8:	f7ff fb18 	bl	8003e1c <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f0:	f7ff fb14 	bl	8003e1c <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b64      	cmp	r3, #100	; 0x64
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e262      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004802:	4b88      	ldr	r3, [pc, #544]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0x2d0>
 800480e:	e000      	b.n	8004812 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d060      	beq.n	80048e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b04      	cmp	r3, #4
 8004822:	d005      	beq.n	8004830 <HAL_RCC_OscConfig+0x310>
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b0c      	cmp	r3, #12
 8004828:	d119      	bne.n	800485e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b02      	cmp	r3, #2
 800482e:	d116      	bne.n	800485e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004830:	4b7c      	ldr	r3, [pc, #496]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_RCC_OscConfig+0x328>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e23f      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004848:	4b76      	ldr	r3, [pc, #472]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	061b      	lsls	r3, r3, #24
 8004856:	4973      	ldr	r1, [pc, #460]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 8004858:	4313      	orrs	r3, r2
 800485a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800485c:	e040      	b.n	80048e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d023      	beq.n	80048ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004866:	4b6f      	ldr	r3, [pc, #444]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a6e      	ldr	r2, [pc, #440]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 800486c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7ff fad3 	bl	8003e1c <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800487a:	f7ff facf 	bl	8003e1c <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e21d      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800488c:	4b65      	ldr	r3, [pc, #404]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004898:	4b62      	ldr	r3, [pc, #392]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	061b      	lsls	r3, r3, #24
 80048a6:	495f      	ldr	r1, [pc, #380]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]
 80048ac:	e018      	b.n	80048e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ae:	4b5d      	ldr	r3, [pc, #372]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a5c      	ldr	r2, [pc, #368]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 80048b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ba:	f7ff faaf 	bl	8003e1c <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c2:	f7ff faab 	bl	8003e1c <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e1f9      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048d4:	4b53      	ldr	r3, [pc, #332]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1f0      	bne.n	80048c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d03c      	beq.n	8004966 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01c      	beq.n	800492e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f4:	4b4b      	ldr	r3, [pc, #300]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 80048f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fa:	4a4a      	ldr	r2, [pc, #296]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7ff fa8a 	bl	8003e1c <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800490c:	f7ff fa86 	bl	8003e1c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e1d4      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800491e:	4b41      	ldr	r3, [pc, #260]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 8004920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ef      	beq.n	800490c <HAL_RCC_OscConfig+0x3ec>
 800492c:	e01b      	b.n	8004966 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800492e:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 8004930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004934:	4a3b      	ldr	r2, [pc, #236]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493e:	f7ff fa6d 	bl	8003e1c <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004946:	f7ff fa69 	bl	8003e1c <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e1b7      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004958:	4b32      	ldr	r3, [pc, #200]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 800495a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1ef      	bne.n	8004946 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 80a6 	beq.w	8004ac0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004974:	2300      	movs	r3, #0
 8004976:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004978:	4b2a      	ldr	r3, [pc, #168]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 800497a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10d      	bne.n	80049a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	4a26      	ldr	r2, [pc, #152]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 800498a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498e:	6593      	str	r3, [r2, #88]	; 0x58
 8004990:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800499c:	2301      	movs	r3, #1
 800499e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a0:	4b21      	ldr	r3, [pc, #132]	; (8004a28 <HAL_RCC_OscConfig+0x508>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d118      	bne.n	80049de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ac:	4b1e      	ldr	r3, [pc, #120]	; (8004a28 <HAL_RCC_OscConfig+0x508>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <HAL_RCC_OscConfig+0x508>)
 80049b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b8:	f7ff fa30 	bl	8003e1c <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c0:	f7ff fa2c 	bl	8003e1c <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e17a      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049d2:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <HAL_RCC_OscConfig+0x508>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f0      	beq.n	80049c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d108      	bne.n	80049f8 <HAL_RCC_OscConfig+0x4d8>
 80049e6:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ec:	4a0d      	ldr	r2, [pc, #52]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049f6:	e029      	b.n	8004a4c <HAL_RCC_OscConfig+0x52c>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b05      	cmp	r3, #5
 80049fe:	d115      	bne.n	8004a2c <HAL_RCC_OscConfig+0x50c>
 8004a00:	4b08      	ldr	r3, [pc, #32]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 8004a08:	f043 0304 	orr.w	r3, r3, #4
 8004a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a10:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	4a03      	ldr	r2, [pc, #12]	; (8004a24 <HAL_RCC_OscConfig+0x504>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a20:	e014      	b.n	8004a4c <HAL_RCC_OscConfig+0x52c>
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40007000 	.word	0x40007000
 8004a2c:	4b9c      	ldr	r3, [pc, #624]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a32:	4a9b      	ldr	r2, [pc, #620]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a3c:	4b98      	ldr	r3, [pc, #608]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a42:	4a97      	ldr	r2, [pc, #604]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004a44:	f023 0304 	bic.w	r3, r3, #4
 8004a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d016      	beq.n	8004a82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7ff f9e2 	bl	8003e1c <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f7ff f9de 	bl	8003e1c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e12a      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a72:	4b8b      	ldr	r3, [pc, #556]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0ed      	beq.n	8004a5c <HAL_RCC_OscConfig+0x53c>
 8004a80:	e015      	b.n	8004aae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a82:	f7ff f9cb 	bl	8003e1c <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a88:	e00a      	b.n	8004aa0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8a:	f7ff f9c7 	bl	8003e1c <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e113      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004aa0:	4b7f      	ldr	r3, [pc, #508]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1ed      	bne.n	8004a8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aae:	7ffb      	ldrb	r3, [r7, #31]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d105      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab4:	4b7a      	ldr	r3, [pc, #488]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab8:	4a79      	ldr	r2, [pc, #484]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004abe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80fe 	beq.w	8004cc6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	f040 80d0 	bne.w	8004c74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ad4:	4b72      	ldr	r3, [pc, #456]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 0203 	and.w	r2, r3, #3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d130      	bne.n	8004b4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	3b01      	subs	r3, #1
 8004af4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d127      	bne.n	8004b4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d11f      	bne.n	8004b4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b14:	2a07      	cmp	r2, #7
 8004b16:	bf14      	ite	ne
 8004b18:	2201      	movne	r2, #1
 8004b1a:	2200      	moveq	r2, #0
 8004b1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d113      	bne.n	8004b4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d109      	bne.n	8004b4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	085b      	lsrs	r3, r3, #1
 8004b42:	3b01      	subs	r3, #1
 8004b44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d06e      	beq.n	8004c28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b0c      	cmp	r3, #12
 8004b4e:	d069      	beq.n	8004c24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b50:	4b53      	ldr	r3, [pc, #332]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d105      	bne.n	8004b68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b5c:	4b50      	ldr	r3, [pc, #320]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0ad      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b6c:	4b4c      	ldr	r3, [pc, #304]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a4b      	ldr	r2, [pc, #300]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b78:	f7ff f950 	bl	8003e1c <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b80:	f7ff f94c 	bl	8003e1c <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e09a      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b92:	4b43      	ldr	r3, [pc, #268]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b9e:	4b40      	ldr	r3, [pc, #256]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	4b40      	ldr	r3, [pc, #256]	; (8004ca4 <HAL_RCC_OscConfig+0x784>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004bae:	3a01      	subs	r2, #1
 8004bb0:	0112      	lsls	r2, r2, #4
 8004bb2:	4311      	orrs	r1, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bb8:	0212      	lsls	r2, r2, #8
 8004bba:	4311      	orrs	r1, r2
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bc0:	0852      	lsrs	r2, r2, #1
 8004bc2:	3a01      	subs	r2, #1
 8004bc4:	0552      	lsls	r2, r2, #21
 8004bc6:	4311      	orrs	r1, r2
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bcc:	0852      	lsrs	r2, r2, #1
 8004bce:	3a01      	subs	r2, #1
 8004bd0:	0652      	lsls	r2, r2, #25
 8004bd2:	4311      	orrs	r1, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bd8:	0912      	lsrs	r2, r2, #4
 8004bda:	0452      	lsls	r2, r2, #17
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	4930      	ldr	r1, [pc, #192]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004be4:	4b2e      	ldr	r3, [pc, #184]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a2d      	ldr	r2, [pc, #180]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bf0:	4b2b      	ldr	r3, [pc, #172]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	4a2a      	ldr	r2, [pc, #168]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bfc:	f7ff f90e 	bl	8003e1c <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c04:	f7ff f90a 	bl	8003e1c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e058      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c16:	4b22      	ldr	r3, [pc, #136]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c22:	e050      	b.n	8004cc6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e04f      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d148      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c34:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c40:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4a16      	ldr	r2, [pc, #88]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c4c:	f7ff f8e6 	bl	8003e1c <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c54:	f7ff f8e2 	bl	8003e1c <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e030      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c66:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0x734>
 8004c72:	e028      	b.n	8004cc6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d023      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <HAL_RCC_OscConfig+0x780>)
 8004c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c86:	f7ff f8c9 	bl	8003e1c <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c8c:	e00c      	b.n	8004ca8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8e:	f7ff f8c5 	bl	8003e1c <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d905      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e013      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca8:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <HAL_RCC_OscConfig+0x7b0>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1ec      	bne.n	8004c8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004cb4:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <HAL_RCC_OscConfig+0x7b0>)
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	4905      	ldr	r1, [pc, #20]	; (8004cd0 <HAL_RCC_OscConfig+0x7b0>)
 8004cba:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <HAL_RCC_OscConfig+0x7b4>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60cb      	str	r3, [r1, #12]
 8004cc0:	e001      	b.n	8004cc6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	feeefffc 	.word	0xfeeefffc

08004cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0e7      	b.n	8004ebc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cec:	4b75      	ldr	r3, [pc, #468]	; (8004ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d910      	bls.n	8004d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b72      	ldr	r3, [pc, #456]	; (8004ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 0207 	bic.w	r2, r3, #7
 8004d02:	4970      	ldr	r1, [pc, #448]	; (8004ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	4b6e      	ldr	r3, [pc, #440]	; (8004ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0cf      	b.n	8004ebc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d010      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	4b66      	ldr	r3, [pc, #408]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d908      	bls.n	8004d4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d38:	4b63      	ldr	r3, [pc, #396]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	4960      	ldr	r1, [pc, #384]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d04c      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d107      	bne.n	8004d6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5e:	4b5a      	ldr	r3, [pc, #360]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d121      	bne.n	8004dae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e0a6      	b.n	8004ebc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d107      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d76:	4b54      	ldr	r3, [pc, #336]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d115      	bne.n	8004dae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e09a      	b.n	8004ebc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d8e:	4b4e      	ldr	r3, [pc, #312]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e08e      	b.n	8004ebc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d9e:	4b4a      	ldr	r3, [pc, #296]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e086      	b.n	8004ebc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dae:	4b46      	ldr	r3, [pc, #280]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f023 0203 	bic.w	r2, r3, #3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4943      	ldr	r1, [pc, #268]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc0:	f7ff f82c 	bl	8003e1c <HAL_GetTick>
 8004dc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc6:	e00a      	b.n	8004dde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc8:	f7ff f828 	bl	8003e1c <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e06e      	b.n	8004ebc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dde:	4b3a      	ldr	r3, [pc, #232]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 020c 	and.w	r2, r3, #12
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d1eb      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d010      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	4b31      	ldr	r3, [pc, #196]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d208      	bcs.n	8004e1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e0c:	4b2e      	ldr	r3, [pc, #184]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	492b      	ldr	r1, [pc, #172]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e1e:	4b29      	ldr	r3, [pc, #164]	; (8004ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d210      	bcs.n	8004e4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f023 0207 	bic.w	r2, r3, #7
 8004e34:	4923      	ldr	r1, [pc, #140]	; (8004ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3c:	4b21      	ldr	r3, [pc, #132]	; (8004ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d001      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e036      	b.n	8004ebc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d008      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	4918      	ldr	r1, [pc, #96]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d009      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e78:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4910      	ldr	r1, [pc, #64]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e8c:	f000 f824 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4b0d      	ldr	r3, [pc, #52]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	091b      	lsrs	r3, r3, #4
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	490b      	ldr	r1, [pc, #44]	; (8004ecc <HAL_RCC_ClockConfig+0x1f4>)
 8004e9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea8:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8004eaa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_RCC_ClockConfig+0x1fc>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fc fa99 	bl	80013e8 <HAL_InitTick>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004eba:	7afb      	ldrb	r3, [r7, #11]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40022000 	.word	0x40022000
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	08008020 	.word	0x08008020
 8004ed0:	20000068 	.word	0x20000068
 8004ed4:	20000074 	.word	0x20000074

08004ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b089      	sub	sp, #36	; 0x24
 8004edc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ee6:	4b3e      	ldr	r3, [pc, #248]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 030c 	and.w	r3, r3, #12
 8004eee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ef0:	4b3b      	ldr	r3, [pc, #236]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0x34>
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	2b0c      	cmp	r3, #12
 8004f04:	d121      	bne.n	8004f4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d11e      	bne.n	8004f4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f0c:	4b34      	ldr	r3, [pc, #208]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d107      	bne.n	8004f28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f18:	4b31      	ldr	r3, [pc, #196]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f1e:	0a1b      	lsrs	r3, r3, #8
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	e005      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f28:	4b2d      	ldr	r3, [pc, #180]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	091b      	lsrs	r3, r3, #4
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f34:	4a2b      	ldr	r2, [pc, #172]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10d      	bne.n	8004f60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f48:	e00a      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d102      	bne.n	8004f56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f50:	4b25      	ldr	r3, [pc, #148]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f52:	61bb      	str	r3, [r7, #24]
 8004f54:	e004      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d101      	bne.n	8004f60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f5c:	4b23      	ldr	r3, [pc, #140]	; (8004fec <HAL_RCC_GetSysClockFreq+0x114>)
 8004f5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b0c      	cmp	r3, #12
 8004f64:	d134      	bne.n	8004fd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f66:	4b1e      	ldr	r3, [pc, #120]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d003      	beq.n	8004f7e <HAL_RCC_GetSysClockFreq+0xa6>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d003      	beq.n	8004f84 <HAL_RCC_GetSysClockFreq+0xac>
 8004f7c:	e005      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f7e:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f80:	617b      	str	r3, [r7, #20]
      break;
 8004f82:	e005      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f84:	4b19      	ldr	r3, [pc, #100]	; (8004fec <HAL_RCC_GetSysClockFreq+0x114>)
 8004f86:	617b      	str	r3, [r7, #20]
      break;
 8004f88:	e002      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	617b      	str	r3, [r7, #20]
      break;
 8004f8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f90:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	091b      	lsrs	r3, r3, #4
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f9e:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	0a1b      	lsrs	r3, r3, #8
 8004fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	fb03 f202 	mul.w	r2, r3, r2
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	0e5b      	lsrs	r3, r3, #25
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fd0:	69bb      	ldr	r3, [r7, #24]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3724      	adds	r7, #36	; 0x24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	08008038 	.word	0x08008038
 8004fe8:	00f42400 	.word	0x00f42400
 8004fec:	007a1200 	.word	0x007a1200

08004ff0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ff4:	4b03      	ldr	r3, [pc, #12]	; (8005004 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000068 	.word	0x20000068

08005008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800500c:	f7ff fff0 	bl	8004ff0 <HAL_RCC_GetHCLKFreq>
 8005010:	4602      	mov	r2, r0
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	0a1b      	lsrs	r3, r3, #8
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	4904      	ldr	r1, [pc, #16]	; (8005030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800501e:	5ccb      	ldrb	r3, [r1, r3]
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005028:	4618      	mov	r0, r3
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40021000 	.word	0x40021000
 8005030:	08008030 	.word	0x08008030

08005034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005038:	f7ff ffda 	bl	8004ff0 <HAL_RCC_GetHCLKFreq>
 800503c:	4602      	mov	r2, r0
 800503e:	4b06      	ldr	r3, [pc, #24]	; (8005058 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	0adb      	lsrs	r3, r3, #11
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	4904      	ldr	r1, [pc, #16]	; (800505c <HAL_RCC_GetPCLK2Freq+0x28>)
 800504a:	5ccb      	ldrb	r3, [r1, r3]
 800504c:	f003 031f 	and.w	r3, r3, #31
 8005050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005054:	4618      	mov	r0, r3
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40021000 	.word	0x40021000
 800505c:	08008030 	.word	0x08008030

08005060 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	220f      	movs	r2, #15
 800506e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005070:	4b12      	ldr	r3, [pc, #72]	; (80050bc <HAL_RCC_GetClockConfig+0x5c>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 0203 	and.w	r2, r3, #3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800507c:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <HAL_RCC_GetClockConfig+0x5c>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005088:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <HAL_RCC_GetClockConfig+0x5c>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005094:	4b09      	ldr	r3, [pc, #36]	; (80050bc <HAL_RCC_GetClockConfig+0x5c>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	08db      	lsrs	r3, r3, #3
 800509a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80050a2:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <HAL_RCC_GetClockConfig+0x60>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0207 	and.w	r2, r3, #7
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	601a      	str	r2, [r3, #0]
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
 80050c0:	40022000 	.word	0x40022000

080050c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050cc:	2300      	movs	r3, #0
 80050ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050d0:	4b2a      	ldr	r3, [pc, #168]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050dc:	f7ff f9bc 	bl	8004458 <HAL_PWREx_GetVoltageRange>
 80050e0:	6178      	str	r0, [r7, #20]
 80050e2:	e014      	b.n	800510e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050e4:	4b25      	ldr	r3, [pc, #148]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e8:	4a24      	ldr	r2, [pc, #144]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ee:	6593      	str	r3, [r2, #88]	; 0x58
 80050f0:	4b22      	ldr	r3, [pc, #136]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050fc:	f7ff f9ac 	bl	8004458 <HAL_PWREx_GetVoltageRange>
 8005100:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005102:	4b1e      	ldr	r3, [pc, #120]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005106:	4a1d      	ldr	r2, [pc, #116]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800510c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005114:	d10b      	bne.n	800512e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b80      	cmp	r3, #128	; 0x80
 800511a:	d919      	bls.n	8005150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2ba0      	cmp	r3, #160	; 0xa0
 8005120:	d902      	bls.n	8005128 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005122:	2302      	movs	r3, #2
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	e013      	b.n	8005150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005128:	2301      	movs	r3, #1
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	e010      	b.n	8005150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b80      	cmp	r3, #128	; 0x80
 8005132:	d902      	bls.n	800513a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005134:	2303      	movs	r3, #3
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	e00a      	b.n	8005150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b80      	cmp	r3, #128	; 0x80
 800513e:	d102      	bne.n	8005146 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005140:	2302      	movs	r3, #2
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	e004      	b.n	8005150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b70      	cmp	r3, #112	; 0x70
 800514a:	d101      	bne.n	8005150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800514c:	2301      	movs	r3, #1
 800514e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f023 0207 	bic.w	r2, r3, #7
 8005158:	4909      	ldr	r1, [pc, #36]	; (8005180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005160:	4b07      	ldr	r3, [pc, #28]	; (8005180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	429a      	cmp	r2, r3
 800516c:	d001      	beq.n	8005172 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40021000 	.word	0x40021000
 8005180:	40022000 	.word	0x40022000

08005184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800518c:	2300      	movs	r3, #0
 800518e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005190:	2300      	movs	r3, #0
 8005192:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800519c:	2b00      	cmp	r3, #0
 800519e:	d041      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051a8:	d02a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80051aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051ae:	d824      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051b4:	d008      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80051b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051ba:	d81e      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80051c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051c4:	d010      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051c6:	e018      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051c8:	4b86      	ldr	r3, [pc, #536]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4a85      	ldr	r2, [pc, #532]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051d4:	e015      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3304      	adds	r3, #4
 80051da:	2100      	movs	r1, #0
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fabb 	bl	8005758 <RCCEx_PLLSAI1_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051e6:	e00c      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3320      	adds	r3, #32
 80051ec:	2100      	movs	r1, #0
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fba6 	bl	8005940 <RCCEx_PLLSAI2_Config>
 80051f4:	4603      	mov	r3, r0
 80051f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051f8:	e003      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	74fb      	strb	r3, [r7, #19]
      break;
 80051fe:	e000      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005202:	7cfb      	ldrb	r3, [r7, #19]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005208:	4b76      	ldr	r3, [pc, #472]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005216:	4973      	ldr	r1, [pc, #460]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800521e:	e001      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005220:	7cfb      	ldrb	r3, [r7, #19]
 8005222:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d041      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005234:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005238:	d02a      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800523a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800523e:	d824      	bhi.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005240:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005244:	d008      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005246:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800524a:	d81e      	bhi.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005254:	d010      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005256:	e018      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005258:	4b62      	ldr	r3, [pc, #392]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4a61      	ldr	r2, [pc, #388]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800525e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005262:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005264:	e015      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3304      	adds	r3, #4
 800526a:	2100      	movs	r1, #0
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fa73 	bl	8005758 <RCCEx_PLLSAI1_Config>
 8005272:	4603      	mov	r3, r0
 8005274:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005276:	e00c      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3320      	adds	r3, #32
 800527c:	2100      	movs	r1, #0
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fb5e 	bl	8005940 <RCCEx_PLLSAI2_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005288:	e003      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	74fb      	strb	r3, [r7, #19]
      break;
 800528e:	e000      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005292:	7cfb      	ldrb	r3, [r7, #19]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10b      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005298:	4b52      	ldr	r3, [pc, #328]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052a6:	494f      	ldr	r1, [pc, #316]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052ae:	e001      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b0:	7cfb      	ldrb	r3, [r7, #19]
 80052b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 80a0 	beq.w	8005402 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052c2:	2300      	movs	r3, #0
 80052c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052c6:	4b47      	ldr	r3, [pc, #284]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80052d6:	2300      	movs	r3, #0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00d      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052dc:	4b41      	ldr	r3, [pc, #260]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e0:	4a40      	ldr	r2, [pc, #256]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e6:	6593      	str	r3, [r2, #88]	; 0x58
 80052e8:	4b3e      	ldr	r3, [pc, #248]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f0:	60bb      	str	r3, [r7, #8]
 80052f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052f4:	2301      	movs	r3, #1
 80052f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052f8:	4b3b      	ldr	r3, [pc, #236]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a3a      	ldr	r2, [pc, #232]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005302:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005304:	f7fe fd8a 	bl	8003e1c <HAL_GetTick>
 8005308:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800530a:	e009      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530c:	f7fe fd86 	bl	8003e1c <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d902      	bls.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	74fb      	strb	r3, [r7, #19]
        break;
 800531e:	e005      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005320:	4b31      	ldr	r3, [pc, #196]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0ef      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d15c      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005332:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01f      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	429a      	cmp	r2, r3
 800534e:	d019      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005350:	4b24      	ldr	r3, [pc, #144]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800535a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800535c:	4b21      	ldr	r3, [pc, #132]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	4a20      	ldr	r2, [pc, #128]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800536c:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800537c:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d016      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538e:	f7fe fd45 	bl	8003e1c <HAL_GetTick>
 8005392:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005394:	e00b      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005396:	f7fe fd41 	bl	8003e1c <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d902      	bls.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	74fb      	strb	r3, [r7, #19]
            break;
 80053ac:	e006      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ae:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0ec      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80053bc:	7cfb      	ldrb	r3, [r7, #19]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10c      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053c2:	4b08      	ldr	r3, [pc, #32]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d2:	4904      	ldr	r1, [pc, #16]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053da:	e009      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053dc:	7cfb      	ldrb	r3, [r7, #19]
 80053de:	74bb      	strb	r3, [r7, #18]
 80053e0:	e006      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80053e2:	bf00      	nop
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053f0:	7c7b      	ldrb	r3, [r7, #17]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d105      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f6:	4b9e      	ldr	r3, [pc, #632]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fa:	4a9d      	ldr	r2, [pc, #628]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005400:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800540e:	4b98      	ldr	r3, [pc, #608]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005414:	f023 0203 	bic.w	r2, r3, #3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	4994      	ldr	r1, [pc, #592]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005430:	4b8f      	ldr	r3, [pc, #572]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005436:	f023 020c 	bic.w	r2, r3, #12
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543e:	498c      	ldr	r1, [pc, #560]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005452:	4b87      	ldr	r3, [pc, #540]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	4983      	ldr	r1, [pc, #524]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005474:	4b7e      	ldr	r3, [pc, #504]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005482:	497b      	ldr	r1, [pc, #492]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005496:	4b76      	ldr	r3, [pc, #472]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a4:	4972      	ldr	r1, [pc, #456]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054b8:	4b6d      	ldr	r3, [pc, #436]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c6:	496a      	ldr	r1, [pc, #424]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054da:	4b65      	ldr	r3, [pc, #404]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e8:	4961      	ldr	r1, [pc, #388]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054fc:	4b5c      	ldr	r3, [pc, #368]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005502:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550a:	4959      	ldr	r1, [pc, #356]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800551e:	4b54      	ldr	r3, [pc, #336]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005524:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552c:	4950      	ldr	r1, [pc, #320]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005540:	4b4b      	ldr	r3, [pc, #300]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005546:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554e:	4948      	ldr	r1, [pc, #288]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005562:	4b43      	ldr	r3, [pc, #268]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005568:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005570:	493f      	ldr	r1, [pc, #252]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d028      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005584:	4b3a      	ldr	r3, [pc, #232]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005592:	4937      	ldr	r1, [pc, #220]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800559e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055a2:	d106      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a4:	4b32      	ldr	r3, [pc, #200]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4a31      	ldr	r2, [pc, #196]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ae:	60d3      	str	r3, [r2, #12]
 80055b0:	e011      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055ba:	d10c      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	2101      	movs	r1, #1
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f8c8 	bl	8005758 <RCCEx_PLLSAI1_Config>
 80055c8:	4603      	mov	r3, r0
 80055ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80055cc:	7cfb      	ldrb	r3, [r7, #19]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80055d2:	7cfb      	ldrb	r3, [r7, #19]
 80055d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d028      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055e2:	4b23      	ldr	r3, [pc, #140]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f0:	491f      	ldr	r1, [pc, #124]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005600:	d106      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005602:	4b1b      	ldr	r3, [pc, #108]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	4a1a      	ldr	r2, [pc, #104]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800560c:	60d3      	str	r3, [r2, #12]
 800560e:	e011      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005614:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005618:	d10c      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3304      	adds	r3, #4
 800561e:	2101      	movs	r1, #1
 8005620:	4618      	mov	r0, r3
 8005622:	f000 f899 	bl	8005758 <RCCEx_PLLSAI1_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800562a:	7cfb      	ldrb	r3, [r7, #19]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005630:	7cfb      	ldrb	r3, [r7, #19]
 8005632:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d02b      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005646:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564e:	4908      	ldr	r1, [pc, #32]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565e:	d109      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005660:	4b03      	ldr	r3, [pc, #12]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4a02      	ldr	r2, [pc, #8]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800566a:	60d3      	str	r3, [r2, #12]
 800566c:	e014      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800566e:	bf00      	nop
 8005670:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800567c:	d10c      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	3304      	adds	r3, #4
 8005682:	2101      	movs	r1, #1
 8005684:	4618      	mov	r0, r3
 8005686:	f000 f867 	bl	8005758 <RCCEx_PLLSAI1_Config>
 800568a:	4603      	mov	r3, r0
 800568c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800568e:	7cfb      	ldrb	r3, [r7, #19]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005694:	7cfb      	ldrb	r3, [r7, #19]
 8005696:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d02f      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056a4:	4b2b      	ldr	r3, [pc, #172]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056b2:	4928      	ldr	r1, [pc, #160]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056c2:	d10d      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3304      	adds	r3, #4
 80056c8:	2102      	movs	r1, #2
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 f844 	bl	8005758 <RCCEx_PLLSAI1_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056d4:	7cfb      	ldrb	r3, [r7, #19]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d014      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056da:	7cfb      	ldrb	r3, [r7, #19]
 80056dc:	74bb      	strb	r3, [r7, #18]
 80056de:	e011      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e8:	d10c      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3320      	adds	r3, #32
 80056ee:	2102      	movs	r1, #2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 f925 	bl	8005940 <RCCEx_PLLSAI2_Config>
 80056f6:	4603      	mov	r3, r0
 80056f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056fa:	7cfb      	ldrb	r3, [r7, #19]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005700:	7cfb      	ldrb	r3, [r7, #19]
 8005702:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005710:	4b10      	ldr	r3, [pc, #64]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005716:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800571e:	490d      	ldr	r1, [pc, #52]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005732:	4b08      	ldr	r3, [pc, #32]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005738:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005742:	4904      	ldr	r1, [pc, #16]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800574a:	7cbb      	ldrb	r3, [r7, #18]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000

08005758 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005766:	4b75      	ldr	r3, [pc, #468]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d018      	beq.n	80057a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005772:	4b72      	ldr	r3, [pc, #456]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f003 0203 	and.w	r2, r3, #3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d10d      	bne.n	800579e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
       ||
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800578a:	4b6c      	ldr	r3, [pc, #432]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	091b      	lsrs	r3, r3, #4
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
       ||
 800579a:	429a      	cmp	r2, r3
 800579c:	d047      	beq.n	800582e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	73fb      	strb	r3, [r7, #15]
 80057a2:	e044      	b.n	800582e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d018      	beq.n	80057de <RCCEx_PLLSAI1_Config+0x86>
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d825      	bhi.n	80057fc <RCCEx_PLLSAI1_Config+0xa4>
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d002      	beq.n	80057ba <RCCEx_PLLSAI1_Config+0x62>
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d009      	beq.n	80057cc <RCCEx_PLLSAI1_Config+0x74>
 80057b8:	e020      	b.n	80057fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057ba:	4b60      	ldr	r3, [pc, #384]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d11d      	bne.n	8005802 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ca:	e01a      	b.n	8005802 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057cc:	4b5b      	ldr	r3, [pc, #364]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d116      	bne.n	8005806 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057dc:	e013      	b.n	8005806 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057de:	4b57      	ldr	r3, [pc, #348]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10f      	bne.n	800580a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057ea:	4b54      	ldr	r3, [pc, #336]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d109      	bne.n	800580a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057fa:	e006      	b.n	800580a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005800:	e004      	b.n	800580c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005802:	bf00      	nop
 8005804:	e002      	b.n	800580c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005806:	bf00      	nop
 8005808:	e000      	b.n	800580c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800580a:	bf00      	nop
    }

    if(status == HAL_OK)
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10d      	bne.n	800582e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005812:	4b4a      	ldr	r3, [pc, #296]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6819      	ldr	r1, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	3b01      	subs	r3, #1
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	430b      	orrs	r3, r1
 8005828:	4944      	ldr	r1, [pc, #272]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 800582a:	4313      	orrs	r3, r2
 800582c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d17d      	bne.n	8005930 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005834:	4b41      	ldr	r3, [pc, #260]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a40      	ldr	r2, [pc, #256]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 800583a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800583e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005840:	f7fe faec 	bl	8003e1c <HAL_GetTick>
 8005844:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005846:	e009      	b.n	800585c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005848:	f7fe fae8 	bl	8003e1c <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d902      	bls.n	800585c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	73fb      	strb	r3, [r7, #15]
        break;
 800585a:	e005      	b.n	8005868 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800585c:	4b37      	ldr	r3, [pc, #220]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1ef      	bne.n	8005848 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d160      	bne.n	8005930 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d111      	bne.n	8005898 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005874:	4b31      	ldr	r3, [pc, #196]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800587c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6892      	ldr	r2, [r2, #8]
 8005884:	0211      	lsls	r1, r2, #8
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68d2      	ldr	r2, [r2, #12]
 800588a:	0912      	lsrs	r2, r2, #4
 800588c:	0452      	lsls	r2, r2, #17
 800588e:	430a      	orrs	r2, r1
 8005890:	492a      	ldr	r1, [pc, #168]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005892:	4313      	orrs	r3, r2
 8005894:	610b      	str	r3, [r1, #16]
 8005896:	e027      	b.n	80058e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d112      	bne.n	80058c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800589e:	4b27      	ldr	r3, [pc, #156]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80058a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6892      	ldr	r2, [r2, #8]
 80058ae:	0211      	lsls	r1, r2, #8
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6912      	ldr	r2, [r2, #16]
 80058b4:	0852      	lsrs	r2, r2, #1
 80058b6:	3a01      	subs	r2, #1
 80058b8:	0552      	lsls	r2, r2, #21
 80058ba:	430a      	orrs	r2, r1
 80058bc:	491f      	ldr	r1, [pc, #124]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	610b      	str	r3, [r1, #16]
 80058c2:	e011      	b.n	80058e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058c4:	4b1d      	ldr	r3, [pc, #116]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6892      	ldr	r2, [r2, #8]
 80058d4:	0211      	lsls	r1, r2, #8
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6952      	ldr	r2, [r2, #20]
 80058da:	0852      	lsrs	r2, r2, #1
 80058dc:	3a01      	subs	r2, #1
 80058de:	0652      	lsls	r2, r2, #25
 80058e0:	430a      	orrs	r2, r1
 80058e2:	4916      	ldr	r1, [pc, #88]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a13      	ldr	r2, [pc, #76]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f4:	f7fe fa92 	bl	8003e1c <HAL_GetTick>
 80058f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058fa:	e009      	b.n	8005910 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058fc:	f7fe fa8e 	bl	8003e1c <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d902      	bls.n	8005910 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	73fb      	strb	r3, [r7, #15]
          break;
 800590e:	e005      	b.n	800591c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005910:	4b0a      	ldr	r3, [pc, #40]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0ef      	beq.n	80058fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	4904      	ldr	r1, [pc, #16]	; (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 800592c:	4313      	orrs	r3, r2
 800592e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005930:	7bfb      	ldrb	r3, [r7, #15]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	40021000 	.word	0x40021000

08005940 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800594e:	4b6a      	ldr	r3, [pc, #424]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d018      	beq.n	800598c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800595a:	4b67      	ldr	r3, [pc, #412]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f003 0203 	and.w	r2, r3, #3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d10d      	bne.n	8005986 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
       ||
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005972:	4b61      	ldr	r3, [pc, #388]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	091b      	lsrs	r3, r3, #4
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
       ||
 8005982:	429a      	cmp	r2, r3
 8005984:	d047      	beq.n	8005a16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	73fb      	strb	r3, [r7, #15]
 800598a:	e044      	b.n	8005a16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b03      	cmp	r3, #3
 8005992:	d018      	beq.n	80059c6 <RCCEx_PLLSAI2_Config+0x86>
 8005994:	2b03      	cmp	r3, #3
 8005996:	d825      	bhi.n	80059e4 <RCCEx_PLLSAI2_Config+0xa4>
 8005998:	2b01      	cmp	r3, #1
 800599a:	d002      	beq.n	80059a2 <RCCEx_PLLSAI2_Config+0x62>
 800599c:	2b02      	cmp	r3, #2
 800599e:	d009      	beq.n	80059b4 <RCCEx_PLLSAI2_Config+0x74>
 80059a0:	e020      	b.n	80059e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059a2:	4b55      	ldr	r3, [pc, #340]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d11d      	bne.n	80059ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b2:	e01a      	b.n	80059ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059b4:	4b50      	ldr	r3, [pc, #320]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d116      	bne.n	80059ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059c4:	e013      	b.n	80059ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059c6:	4b4c      	ldr	r3, [pc, #304]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10f      	bne.n	80059f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059d2:	4b49      	ldr	r3, [pc, #292]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059e2:	e006      	b.n	80059f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	73fb      	strb	r3, [r7, #15]
      break;
 80059e8:	e004      	b.n	80059f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059ea:	bf00      	nop
 80059ec:	e002      	b.n	80059f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059ee:	bf00      	nop
 80059f0:	e000      	b.n	80059f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10d      	bne.n	8005a16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059fa:	4b3f      	ldr	r3, [pc, #252]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6819      	ldr	r1, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	4939      	ldr	r1, [pc, #228]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d167      	bne.n	8005aec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a1c:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a35      	ldr	r2, [pc, #212]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a28:	f7fe f9f8 	bl	8003e1c <HAL_GetTick>
 8005a2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a2e:	e009      	b.n	8005a44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a30:	f7fe f9f4 	bl	8003e1c <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d902      	bls.n	8005a44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	73fb      	strb	r3, [r7, #15]
        break;
 8005a42:	e005      	b.n	8005a50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a44:	4b2c      	ldr	r3, [pc, #176]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1ef      	bne.n	8005a30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d14a      	bne.n	8005aec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d111      	bne.n	8005a80 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a5c:	4b26      	ldr	r3, [pc, #152]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6892      	ldr	r2, [r2, #8]
 8005a6c:	0211      	lsls	r1, r2, #8
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	68d2      	ldr	r2, [r2, #12]
 8005a72:	0912      	lsrs	r2, r2, #4
 8005a74:	0452      	lsls	r2, r2, #17
 8005a76:	430a      	orrs	r2, r1
 8005a78:	491f      	ldr	r1, [pc, #124]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	614b      	str	r3, [r1, #20]
 8005a7e:	e011      	b.n	8005aa4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a80:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6892      	ldr	r2, [r2, #8]
 8005a90:	0211      	lsls	r1, r2, #8
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6912      	ldr	r2, [r2, #16]
 8005a96:	0852      	lsrs	r2, r2, #1
 8005a98:	3a01      	subs	r2, #1
 8005a9a:	0652      	lsls	r2, r2, #25
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	4916      	ldr	r1, [pc, #88]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005aa4:	4b14      	ldr	r3, [pc, #80]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a13      	ldr	r2, [pc, #76]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab0:	f7fe f9b4 	bl	8003e1c <HAL_GetTick>
 8005ab4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ab6:	e009      	b.n	8005acc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ab8:	f7fe f9b0 	bl	8003e1c <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d902      	bls.n	8005acc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	73fb      	strb	r3, [r7, #15]
          break;
 8005aca:	e005      	b.n	8005ad8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005acc:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0ef      	beq.n	8005ab8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d106      	bne.n	8005aec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005ade:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae0:	695a      	ldr	r2, [r3, #20]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	4904      	ldr	r1, [pc, #16]	; (8005af8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40021000 	.word	0x40021000

08005afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e095      	b.n	8005c3a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d108      	bne.n	8005b28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b1e:	d009      	beq.n	8005b34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	61da      	str	r2, [r3, #28]
 8005b26:	e005      	b.n	8005b34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fb fad8 	bl	8001104 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b74:	d902      	bls.n	8005b7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	e002      	b.n	8005b82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b8a:	d007      	beq.n	8005b9c <HAL_SPI_Init+0xa0>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b94:	d002      	beq.n	8005b9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bde:	ea42 0103 	orr.w	r1, r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	0c1b      	lsrs	r3, r3, #16
 8005bf8:	f003 0204 	and.w	r2, r3, #4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c18:	ea42 0103 	orr.w	r1, r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b088      	sub	sp, #32
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	603b      	str	r3, [r7, #0]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_SPI_Transmit+0x22>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e158      	b.n	8005f16 <HAL_SPI_Transmit+0x2d4>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c6c:	f7fe f8d6 	bl	8003e1c <HAL_GetTick>
 8005c70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c72:	88fb      	ldrh	r3, [r7, #6]
 8005c74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d002      	beq.n	8005c88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c82:	2302      	movs	r3, #2
 8005c84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c86:	e13d      	b.n	8005f04 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_SPI_Transmit+0x52>
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d102      	bne.n	8005c9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c98:	e134      	b.n	8005f04 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2203      	movs	r2, #3
 8005c9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	88fa      	ldrh	r2, [r7, #6]
 8005cb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	88fa      	ldrh	r2, [r7, #6]
 8005cb8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce4:	d10f      	bne.n	8005d06 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d10:	2b40      	cmp	r3, #64	; 0x40
 8005d12:	d007      	beq.n	8005d24 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d2c:	d94b      	bls.n	8005dc6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <HAL_SPI_Transmit+0xfa>
 8005d36:	8afb      	ldrh	r3, [r7, #22]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d13e      	bne.n	8005dba <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	881a      	ldrh	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4c:	1c9a      	adds	r2, r3, #2
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d60:	e02b      	b.n	8005dba <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d112      	bne.n	8005d96 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	881a      	ldrh	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	1c9a      	adds	r2, r3, #2
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d94:	e011      	b.n	8005dba <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d96:	f7fe f841 	bl	8003e1c <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d803      	bhi.n	8005dae <HAL_SPI_Transmit+0x16c>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dac:	d102      	bne.n	8005db4 <HAL_SPI_Transmit+0x172>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d102      	bne.n	8005dba <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005db8:	e0a4      	b.n	8005f04 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1ce      	bne.n	8005d62 <HAL_SPI_Transmit+0x120>
 8005dc4:	e07c      	b.n	8005ec0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_SPI_Transmit+0x192>
 8005dce:	8afb      	ldrh	r3, [r7, #22]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d170      	bne.n	8005eb6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d912      	bls.n	8005e04 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	881a      	ldrh	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	1c9a      	adds	r2, r3, #2
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b02      	subs	r3, #2
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e02:	e058      	b.n	8005eb6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	7812      	ldrb	r2, [r2, #0]
 8005e10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e2a:	e044      	b.n	8005eb6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d12b      	bne.n	8005e92 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d912      	bls.n	8005e6a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	881a      	ldrh	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	1c9a      	adds	r2, r3, #2
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	3b02      	subs	r3, #2
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e68:	e025      	b.n	8005eb6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	330c      	adds	r3, #12
 8005e74:	7812      	ldrb	r2, [r2, #0]
 8005e76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e90:	e011      	b.n	8005eb6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e92:	f7fd ffc3 	bl	8003e1c <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d803      	bhi.n	8005eaa <HAL_SPI_Transmit+0x268>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea8:	d102      	bne.n	8005eb0 <HAL_SPI_Transmit+0x26e>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005eb4:	e026      	b.n	8005f04 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1b5      	bne.n	8005e2c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 fce3 	bl	8006890 <SPI_EndRxTxTransaction>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ede:	2300      	movs	r3, #0
 8005ee0:	613b      	str	r3, [r7, #16]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	e000      	b.n	8005f04 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005f02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b088      	sub	sp, #32
 8005f22:	af02      	add	r7, sp, #8
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	603b      	str	r3, [r7, #0]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f3a:	d112      	bne.n	8005f62 <HAL_SPI_Receive+0x44>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10e      	bne.n	8005f62 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2204      	movs	r2, #4
 8005f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f4c:	88fa      	ldrh	r2, [r7, #6]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	4613      	mov	r3, r2
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f910 	bl	800617e <HAL_SPI_TransmitReceive>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	e109      	b.n	8006176 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_SPI_Receive+0x52>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e102      	b.n	8006176 <HAL_SPI_Receive+0x258>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f78:	f7fd ff50 	bl	8003e1c <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d002      	beq.n	8005f90 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f8e:	e0e9      	b.n	8006164 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <HAL_SPI_Receive+0x7e>
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d102      	bne.n	8005fa2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fa0:	e0e0      	b.n	8006164 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2204      	movs	r2, #4
 8005fa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	88fa      	ldrh	r2, [r7, #6]
 8005fba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	88fa      	ldrh	r2, [r7, #6]
 8005fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fec:	d908      	bls.n	8006000 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ffc:	605a      	str	r2, [r3, #4]
 8005ffe:	e007      	b.n	8006010 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800600e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006018:	d10f      	bne.n	800603a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006028:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006038:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006044:	2b40      	cmp	r3, #64	; 0x40
 8006046:	d007      	beq.n	8006058 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006056:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006060:	d867      	bhi.n	8006132 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006062:	e030      	b.n	80060c6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b01      	cmp	r3, #1
 8006070:	d117      	bne.n	80060a2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f103 020c 	add.w	r2, r3, #12
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	7812      	ldrb	r2, [r2, #0]
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80060a0:	e011      	b.n	80060c6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060a2:	f7fd febb 	bl	8003e1c <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d803      	bhi.n	80060ba <HAL_SPI_Receive+0x19c>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060b8:	d102      	bne.n	80060c0 <HAL_SPI_Receive+0x1a2>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d102      	bne.n	80060c6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060c4:	e04e      	b.n	8006164 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1c8      	bne.n	8006064 <HAL_SPI_Receive+0x146>
 80060d2:	e034      	b.n	800613e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d115      	bne.n	800610e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	b292      	uxth	r2, r2
 80060ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f4:	1c9a      	adds	r2, r3, #2
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800610c:	e011      	b.n	8006132 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800610e:	f7fd fe85 	bl	8003e1c <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d803      	bhi.n	8006126 <HAL_SPI_Receive+0x208>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006124:	d102      	bne.n	800612c <HAL_SPI_Receive+0x20e>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006130:	e018      	b.n	8006164 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1ca      	bne.n	80060d4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 fb4c 	bl	80067e0 <SPI_EndRxTransaction>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2220      	movs	r2, #32
 8006152:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	75fb      	strb	r3, [r7, #23]
 8006160:	e000      	b.n	8006164 <HAL_SPI_Receive+0x246>
  }

error :
 8006162:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006174:	7dfb      	ldrb	r3, [r7, #23]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b08a      	sub	sp, #40	; 0x28
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
 800618a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800618c:	2301      	movs	r3, #1
 800618e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_SPI_TransmitReceive+0x26>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e1fb      	b.n	800659c <HAL_SPI_TransmitReceive+0x41e>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061ac:	f7fd fe36 	bl	8003e1c <HAL_GetTick>
 80061b0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061b8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80061c0:	887b      	ldrh	r3, [r7, #2]
 80061c2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80061c4:	887b      	ldrh	r3, [r7, #2]
 80061c6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061c8:	7efb      	ldrb	r3, [r7, #27]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d00e      	beq.n	80061ec <HAL_SPI_TransmitReceive+0x6e>
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061d4:	d106      	bne.n	80061e4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d102      	bne.n	80061e4 <HAL_SPI_TransmitReceive+0x66>
 80061de:	7efb      	ldrb	r3, [r7, #27]
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d003      	beq.n	80061ec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80061e4:	2302      	movs	r3, #2
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80061ea:	e1cd      	b.n	8006588 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_SPI_TransmitReceive+0x80>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <HAL_SPI_TransmitReceive+0x80>
 80061f8:	887b      	ldrh	r3, [r7, #2]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d103      	bne.n	8006206 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006204:	e1c0      	b.n	8006588 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b04      	cmp	r3, #4
 8006210:	d003      	beq.n	800621a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2205      	movs	r2, #5
 8006216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	887a      	ldrh	r2, [r7, #2]
 800622a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	887a      	ldrh	r2, [r7, #2]
 8006232:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	887a      	ldrh	r2, [r7, #2]
 8006240:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	887a      	ldrh	r2, [r7, #2]
 8006246:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800625c:	d802      	bhi.n	8006264 <HAL_SPI_TransmitReceive+0xe6>
 800625e:	8a3b      	ldrh	r3, [r7, #16]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d908      	bls.n	8006276 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006272:	605a      	str	r2, [r3, #4]
 8006274:	e007      	b.n	8006286 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006284:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b40      	cmp	r3, #64	; 0x40
 8006292:	d007      	beq.n	80062a4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062ac:	d97c      	bls.n	80063a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_SPI_TransmitReceive+0x13e>
 80062b6:	8a7b      	ldrh	r3, [r7, #18]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d169      	bne.n	8006390 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	881a      	ldrh	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	1c9a      	adds	r2, r3, #2
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062e0:	e056      	b.n	8006390 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d11b      	bne.n	8006328 <HAL_SPI_TransmitReceive+0x1aa>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d016      	beq.n	8006328 <HAL_SPI_TransmitReceive+0x1aa>
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d113      	bne.n	8006328 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	881a      	ldrh	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	1c9a      	adds	r2, r3, #2
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b01      	cmp	r3, #1
 8006334:	d11c      	bne.n	8006370 <HAL_SPI_TransmitReceive+0x1f2>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800633c:	b29b      	uxth	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d016      	beq.n	8006370 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	b292      	uxth	r2, r2
 800634e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	1c9a      	adds	r2, r3, #2
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800636c:	2301      	movs	r3, #1
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006370:	f7fd fd54 	bl	8003e1c <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637c:	429a      	cmp	r2, r3
 800637e:	d807      	bhi.n	8006390 <HAL_SPI_TransmitReceive+0x212>
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006386:	d003      	beq.n	8006390 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800638e:	e0fb      	b.n	8006588 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1a3      	bne.n	80062e2 <HAL_SPI_TransmitReceive+0x164>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d19d      	bne.n	80062e2 <HAL_SPI_TransmitReceive+0x164>
 80063a6:	e0df      	b.n	8006568 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_SPI_TransmitReceive+0x23a>
 80063b0:	8a7b      	ldrh	r3, [r7, #18]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	f040 80cb 	bne.w	800654e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d912      	bls.n	80063e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c6:	881a      	ldrh	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d2:	1c9a      	adds	r2, r3, #2
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3b02      	subs	r3, #2
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063e6:	e0b2      	b.n	800654e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330c      	adds	r3, #12
 80063f2:	7812      	ldrb	r2, [r2, #0]
 80063f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800640e:	e09e      	b.n	800654e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b02      	cmp	r3, #2
 800641c:	d134      	bne.n	8006488 <HAL_SPI_TransmitReceive+0x30a>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006422:	b29b      	uxth	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d02f      	beq.n	8006488 <HAL_SPI_TransmitReceive+0x30a>
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	2b01      	cmp	r3, #1
 800642c:	d12c      	bne.n	8006488 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006432:	b29b      	uxth	r3, r3
 8006434:	2b01      	cmp	r3, #1
 8006436:	d912      	bls.n	800645e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	881a      	ldrh	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	1c9a      	adds	r2, r3, #2
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006452:	b29b      	uxth	r3, r3
 8006454:	3b02      	subs	r3, #2
 8006456:	b29a      	uxth	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800645c:	e012      	b.n	8006484 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	330c      	adds	r3, #12
 8006468:	7812      	ldrb	r2, [r2, #0]
 800646a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647a:	b29b      	uxth	r3, r3
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b01      	cmp	r3, #1
 8006494:	d148      	bne.n	8006528 <HAL_SPI_TransmitReceive+0x3aa>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d042      	beq.n	8006528 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d923      	bls.n	80064f6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	b292      	uxth	r2, r2
 80064ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	1c9a      	adds	r2, r3, #2
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	3b02      	subs	r3, #2
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064de:	b29b      	uxth	r3, r3
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d81f      	bhi.n	8006524 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064f2:	605a      	str	r2, [r3, #4]
 80064f4:	e016      	b.n	8006524 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f103 020c 	add.w	r2, r3, #12
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	7812      	ldrb	r2, [r2, #0]
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006524:	2301      	movs	r3, #1
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006528:	f7fd fc78 	bl	8003e1c <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006534:	429a      	cmp	r2, r3
 8006536:	d803      	bhi.n	8006540 <HAL_SPI_TransmitReceive+0x3c2>
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800653e:	d102      	bne.n	8006546 <HAL_SPI_TransmitReceive+0x3c8>
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800654c:	e01c      	b.n	8006588 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006552:	b29b      	uxth	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	f47f af5b 	bne.w	8006410 <HAL_SPI_TransmitReceive+0x292>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006560:	b29b      	uxth	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	f47f af54 	bne.w	8006410 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006568:	69fa      	ldr	r2, [r7, #28]
 800656a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 f98f 	bl	8006890 <SPI_EndRxTxTransaction>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d006      	beq.n	8006586 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2220      	movs	r2, #32
 8006582:	661a      	str	r2, [r3, #96]	; 0x60
 8006584:	e000      	b.n	8006588 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006586:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006598:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800659c:	4618      	mov	r0, r3
 800659e:	3728      	adds	r7, #40	; 0x28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	4613      	mov	r3, r2
 80065b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065b4:	f7fd fc32 	bl	8003e1c <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	1a9b      	subs	r3, r3, r2
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	4413      	add	r3, r2
 80065c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065c4:	f7fd fc2a 	bl	8003e1c <HAL_GetTick>
 80065c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065ca:	4b39      	ldr	r3, [pc, #228]	; (80066b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	015b      	lsls	r3, r3, #5
 80065d0:	0d1b      	lsrs	r3, r3, #20
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	fb02 f303 	mul.w	r3, r2, r3
 80065d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065da:	e054      	b.n	8006686 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e2:	d050      	beq.n	8006686 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065e4:	f7fd fc1a 	bl	8003e1c <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	69fa      	ldr	r2, [r7, #28]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d902      	bls.n	80065fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d13d      	bne.n	8006676 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006608:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006612:	d111      	bne.n	8006638 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800661c:	d004      	beq.n	8006628 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006626:	d107      	bne.n	8006638 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006636:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006640:	d10f      	bne.n	8006662 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006660:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e017      	b.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	3b01      	subs	r3, #1
 8006684:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	4013      	ands	r3, r2
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	429a      	cmp	r2, r3
 8006694:	bf0c      	ite	eq
 8006696:	2301      	moveq	r3, #1
 8006698:	2300      	movne	r3, #0
 800669a:	b2db      	uxtb	r3, r3
 800669c:	461a      	mov	r2, r3
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d19b      	bne.n	80065dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3720      	adds	r7, #32
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20000068 	.word	0x20000068

080066b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08a      	sub	sp, #40	; 0x28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066c6:	f7fd fba9 	bl	8003e1c <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	1a9b      	subs	r3, r3, r2
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	4413      	add	r3, r2
 80066d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80066d6:	f7fd fba1 	bl	8003e1c <HAL_GetTick>
 80066da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	330c      	adds	r3, #12
 80066e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80066e4:	4b3d      	ldr	r3, [pc, #244]	; (80067dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	00da      	lsls	r2, r3, #3
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	0d1b      	lsrs	r3, r3, #20
 80066f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f6:	fb02 f303 	mul.w	r3, r2, r3
 80066fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80066fc:	e060      	b.n	80067c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006704:	d107      	bne.n	8006716 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	b2db      	uxtb	r3, r3
 8006712:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006714:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800671c:	d050      	beq.n	80067c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800671e:	f7fd fb7d 	bl	8003e1c <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672a:	429a      	cmp	r2, r3
 800672c:	d902      	bls.n	8006734 <SPI_WaitFifoStateUntilTimeout+0x80>
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	d13d      	bne.n	80067b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006742:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800674c:	d111      	bne.n	8006772 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006756:	d004      	beq.n	8006762 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006760:	d107      	bne.n	8006772 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006770:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800677a:	d10f      	bne.n	800679c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800679a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e010      	b.n	80067d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	3b01      	subs	r3, #1
 80067be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689a      	ldr	r2, [r3, #8]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	4013      	ands	r3, r2
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d196      	bne.n	80066fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3728      	adds	r7, #40	; 0x28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000068 	.word	0x20000068

080067e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067f4:	d111      	bne.n	800681a <SPI_EndRxTransaction+0x3a>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fe:	d004      	beq.n	800680a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006808:	d107      	bne.n	800681a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006818:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2200      	movs	r2, #0
 8006822:	2180      	movs	r1, #128	; 0x80
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f7ff febd 	bl	80065a4 <SPI_WaitFlagStateUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d007      	beq.n	8006840 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006834:	f043 0220 	orr.w	r2, r3, #32
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e023      	b.n	8006888 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006848:	d11d      	bne.n	8006886 <SPI_EndRxTransaction+0xa6>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006852:	d004      	beq.n	800685e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685c:	d113      	bne.n	8006886 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2200      	movs	r2, #0
 8006866:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7ff ff22 	bl	80066b4 <SPI_WaitFifoStateUntilTimeout>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d007      	beq.n	8006886 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800687a:	f043 0220 	orr.w	r2, r3, #32
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e000      	b.n	8006888 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af02      	add	r7, sp, #8
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7ff ff03 	bl	80066b4 <SPI_WaitFifoStateUntilTimeout>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d007      	beq.n	80068c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b8:	f043 0220 	orr.w	r2, r3, #32
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e027      	b.n	8006914 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2200      	movs	r2, #0
 80068cc:	2180      	movs	r1, #128	; 0x80
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f7ff fe68 	bl	80065a4 <SPI_WaitFlagStateUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d007      	beq.n	80068ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068de:	f043 0220 	orr.w	r2, r3, #32
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e014      	b.n	8006914 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7ff fedc 	bl	80066b4 <SPI_WaitFifoStateUntilTimeout>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d007      	beq.n	8006912 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006906:	f043 0220 	orr.w	r2, r3, #32
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e000      	b.n	8006914 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e049      	b.n	80069c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f841 	bl	80069ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3304      	adds	r3, #4
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f000 f9f8 	bl	8006d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
	...

080069e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d001      	beq.n	80069f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e04f      	b.n	8006a98 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0201 	orr.w	r2, r2, #1
 8006a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a23      	ldr	r2, [pc, #140]	; (8006aa4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d01d      	beq.n	8006a56 <HAL_TIM_Base_Start_IT+0x76>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a22:	d018      	beq.n	8006a56 <HAL_TIM_Base_Start_IT+0x76>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1f      	ldr	r2, [pc, #124]	; (8006aa8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d013      	beq.n	8006a56 <HAL_TIM_Base_Start_IT+0x76>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1e      	ldr	r2, [pc, #120]	; (8006aac <HAL_TIM_Base_Start_IT+0xcc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00e      	beq.n	8006a56 <HAL_TIM_Base_Start_IT+0x76>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1c      	ldr	r2, [pc, #112]	; (8006ab0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d009      	beq.n	8006a56 <HAL_TIM_Base_Start_IT+0x76>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1b      	ldr	r2, [pc, #108]	; (8006ab4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d004      	beq.n	8006a56 <HAL_TIM_Base_Start_IT+0x76>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a19      	ldr	r2, [pc, #100]	; (8006ab8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d115      	bne.n	8006a82 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	4b17      	ldr	r3, [pc, #92]	; (8006abc <HAL_TIM_Base_Start_IT+0xdc>)
 8006a5e:	4013      	ands	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b06      	cmp	r3, #6
 8006a66:	d015      	beq.n	8006a94 <HAL_TIM_Base_Start_IT+0xb4>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a6e:	d011      	beq.n	8006a94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0201 	orr.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a80:	e008      	b.n	8006a94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f042 0201 	orr.w	r2, r2, #1
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	e000      	b.n	8006a96 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	40012c00 	.word	0x40012c00
 8006aa8:	40000400 	.word	0x40000400
 8006aac:	40000800 	.word	0x40000800
 8006ab0:	40000c00 	.word	0x40000c00
 8006ab4:	40013400 	.word	0x40013400
 8006ab8:	40014000 	.word	0x40014000
 8006abc:	00010007 	.word	0x00010007

08006ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d122      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d11b      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0202 	mvn.w	r2, #2
 8006aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f905 	bl	8006d12 <HAL_TIM_IC_CaptureCallback>
 8006b08:	e005      	b.n	8006b16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f8f7 	bl	8006cfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f908 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d122      	bne.n	8006b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d11b      	bne.n	8006b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f06f 0204 	mvn.w	r2, #4
 8006b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2202      	movs	r2, #2
 8006b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f8db 	bl	8006d12 <HAL_TIM_IC_CaptureCallback>
 8006b5c:	e005      	b.n	8006b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f8cd 	bl	8006cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f8de 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f003 0308 	and.w	r3, r3, #8
 8006b7a:	2b08      	cmp	r3, #8
 8006b7c:	d122      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f003 0308 	and.w	r3, r3, #8
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d11b      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0208 	mvn.w	r2, #8
 8006b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2204      	movs	r2, #4
 8006b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f8b1 	bl	8006d12 <HAL_TIM_IC_CaptureCallback>
 8006bb0:	e005      	b.n	8006bbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f8a3 	bl	8006cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f8b4 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0310 	and.w	r3, r3, #16
 8006bce:	2b10      	cmp	r3, #16
 8006bd0:	d122      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f003 0310 	and.w	r3, r3, #16
 8006bdc:	2b10      	cmp	r3, #16
 8006bde:	d11b      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0210 	mvn.w	r2, #16
 8006be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2208      	movs	r2, #8
 8006bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f887 	bl	8006d12 <HAL_TIM_IC_CaptureCallback>
 8006c04:	e005      	b.n	8006c12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f879 	bl	8006cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f88a 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10e      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d107      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f06f 0201 	mvn.w	r2, #1
 8006c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7fa fa0a 	bl	8001058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4e:	2b80      	cmp	r3, #128	; 0x80
 8006c50:	d10e      	bne.n	8006c70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5c:	2b80      	cmp	r3, #128	; 0x80
 8006c5e:	d107      	bne.n	8006c70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f914 	bl	8006e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7e:	d10e      	bne.n	8006c9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8a:	2b80      	cmp	r3, #128	; 0x80
 8006c8c:	d107      	bne.n	8006c9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f907 	bl	8006eac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca8:	2b40      	cmp	r3, #64	; 0x40
 8006caa:	d10e      	bne.n	8006cca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb6:	2b40      	cmp	r3, #64	; 0x40
 8006cb8:	d107      	bne.n	8006cca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f838 	bl	8006d3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	d10e      	bne.n	8006cf6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	d107      	bne.n	8006cf6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f06f 0220 	mvn.w	r2, #32
 8006cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f8c7 	bl	8006e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cf6:	bf00      	nop
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
	...

08006d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a40      	ldr	r2, [pc, #256]	; (8006e64 <TIM_Base_SetConfig+0x114>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d013      	beq.n	8006d90 <TIM_Base_SetConfig+0x40>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6e:	d00f      	beq.n	8006d90 <TIM_Base_SetConfig+0x40>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a3d      	ldr	r2, [pc, #244]	; (8006e68 <TIM_Base_SetConfig+0x118>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00b      	beq.n	8006d90 <TIM_Base_SetConfig+0x40>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a3c      	ldr	r2, [pc, #240]	; (8006e6c <TIM_Base_SetConfig+0x11c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d007      	beq.n	8006d90 <TIM_Base_SetConfig+0x40>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a3b      	ldr	r2, [pc, #236]	; (8006e70 <TIM_Base_SetConfig+0x120>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d003      	beq.n	8006d90 <TIM_Base_SetConfig+0x40>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a3a      	ldr	r2, [pc, #232]	; (8006e74 <TIM_Base_SetConfig+0x124>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d108      	bne.n	8006da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a2f      	ldr	r2, [pc, #188]	; (8006e64 <TIM_Base_SetConfig+0x114>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d01f      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db0:	d01b      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a2c      	ldr	r2, [pc, #176]	; (8006e68 <TIM_Base_SetConfig+0x118>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d017      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a2b      	ldr	r2, [pc, #172]	; (8006e6c <TIM_Base_SetConfig+0x11c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d013      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a2a      	ldr	r2, [pc, #168]	; (8006e70 <TIM_Base_SetConfig+0x120>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00f      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a29      	ldr	r2, [pc, #164]	; (8006e74 <TIM_Base_SetConfig+0x124>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00b      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a28      	ldr	r2, [pc, #160]	; (8006e78 <TIM_Base_SetConfig+0x128>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a27      	ldr	r2, [pc, #156]	; (8006e7c <TIM_Base_SetConfig+0x12c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d003      	beq.n	8006dea <TIM_Base_SetConfig+0x9a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a26      	ldr	r2, [pc, #152]	; (8006e80 <TIM_Base_SetConfig+0x130>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d108      	bne.n	8006dfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a10      	ldr	r2, [pc, #64]	; (8006e64 <TIM_Base_SetConfig+0x114>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00f      	beq.n	8006e48 <TIM_Base_SetConfig+0xf8>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a12      	ldr	r2, [pc, #72]	; (8006e74 <TIM_Base_SetConfig+0x124>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00b      	beq.n	8006e48 <TIM_Base_SetConfig+0xf8>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a11      	ldr	r2, [pc, #68]	; (8006e78 <TIM_Base_SetConfig+0x128>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d007      	beq.n	8006e48 <TIM_Base_SetConfig+0xf8>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a10      	ldr	r2, [pc, #64]	; (8006e7c <TIM_Base_SetConfig+0x12c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <TIM_Base_SetConfig+0xf8>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a0f      	ldr	r2, [pc, #60]	; (8006e80 <TIM_Base_SetConfig+0x130>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d103      	bne.n	8006e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	615a      	str	r2, [r3, #20]
}
 8006e56:	bf00      	nop
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	40012c00 	.word	0x40012c00
 8006e68:	40000400 	.word	0x40000400
 8006e6c:	40000800 	.word	0x40000800
 8006e70:	40000c00 	.word	0x40000c00
 8006e74:	40013400 	.word	0x40013400
 8006e78:	40014000 	.word	0x40014000
 8006e7c:	40014400 	.word	0x40014400
 8006e80:	40014800 	.word	0x40014800

08006e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e040      	b.n	8006f54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d106      	bne.n	8006ee8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7fa fb6e 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2224      	movs	r2, #36	; 0x24
 8006eec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0201 	bic.w	r2, r2, #1
 8006efc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f8c0 	bl	8007084 <UART_SetConfig>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d101      	bne.n	8006f0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e022      	b.n	8006f54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fb6c 	bl	80075f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689a      	ldr	r2, [r3, #8]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0201 	orr.w	r2, r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fbf3 	bl	8007738 <UART_CheckIdleState>
 8006f52:	4603      	mov	r3, r0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08a      	sub	sp, #40	; 0x28
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	603b      	str	r3, [r7, #0]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	f040 8082 	bne.w	800707a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <HAL_UART_Transmit+0x26>
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e07a      	b.n	800707c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_UART_Transmit+0x38>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e073      	b.n	800707c <HAL_UART_Transmit+0x120>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2221      	movs	r2, #33	; 0x21
 8006fa8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006faa:	f7fc ff37 	bl	8003e1c <HAL_GetTick>
 8006fae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	88fa      	ldrh	r2, [r7, #6]
 8006fb4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	88fa      	ldrh	r2, [r7, #6]
 8006fbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc8:	d108      	bne.n	8006fdc <HAL_UART_Transmit+0x80>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d104      	bne.n	8006fdc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	61bb      	str	r3, [r7, #24]
 8006fda:	e003      	b.n	8006fe4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006fec:	e02d      	b.n	800704a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2180      	movs	r1, #128	; 0x80
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 fbe6 	bl	80077ca <UART_WaitOnFlagUntilTimeout>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e039      	b.n	800707c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10b      	bne.n	8007026 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	881a      	ldrh	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800701a:	b292      	uxth	r2, r2
 800701c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	3302      	adds	r3, #2
 8007022:	61bb      	str	r3, [r7, #24]
 8007024:	e008      	b.n	8007038 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	781a      	ldrb	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	b292      	uxth	r2, r2
 8007030:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	3301      	adds	r3, #1
 8007036:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b29a      	uxth	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007050:	b29b      	uxth	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1cb      	bne.n	8006fee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2200      	movs	r2, #0
 800705e:	2140      	movs	r1, #64	; 0x40
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 fbb2 	bl	80077ca <UART_WaitOnFlagUntilTimeout>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e005      	b.n	800707c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2220      	movs	r2, #32
 8007074:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	e000      	b.n	800707c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800707a:	2302      	movs	r3, #2
  }
}
 800707c:	4618      	mov	r0, r3
 800707e:	3720      	adds	r7, #32
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007088:	b08a      	sub	sp, #40	; 0x28
 800708a:	af00      	add	r7, sp, #0
 800708c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	431a      	orrs	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4ba4      	ldr	r3, [pc, #656]	; (8007344 <UART_SetConfig+0x2c0>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	6812      	ldr	r2, [r2, #0]
 80070ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070bc:	430b      	orrs	r3, r1
 80070be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a99      	ldr	r2, [pc, #612]	; (8007348 <UART_SetConfig+0x2c4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ec:	4313      	orrs	r3, r2
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007100:	430a      	orrs	r2, r1
 8007102:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a90      	ldr	r2, [pc, #576]	; (800734c <UART_SetConfig+0x2c8>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d126      	bne.n	800715c <UART_SetConfig+0xd8>
 800710e:	4b90      	ldr	r3, [pc, #576]	; (8007350 <UART_SetConfig+0x2cc>)
 8007110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007114:	f003 0303 	and.w	r3, r3, #3
 8007118:	2b03      	cmp	r3, #3
 800711a:	d81b      	bhi.n	8007154 <UART_SetConfig+0xd0>
 800711c:	a201      	add	r2, pc, #4	; (adr r2, 8007124 <UART_SetConfig+0xa0>)
 800711e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007122:	bf00      	nop
 8007124:	08007135 	.word	0x08007135
 8007128:	08007145 	.word	0x08007145
 800712c:	0800713d 	.word	0x0800713d
 8007130:	0800714d 	.word	0x0800714d
 8007134:	2301      	movs	r3, #1
 8007136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800713a:	e116      	b.n	800736a <UART_SetConfig+0x2e6>
 800713c:	2302      	movs	r3, #2
 800713e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007142:	e112      	b.n	800736a <UART_SetConfig+0x2e6>
 8007144:	2304      	movs	r3, #4
 8007146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800714a:	e10e      	b.n	800736a <UART_SetConfig+0x2e6>
 800714c:	2308      	movs	r3, #8
 800714e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007152:	e10a      	b.n	800736a <UART_SetConfig+0x2e6>
 8007154:	2310      	movs	r3, #16
 8007156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800715a:	e106      	b.n	800736a <UART_SetConfig+0x2e6>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a7c      	ldr	r2, [pc, #496]	; (8007354 <UART_SetConfig+0x2d0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d138      	bne.n	80071d8 <UART_SetConfig+0x154>
 8007166:	4b7a      	ldr	r3, [pc, #488]	; (8007350 <UART_SetConfig+0x2cc>)
 8007168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716c:	f003 030c 	and.w	r3, r3, #12
 8007170:	2b0c      	cmp	r3, #12
 8007172:	d82d      	bhi.n	80071d0 <UART_SetConfig+0x14c>
 8007174:	a201      	add	r2, pc, #4	; (adr r2, 800717c <UART_SetConfig+0xf8>)
 8007176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717a:	bf00      	nop
 800717c:	080071b1 	.word	0x080071b1
 8007180:	080071d1 	.word	0x080071d1
 8007184:	080071d1 	.word	0x080071d1
 8007188:	080071d1 	.word	0x080071d1
 800718c:	080071c1 	.word	0x080071c1
 8007190:	080071d1 	.word	0x080071d1
 8007194:	080071d1 	.word	0x080071d1
 8007198:	080071d1 	.word	0x080071d1
 800719c:	080071b9 	.word	0x080071b9
 80071a0:	080071d1 	.word	0x080071d1
 80071a4:	080071d1 	.word	0x080071d1
 80071a8:	080071d1 	.word	0x080071d1
 80071ac:	080071c9 	.word	0x080071c9
 80071b0:	2300      	movs	r3, #0
 80071b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071b6:	e0d8      	b.n	800736a <UART_SetConfig+0x2e6>
 80071b8:	2302      	movs	r3, #2
 80071ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071be:	e0d4      	b.n	800736a <UART_SetConfig+0x2e6>
 80071c0:	2304      	movs	r3, #4
 80071c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071c6:	e0d0      	b.n	800736a <UART_SetConfig+0x2e6>
 80071c8:	2308      	movs	r3, #8
 80071ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ce:	e0cc      	b.n	800736a <UART_SetConfig+0x2e6>
 80071d0:	2310      	movs	r3, #16
 80071d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071d6:	e0c8      	b.n	800736a <UART_SetConfig+0x2e6>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a5e      	ldr	r2, [pc, #376]	; (8007358 <UART_SetConfig+0x2d4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d125      	bne.n	800722e <UART_SetConfig+0x1aa>
 80071e2:	4b5b      	ldr	r3, [pc, #364]	; (8007350 <UART_SetConfig+0x2cc>)
 80071e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071ec:	2b30      	cmp	r3, #48	; 0x30
 80071ee:	d016      	beq.n	800721e <UART_SetConfig+0x19a>
 80071f0:	2b30      	cmp	r3, #48	; 0x30
 80071f2:	d818      	bhi.n	8007226 <UART_SetConfig+0x1a2>
 80071f4:	2b20      	cmp	r3, #32
 80071f6:	d00a      	beq.n	800720e <UART_SetConfig+0x18a>
 80071f8:	2b20      	cmp	r3, #32
 80071fa:	d814      	bhi.n	8007226 <UART_SetConfig+0x1a2>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <UART_SetConfig+0x182>
 8007200:	2b10      	cmp	r3, #16
 8007202:	d008      	beq.n	8007216 <UART_SetConfig+0x192>
 8007204:	e00f      	b.n	8007226 <UART_SetConfig+0x1a2>
 8007206:	2300      	movs	r3, #0
 8007208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800720c:	e0ad      	b.n	800736a <UART_SetConfig+0x2e6>
 800720e:	2302      	movs	r3, #2
 8007210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007214:	e0a9      	b.n	800736a <UART_SetConfig+0x2e6>
 8007216:	2304      	movs	r3, #4
 8007218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800721c:	e0a5      	b.n	800736a <UART_SetConfig+0x2e6>
 800721e:	2308      	movs	r3, #8
 8007220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007224:	e0a1      	b.n	800736a <UART_SetConfig+0x2e6>
 8007226:	2310      	movs	r3, #16
 8007228:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800722c:	e09d      	b.n	800736a <UART_SetConfig+0x2e6>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a4a      	ldr	r2, [pc, #296]	; (800735c <UART_SetConfig+0x2d8>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d125      	bne.n	8007284 <UART_SetConfig+0x200>
 8007238:	4b45      	ldr	r3, [pc, #276]	; (8007350 <UART_SetConfig+0x2cc>)
 800723a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007242:	2bc0      	cmp	r3, #192	; 0xc0
 8007244:	d016      	beq.n	8007274 <UART_SetConfig+0x1f0>
 8007246:	2bc0      	cmp	r3, #192	; 0xc0
 8007248:	d818      	bhi.n	800727c <UART_SetConfig+0x1f8>
 800724a:	2b80      	cmp	r3, #128	; 0x80
 800724c:	d00a      	beq.n	8007264 <UART_SetConfig+0x1e0>
 800724e:	2b80      	cmp	r3, #128	; 0x80
 8007250:	d814      	bhi.n	800727c <UART_SetConfig+0x1f8>
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <UART_SetConfig+0x1d8>
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d008      	beq.n	800726c <UART_SetConfig+0x1e8>
 800725a:	e00f      	b.n	800727c <UART_SetConfig+0x1f8>
 800725c:	2300      	movs	r3, #0
 800725e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007262:	e082      	b.n	800736a <UART_SetConfig+0x2e6>
 8007264:	2302      	movs	r3, #2
 8007266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800726a:	e07e      	b.n	800736a <UART_SetConfig+0x2e6>
 800726c:	2304      	movs	r3, #4
 800726e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007272:	e07a      	b.n	800736a <UART_SetConfig+0x2e6>
 8007274:	2308      	movs	r3, #8
 8007276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800727a:	e076      	b.n	800736a <UART_SetConfig+0x2e6>
 800727c:	2310      	movs	r3, #16
 800727e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007282:	e072      	b.n	800736a <UART_SetConfig+0x2e6>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a35      	ldr	r2, [pc, #212]	; (8007360 <UART_SetConfig+0x2dc>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d12a      	bne.n	80072e4 <UART_SetConfig+0x260>
 800728e:	4b30      	ldr	r3, [pc, #192]	; (8007350 <UART_SetConfig+0x2cc>)
 8007290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800729c:	d01a      	beq.n	80072d4 <UART_SetConfig+0x250>
 800729e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a2:	d81b      	bhi.n	80072dc <UART_SetConfig+0x258>
 80072a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a8:	d00c      	beq.n	80072c4 <UART_SetConfig+0x240>
 80072aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ae:	d815      	bhi.n	80072dc <UART_SetConfig+0x258>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <UART_SetConfig+0x238>
 80072b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b8:	d008      	beq.n	80072cc <UART_SetConfig+0x248>
 80072ba:	e00f      	b.n	80072dc <UART_SetConfig+0x258>
 80072bc:	2300      	movs	r3, #0
 80072be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072c2:	e052      	b.n	800736a <UART_SetConfig+0x2e6>
 80072c4:	2302      	movs	r3, #2
 80072c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ca:	e04e      	b.n	800736a <UART_SetConfig+0x2e6>
 80072cc:	2304      	movs	r3, #4
 80072ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072d2:	e04a      	b.n	800736a <UART_SetConfig+0x2e6>
 80072d4:	2308      	movs	r3, #8
 80072d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072da:	e046      	b.n	800736a <UART_SetConfig+0x2e6>
 80072dc:	2310      	movs	r3, #16
 80072de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072e2:	e042      	b.n	800736a <UART_SetConfig+0x2e6>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a17      	ldr	r2, [pc, #92]	; (8007348 <UART_SetConfig+0x2c4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d13a      	bne.n	8007364 <UART_SetConfig+0x2e0>
 80072ee:	4b18      	ldr	r3, [pc, #96]	; (8007350 <UART_SetConfig+0x2cc>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072fc:	d01a      	beq.n	8007334 <UART_SetConfig+0x2b0>
 80072fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007302:	d81b      	bhi.n	800733c <UART_SetConfig+0x2b8>
 8007304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007308:	d00c      	beq.n	8007324 <UART_SetConfig+0x2a0>
 800730a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730e:	d815      	bhi.n	800733c <UART_SetConfig+0x2b8>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <UART_SetConfig+0x298>
 8007314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007318:	d008      	beq.n	800732c <UART_SetConfig+0x2a8>
 800731a:	e00f      	b.n	800733c <UART_SetConfig+0x2b8>
 800731c:	2300      	movs	r3, #0
 800731e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007322:	e022      	b.n	800736a <UART_SetConfig+0x2e6>
 8007324:	2302      	movs	r3, #2
 8007326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800732a:	e01e      	b.n	800736a <UART_SetConfig+0x2e6>
 800732c:	2304      	movs	r3, #4
 800732e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007332:	e01a      	b.n	800736a <UART_SetConfig+0x2e6>
 8007334:	2308      	movs	r3, #8
 8007336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800733a:	e016      	b.n	800736a <UART_SetConfig+0x2e6>
 800733c:	2310      	movs	r3, #16
 800733e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007342:	e012      	b.n	800736a <UART_SetConfig+0x2e6>
 8007344:	efff69f3 	.word	0xefff69f3
 8007348:	40008000 	.word	0x40008000
 800734c:	40013800 	.word	0x40013800
 8007350:	40021000 	.word	0x40021000
 8007354:	40004400 	.word	0x40004400
 8007358:	40004800 	.word	0x40004800
 800735c:	40004c00 	.word	0x40004c00
 8007360:	40005000 	.word	0x40005000
 8007364:	2310      	movs	r3, #16
 8007366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a9f      	ldr	r2, [pc, #636]	; (80075ec <UART_SetConfig+0x568>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d17a      	bne.n	800746a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007374:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007378:	2b08      	cmp	r3, #8
 800737a:	d824      	bhi.n	80073c6 <UART_SetConfig+0x342>
 800737c:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <UART_SetConfig+0x300>)
 800737e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007382:	bf00      	nop
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080073c7 	.word	0x080073c7
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073c7 	.word	0x080073c7
 8007394:	080073b7 	.word	0x080073b7
 8007398:	080073c7 	.word	0x080073c7
 800739c:	080073c7 	.word	0x080073c7
 80073a0:	080073c7 	.word	0x080073c7
 80073a4:	080073bf 	.word	0x080073bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073a8:	f7fd fe2e 	bl	8005008 <HAL_RCC_GetPCLK1Freq>
 80073ac:	61f8      	str	r0, [r7, #28]
        break;
 80073ae:	e010      	b.n	80073d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073b0:	4b8f      	ldr	r3, [pc, #572]	; (80075f0 <UART_SetConfig+0x56c>)
 80073b2:	61fb      	str	r3, [r7, #28]
        break;
 80073b4:	e00d      	b.n	80073d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073b6:	f7fd fd8f 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 80073ba:	61f8      	str	r0, [r7, #28]
        break;
 80073bc:	e009      	b.n	80073d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073c2:	61fb      	str	r3, [r7, #28]
        break;
 80073c4:	e005      	b.n	80073d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80073d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 80fb 	beq.w	80075d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	4613      	mov	r3, r2
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	4413      	add	r3, r2
 80073e4:	69fa      	ldr	r2, [r7, #28]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d305      	bcc.n	80073f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073f0:	69fa      	ldr	r2, [r7, #28]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d903      	bls.n	80073fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80073fc:	e0e8      	b.n	80075d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	2200      	movs	r2, #0
 8007402:	461c      	mov	r4, r3
 8007404:	4615      	mov	r5, r2
 8007406:	f04f 0200 	mov.w	r2, #0
 800740a:	f04f 0300 	mov.w	r3, #0
 800740e:	022b      	lsls	r3, r5, #8
 8007410:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007414:	0222      	lsls	r2, r4, #8
 8007416:	68f9      	ldr	r1, [r7, #12]
 8007418:	6849      	ldr	r1, [r1, #4]
 800741a:	0849      	lsrs	r1, r1, #1
 800741c:	2000      	movs	r0, #0
 800741e:	4688      	mov	r8, r1
 8007420:	4681      	mov	r9, r0
 8007422:	eb12 0a08 	adds.w	sl, r2, r8
 8007426:	eb43 0b09 	adc.w	fp, r3, r9
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	603b      	str	r3, [r7, #0]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007438:	4650      	mov	r0, sl
 800743a:	4659      	mov	r1, fp
 800743c:	f7f9 fabe 	bl	80009bc <__aeabi_uldivmod>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4613      	mov	r3, r2
 8007446:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800744e:	d308      	bcc.n	8007462 <UART_SetConfig+0x3de>
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007456:	d204      	bcs.n	8007462 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	60da      	str	r2, [r3, #12]
 8007460:	e0b6      	b.n	80075d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007468:	e0b2      	b.n	80075d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007472:	d15e      	bne.n	8007532 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007474:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007478:	2b08      	cmp	r3, #8
 800747a:	d828      	bhi.n	80074ce <UART_SetConfig+0x44a>
 800747c:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <UART_SetConfig+0x400>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	080074a9 	.word	0x080074a9
 8007488:	080074b1 	.word	0x080074b1
 800748c:	080074b9 	.word	0x080074b9
 8007490:	080074cf 	.word	0x080074cf
 8007494:	080074bf 	.word	0x080074bf
 8007498:	080074cf 	.word	0x080074cf
 800749c:	080074cf 	.word	0x080074cf
 80074a0:	080074cf 	.word	0x080074cf
 80074a4:	080074c7 	.word	0x080074c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a8:	f7fd fdae 	bl	8005008 <HAL_RCC_GetPCLK1Freq>
 80074ac:	61f8      	str	r0, [r7, #28]
        break;
 80074ae:	e014      	b.n	80074da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b0:	f7fd fdc0 	bl	8005034 <HAL_RCC_GetPCLK2Freq>
 80074b4:	61f8      	str	r0, [r7, #28]
        break;
 80074b6:	e010      	b.n	80074da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074b8:	4b4d      	ldr	r3, [pc, #308]	; (80075f0 <UART_SetConfig+0x56c>)
 80074ba:	61fb      	str	r3, [r7, #28]
        break;
 80074bc:	e00d      	b.n	80074da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074be:	f7fd fd0b 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 80074c2:	61f8      	str	r0, [r7, #28]
        break;
 80074c4:	e009      	b.n	80074da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ca:	61fb      	str	r3, [r7, #28]
        break;
 80074cc:	e005      	b.n	80074da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80074d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d077      	beq.n	80075d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	005a      	lsls	r2, r3, #1
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	085b      	lsrs	r3, r3, #1
 80074ea:	441a      	add	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	2b0f      	cmp	r3, #15
 80074fa:	d916      	bls.n	800752a <UART_SetConfig+0x4a6>
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007502:	d212      	bcs.n	800752a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	b29b      	uxth	r3, r3
 8007508:	f023 030f 	bic.w	r3, r3, #15
 800750c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	085b      	lsrs	r3, r3, #1
 8007512:	b29b      	uxth	r3, r3
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	b29a      	uxth	r2, r3
 800751a:	8afb      	ldrh	r3, [r7, #22]
 800751c:	4313      	orrs	r3, r2
 800751e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	8afa      	ldrh	r2, [r7, #22]
 8007526:	60da      	str	r2, [r3, #12]
 8007528:	e052      	b.n	80075d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007530:	e04e      	b.n	80075d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007532:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007536:	2b08      	cmp	r3, #8
 8007538:	d827      	bhi.n	800758a <UART_SetConfig+0x506>
 800753a:	a201      	add	r2, pc, #4	; (adr r2, 8007540 <UART_SetConfig+0x4bc>)
 800753c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007540:	08007565 	.word	0x08007565
 8007544:	0800756d 	.word	0x0800756d
 8007548:	08007575 	.word	0x08007575
 800754c:	0800758b 	.word	0x0800758b
 8007550:	0800757b 	.word	0x0800757b
 8007554:	0800758b 	.word	0x0800758b
 8007558:	0800758b 	.word	0x0800758b
 800755c:	0800758b 	.word	0x0800758b
 8007560:	08007583 	.word	0x08007583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007564:	f7fd fd50 	bl	8005008 <HAL_RCC_GetPCLK1Freq>
 8007568:	61f8      	str	r0, [r7, #28]
        break;
 800756a:	e014      	b.n	8007596 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800756c:	f7fd fd62 	bl	8005034 <HAL_RCC_GetPCLK2Freq>
 8007570:	61f8      	str	r0, [r7, #28]
        break;
 8007572:	e010      	b.n	8007596 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007574:	4b1e      	ldr	r3, [pc, #120]	; (80075f0 <UART_SetConfig+0x56c>)
 8007576:	61fb      	str	r3, [r7, #28]
        break;
 8007578:	e00d      	b.n	8007596 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800757a:	f7fd fcad 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 800757e:	61f8      	str	r0, [r7, #28]
        break;
 8007580:	e009      	b.n	8007596 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007586:	61fb      	str	r3, [r7, #28]
        break;
 8007588:	e005      	b.n	8007596 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007594:	bf00      	nop
    }

    if (pclk != 0U)
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d019      	beq.n	80075d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	085a      	lsrs	r2, r3, #1
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	441a      	add	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b0f      	cmp	r3, #15
 80075b4:	d909      	bls.n	80075ca <UART_SetConfig+0x546>
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075bc:	d205      	bcs.n	80075ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	60da      	str	r2, [r3, #12]
 80075c8:	e002      	b.n	80075d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80075dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3728      	adds	r7, #40	; 0x28
 80075e4:	46bd      	mov	sp, r7
 80075e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ea:	bf00      	nop
 80075ec:	40008000 	.word	0x40008000
 80075f0:	00f42400 	.word	0x00f42400

080075f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	f003 0308 	and.w	r3, r3, #8
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	f003 0310 	and.w	r3, r3, #16
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00a      	beq.n	80076a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	f003 0320 	and.w	r3, r3, #32
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d01a      	beq.n	800770a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076f2:	d10a      	bne.n	800770a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00a      	beq.n	800772c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	605a      	str	r2, [r3, #4]
  }
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af02      	add	r7, sp, #8
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007748:	f7fc fb68 	bl	8003e1c <HAL_GetTick>
 800774c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b08      	cmp	r3, #8
 800775a:	d10e      	bne.n	800777a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800775c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f82d 	bl	80077ca <UART_WaitOnFlagUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e023      	b.n	80077c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	2b04      	cmp	r3, #4
 8007786:	d10e      	bne.n	80077a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f817 	bl	80077ca <UART_WaitOnFlagUntilTimeout>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e00d      	b.n	80077c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2220      	movs	r2, #32
 80077aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b09c      	sub	sp, #112	; 0x70
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	603b      	str	r3, [r7, #0]
 80077d6:	4613      	mov	r3, r2
 80077d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077da:	e0a5      	b.n	8007928 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077e2:	f000 80a1 	beq.w	8007928 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e6:	f7fc fb19 	bl	8003e1c <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d302      	bcc.n	80077fc <UART_WaitOnFlagUntilTimeout+0x32>
 80077f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d13e      	bne.n	800787a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007804:	e853 3f00 	ldrex	r3, [r3]
 8007808:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800780a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007810:	667b      	str	r3, [r7, #100]	; 0x64
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800781a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800781c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007820:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e6      	bne.n	80077fc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3308      	adds	r3, #8
 8007834:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007840:	f023 0301 	bic.w	r3, r3, #1
 8007844:	663b      	str	r3, [r7, #96]	; 0x60
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800784e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007850:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800785c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e5      	bne.n	800782e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2220      	movs	r2, #32
 8007866:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2220      	movs	r2, #32
 800786c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e067      	b.n	800794a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	d04f      	beq.n	8007928 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007896:	d147      	bne.n	8007928 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078a0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c0:	637b      	str	r3, [r7, #52]	; 0x34
 80078c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e6      	bne.n	80078a2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3308      	adds	r3, #8
 80078da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	613b      	str	r3, [r7, #16]
   return(result);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f023 0301 	bic.w	r3, r3, #1
 80078ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3308      	adds	r3, #8
 80078f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078f4:	623a      	str	r2, [r7, #32]
 80078f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	69f9      	ldr	r1, [r7, #28]
 80078fa:	6a3a      	ldr	r2, [r7, #32]
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	61bb      	str	r3, [r7, #24]
   return(result);
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e5      	bne.n	80078d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2220      	movs	r2, #32
 800790c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2220      	movs	r2, #32
 8007912:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2220      	movs	r2, #32
 8007918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e010      	b.n	800794a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69da      	ldr	r2, [r3, #28]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	4013      	ands	r3, r2
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	429a      	cmp	r2, r3
 8007936:	bf0c      	ite	eq
 8007938:	2301      	moveq	r3, #1
 800793a:	2300      	movne	r3, #0
 800793c:	b2db      	uxtb	r3, r3
 800793e:	461a      	mov	r2, r3
 8007940:	79fb      	ldrb	r3, [r7, #7]
 8007942:	429a      	cmp	r2, r3
 8007944:	f43f af4a 	beq.w	80077dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3770      	adds	r7, #112	; 0x70
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
	...

08007954 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007958:	4b05      	ldr	r3, [pc, #20]	; (8007970 <SysTick_Handler+0x1c>)
 800795a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800795c:	f000 f996 	bl	8007c8c <xTaskGetSchedulerState>
 8007960:	4603      	mov	r3, r0
 8007962:	2b01      	cmp	r3, #1
 8007964:	d001      	beq.n	800796a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007966:	f000 f9ff 	bl	8007d68 <xPortSysTickHandler>
  }
}
 800796a:	bf00      	nop
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	e000e010 	.word	0xe000e010

08007974 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	601a      	str	r2, [r3, #0]
}
 80079b0:	bf00      	nop
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	6892      	ldr	r2, [r2, #8]
 80079d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	6852      	ldr	r2, [r2, #4]
 80079dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d103      	bne.n	80079f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	1e5a      	subs	r2, r3, #1
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a16:	2300      	movs	r3, #0
 8007a18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a1a:	4b4f      	ldr	r3, [pc, #316]	; (8007b58 <xTaskIncrementTick+0x148>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f040 808f 	bne.w	8007b42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a24:	4b4d      	ldr	r3, [pc, #308]	; (8007b5c <xTaskIncrementTick+0x14c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a2c:	4a4b      	ldr	r2, [pc, #300]	; (8007b5c <xTaskIncrementTick+0x14c>)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d120      	bne.n	8007a7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a38:	4b49      	ldr	r3, [pc, #292]	; (8007b60 <xTaskIncrementTick+0x150>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a54:	bf00      	nop
 8007a56:	e7fe      	b.n	8007a56 <xTaskIncrementTick+0x46>
 8007a58:	4b41      	ldr	r3, [pc, #260]	; (8007b60 <xTaskIncrementTick+0x150>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	4b41      	ldr	r3, [pc, #260]	; (8007b64 <xTaskIncrementTick+0x154>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a3f      	ldr	r2, [pc, #252]	; (8007b60 <xTaskIncrementTick+0x150>)
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	4a3f      	ldr	r2, [pc, #252]	; (8007b64 <xTaskIncrementTick+0x154>)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	4b3e      	ldr	r3, [pc, #248]	; (8007b68 <xTaskIncrementTick+0x158>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3301      	adds	r3, #1
 8007a72:	4a3d      	ldr	r2, [pc, #244]	; (8007b68 <xTaskIncrementTick+0x158>)
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	f000 f8e9 	bl	8007c4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a7a:	4b3c      	ldr	r3, [pc, #240]	; (8007b6c <xTaskIncrementTick+0x15c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d349      	bcc.n	8007b18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a84:	4b36      	ldr	r3, [pc, #216]	; (8007b60 <xTaskIncrementTick+0x150>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d104      	bne.n	8007a98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a8e:	4b37      	ldr	r3, [pc, #220]	; (8007b6c <xTaskIncrementTick+0x15c>)
 8007a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a94:	601a      	str	r2, [r3, #0]
					break;
 8007a96:	e03f      	b.n	8007b18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a98:	4b31      	ldr	r3, [pc, #196]	; (8007b60 <xTaskIncrementTick+0x150>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d203      	bcs.n	8007ab8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ab0:	4a2e      	ldr	r2, [pc, #184]	; (8007b6c <xTaskIncrementTick+0x15c>)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ab6:	e02f      	b.n	8007b18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7ff ff7d 	bl	80079bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d004      	beq.n	8007ad4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	3318      	adds	r3, #24
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff ff74 	bl	80079bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad8:	4b25      	ldr	r3, [pc, #148]	; (8007b70 <xTaskIncrementTick+0x160>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d903      	bls.n	8007ae8 <xTaskIncrementTick+0xd8>
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	4a22      	ldr	r2, [pc, #136]	; (8007b70 <xTaskIncrementTick+0x160>)
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4a1f      	ldr	r2, [pc, #124]	; (8007b74 <xTaskIncrementTick+0x164>)
 8007af6:	441a      	add	r2, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	3304      	adds	r3, #4
 8007afc:	4619      	mov	r1, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	f7ff ff38 	bl	8007974 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b08:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <xTaskIncrementTick+0x168>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d3b8      	bcc.n	8007a84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b12:	2301      	movs	r3, #1
 8007b14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b16:	e7b5      	b.n	8007a84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b18:	4b17      	ldr	r3, [pc, #92]	; (8007b78 <xTaskIncrementTick+0x168>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1e:	4915      	ldr	r1, [pc, #84]	; (8007b74 <xTaskIncrementTick+0x164>)
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d901      	bls.n	8007b34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b30:	2301      	movs	r3, #1
 8007b32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b34:	4b11      	ldr	r3, [pc, #68]	; (8007b7c <xTaskIncrementTick+0x16c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d007      	beq.n	8007b4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	e004      	b.n	8007b4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b42:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <xTaskIncrementTick+0x170>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3301      	adds	r3, #1
 8007b48:	4a0d      	ldr	r2, [pc, #52]	; (8007b80 <xTaskIncrementTick+0x170>)
 8007b4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b4c:	697b      	ldr	r3, [r7, #20]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	200006d0 	.word	0x200006d0
 8007b5c:	200006b4 	.word	0x200006b4
 8007b60:	200006ac 	.word	0x200006ac
 8007b64:	200006b0 	.word	0x200006b0
 8007b68:	200006c8 	.word	0x200006c8
 8007b6c:	200006cc 	.word	0x200006cc
 8007b70:	200006b8 	.word	0x200006b8
 8007b74:	2000024c 	.word	0x2000024c
 8007b78:	20000248 	.word	0x20000248
 8007b7c:	200006c4 	.word	0x200006c4
 8007b80:	200006c0 	.word	0x200006c0

08007b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b8a:	4b2a      	ldr	r3, [pc, #168]	; (8007c34 <vTaskSwitchContext+0xb0>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b92:	4b29      	ldr	r3, [pc, #164]	; (8007c38 <vTaskSwitchContext+0xb4>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b98:	e046      	b.n	8007c28 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007b9a:	4b27      	ldr	r3, [pc, #156]	; (8007c38 <vTaskSwitchContext+0xb4>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba0:	4b26      	ldr	r3, [pc, #152]	; (8007c3c <vTaskSwitchContext+0xb8>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	e010      	b.n	8007bca <vTaskSwitchContext+0x46>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <vTaskSwitchContext+0x40>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	607b      	str	r3, [r7, #4]
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <vTaskSwitchContext+0x3e>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	491d      	ldr	r1, [pc, #116]	; (8007c40 <vTaskSwitchContext+0xbc>)
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	440b      	add	r3, r1
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0e4      	beq.n	8007ba8 <vTaskSwitchContext+0x24>
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4613      	mov	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4a15      	ldr	r2, [pc, #84]	; (8007c40 <vTaskSwitchContext+0xbc>)
 8007bea:	4413      	add	r3, r2
 8007bec:	60bb      	str	r3, [r7, #8]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	605a      	str	r2, [r3, #4]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	3308      	adds	r3, #8
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d104      	bne.n	8007c0e <vTaskSwitchContext+0x8a>
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	605a      	str	r2, [r3, #4]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	4a0b      	ldr	r2, [pc, #44]	; (8007c44 <vTaskSwitchContext+0xc0>)
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	4a08      	ldr	r2, [pc, #32]	; (8007c3c <vTaskSwitchContext+0xb8>)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c1e:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <vTaskSwitchContext+0xc0>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3354      	adds	r3, #84	; 0x54
 8007c24:	4a08      	ldr	r2, [pc, #32]	; (8007c48 <vTaskSwitchContext+0xc4>)
 8007c26:	6013      	str	r3, [r2, #0]
}
 8007c28:	bf00      	nop
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	200006d0 	.word	0x200006d0
 8007c38:	200006c4 	.word	0x200006c4
 8007c3c:	200006b8 	.word	0x200006b8
 8007c40:	2000024c 	.word	0x2000024c
 8007c44:	20000248 	.word	0x20000248
 8007c48:	2000007c 	.word	0x2000007c

08007c4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c52:	4b0c      	ldr	r3, [pc, #48]	; (8007c84 <prvResetNextTaskUnblockTime+0x38>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d104      	bne.n	8007c66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c5c:	4b0a      	ldr	r3, [pc, #40]	; (8007c88 <prvResetNextTaskUnblockTime+0x3c>)
 8007c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c64:	e008      	b.n	8007c78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c66:	4b07      	ldr	r3, [pc, #28]	; (8007c84 <prvResetNextTaskUnblockTime+0x38>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	4a04      	ldr	r2, [pc, #16]	; (8007c88 <prvResetNextTaskUnblockTime+0x3c>)
 8007c76:	6013      	str	r3, [r2, #0]
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	200006ac 	.word	0x200006ac
 8007c88:	200006cc 	.word	0x200006cc

08007c8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c92:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <xTaskGetSchedulerState+0x34>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d102      	bne.n	8007ca0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	607b      	str	r3, [r7, #4]
 8007c9e:	e008      	b.n	8007cb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ca0:	4b08      	ldr	r3, [pc, #32]	; (8007cc4 <xTaskGetSchedulerState+0x38>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d102      	bne.n	8007cae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ca8:	2302      	movs	r3, #2
 8007caa:	607b      	str	r3, [r7, #4]
 8007cac:	e001      	b.n	8007cb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cb2:	687b      	ldr	r3, [r7, #4]
	}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	200006bc 	.word	0x200006bc
 8007cc4:	200006d0 	.word	0x200006d0
	...

08007cd0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007cd0:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <pxCurrentTCBConst2>)
 8007cd2:	6819      	ldr	r1, [r3, #0]
 8007cd4:	6808      	ldr	r0, [r1, #0]
 8007cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cda:	f380 8809 	msr	PSP, r0
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f04f 0000 	mov.w	r0, #0
 8007ce6:	f380 8811 	msr	BASEPRI, r0
 8007cea:	4770      	bx	lr
 8007cec:	f3af 8000 	nop.w

08007cf0 <pxCurrentTCBConst2>:
 8007cf0:	20000248 	.word	0x20000248
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007cf4:	bf00      	nop
 8007cf6:	bf00      	nop
	...

08007d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d00:	f3ef 8009 	mrs	r0, PSP
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	4b15      	ldr	r3, [pc, #84]	; (8007d60 <pxCurrentTCBConst>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	f01e 0f10 	tst.w	lr, #16
 8007d10:	bf08      	it	eq
 8007d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1a:	6010      	str	r0, [r2, #0]
 8007d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d24:	f380 8811 	msr	BASEPRI, r0
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f7ff ff28 	bl	8007b84 <vTaskSwitchContext>
 8007d34:	f04f 0000 	mov.w	r0, #0
 8007d38:	f380 8811 	msr	BASEPRI, r0
 8007d3c:	bc09      	pop	{r0, r3}
 8007d3e:	6819      	ldr	r1, [r3, #0]
 8007d40:	6808      	ldr	r0, [r1, #0]
 8007d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d46:	f01e 0f10 	tst.w	lr, #16
 8007d4a:	bf08      	it	eq
 8007d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d50:	f380 8809 	msr	PSP, r0
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	f3af 8000 	nop.w

08007d60 <pxCurrentTCBConst>:
 8007d60:	20000248 	.word	0x20000248
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop

08007d68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	607b      	str	r3, [r7, #4]
}
 8007d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d82:	f7ff fe45 	bl	8007a10 <xTaskIncrementTick>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d8c:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <xPortSysTickHandler+0x40>)
 8007d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	2300      	movs	r3, #0
 8007d96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	e000ed04 	.word	0xe000ed04

08007dac <__libc_init_array>:
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	4d0d      	ldr	r5, [pc, #52]	; (8007de4 <__libc_init_array+0x38>)
 8007db0:	4c0d      	ldr	r4, [pc, #52]	; (8007de8 <__libc_init_array+0x3c>)
 8007db2:	1b64      	subs	r4, r4, r5
 8007db4:	10a4      	asrs	r4, r4, #2
 8007db6:	2600      	movs	r6, #0
 8007db8:	42a6      	cmp	r6, r4
 8007dba:	d109      	bne.n	8007dd0 <__libc_init_array+0x24>
 8007dbc:	4d0b      	ldr	r5, [pc, #44]	; (8007dec <__libc_init_array+0x40>)
 8007dbe:	4c0c      	ldr	r4, [pc, #48]	; (8007df0 <__libc_init_array+0x44>)
 8007dc0:	f000 f8c2 	bl	8007f48 <_init>
 8007dc4:	1b64      	subs	r4, r4, r5
 8007dc6:	10a4      	asrs	r4, r4, #2
 8007dc8:	2600      	movs	r6, #0
 8007dca:	42a6      	cmp	r6, r4
 8007dcc:	d105      	bne.n	8007dda <__libc_init_array+0x2e>
 8007dce:	bd70      	pop	{r4, r5, r6, pc}
 8007dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd4:	4798      	blx	r3
 8007dd6:	3601      	adds	r6, #1
 8007dd8:	e7ee      	b.n	8007db8 <__libc_init_array+0xc>
 8007dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dde:	4798      	blx	r3
 8007de0:	3601      	adds	r6, #1
 8007de2:	e7f2      	b.n	8007dca <__libc_init_array+0x1e>
 8007de4:	08008254 	.word	0x08008254
 8007de8:	08008254 	.word	0x08008254
 8007dec:	08008254 	.word	0x08008254
 8007df0:	08008258 	.word	0x08008258

08007df4 <__itoa>:
 8007df4:	1e93      	subs	r3, r2, #2
 8007df6:	2b22      	cmp	r3, #34	; 0x22
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	d904      	bls.n	8007e08 <__itoa+0x14>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	700b      	strb	r3, [r1, #0]
 8007e02:	461c      	mov	r4, r3
 8007e04:	4620      	mov	r0, r4
 8007e06:	bd10      	pop	{r4, pc}
 8007e08:	2a0a      	cmp	r2, #10
 8007e0a:	d109      	bne.n	8007e20 <__itoa+0x2c>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	da07      	bge.n	8007e20 <__itoa+0x2c>
 8007e10:	232d      	movs	r3, #45	; 0x2d
 8007e12:	700b      	strb	r3, [r1, #0]
 8007e14:	4240      	negs	r0, r0
 8007e16:	2101      	movs	r1, #1
 8007e18:	4421      	add	r1, r4
 8007e1a:	f000 f80d 	bl	8007e38 <__utoa>
 8007e1e:	e7f1      	b.n	8007e04 <__itoa+0x10>
 8007e20:	2100      	movs	r1, #0
 8007e22:	e7f9      	b.n	8007e18 <__itoa+0x24>

08007e24 <itoa>:
 8007e24:	f7ff bfe6 	b.w	8007df4 <__itoa>

08007e28 <memset>:
 8007e28:	4402      	add	r2, r0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d100      	bne.n	8007e32 <memset+0xa>
 8007e30:	4770      	bx	lr
 8007e32:	f803 1b01 	strb.w	r1, [r3], #1
 8007e36:	e7f9      	b.n	8007e2c <memset+0x4>

08007e38 <__utoa>:
 8007e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e3a:	4c1f      	ldr	r4, [pc, #124]	; (8007eb8 <__utoa+0x80>)
 8007e3c:	b08b      	sub	sp, #44	; 0x2c
 8007e3e:	4605      	mov	r5, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	466e      	mov	r6, sp
 8007e44:	f104 0c20 	add.w	ip, r4, #32
 8007e48:	6820      	ldr	r0, [r4, #0]
 8007e4a:	6861      	ldr	r1, [r4, #4]
 8007e4c:	4637      	mov	r7, r6
 8007e4e:	c703      	stmia	r7!, {r0, r1}
 8007e50:	3408      	adds	r4, #8
 8007e52:	4564      	cmp	r4, ip
 8007e54:	463e      	mov	r6, r7
 8007e56:	d1f7      	bne.n	8007e48 <__utoa+0x10>
 8007e58:	7921      	ldrb	r1, [r4, #4]
 8007e5a:	7139      	strb	r1, [r7, #4]
 8007e5c:	1e91      	subs	r1, r2, #2
 8007e5e:	6820      	ldr	r0, [r4, #0]
 8007e60:	6038      	str	r0, [r7, #0]
 8007e62:	2922      	cmp	r1, #34	; 0x22
 8007e64:	f04f 0100 	mov.w	r1, #0
 8007e68:	d904      	bls.n	8007e74 <__utoa+0x3c>
 8007e6a:	7019      	strb	r1, [r3, #0]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4618      	mov	r0, r3
 8007e70:	b00b      	add	sp, #44	; 0x2c
 8007e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e74:	1e58      	subs	r0, r3, #1
 8007e76:	4684      	mov	ip, r0
 8007e78:	fbb5 f7f2 	udiv	r7, r5, r2
 8007e7c:	fb02 5617 	mls	r6, r2, r7, r5
 8007e80:	3628      	adds	r6, #40	; 0x28
 8007e82:	446e      	add	r6, sp
 8007e84:	460c      	mov	r4, r1
 8007e86:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007e8a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007e8e:	462e      	mov	r6, r5
 8007e90:	42b2      	cmp	r2, r6
 8007e92:	f101 0101 	add.w	r1, r1, #1
 8007e96:	463d      	mov	r5, r7
 8007e98:	d9ee      	bls.n	8007e78 <__utoa+0x40>
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	545a      	strb	r2, [r3, r1]
 8007e9e:	1919      	adds	r1, r3, r4
 8007ea0:	1aa5      	subs	r5, r4, r2
 8007ea2:	42aa      	cmp	r2, r5
 8007ea4:	dae3      	bge.n	8007e6e <__utoa+0x36>
 8007ea6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007eaa:	780e      	ldrb	r6, [r1, #0]
 8007eac:	7006      	strb	r6, [r0, #0]
 8007eae:	3201      	adds	r2, #1
 8007eb0:	f801 5901 	strb.w	r5, [r1], #-1
 8007eb4:	e7f4      	b.n	8007ea0 <__utoa+0x68>
 8007eb6:	bf00      	nop
 8007eb8:	08008224 	.word	0x08008224

08007ebc <round>:
 8007ebc:	ec51 0b10 	vmov	r0, r1, d0
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8007ec6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8007eca:	2c13      	cmp	r4, #19
 8007ecc:	ee10 2a10 	vmov	r2, s0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	dc19      	bgt.n	8007f08 <round+0x4c>
 8007ed4:	2c00      	cmp	r4, #0
 8007ed6:	da09      	bge.n	8007eec <round+0x30>
 8007ed8:	3401      	adds	r4, #1
 8007eda:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007ede:	d103      	bne.n	8007ee8 <round+0x2c>
 8007ee0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007ee4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ee8:	2200      	movs	r2, #0
 8007eea:	e028      	b.n	8007f3e <round+0x82>
 8007eec:	4d15      	ldr	r5, [pc, #84]	; (8007f44 <round+0x88>)
 8007eee:	4125      	asrs	r5, r4
 8007ef0:	ea01 0605 	and.w	r6, r1, r5
 8007ef4:	4332      	orrs	r2, r6
 8007ef6:	d00e      	beq.n	8007f16 <round+0x5a>
 8007ef8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007efc:	fa42 f404 	asr.w	r4, r2, r4
 8007f00:	4423      	add	r3, r4
 8007f02:	ea23 0305 	bic.w	r3, r3, r5
 8007f06:	e7ef      	b.n	8007ee8 <round+0x2c>
 8007f08:	2c33      	cmp	r4, #51	; 0x33
 8007f0a:	dd07      	ble.n	8007f1c <round+0x60>
 8007f0c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007f10:	d101      	bne.n	8007f16 <round+0x5a>
 8007f12:	f7f8 f96b 	bl	80001ec <__adddf3>
 8007f16:	ec41 0b10 	vmov	d0, r0, r1
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8007f20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007f24:	40f5      	lsrs	r5, r6
 8007f26:	4228      	tst	r0, r5
 8007f28:	d0f5      	beq.n	8007f16 <round+0x5a>
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007f30:	fa01 f404 	lsl.w	r4, r1, r4
 8007f34:	1912      	adds	r2, r2, r4
 8007f36:	bf28      	it	cs
 8007f38:	185b      	addcs	r3, r3, r1
 8007f3a:	ea22 0205 	bic.w	r2, r2, r5
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4610      	mov	r0, r2
 8007f42:	e7e8      	b.n	8007f16 <round+0x5a>
 8007f44:	000fffff 	.word	0x000fffff

08007f48 <_init>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	bf00      	nop
 8007f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4e:	bc08      	pop	{r3}
 8007f50:	469e      	mov	lr, r3
 8007f52:	4770      	bx	lr

08007f54 <_fini>:
 8007f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f56:	bf00      	nop
 8007f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5a:	bc08      	pop	{r3}
 8007f5c:	469e      	mov	lr, r3
 8007f5e:	4770      	bx	lr
