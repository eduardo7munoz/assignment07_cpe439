
assignment07_cpe439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800cbcc  0800cbcc  0001cbcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d028  0800d028  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d028  0800d028  0001d028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d030  0800d030  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d030  0800d030  0001d030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d034  0800d034  0001d034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006de4  2000007c  0800d0b4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20006e60  0800d0b4  00026e60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000298ff  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d9a  00000000  00000000  000499ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023c0  00000000  00000000  0004f748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002138  00000000  00000000  00051b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f640  00000000  00000000  00053c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a908  00000000  00000000  00083280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011103c  00000000  00000000  000adb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bebc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cd8  00000000  00000000  001bec14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cbb4 	.word	0x0800cbb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800cbb4 	.word	0x0800cbb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <TX_task>:
People Node1;
Packets packetdata;
Packets gmpacket;

void TX_task(void *argument)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	packetdata.message[0] = 2;
 8000d68:	4b44      	ldr	r3, [pc, #272]	; (8000e7c <TX_task+0x11c>)
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	701a      	strb	r2, [r3, #0]


	size_t xBytesSent;
	UART_escapes("[2J");
 8000d6e:	4844      	ldr	r0, [pc, #272]	; (8000e80 <TX_task+0x120>)
 8000d70:	f001 f874 	bl	8001e5c <UART_escapes>
	uint8_t curraddress;
	xTXsem = xSemaphoreCreateBinary();
 8000d74:	2203      	movs	r2, #3
 8000d76:	2100      	movs	r1, #0
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f007 fced 	bl	8008758 <xQueueGenericCreate>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4a40      	ldr	r2, [pc, #256]	; (8000e84 <TX_task+0x124>)
 8000d82:	6013      	str	r3, [r2, #0]
	xPrintNodes = xSemaphoreCreateMutex();
 8000d84:	2001      	movs	r0, #1
 8000d86:	f007 fd5e 	bl	8008846 <xQueueCreateMutex>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a3e      	ldr	r2, [pc, #248]	; (8000e88 <TX_task+0x128>)
 8000d8e:	6013      	str	r3, [r2, #0]
	xTXorRX = xSemaphoreCreateBinary();
 8000d90:	2203      	movs	r2, #3
 8000d92:	2100      	movs	r1, #0
 8000d94:	2001      	movs	r0, #1
 8000d96:	f007 fcdf 	bl	8008758 <xQueueGenericCreate>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a3b      	ldr	r2, [pc, #236]	; (8000e8c <TX_task+0x12c>)
 8000d9e:	6013      	str	r3, [r2, #0]

    if( xTXsem != NULL && xPrintNodes != NULL)
 8000da0:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <TX_task+0x124>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d064      	beq.n	8000e72 <TX_task+0x112>
 8000da8:	4b37      	ldr	r3, [pc, #220]	; (8000e88 <TX_task+0x128>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d060      	beq.n	8000e72 <TX_task+0x112>
    {
		for(;;)
		{
			if(DMorGM==2)
 8000db0:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <TX_task+0x130>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d108      	bne.n	8000dca <TX_task+0x6a>
			{
				UART_print("DM to: 0x");
 8000db8:	4836      	ldr	r0, [pc, #216]	; (8000e94 <TX_task+0x134>)
 8000dba:	f000 ff3f 	bl	8001c3c <UART_print>
				UART_print(packetdata.address);
 8000dbe:	4836      	ldr	r0, [pc, #216]	; (8000e98 <TX_task+0x138>)
 8000dc0:	f000 ff3c 	bl	8001c3c <UART_print>
				DMorGM=0;
 8000dc4:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <TX_task+0x130>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]

			}

			if(xSemaphoreTake( xTXsem, ( TickType_t ) 100 ) == pdTRUE )
 8000dca:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <TX_task+0x124>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2164      	movs	r1, #100	; 0x64
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f008 f857 	bl	8008e84 <xQueueSemaphoreTake>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d1e9      	bne.n	8000db0 <TX_task+0x50>
			{

				do {

					/* Go to the ready state */
					if (g_xStatus.MC_STATE == MC_STATE_LOCK) {
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <TX_task+0x13c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b0f      	cmp	r3, #15
 8000de8:	d103      	bne.n	8000df2 <TX_task+0x92>
						SpiritCmdStrobeReady();
 8000dea:	2062      	movs	r0, #98	; 0x62
 8000dec:	f001 f95e 	bl	80020ac <SpiritCmdStrobeCommand>
 8000df0:	e002      	b.n	8000df8 <TX_task+0x98>
					} else {
						SpiritCmdStrobeSabort();
 8000df2:	2067      	movs	r0, #103	; 0x67
 8000df4:	f001 f95a 	bl	80020ac <SpiritCmdStrobeCommand>
					}

					/* Delay for state transition */
					for (volatile uint8_t i = 0; i != 0xFF; i++);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73bb      	strb	r3, [r7, #14]
 8000dfc:	e004      	b.n	8000e08 <TX_task+0xa8>
 8000dfe:	7bbb      	ldrb	r3, [r7, #14]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	3301      	adds	r3, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	73bb      	strb	r3, [r7, #14]
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2bff      	cmp	r3, #255	; 0xff
 8000e0e:	d1f6      	bne.n	8000dfe <TX_task+0x9e>

					/* Update the global status register variable */
					SpiritRefreshStatus();
 8000e10:	f003 faae 	bl	8004370 <SpiritRefreshStatus>

				} while (g_xStatus.MC_STATE != MC_STATE_READY);
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <TX_task+0x13c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d1dc      	bne.n	8000ddc <TX_task+0x7c>

//				vTaskSuspend(RXmessage_Handler);
//				if(xSemaphoreTake( xTXorRXmutex, ( TickType_t ) 100 ) == pdTRUE )
//				{
				sscanf(packetdata.address, "%x", &curraddress);
 8000e22:	f107 030f 	add.w	r3, r7, #15
 8000e26:	461a      	mov	r2, r3
 8000e28:	491d      	ldr	r1, [pc, #116]	; (8000ea0 <TX_task+0x140>)
 8000e2a:	481b      	ldr	r0, [pc, #108]	; (8000e98 <TX_task+0x138>)
 8000e2c:	f00b f928 	bl	800c080 <siscanf>
			    SpiritPktCommonSetDestinationAddress(curraddress);
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fd12 	bl	800285c <SpiritPktCommonSetDestinationAddress>

				xTxDoneFlag = READY;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <TX_task+0x144>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]

				// Send the payload
				SPSGRF_StartTx(packetdata.message, strlen(packetdata.message));
 8000e3e:	480f      	ldr	r0, [pc, #60]	; (8000e7c <TX_task+0x11c>)
 8000e40:	f7ff f9c6 	bl	80001d0 <strlen>
 8000e44:	4603      	mov	r3, r0
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480c      	ldr	r0, [pc, #48]	; (8000e7c <TX_task+0x11c>)
 8000e4c:	f000 fd00 	bl	8001850 <SPSGRF_StartTx>
				while(!xTxDoneFlag);
 8000e50:	bf00      	nop
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <TX_task+0x144>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0fb      	beq.n	8000e52 <TX_task+0xf2>
				UART_print("Message Sent\n\r");
 8000e5a:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <TX_task+0x148>)
 8000e5c:	f000 feee 	bl	8001c3c <UART_print>
				memset(&packetdata.message[1], '\0', PAYLOAD_SIZE-1);
 8000e60:	2263      	movs	r2, #99	; 0x63
 8000e62:	2100      	movs	r1, #0
 8000e64:	4811      	ldr	r0, [pc, #68]	; (8000eac <TX_task+0x14c>)
 8000e66:	f00a ffa9 	bl	800bdbc <memset>
				xRxDoneFlag = S_RESET;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <TX_task+0x150>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
			if(DMorGM==2)
 8000e70:	e79e      	b.n	8000db0 <TX_task+0x50>
			}

		}

    }
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000a8 	.word	0x200000a8
 8000e80:	0800cbcc 	.word	0x0800cbcc
 8000e84:	2000009c 	.word	0x2000009c
 8000e88:	200000a0 	.word	0x200000a0
 8000e8c:	200000a4 	.word	0x200000a4
 8000e90:	20000120 	.word	0x20000120
 8000e94:	0800cbd0 	.word	0x0800cbd0
 8000e98:	2000010c 	.word	0x2000010c
 8000e9c:	20000278 	.word	0x20000278
 8000ea0:	0800cbdc 	.word	0x0800cbdc
 8000ea4:	20000121 	.word	0x20000121
 8000ea8:	0800cbe0 	.word	0x0800cbe0
 8000eac:	200000a9 	.word	0x200000a9
 8000eb0:	20000124 	.word	0x20000124

08000eb4 <RX_task>:

void RX_task(void *argument)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b09d      	sub	sp, #116	; 0x74
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	xpayLoad = xMessageBufferCreate(PAYLOAD_SIZE);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2064      	movs	r0, #100	; 0x64
 8000ec2:	f008 fa71 	bl	80093a8 <xStreamBufferGenericCreate>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <RX_task+0x8c>)
 8000eca:	6013      	str	r3, [r2, #0]
//	if(xpayLoad!=NULL)
//	{
		size_t xBytesSent;
		volatile char payloadl[PAYLOAD_SIZE] = "";
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2260      	movs	r2, #96	; 0x60
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f00a ff6f 	bl	800bdbc <memset>
		for(;;)
		{



				xRxDoneFlag = READY;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <RX_task+0x90>)
 8000ee0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ee4:	601a      	str	r2, [r3, #0]
					SPSGRF_StartRx();
 8000ee6:	f000 fcd4 	bl	8001892 <SPSGRF_StartRx>

					while (xRxDoneFlag == READY);
 8000eea:	bf00      	nop
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <RX_task+0x90>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef4:	d0fa      	beq.n	8000eec <RX_task+0x38>

					if(xRxDoneFlag == RX_DATA_READY)
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <RX_task+0x90>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d1ef      	bne.n	8000ede <RX_task+0x2a>
					{
					SPSGRF_GetRxData(payloadl);
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fcce 	bl	80018a4 <SPSGRF_GetRxData>


					xBytesSent = xMessageBufferSend( xpayLoad,
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <RX_task+0x8c>)
 8000f0a:	681c      	ldr	r4, [r3, #0]
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff f95d 	bl	80001d0 <strlen>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f107 0108 	add.w	r1, r7, #8
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f008 fad0 	bl	80094c4 <xStreamBufferSend>
 8000f24:	66f8      	str	r0, [r7, #108]	; 0x6c
							( void * ) payloadl,
							strlen( payloadl), 100);

					if( xBytesSent != strlen( payloadl) )
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff f950 	bl	80001d0 <strlen>
					{
						/* The string could not be added to the message buffer because there was
		        not enough free space in the buffer. */
					}
					memset(payloadl, '\0', PAYLOAD_SIZE);
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f00a ff3f 	bl	800bdbc <memset>
				xRxDoneFlag = READY;
 8000f3e:	e7ce      	b.n	8000ede <RX_task+0x2a>
 8000f40:	20000098 	.word	0x20000098
 8000f44:	20000124 	.word	0x20000124

08000f48 <print_task>:
		}

}

void print_task(void *argument)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0a6      	sub	sp, #152	; 0x98
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	size_t xBytesReceived;
	char ucRxData[PAYLOAD_SIZE]={'\0'};
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	2260      	movs	r2, #96	; 0x60
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00a ff2d 	bl	800bdbc <memset>
	size_t xReceivedBytes;
	const TickType_t xBlockTime = pdMS_TO_TICKS( 20 );
 8000f62:	2314      	movs	r3, #20
 8000f64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	for(;;)
	{
		if(newaddressflag == 255)
 8000f68:	4b79      	ldr	r3, [pc, #484]	; (8001150 <print_task+0x208>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2bff      	cmp	r3, #255	; 0xff
 8000f6e:	d174      	bne.n	800105a <print_task+0x112>
		{
			if(xSemaphoreTake(xPrintNodes, ( TickType_t ) 100 ))
 8000f70:	4b78      	ldr	r3, [pc, #480]	; (8001154 <print_task+0x20c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2164      	movs	r1, #100	; 0x64
 8000f76:	4618      	mov	r0, r3
 8000f78:	f007 ff84 	bl	8008e84 <xQueueSemaphoreTake>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d06b      	beq.n	800105a <print_task+0x112>
			{
				uint8_t listnum = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			    char str[5];


				People *ptr = head;
 8000f88:	4b73      	ldr	r3, [pc, #460]	; (8001158 <print_task+0x210>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				while(ptr != NULL)
 8000f90:	e02a      	b.n	8000fe8 <print_task+0xa0>
				{
				    itoa(listnum, str, 10);
 8000f92:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000f96:	f107 0110 	add.w	r1, r7, #16
 8000f9a:	220a      	movs	r2, #10
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f00a fef3 	bl	800bd88 <itoa>
					UART_print(str);
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fe48 	bl	8001c3c <UART_print>
					UART_print(": ");
 8000fac:	486b      	ldr	r0, [pc, #428]	; (800115c <print_task+0x214>)
 8000fae:	f000 fe45 	bl	8001c3c <UART_print>
					UART_print(ptr->Name);
 8000fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fe3f 	bl	8001c3c <UART_print>
					UART_print(" at 0x");
 8000fbe:	4868      	ldr	r0, [pc, #416]	; (8001160 <print_task+0x218>)
 8000fc0:	f000 fe3c 	bl	8001c3c <UART_print>
					UART_print(ptr->address);
 8000fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fe37 	bl	8001c3c <UART_print>
					UART_print("\n\r");
 8000fce:	4865      	ldr	r0, [pc, #404]	; (8001164 <print_task+0x21c>)
 8000fd0:	f000 fe34 	bl	8001c3c <UART_print>
					ptr = ptr->next;
 8000fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					++listnum;
 8000fde:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				while(ptr != NULL)
 8000fe8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1d0      	bne.n	8000f92 <print_task+0x4a>
				}
				listnum = 1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				UART_print("Enter Desired Contact(1,2,or 3...):");
 8000ff6:	485c      	ldr	r0, [pc, #368]	; (8001168 <print_task+0x220>)
 8000ff8:	f000 fe20 	bl	8001c3c <UART_print>
				while(newaddressflag==255);
 8000ffc:	bf00      	nop
 8000ffe:	4b54      	ldr	r3, [pc, #336]	; (8001150 <print_task+0x208>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2bff      	cmp	r3, #255	; 0xff
 8001004:	d0fb      	beq.n	8000ffe <print_task+0xb6>
				uint8_t wantedaddr = atoi(packetdata.address);
 8001006:	4859      	ldr	r0, [pc, #356]	; (800116c <print_task+0x224>)
 8001008:	f00a fe78 	bl	800bcfc <atoi>
 800100c:	4603      	mov	r3, r0
 800100e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

				ptr = head;
 8001012:	4b51      	ldr	r3, [pc, #324]	; (8001158 <print_task+0x210>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

				do
				{
					ptr = ptr->next;
 800101a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800101e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001020:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					++listnum;
 8001024:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001028:	3301      	adds	r3, #1
 800102a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}while(listnum < wantedaddr);
 800102e:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001032:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001036:	429a      	cmp	r2, r3
 8001038:	d3ef      	bcc.n	800101a <print_task+0xd2>

				strcpy(packetdata.address, ptr->address);
 800103a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800103e:	4619      	mov	r1, r3
 8001040:	484a      	ldr	r0, [pc, #296]	; (800116c <print_task+0x224>)
 8001042:	f00b f84b 	bl	800c0dc <strcpy>

				xSemaphoreGive(xPrintNodes);
 8001046:	4b43      	ldr	r3, [pc, #268]	; (8001154 <print_task+0x20c>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	2300      	movs	r3, #0
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	f007 fc12 	bl	8008878 <xQueueGenericSend>
				newaddressflag = 0;
 8001054:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <print_task+0x208>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]

			}
		}

		memset(ucRxData, '\0', PAYLOAD_SIZE);
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	2264      	movs	r2, #100	; 0x64
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f00a feaa 	bl	800bdbc <memset>
		xReceivedBytes = xMessageBufferReceive( xpayLoad,
 8001068:	4b41      	ldr	r3, [pc, #260]	; (8001170 <print_task+0x228>)
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	f107 0118 	add.w	r1, r7, #24
 8001070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001074:	2264      	movs	r2, #100	; 0x64
 8001076:	f008 fb17 	bl	80096a8 <xStreamBufferReceive>
 800107a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		                                            ( void * ) ucRxData,
		                                            sizeof( ucRxData ),
		                                            xBlockTime );

		    if( xReceivedBytes > 0 && (ucRxData[0]==2))
 800107e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001082:	2b00      	cmp	r3, #0
 8001084:	d02a      	beq.n	80010dc <print_task+0x194>
 8001086:	7e3b      	ldrb	r3, [r7, #24]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d127      	bne.n	80010dc <print_task+0x194>
		    {
		    	if(ucRxData[0]==2) UART_print("DM from ");
 800108c:	7e3b      	ldrb	r3, [r7, #24]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d102      	bne.n	8001098 <print_task+0x150>
 8001092:	4838      	ldr	r0, [pc, #224]	; (8001174 <print_task+0x22c>)
 8001094:	f000 fdd2 	bl	8001c3c <UART_print>

		    	uint8_t sAddress = SpiritPktCommonGetReceivedSourceAddress();
 8001098:	f001 fbfa 	bl	8002890 <SpiritPktCommonGetReceivedSourceAddress>
 800109c:	4603      	mov	r3, r0
 800109e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		    	char sAddString[2];
		    	itoa(sAddress, sAddString, 16);
 80010a2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80010a6:	f107 010c 	add.w	r1, r7, #12
 80010aa:	2210      	movs	r2, #16
 80010ac:	4618      	mov	r0, r3
 80010ae:	f00a fe6b 	bl	800bd88 <itoa>
		    	UART_print("0x");
 80010b2:	4831      	ldr	r0, [pc, #196]	; (8001178 <print_task+0x230>)
 80010b4:	f000 fdc2 	bl	8001c3c <UART_print>
		    	UART_print(sAddString);
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fdbd 	bl	8001c3c <UART_print>
		    	UART_print(":");
 80010c2:	482e      	ldr	r0, [pc, #184]	; (800117c <print_task+0x234>)
 80010c4:	f000 fdba 	bl	8001c3c <UART_print>

		    	UART_print(&ucRxData[1]);
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	3301      	adds	r3, #1
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fdb4 	bl	8001c3c <UART_print>
		    	UART_print("\n");
 80010d4:	482a      	ldr	r0, [pc, #168]	; (8001180 <print_task+0x238>)
 80010d6:	f000 fdb1 	bl	8001c3c <UART_print>
		    {
 80010da:	e037      	b.n	800114c <print_task+0x204>
		    }
		    else if( xReceivedBytes > 0 &&ucRxData[0]==6)
 80010dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f43f af41 	beq.w	8000f68 <print_task+0x20>
 80010e6:	7e3b      	ldrb	r3, [r7, #24]
 80010e8:	2b06      	cmp	r3, #6
 80010ea:	f47f af3d 	bne.w	8000f68 <print_task+0x20>
		    {
		    	uint8_t sAddress = SpiritPktCommonGetReceivedSourceAddress();
 80010ee:	f001 fbcf 	bl	8002890 <SpiritPktCommonGetReceivedSourceAddress>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		    	char sAddString[2];
		    	itoa(sAddress, sAddString, 16);
 80010f8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80010fc:	f107 0108 	add.w	r1, r7, #8
 8001100:	2210      	movs	r2, #16
 8001102:	4618      	mov	r0, r3
 8001104:	f00a fe40 	bl	800bd88 <itoa>
		    	UART_print("New Node: ");
 8001108:	481e      	ldr	r0, [pc, #120]	; (8001184 <print_task+0x23c>)
 800110a:	f000 fd97 	bl	8001c3c <UART_print>
		    	UART_print(&ucRxData[1]);
 800110e:	f107 0318 	add.w	r3, r7, #24
 8001112:	3301      	adds	r3, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fd91 	bl	8001c3c <UART_print>
		    	ucRxData[strlen(&ucRxData[1])]='\0';
 800111a:	f107 0318 	add.w	r3, r7, #24
 800111e:	3301      	adds	r3, #1
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f855 	bl	80001d0 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	3398      	adds	r3, #152	; 0x98
 800112a:	443b      	add	r3, r7
 800112c:	2200      	movs	r2, #0
 800112e:	f803 2c80 	strb.w	r2, [r3, #-128]
		    	People *tempnode = CreateNode(sAddString,&ucRxData[1]);
 8001132:	f107 0318 	add.w	r3, r7, #24
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fa86 	bl	8001650 <CreateNode>
 8001144:	67f8      	str	r0, [r7, #124]	; 0x7c
		    	insertLast(tempnode);
 8001146:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001148:	f000 faa0 	bl	800168c <insertLast>
	{
 800114c:	e70c      	b.n	8000f68 <print_task+0x20>
 800114e:	bf00      	nop
 8001150:	2000026c 	.word	0x2000026c
 8001154:	200000a0 	.word	0x200000a0
 8001158:	20000190 	.word	0x20000190
 800115c:	0800cbf0 	.word	0x0800cbf0
 8001160:	0800cbf4 	.word	0x0800cbf4
 8001164:	0800cbfc 	.word	0x0800cbfc
 8001168:	0800cc00 	.word	0x0800cc00
 800116c:	2000010c 	.word	0x2000010c
 8001170:	20000098 	.word	0x20000098
 8001174:	0800cc24 	.word	0x0800cc24
 8001178:	0800cc30 	.word	0x0800cc30
 800117c:	0800cc34 	.word	0x0800cc34
 8001180:	0800cc38 	.word	0x0800cc38
 8001184:	0800cc3c 	.word	0x0800cc3c

08001188 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <MX_FREERTOS_Init+0x18>)
 800118e:	2100      	movs	r1, #0
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_FREERTOS_Init+0x1c>)
 8001192:	f007 f86b 	bl	800826c <osThreadNew>
 8001196:	4603      	mov	r3, r0
 8001198:	4a03      	ldr	r2, [pc, #12]	; (80011a8 <MX_FREERTOS_Init+0x20>)
 800119a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	0800ccb8 	.word	0x0800ccb8
 80011a4:	080011ad 	.word	0x080011ad
 80011a8:	20000110 	.word	0x20000110

080011ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f007 f8eb 	bl	8008390 <osDelay>
 80011ba:	e7fb      	b.n	80011b4 <StartDefaultTask+0x8>

080011bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	4b44      	ldr	r3, [pc, #272]	; (80012e4 <MX_GPIO_Init+0x128>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4a43      	ldr	r2, [pc, #268]	; (80012e4 <MX_GPIO_Init+0x128>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011de:	4b41      	ldr	r3, [pc, #260]	; (80012e4 <MX_GPIO_Init+0x128>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <MX_GPIO_Init+0x128>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	4a3d      	ldr	r2, [pc, #244]	; (80012e4 <MX_GPIO_Init+0x128>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <MX_GPIO_Init+0x128>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <MX_GPIO_Init+0x128>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	4a37      	ldr	r2, [pc, #220]	; (80012e4 <MX_GPIO_Init+0x128>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120e:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <MX_GPIO_Init+0x128>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <MX_GPIO_Init+0x128>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a31      	ldr	r2, [pc, #196]	; (80012e4 <MX_GPIO_Init+0x128>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <MX_GPIO_Init+0x128>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SDN_GPIO_Port, SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123c:	f003 fd6e 	bl	8004d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	2140      	movs	r1, #64	; 0x40
 8001244:	4828      	ldr	r0, [pc, #160]	; (80012e8 <MX_GPIO_Init+0x12c>)
 8001246:	f003 fd69 	bl	8004d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800124a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001250:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4822      	ldr	r0, [pc, #136]	; (80012ec <MX_GPIO_Init+0x130>)
 8001262:	f003 fbb1 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800126a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	481c      	ldr	r0, [pc, #112]	; (80012ec <MX_GPIO_Init+0x130>)
 800127c:	f003 fba4 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin;
 8001280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPIRIT1_SDN_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f003 fb94 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 80012a0:	2340      	movs	r3, #64	; 0x40
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	480c      	ldr	r0, [pc, #48]	; (80012e8 <MX_GPIO_Init+0x12c>)
 80012b8:	f003 fb86 	bl	80049c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2105      	movs	r1, #5
 80012c0:	2017      	movs	r0, #23
 80012c2:	f003 fb49 	bl	8004958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012c6:	2017      	movs	r0, #23
 80012c8:	f003 fb62 	bl	8004990 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2105      	movs	r1, #5
 80012d0:	2028      	movs	r0, #40	; 0x28
 80012d2:	f003 fb41 	bl	8004958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012d6:	2028      	movs	r0, #40	; 0x28
 80012d8:	f003 fb5a 	bl	8004990 <HAL_NVIC_EnableIRQ>

}
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	; 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000
 80012e8:	48000400 	.word	0x48000400
 80012ec:	48000800 	.word	0x48000800

080012f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b09c      	sub	sp, #112	; 0x70
 80012f4:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */

	char payloadRX[PAYLOAD_SIZE] = "";
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2260      	movs	r2, #96	; 0x60
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00a fd5b 	bl	800bdbc <memset>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001306:	f003 f9e7 	bl	80046d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800130a:	f000 f85b 	bl	80013c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800130e:	f7ff ff55 	bl	80011bc <MX_GPIO_Init>
	MX_SPI1_Init();
 8001312:	f000 f8ff 	bl	8001514 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8001316:	f000 fbf1 	bl	8001afc <MX_USART2_UART_Init>
	UART_escapes("[H");
 800131a:	4821      	ldr	r0, [pc, #132]	; (80013a0 <main+0xb0>)
 800131c:	f000 fd9e 	bl	8001e5c <UART_escapes>
	/* USER CODE BEGIN 2 */

	SPSGRF_Init();
 8001320:	f000 f9e4 	bl	80016ec <SPSGRF_Init>
    SpiritPktCommonSetDestinationAddress(0xFF);
 8001324:	20ff      	movs	r0, #255	; 0xff
 8001326:	f001 fa99 	bl	800285c <SpiritPktCommonSetDestinationAddress>
	SpiritPktStackSetPayloadLength(PAYLOAD_SIZE);
 800132a:	2064      	movs	r0, #100	; 0x64
 800132c:	f001 fc06 	bl	8002b3c <SpiritPktStackSetPayloadLength>
	//    SpiritPktBasicSetDestinationAddress(0x44);

	retVal = xTaskCreate(TX_task, "TX task", 5*configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+4, &TXmessage_Handler);
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <main+0xb4>)
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	2304      	movs	r3, #4
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2300      	movs	r3, #0
 800133a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800133e:	491a      	ldr	r1, [pc, #104]	; (80013a8 <main+0xb8>)
 8001340:	481a      	ldr	r0, [pc, #104]	; (80013ac <main+0xbc>)
 8001342:	f008 fc14 	bl	8009b6e <xTaskCreate>
 8001346:	6678      	str	r0, [r7, #100]	; 0x64
	if(retVal!=pdPASS){while(1);}//task creation failed
 8001348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800134a:	2b01      	cmp	r3, #1
 800134c:	d000      	beq.n	8001350 <main+0x60>
 800134e:	e7fe      	b.n	800134e <main+0x5e>

	retVal = xTaskCreate(RX_task, "RX task", 2*configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+3, &RXmessage_Handler);
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <main+0xc0>)
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	2303      	movs	r3, #3
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2300      	movs	r3, #0
 800135a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800135e:	4915      	ldr	r1, [pc, #84]	; (80013b4 <main+0xc4>)
 8001360:	4815      	ldr	r0, [pc, #84]	; (80013b8 <main+0xc8>)
 8001362:	f008 fc04 	bl	8009b6e <xTaskCreate>
 8001366:	6678      	str	r0, [r7, #100]	; 0x64
	if(retVal!=pdPASS){while(1);}//task creation failed
 8001368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800136a:	2b01      	cmp	r3, #1
 800136c:	d000      	beq.n	8001370 <main+0x80>
 800136e:	e7fe      	b.n	800136e <main+0x7e>


	retVal = xTaskCreate(print_task, "TX task", 2*configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+3, &printmessage_Handler);
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <main+0xcc>)
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	2303      	movs	r3, #3
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2300      	movs	r3, #0
 800137a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137e:	490a      	ldr	r1, [pc, #40]	; (80013a8 <main+0xb8>)
 8001380:	480f      	ldr	r0, [pc, #60]	; (80013c0 <main+0xd0>)
 8001382:	f008 fbf4 	bl	8009b6e <xTaskCreate>
 8001386:	6678      	str	r0, [r7, #100]	; 0x64
	if(retVal!=pdPASS){while(1);}//task creation failed
 8001388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800138a:	2b01      	cmp	r3, #1
 800138c:	d000      	beq.n	8001390 <main+0xa0>
 800138e:	e7fe      	b.n	800138e <main+0x9e>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001390:	f006 ff22 	bl	80081d8 <osKernelInitialize>
	MX_FREERTOS_Init();
 8001394:	f7ff fef8 	bl	8001188 <MX_FREERTOS_Init>


	/* Start scheduler */
	osKernelStart();
 8001398:	f006 ff42 	bl	8008220 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	while (1)
 800139c:	e7fe      	b.n	800139c <main+0xac>
 800139e:	bf00      	nop
 80013a0:	0800cc54 	.word	0x0800cc54
 80013a4:	20000114 	.word	0x20000114
 80013a8:	0800cc58 	.word	0x0800cc58
 80013ac:	08000d61 	.word	0x08000d61
 80013b0:	20000118 	.word	0x20000118
 80013b4:	0800cc60 	.word	0x0800cc60
 80013b8:	08000eb5 	.word	0x08000eb5
 80013bc:	2000011c 	.word	0x2000011c
 80013c0:	08000f49 	.word	0x08000f49

080013c4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b096      	sub	sp, #88	; 0x58
 80013c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	2244      	movs	r2, #68	; 0x44
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f00a fcf2 	bl	800bdbc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	463b      	mov	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013ea:	f003 fcd5 	bl	8004d98 <HAL_PWREx_ControlVoltageScaling>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80013f4:	f000 f888 	bl	8001508 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f8:	2302      	movs	r3, #2
 80013fa:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001400:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001402:	2310      	movs	r3, #16
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001406:	2302      	movs	r3, #2
 8001408:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800140a:	2302      	movs	r3, #2
 800140c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800140e:	2301      	movs	r3, #1
 8001410:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001412:	230a      	movs	r3, #10
 8001414:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001416:	2307      	movs	r3, #7
 8001418:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800141a:	2302      	movs	r3, #2
 800141c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800141e:	2302      	movs	r3, #2
 8001420:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4618      	mov	r0, r3
 8001428:	f003 fd0c 	bl	8004e44 <HAL_RCC_OscConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8001432:	f000 f869 	bl	8001508 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001436:	230f      	movs	r3, #15
 8001438:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143a:	2303      	movs	r3, #3
 800143c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	2104      	movs	r1, #4
 800144e:	4618      	mov	r0, r3
 8001450:	f004 f8d4 	bl	80055fc <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x9a>
	{
		Error_Handler();
 800145a:	f000 f855 	bl	8001508 <Error_Handler>
	}
}
 800145e:	bf00      	nop
 8001460:	3758      	adds	r7, #88	; 0x58
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_GPIO_EXTI_Callback>:

///* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	80fb      	strh	r3, [r7, #6]
	SpiritIrqs xIrqStatus;

	if (GPIO_Pin != SPIRIT1_GPIO3_Pin)
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	2b80      	cmp	r3, #128	; 0x80
 8001476:	d12c      	bne.n	80014d2 <HAL_GPIO_EXTI_Callback+0x6a>
	{
		return;
	}

	SpiritIrqGetStatus(&xIrqStatus);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fee3 	bl	8002248 <SpiritIrqGetStatus>
	if (xIrqStatus.IRQ_TX_DATA_SENT)
 8001482:	7b3b      	ldrb	r3, [r7, #12]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		xTxDoneFlag = S_SET;
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_GPIO_EXTI_Callback+0x74>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_READY)
 8001494:	7b3b      	ldrb	r3, [r7, #12]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		xRxDoneFlag = RX_DATA_READY;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x78>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_DISC)
 80014a6:	7b3b      	ldrb	r3, [r7, #12]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <HAL_GPIO_EXTI_Callback+0x54>
	{
		SpiritCmdStrobeRx();
 80014b2:	f001 f929 	bl	8002708 <SpiritManagementWaCmdStrobeRx>
 80014b6:	2061      	movs	r0, #97	; 0x61
 80014b8:	f000 fdf8 	bl	80020ac <SpiritCmdStrobeCommand>

	}
	if (xIrqStatus.IRQ_RX_TIMEOUT)
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	f003 0320 	and.w	r3, r3, #32
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_GPIO_EXTI_Callback+0x6c>
		{
		xRxDoneFlag = RX_TIMEOUT;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x78>)
 80014ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_EXTI_Callback+0x6c>
		return;
 80014d2:	bf00      	nop

		}

}
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000121 	.word	0x20000121
 80014e0:	20000124 	.word	0x20000124

080014e4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80014f6:	f003 f90f 	bl	8004718 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40001000 	.word	0x40001000

08001508 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>
	...

08001514 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MX_SPI1_Init+0x74>)
 800151a:	4a1c      	ldr	r2, [pc, #112]	; (800158c <MX_SPI1_Init+0x78>)
 800151c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <MX_SPI1_Init+0x74>)
 8001520:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001524:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <MX_SPI1_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <MX_SPI1_Init+0x74>)
 800152e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001532:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_SPI1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_SPI1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_SPI1_Init+0x74>)
 8001542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001546:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_SPI1_Init+0x74>)
 800154a:	2208      	movs	r2, #8
 800154c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_SPI1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_SPI1_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_SPI1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_SPI1_Init+0x74>)
 8001562:	2207      	movs	r2, #7
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_SPI1_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_SPI1_Init+0x74>)
 800156e:	2208      	movs	r2, #8
 8001570:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_SPI1_Init+0x74>)
 8001574:	f004 ff54 	bl	8006420 <HAL_SPI_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800157e:	f7ff ffc3 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000128 	.word	0x20000128
 800158c:	40013000 	.word	0x40013000

08001590 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a25      	ldr	r2, [pc, #148]	; (8001644 <HAL_SPI_MspInit+0xb4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d144      	bne.n	800163c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <HAL_SPI_MspInit+0xb8>)
 80015b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b6:	4a24      	ldr	r2, [pc, #144]	; (8001648 <HAL_SPI_MspInit+0xb8>)
 80015b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015bc:	6613      	str	r3, [r2, #96]	; 0x60
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <HAL_SPI_MspInit+0xb8>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <HAL_SPI_MspInit+0xb8>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <HAL_SPI_MspInit+0xb8>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_SPI_MspInit+0xb8>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_SPI_MspInit+0xb8>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	4a18      	ldr	r2, [pc, #96]	; (8001648 <HAL_SPI_MspInit+0xb8>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_SPI_MspInit+0xb8>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015fa:	23c0      	movs	r3, #192	; 0xc0
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800160a:	2305      	movs	r3, #5
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001618:	f003 f9d6 	bl	80049c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800161c:	2308      	movs	r3, #8
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800162c:	2305      	movs	r3, #5
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <HAL_SPI_MspInit+0xbc>)
 8001638:	f003 f9c6 	bl	80049c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40013000 	.word	0x40013000
 8001648:	40021000 	.word	0x40021000
 800164c:	48000400 	.word	0x48000400

08001650 <CreateNode>:
People *last = NULL;

People *this = NULL;

People *CreateNode(char *address, char *name)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
    People *link = (People*) malloc(sizeof(People));
 800165a:	206c      	movs	r0, #108	; 0x6c
 800165c:	f00a fb98 	bl	800bd90 <malloc>
 8001660:	4603      	mov	r3, r0
 8001662:	60fb      	str	r3, [r7, #12]
    link->next =NULL;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	669a      	str	r2, [r3, #104]	; 0x68
    strcpy(link->address, address);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4618      	mov	r0, r3
 8001670:	f00a fd34 	bl	800c0dc <strcpy>
    strcpy(link->Name, name);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3304      	adds	r3, #4
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f00a fd2e 	bl	800c0dc <strcpy>


    return link;
 8001680:	68fb      	ldr	r3, [r7, #12]

}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <insertLast>:

void insertLast(People *link)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

    if(sizeList()==0)
 8001694:	f000 f81e 	bl	80016d4 <sizeList>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d103      	bne.n	80016a6 <insertLast+0x1a>
    {
      //make it the last link
      head = link;
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <insertLast+0x3c>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	e003      	b.n	80016ae <insertLast+0x22>
    }
    else
    {
      //make link a new last link
      last->next = link;
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <insertLast+0x40>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	669a      	str	r2, [r3, #104]	; 0x68

    }

   //point last to new last node
   last = link;
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <insertLast+0x40>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6013      	str	r3, [r2, #0]

   listLength++;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <insertLast+0x44>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <insertLast+0x44>)
 80016be:	701a      	strb	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000190 	.word	0x20000190
 80016cc:	20000194 	.word	0x20000194
 80016d0:	2000018c 	.word	0x2000018c

080016d4 <sizeList>:

uint8_t sizeList(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
    return listLength;
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <sizeList+0x14>)
 80016da:	781b      	ldrb	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	2000018c 	.word	0x2000018c

080016ec <SPSGRF_Init>:


void SPSGRF_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b090      	sub	sp, #64	; 0x40
 80016f0:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktStackInit xStackInit;
  PktStackAddressesInit xStackAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 80016f2:	f002 fe5f 	bl	80043b4 <RadioSpiInit>

  // restart the radio
  SpiritEnterShutdown();
 80016f6:	f002 ffd5 	bl	80046a4 <RadioEnterShutdown>
  SpiritExitShutdown();
 80016fa:	f002 ffde 	bl	80046ba <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 80016fe:	f001 f833 	bl	8002768 <SpiritManagementWaExtraCurrent>

  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 8001702:	2300      	movs	r3, #0
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	e004      	b.n	8001712 <SPSGRF_Init+0x26>
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	3301      	adds	r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	71fb      	strb	r3, [r7, #7]
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2bff      	cmp	r3, #255	; 0xff
 8001718:	d1f6      	bne.n	8001708 <SPSGRF_Init+0x1c>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 800171a:	f002 fe29 	bl	8004370 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 800171e:	4b46      	ldr	r3, [pc, #280]	; (8001838 <SPSGRF_Init+0x14c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b03      	cmp	r3, #3
 800172a:	d1ea      	bne.n	8001702 <SPSGRF_Init+0x16>

  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 800172c:	2300      	movs	r3, #0
 800172e:	84bb      	strh	r3, [r7, #36]	; 0x24
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 8001730:	4b42      	ldr	r3, [pc, #264]	; (800183c <SPSGRF_Init+0x150>)
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 8001734:	4b42      	ldr	r3, [pc, #264]	; (8001840 <SPSGRF_Init+0x154>)
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 800173e:	2300      	movs	r3, #0
 8001740:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  xRadioInit.lDatarate = DATARATE;
 8001744:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 800174a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800174e:	63bb      	str	r3, [r7, #56]	; 0x38
  xRadioInit.lBandwidth = BANDWIDTH;
 8001750:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <SPSGRF_Init+0x154>)
 8001752:	63fb      	str	r3, [r7, #60]	; 0x3c
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 8001754:	483b      	ldr	r0, [pc, #236]	; (8001844 <SPSGRF_Init+0x158>)
 8001756:	f002 fc59 	bl	800400c <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 800175a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175e:	4618      	mov	r0, r3
 8001760:	f001 faa6 	bl	8002cb0 <SpiritRadioInit>

  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 8001764:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8001848 <SPSGRF_Init+0x15c>
 8001768:	2007      	movs	r0, #7
 800176a:	f002 faeb 	bl	8003d44 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 800176e:	2007      	movs	r0, #7
 8001770:	f002 fb3e 	bl	8003df0 <SpiritRadioSetPALevelMaxIndex>

  // Configure packet handler to use the Basic packet format
  xStackInit.xPreambleLength = PREAMBLE_LENGTH;
 8001774:	2318      	movs	r3, #24
 8001776:	753b      	strb	r3, [r7, #20]
  xStackInit.xSyncLength = SYNC_LENGTH;
 8001778:	2306      	movs	r3, #6
 800177a:	757b      	strb	r3, [r7, #21]
  xStackInit.lSyncWords = SYNC_WORD;
 800177c:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 8001780:	61bb      	str	r3, [r7, #24]
  xStackInit.xFixVarLength = LENGTH_TYPE;
 8001782:	2301      	movs	r3, #1
 8001784:	773b      	strb	r3, [r7, #28]
  xStackInit.cPktLengthWidth = LENGTH_WIDTH;
 8001786:	2307      	movs	r3, #7
 8001788:	777b      	strb	r3, [r7, #29]
  xStackInit.xCrcMode = CRC_MODE;
 800178a:	2320      	movs	r3, #32
 800178c:	77bb      	strb	r3, [r7, #30]
  xStackInit.xControlLength = CONTROL_LENGTH;
 800178e:	2300      	movs	r3, #0
 8001790:	77fb      	strb	r3, [r7, #31]
  xStackInit.xFec = EN_FEC;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 3020 	strb.w	r3, [r7, #32]
  xStackInit.xDataWhitening = EN_WHITENING;
 8001798:	2301      	movs	r3, #1
 800179a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  SpiritPktStackInit(&xStackInit);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 f88c 	bl	80028c0 <SpiritPktStackInit>

  // Configure destination address criteria for automatic packet filtering
  xStackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 80017a8:	2301      	movs	r3, #1
 80017aa:	733b      	strb	r3, [r7, #12]
  xStackAddress.cMyAddress = MY_ADDRESS;
 80017ac:	23de      	movs	r3, #222	; 0xde
 80017ae:	737b      	strb	r3, [r7, #13]
  xStackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73bb      	strb	r3, [r7, #14]
  xStackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 80017b4:	23ee      	movs	r3, #238	; 0xee
 80017b6:	73fb      	strb	r3, [r7, #15]
  xStackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 80017b8:	2301      	movs	r3, #1
 80017ba:	743b      	strb	r3, [r7, #16]
  xStackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 80017bc:	23ff      	movs	r3, #255	; 0xff
 80017be:	747b      	strb	r3, [r7, #17]
  SpiritPktStackAddressesInit(&xStackAddress);
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 f94b 	bl	8002a60 <SpiritPktStackAddressesInit>

  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 80017ca:	2302      	movs	r3, #2
 80017cc:	723b      	strb	r3, [r7, #8]
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	727b      	strb	r3, [r7, #9]
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 80017d2:	2300      	movs	r3, #0
 80017d4:	72bb      	strb	r3, [r7, #10]
  SpiritGpioInit(&xGpioInit);
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fc7e 	bl	80020dc <SpiritGpioInit>

  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 80017e0:	2000      	movs	r0, #0
 80017e2:	f000 fc9f 	bl	8002124 <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 80017e6:	2101      	movs	r1, #1
 80017e8:	2004      	movs	r0, #4
 80017ea:	f000 fcc7 	bl	800217c <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 80017ee:	2101      	movs	r1, #1
 80017f0:	2001      	movs	r0, #1
 80017f2:	f000 fcc3 	bl	800217c <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 80017f6:	2101      	movs	r1, #1
 80017f8:	2002      	movs	r0, #2
 80017fa:	f000 fcbf 	bl	800217c <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 80017fe:	2101      	movs	r1, #1
 8001800:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001804:	f000 fcba 	bl	800217c <SpiritIrq>
  SpiritIrqClearStatus();
 8001808:	f000 fd50 	bl	80022ac <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 800180c:	2000      	movs	r0, #0
 800180e:	f001 f9fb 	bl	8002c08 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 8001812:	2001      	movs	r0, #1
 8001814:	f001 f9c0 	bl	8002b98 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8001818:	f06f 0077 	mvn.w	r0, #119	; 0x77
 800181c:	f001 fa28 	bl	8002c70 <SpiritQiSetRssiThresholddBm>

  // Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
  SpiritTimerSetRxTimeoutMs(RECEIVE_TIMEOUT);
 8001820:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800184c <SPSGRF_Init+0x160>
 8001824:	f002 fc02 	bl	800402c <SpiritTimerSetRxTimeoutMs>
#else
  SET_INFINITE_RX_TIMEOUT();
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 8001828:	2002      	movs	r0, #2
 800182a:	f002 fd59 	bl	80042e0 <SpiritTimerSetRxTimeoutStopCondition>
}
 800182e:	bf00      	nop
 8001830:	3740      	adds	r7, #64	; 0x40
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000278 	.word	0x20000278
 800183c:	3689cac0 	.word	0x3689cac0
 8001840:	000186a0 	.word	0x000186a0
 8001844:	02faf080 	.word	0x02faf080
 8001848:	4139999a 	.word	0x4139999a
 800184c:	44fa0000 	.word	0x44fa0000

08001850 <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 800185c:	2072      	movs	r0, #114	; 0x72
 800185e:	f000 fc25 	bl	80020ac <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	2b60      	cmp	r3, #96	; 0x60
 8001866:	bf28      	it	cs
 8001868:	2360      	movcs	r3, #96	; 0x60
 800186a:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4618      	mov	r0, r3
 8001872:	f002 fe87 	bl	8004584 <RadioSpiWriteFifo>
  SpiritPktStackSetPayloadLength(txLen);
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f001 f95e 	bl	8002b3c <SpiritPktStackSetPayloadLength>
  SpiritCmdStrobeTx();
 8001880:	f000 ff0a 	bl	8002698 <SpiritManagementWaCmdStrobeTx>
 8001884:	2060      	movs	r0, #96	; 0x60
 8001886:	f000 fc11 	bl	80020ac <SpiritCmdStrobeCommand>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 8001896:	f000 ff37 	bl	8002708 <SpiritManagementWaCmdStrobeRx>
 800189a:	2061      	movs	r0, #97	; 0x61
 800189c:	f000 fc06 	bl	80020ac <SpiritCmdStrobeCommand>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 80018ac:	f000 fd16 	bl	80022dc <SpiritLinearFifoReadNumElementsRxFifo>
 80018b0:	4603      	mov	r3, r0
 80018b2:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f002 feab 	bl	8004614 <RadioSpiReadFifo>

  return len;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_MspInit+0x4c>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_MspInit+0x4c>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6613      	str	r3, [r2, #96]	; 0x60
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_MspInit+0x4c>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_MspInit+0x4c>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_MspInit+0x4c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6593      	str	r3, [r2, #88]	; 0x58
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_MspInit+0x4c>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	210f      	movs	r1, #15
 8001902:	f06f 0001 	mvn.w	r0, #1
 8001906:	f003 f827 	bl	8004958 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08e      	sub	sp, #56	; 0x38
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_InitTick+0xe0>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	4a33      	ldr	r2, [pc, #204]	; (80019f8 <HAL_InitTick+0xe0>)
 800192c:	f043 0310 	orr.w	r3, r3, #16
 8001930:	6593      	str	r3, [r2, #88]	; 0x58
 8001932:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_InitTick+0xe0>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800193e:	f107 0210 	add.w	r2, r7, #16
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f004 f81b 	bl	8005984 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d103      	bne.n	8001960 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001958:	f003 ffe8 	bl	800592c <HAL_RCC_GetPCLK1Freq>
 800195c:	6378      	str	r0, [r7, #52]	; 0x34
 800195e:	e004      	b.n	800196a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001960:	f003 ffe4 	bl	800592c <HAL_RCC_GetPCLK1Freq>
 8001964:	4603      	mov	r3, r0
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800196a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196c:	4a23      	ldr	r2, [pc, #140]	; (80019fc <HAL_InitTick+0xe4>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0c9b      	lsrs	r3, r3, #18
 8001974:	3b01      	subs	r3, #1
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_InitTick+0xe8>)
 800197a:	4a22      	ldr	r2, [pc, #136]	; (8001a04 <HAL_InitTick+0xec>)
 800197c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_InitTick+0xe8>)
 8001980:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001984:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <HAL_InitTick+0xe8>)
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800198c:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_InitTick+0xe8>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_InitTick+0xe8>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_InitTick+0xe8>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800199e:	4818      	ldr	r0, [pc, #96]	; (8001a00 <HAL_InitTick+0xe8>)
 80019a0:	f005 fc4e 	bl	8007240 <HAL_TIM_Base_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80019aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d11b      	bne.n	80019ea <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80019b2:	4813      	ldr	r0, [pc, #76]	; (8001a00 <HAL_InitTick+0xe8>)
 80019b4:	f005 fca6 	bl	8007304 <HAL_TIM_Base_Start_IT>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80019be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d111      	bne.n	80019ea <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019c6:	2036      	movs	r0, #54	; 0x36
 80019c8:	f002 ffe2 	bl	8004990 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b0f      	cmp	r3, #15
 80019d0:	d808      	bhi.n	80019e4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019d2:	2200      	movs	r2, #0
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	2036      	movs	r0, #54	; 0x36
 80019d8:	f002 ffbe 	bl	8004958 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019dc:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <HAL_InitTick+0xf0>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e002      	b.n	80019ea <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3738      	adds	r7, #56	; 0x38
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	431bde83 	.word	0x431bde83
 8001a00:	20000198 	.word	0x20000198
 8001a04:	40001000 	.word	0x40001000
 8001a08:	2000000c 	.word	0x2000000c

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <NMI_Handler+0x4>

08001a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <MemManage_Handler+0x4>

08001a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 8001a3c:	2080      	movs	r0, #128	; 0x80
 8001a3e:	f003 f985 	bl	8004d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a4a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a4e:	f003 f97d 	bl	8004d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <TIM6_DAC_IRQHandler+0x10>)
 8001a5e:	f005 fcc1 	bl	80073e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000198 	.word	0x20000198

08001a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <_sbrk+0x5c>)
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <_sbrk+0x60>)
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <_sbrk+0x64>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <_sbrk+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d207      	bcs.n	8001aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a9c:	f00a f932 	bl	800bd04 <__errno>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aaa:	e009      	b.n	8001ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <_sbrk+0x64>)
 8001abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20018000 	.word	0x20018000
 8001acc:	00000400 	.word	0x00000400
 8001ad0:	200001e4 	.word	0x200001e4
 8001ad4:	20006e60 	.word	0x20006e60

08001ad8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <SystemInit+0x20>)
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <SystemInit+0x20>)
 8001ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <MX_USART2_UART_Init>:
uint8_t newaddresscount;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
	  huart2.Instance = USART2;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_USART2_UART_Init+0x5c>)
 8001b02:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <MX_USART2_UART_Init+0x60>)
 8001b04:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_USART2_UART_Init+0x5c>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_USART2_UART_Init+0x5c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <MX_USART2_UART_Init+0x5c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_USART2_UART_Init+0x5c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <MX_USART2_UART_Init+0x5c>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <MX_USART2_UART_Init+0x5c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <MX_USART2_UART_Init+0x5c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_USART2_UART_Init+0x5c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <MX_USART2_UART_Init+0x5c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 8001b3e:	b662      	cpsie	i
}
 8001b40:	bf00      	nop
	  __enable_irq();

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_USART2_UART_Init+0x5c>)
 8001b44:	f005 fe4e 	bl	80077e4 <HAL_UART_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001b4e:	f7ff fcdb 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200001e8 	.word	0x200001e8
 8001b5c:	40004400 	.word	0x40004400

08001b60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0ac      	sub	sp, #176	; 0xb0
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2288      	movs	r2, #136	; 0x88
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f00a f91b 	bl	800bdbc <memset>
  if(uartHandle->Instance==USART2)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <HAL_UART_MspInit+0xd0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d14b      	bne.n	8001c28 <HAL_UART_MspInit+0xc8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b90:	2302      	movs	r3, #2
 8001b92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 ff83 	bl	8005aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ba8:	f7ff fcae 	bl	8001508 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <HAL_UART_MspInit+0xd4>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <HAL_UART_MspInit+0xd4>)
 8001bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb8:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <HAL_UART_MspInit+0xd4>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_UART_MspInit+0xd4>)
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <HAL_UART_MspInit+0xd4>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_UART_MspInit+0xd4>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bdc:	230c      	movs	r3, #12
 8001bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf4:	2307      	movs	r3, #7
 8001bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c04:	f002 fee0 	bl	80049c8 <HAL_GPIO_Init>
    __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_UART_MspInit+0xd8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_UART_MspInit+0xd8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0220 	orr.w	r2, r2, #32
 8001c16:	601a      	str	r2, [r3, #0]
    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2105      	movs	r1, #5
 8001c1c:	2026      	movs	r0, #38	; 0x26
 8001c1e:	f002 fe9b 	bl	8004958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c22:	2026      	movs	r0, #38	; 0x26
 8001c24:	f002 feb4 	bl	8004990 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c28:	bf00      	nop
 8001c2a:	37b0      	adds	r7, #176	; 0xb0
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40004400 	.word	0x40004400
 8001c34:	40021000 	.word	0x40021000
 8001c38:	200001e8 	.word	0x200001e8

08001c3c <UART_print>:
}

/* USER CODE BEGIN 1 */

void UART_print(char *outputstring)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	81fb      	strh	r3, [r7, #14]
 8001c48:	e010      	b.n	8001c6c <UART_print+0x30>
	{
		while(!(USART2->ISR & USART_ISR_TXE)); //Transmit data register empty, using negation since value of 0 means data has not been transferred
 8001c4a:	bf00      	nop
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <UART_print+0x48>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f9      	beq.n	8001c4c <UART_print+0x10>

		USART2->TDR = outputstring[currchar];
 8001c58:	89fb      	ldrh	r3, [r7, #14]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <UART_print+0x48>)
 8001c62:	b292      	uxth	r2, r2
 8001c64:	851a      	strh	r2, [r3, #40]	; 0x28
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 8001c66:	89fb      	ldrh	r3, [r7, #14]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	81fb      	strh	r3, [r7, #14]
 8001c6c:	89fc      	ldrh	r4, [r7, #14]
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7fe faae 	bl	80001d0 <strlen>
 8001c74:	4603      	mov	r3, r0
 8001c76:	429c      	cmp	r4, r3
 8001c78:	d3e7      	bcc.n	8001c4a <UART_print+0xe>
	}

}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}
 8001c84:	40004400 	.word	0x40004400

08001c88 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]


	uint8_t RX = USART2->RDR;
 8001c92:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <USART2_IRQHandler+0x1a8>)
 8001c94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	73fb      	strb	r3, [r7, #15]
	char tempstr[6]={'\0'};
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	80bb      	strh	r3, [r7, #4]
	switch(RX)
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	2b24      	cmp	r3, #36	; 0x24
 8001ca6:	d038      	beq.n	8001d1a <USART2_IRQHandler+0x92>
 8001ca8:	2b24      	cmp	r3, #36	; 0x24
 8001caa:	db49      	blt.n	8001d40 <USART2_IRQHandler+0xb8>
 8001cac:	2b50      	cmp	r3, #80	; 0x50
 8001cae:	dc47      	bgt.n	8001d40 <USART2_IRQHandler+0xb8>
 8001cb0:	2b44      	cmp	r3, #68	; 0x44
 8001cb2:	db45      	blt.n	8001d40 <USART2_IRQHandler+0xb8>
 8001cb4:	3b44      	subs	r3, #68	; 0x44
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d842      	bhi.n	8001d40 <USART2_IRQHandler+0xb8>
 8001cba:	a201      	add	r2, pc, #4	; (adr r2, 8001cc0 <USART2_IRQHandler+0x38>)
 8001cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc0:	08001d09 	.word	0x08001d09
 8001cc4:	08001d41 	.word	0x08001d41
 8001cc8:	08001d41 	.word	0x08001d41
 8001ccc:	08001d29 	.word	0x08001d29
 8001cd0:	08001d41 	.word	0x08001d41
 8001cd4:	08001d41 	.word	0x08001d41
 8001cd8:	08001d01 	.word	0x08001d01
 8001cdc:	08001d41 	.word	0x08001d41
 8001ce0:	08001d41 	.word	0x08001d41
 8001ce4:	08001d41 	.word	0x08001d41
 8001ce8:	08001d41 	.word	0x08001d41
 8001cec:	08001d41 	.word	0x08001d41
 8001cf0:	08001cf5 	.word	0x08001cf5
	{

			break;
		case 'P':
			newaddressflag = 255;
 8001cf4:	4b4f      	ldr	r3, [pc, #316]	; (8001e34 <USART2_IRQHandler+0x1ac>)
 8001cf6:	22ff      	movs	r2, #255	; 0xff
 8001cf8:	701a      	strb	r2, [r3, #0]
			UART_escapes("[H");
 8001cfa:	484f      	ldr	r0, [pc, #316]	; (8001e38 <USART2_IRQHandler+0x1b0>)
 8001cfc:	f000 f8ae 	bl	8001e5c <UART_escapes>
		case 'J':
			UART_escapes("[2J"); //clear everything
 8001d00:	484e      	ldr	r0, [pc, #312]	; (8001e3c <USART2_IRQHandler+0x1b4>)
 8001d02:	f000 f8ab 	bl	8001e5c <UART_escapes>
			break;
 8001d06:	e08e      	b.n	8001e26 <USART2_IRQHandler+0x19e>

		case 'D':
			packetdata.message[0] = 2;
 8001d08:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <USART2_IRQHandler+0x1b8>)
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	701a      	strb	r2, [r3, #0]
			DMorGM =1;
 8001d0e:	4b4d      	ldr	r3, [pc, #308]	; (8001e44 <USART2_IRQHandler+0x1bc>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
			UART_escapes("[s");
 8001d14:	484c      	ldr	r0, [pc, #304]	; (8001e48 <USART2_IRQHandler+0x1c0>)
 8001d16:	f000 f8a1 	bl	8001e5c <UART_escapes>
		case '$':
			newaddressflag = 1;
 8001d1a:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <USART2_IRQHandler+0x1ac>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
			UART_print("Enter Address");
 8001d20:	484a      	ldr	r0, [pc, #296]	; (8001e4c <USART2_IRQHandler+0x1c4>)
 8001d22:	f7ff ff8b 	bl	8001c3c <UART_print>
			break;
 8001d26:	e07e      	b.n	8001e26 <USART2_IRQHandler+0x19e>
		case 'G':
				packetdata.message[0] = 6;
 8001d28:	4b45      	ldr	r3, [pc, #276]	; (8001e40 <USART2_IRQHandler+0x1b8>)
 8001d2a:	2206      	movs	r2, #6
 8001d2c:	701a      	strb	r2, [r3, #0]
				packetdata.address[0] = 'F';//hardcoding broadcast address
 8001d2e:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <USART2_IRQHandler+0x1b8>)
 8001d30:	2246      	movs	r2, #70	; 0x46
 8001d32:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				packetdata.address[1] = 'F';
 8001d36:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <USART2_IRQHandler+0x1b8>)
 8001d38:	2246      	movs	r2, #70	; 0x46
 8001d3a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			break;
 8001d3e:	e072      	b.n	8001e26 <USART2_IRQHandler+0x19e>
		default:



			if(newaddressflag==1)
 8001d40:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <USART2_IRQHandler+0x1ac>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d11f      	bne.n	8001d88 <USART2_IRQHandler+0x100>
			{

				packetdata.address[newaddresscount] = RX;
 8001d48:	4b41      	ldr	r3, [pc, #260]	; (8001e50 <USART2_IRQHandler+0x1c8>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b3c      	ldr	r3, [pc, #240]	; (8001e40 <USART2_IRQHandler+0x1b8>)
 8001d50:	4413      	add	r3, r2
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				++newaddresscount;
 8001d58:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <USART2_IRQHandler+0x1c8>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	4b3b      	ldr	r3, [pc, #236]	; (8001e50 <USART2_IRQHandler+0x1c8>)
 8001d62:	701a      	strb	r2, [r3, #0]
				USART2->TDR=RX;
 8001d64:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <USART2_IRQHandler+0x1a8>)
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	851a      	strh	r2, [r3, #40]	; 0x28
				if(newaddresscount == 2)
 8001d6c:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <USART2_IRQHandler+0x1c8>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d157      	bne.n	8001e24 <USART2_IRQHandler+0x19c>
				{

					DMorGM=2;
 8001d74:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <USART2_IRQHandler+0x1bc>)
 8001d76:	2202      	movs	r2, #2
 8001d78:	701a      	strb	r2, [r3, #0]
					newaddressflag = 0;
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <USART2_IRQHandler+0x1ac>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
					newaddresscount = 0;
 8001d80:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <USART2_IRQHandler+0x1c8>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]



				}
			}
				break;
 8001d86:	e04d      	b.n	8001e24 <USART2_IRQHandler+0x19c>
			else if(newaddressflag == 255)
 8001d88:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <USART2_IRQHandler+0x1ac>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2bff      	cmp	r3, #255	; 0xff
 8001d8e:	d123      	bne.n	8001dd8 <USART2_IRQHandler+0x150>
				while(!(USART2->ISR & USART_ISR_TXE));
 8001d90:	bf00      	nop
 8001d92:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <USART2_IRQHandler+0x1a8>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f9      	beq.n	8001d92 <USART2_IRQHandler+0x10a>
								USART2->TDR=RX;
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <USART2_IRQHandler+0x1a8>)
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	b292      	uxth	r2, r2
 8001da4:	851a      	strh	r2, [r3, #40]	; 0x28
				if(RX !='\r')
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	2b0d      	cmp	r3, #13
 8001daa:	d00e      	beq.n	8001dca <USART2_IRQHandler+0x142>
				packetdata.address[newaddresscount] = RX;
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <USART2_IRQHandler+0x1c8>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <USART2_IRQHandler+0x1b8>)
 8001db4:	4413      	add	r3, r2
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				++newaddresscount;
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <USART2_IRQHandler+0x1c8>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <USART2_IRQHandler+0x1c8>)
 8001dc6:	701a      	strb	r2, [r3, #0]
				break;
 8001dc8:	e02c      	b.n	8001e24 <USART2_IRQHandler+0x19c>
					newaddresscount = 0 ;
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <USART2_IRQHandler+0x1c8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
					newaddressflag = 111;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <USART2_IRQHandler+0x1ac>)
 8001dd2:	226f      	movs	r2, #111	; 0x6f
 8001dd4:	701a      	strb	r2, [r3, #0]
				break;
 8001dd6:	e025      	b.n	8001e24 <USART2_IRQHandler+0x19c>
				packetdata.message[count] = RX;
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <USART2_IRQHandler+0x1cc>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <USART2_IRQHandler+0x1b8>)
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	5453      	strb	r3, [r2, r1]
				++count;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <USART2_IRQHandler+0x1cc>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <USART2_IRQHandler+0x1cc>)
 8001dee:	801a      	strh	r2, [r3, #0]
				while(!(USART2->ISR & USART_ISR_TXE));
 8001df0:	bf00      	nop
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <USART2_IRQHandler+0x1a8>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f9      	beq.n	8001df2 <USART2_IRQHandler+0x16a>
				USART2->TDR=RX;
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <USART2_IRQHandler+0x1a8>)
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	b292      	uxth	r2, r2
 8001e04:	851a      	strh	r2, [r3, #40]	; 0x28
				if(RX == '\r') {
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	2b0d      	cmp	r3, #13
 8001e0a:	d10b      	bne.n	8001e24 <USART2_IRQHandler+0x19c>
					count = 1;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <USART2_IRQHandler+0x1cc>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	801a      	strh	r2, [r3, #0]
					xSemaphoreGiveFromISR( xTXsem, &xHigherPriorityTaskWoken );
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <USART2_IRQHandler+0x1d0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f107 0308 	add.w	r3, r7, #8
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f006 fec3 	bl	8008baa <xQueueGiveFromISR>
				break;
 8001e24:	bf00      	nop
	}
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40004400 	.word	0x40004400
 8001e34:	2000026c 	.word	0x2000026c
 8001e38:	0800cc68 	.word	0x0800cc68
 8001e3c:	0800cc6c 	.word	0x0800cc6c
 8001e40:	200000a8 	.word	0x200000a8
 8001e44:	20000120 	.word	0x20000120
 8001e48:	0800cc70 	.word	0x0800cc70
 8001e4c:	0800cc74 	.word	0x0800cc74
 8001e50:	2000026d 	.word	0x2000026d
 8001e54:	20000004 	.word	0x20000004
 8001e58:	2000009c 	.word	0x2000009c

08001e5c <UART_escapes>:

void UART_escapes(char *escstring)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & USART_ISR_TXE));//do not advance until receiving transmit flag
 8001e64:	bf00      	nop
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <UART_escapes+0x2c>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f9      	beq.n	8001e66 <UART_escapes+0xa>
	USART2->TDR = (0x1B);  // ESC
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <UART_escapes+0x2c>)
 8001e74:	221b      	movs	r2, #27
 8001e76:	851a      	strh	r2, [r3, #40]	; 0x28
	UART_print(escstring);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff fedf 	bl	8001c3c <UART_print>

}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40004400 	.word	0x40004400

08001e8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e90:	f7ff fe22 	bl	8001ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e94:	480c      	ldr	r0, [pc, #48]	; (8001ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e96:	490d      	ldr	r1, [pc, #52]	; (8001ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <LoopForever+0xe>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eac:	4c0a      	ldr	r4, [pc, #40]	; (8001ed8 <LoopForever+0x16>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eba:	f009 ff29 	bl	800bd10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ebe:	f7ff fa17 	bl	80012f0 <main>

08001ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ec2:	e7fe      	b.n	8001ec2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001ed0:	0800d038 	.word	0x0800d038
  ldr r2, =_sbss
 8001ed4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001ed8:	20006e60 	.word	0x20006e60

08001edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC1_2_IRQHandler>
	...

08001ee0 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001eea:	f107 030f 	add.w	r3, r7, #15
 8001eee:	461a      	mov	r2, r3
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	2050      	movs	r0, #80	; 0x50
 8001ef4:	f002 faba 	bl	800446c <RadioSpiReadRegisters>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <SpiritCalibrationVco+0x6c>)
 8001efc:	b212      	sxth	r2, r2
 8001efe:	4611      	mov	r1, r2
 8001f00:	7019      	strb	r1, [r3, #0]
 8001f02:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f06:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d105      	bne.n	8001f1a <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e004      	b.n	8001f24 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	f023 0302 	bic.w	r3, r3, #2
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001f24:	f107 030f 	add.w	r3, r7, #15
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	2050      	movs	r0, #80	; 0x50
 8001f2e:	f002 fa51 	bl	80043d4 <RadioSpiWriteRegisters>
 8001f32:	4602      	mov	r2, r0
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <SpiritCalibrationVco+0x6c>)
 8001f36:	b212      	sxth	r2, r2
 8001f38:	4611      	mov	r1, r2
 8001f3a:	7019      	strb	r1, [r3, #0]
 8001f3c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f40:	705a      	strb	r2, [r3, #1]

}
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000278 	.word	0x20000278

08001f50 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001f56:	1dfb      	adds	r3, r7, #7
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	20e5      	movs	r0, #229	; 0xe5
 8001f5e:	f002 fa85 	bl	800446c <RadioSpiReadRegisters>
 8001f62:	4602      	mov	r2, r0
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <SpiritCalibrationGetVcoCalData+0x34>)
 8001f66:	b212      	sxth	r2, r2
 8001f68:	4611      	mov	r1, r2
 8001f6a:	7019      	strb	r1, [r3, #0]
 8001f6c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f70:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f78:	b2db      	uxtb	r3, r3

}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000278 	.word	0x20000278

08001f88 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001f92:	f107 030f 	add.w	r3, r7, #15
 8001f96:	461a      	mov	r2, r3
 8001f98:	2101      	movs	r1, #1
 8001f9a:	206e      	movs	r0, #110	; 0x6e
 8001f9c:	f002 fa66 	bl	800446c <RadioSpiReadRegisters>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001fa4:	b212      	sxth	r2, r2
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	7019      	strb	r1, [r3, #0]
 8001faa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fae:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001fc4:	f107 030f 	add.w	r3, r7, #15
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2101      	movs	r1, #1
 8001fcc:	206e      	movs	r0, #110	; 0x6e
 8001fce:	f002 fa01 	bl	80043d4 <RadioSpiWriteRegisters>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001fd6:	b212      	sxth	r2, r2
 8001fd8:	4611      	mov	r1, r2
 8001fda:	7019      	strb	r1, [r3, #0]
 8001fdc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fe0:	705a      	strb	r2, [r3, #1]

}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000278 	.word	0x20000278

08001ff0 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001ffa:	f107 030f 	add.w	r3, r7, #15
 8001ffe:	461a      	mov	r2, r3
 8002000:	2101      	movs	r1, #1
 8002002:	206f      	movs	r0, #111	; 0x6f
 8002004:	f002 fa32 	bl	800446c <RadioSpiReadRegisters>
 8002008:	4602      	mov	r2, r0
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 800200c:	b212      	sxth	r2, r2
 800200e:	4611      	mov	r1, r2
 8002010:	7019      	strb	r1, [r3, #0]
 8002012:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002016:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800201e:	b2db      	uxtb	r3, r3
 8002020:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	4313      	orrs	r3, r2
 8002028:	b2db      	uxtb	r3, r3
 800202a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 800202c:	f107 030f 	add.w	r3, r7, #15
 8002030:	461a      	mov	r2, r3
 8002032:	2101      	movs	r1, #1
 8002034:	206f      	movs	r0, #111	; 0x6f
 8002036:	f002 f9cd 	bl	80043d4 <RadioSpiWriteRegisters>
 800203a:	4602      	mov	r2, r0
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 800203e:	b212      	sxth	r2, r2
 8002040:	4611      	mov	r1, r2
 8002042:	7019      	strb	r1, [r3, #0]
 8002044:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002048:	705a      	strb	r2, [r3, #1]

}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000278 	.word	0x20000278

08002058 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8002062:	f107 030f 	add.w	r3, r7, #15
 8002066:	461a      	mov	r2, r3
 8002068:	2101      	movs	r1, #1
 800206a:	209e      	movs	r0, #158	; 0x9e
 800206c:	f002 f9fe 	bl	800446c <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	f023 0306 	bic.w	r3, r3, #6
 8002076:	b2db      	uxtb	r3, r3
 8002078:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	f043 0302 	orr.w	r3, r3, #2
 8002086:	b2db      	uxtb	r3, r3
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	e004      	b.n	8002096 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	f043 0304 	orr.w	r3, r3, #4
 8002092:	b2db      	uxtb	r3, r3
 8002094:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8002096:	f107 030f 	add.w	r3, r7, #15
 800209a:	461a      	mov	r2, r3
 800209c:	2101      	movs	r1, #1
 800209e:	209e      	movs	r0, #158	; 0x9e
 80020a0:	f002 f998 	bl	80043d4 <RadioSpiWriteRegisters>
  
}
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 fa23 	bl	8004504 <RadioSpiCommandStrobes>
 80020be:	4602      	mov	r2, r0
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SpiritCmdStrobeCommand+0x2c>)
 80020c2:	b212      	sxth	r2, r2
 80020c4:	4611      	mov	r1, r2
 80020c6:	7019      	strb	r1, [r3, #0]
 80020c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80020cc:	705a      	strb	r2, [r3, #1]
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000278 	.word	0x20000278

080020dc <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	785a      	ldrb	r2, [r3, #1]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	789b      	ldrb	r3, [r3, #2]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f107 020f 	add.w	r2, r7, #15
 80020fe:	2101      	movs	r1, #1
 8002100:	4618      	mov	r0, r3
 8002102:	f002 f967 	bl	80043d4 <RadioSpiWriteRegisters>
 8002106:	4602      	mov	r2, r0
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <SpiritGpioInit+0x44>)
 800210a:	b212      	sxth	r2, r2
 800210c:	4611      	mov	r1, r2
 800210e:	7019      	strb	r1, [r3, #0]
 8002110:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002114:	705a      	strb	r2, [r3, #1]

}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000278 	.word	0x20000278

08002124 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00c      	beq.n	8002150 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	2204      	movs	r2, #4
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f009 fe3c 	bl	800bdbc <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	461a      	mov	r2, r3
 8002148:	f107 0308 	add.w	r3, r7, #8
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	461a      	mov	r2, r3
 8002156:	2104      	movs	r1, #4
 8002158:	2090      	movs	r0, #144	; 0x90
 800215a:	f002 f93b 	bl	80043d4 <RadioSpiWriteRegisters>
 800215e:	4602      	mov	r2, r0
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <SpiritIrqDeInit+0x54>)
 8002162:	b212      	sxth	r2, r2
 8002164:	4611      	mov	r1, r2
 8002166:	7019      	strb	r1, [r3, #0]
 8002168:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800216c:	705a      	strb	r2, [r3, #1]
}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000278 	.word	0x20000278

0800217c <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	461a      	mov	r2, r3
 8002192:	2104      	movs	r1, #4
 8002194:	2090      	movs	r0, #144	; 0x90
 8002196:	f002 f969 	bl	800446c <RadioSpiReadRegisters>
 800219a:	4602      	mov	r2, r0
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <SpiritIrq+0xc8>)
 800219e:	b212      	sxth	r2, r2
 80021a0:	4611      	mov	r1, r2
 80021a2:	7019      	strb	r1, [r3, #0]
 80021a4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021a8:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	74fb      	strb	r3, [r7, #19]
 80021ae:	e011      	b.n	80021d4 <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 80021b0:	7cfb      	ldrb	r3, [r7, #19]
 80021b2:	3318      	adds	r3, #24
 80021b4:	443b      	add	r3, r7
 80021b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80021ba:	461a      	mov	r2, r3
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
 80021be:	f1c3 0303 	rsb	r3, r3, #3
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4413      	add	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80021ce:	7cfb      	ldrb	r3, [r7, #19]
 80021d0:	3301      	adds	r3, #1
 80021d2:	74fb      	strb	r3, [r7, #19]
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d9ea      	bls.n	80021b0 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	4013      	ands	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e003      	b.n	80021f4 <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	74bb      	strb	r3, [r7, #18]
 80021f8:	e00e      	b.n	8002218 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 80021fa:	7cbb      	ldrb	r3, [r7, #18]
 80021fc:	f1c3 0303 	rsb	r3, r3, #3
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	40da      	lsrs	r2, r3
 8002206:	7cbb      	ldrb	r3, [r7, #18]
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	3318      	adds	r3, #24
 800220c:	443b      	add	r3, r7
 800220e:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8002212:	7cbb      	ldrb	r3, [r7, #18]
 8002214:	3301      	adds	r3, #1
 8002216:	74bb      	strb	r3, [r7, #18]
 8002218:	7cbb      	ldrb	r3, [r7, #18]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d9ed      	bls.n	80021fa <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	461a      	mov	r2, r3
 8002224:	2104      	movs	r1, #4
 8002226:	2090      	movs	r0, #144	; 0x90
 8002228:	f002 f8d4 	bl	80043d4 <RadioSpiWriteRegisters>
 800222c:	4602      	mov	r2, r0
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <SpiritIrq+0xc8>)
 8002230:	b212      	sxth	r2, r2
 8002232:	4611      	mov	r1, r2
 8002234:	7019      	strb	r1, [r3, #0]
 8002236:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800223a:	705a      	strb	r2, [r3, #1]

}
 800223c:	bf00      	nop
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000278 	.word	0x20000278

08002248 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	461a      	mov	r2, r3
 800225a:	2104      	movs	r1, #4
 800225c:	20fa      	movs	r0, #250	; 0xfa
 800225e:	f002 f905 	bl	800446c <RadioSpiReadRegisters>
 8002262:	4602      	mov	r2, r0
 8002264:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <SpiritIrqGetStatus+0x60>)
 8002266:	b212      	sxth	r2, r2
 8002268:	4611      	mov	r1, r2
 800226a:	7019      	strb	r1, [r3, #0]
 800226c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002270:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8002272:	2300      	movs	r3, #0
 8002274:	74fb      	strb	r3, [r7, #19]
 8002276:	e00e      	b.n	8002296 <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	f1c3 0303 	rsb	r3, r3, #3
 800227e:	3318      	adds	r3, #24
 8002280:	443b      	add	r3, r7
 8002282:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	3301      	adds	r3, #1
 8002294:	74fb      	strb	r3, [r7, #19]
 8002296:	7cfb      	ldrb	r3, [r7, #19]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d9ed      	bls.n	8002278 <SpiritIrqGetStatus+0x30>
  }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000278 	.word	0x20000278

080022ac <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	461a      	mov	r2, r3
 80022b6:	2104      	movs	r1, #4
 80022b8:	20fa      	movs	r0, #250	; 0xfa
 80022ba:	f002 f8d7 	bl	800446c <RadioSpiReadRegisters>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <SpiritIrqClearStatus+0x2c>)
 80022c2:	b212      	sxth	r2, r2
 80022c4:	4611      	mov	r1, r2
 80022c6:	7019      	strb	r1, [r3, #0]
 80022c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022cc:	705a      	strb	r2, [r3, #1]

}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000278 	.word	0x20000278

080022dc <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 80022e2:	1dfb      	adds	r3, r7, #7
 80022e4:	461a      	mov	r2, r3
 80022e6:	2101      	movs	r1, #1
 80022e8:	20e7      	movs	r0, #231	; 0xe7
 80022ea:	f002 f8bf 	bl	800446c <RadioSpiReadRegisters>
 80022ee:	4602      	mov	r2, r0
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 80022f2:	b212      	sxth	r2, r2
 80022f4:	4611      	mov	r1, r2
 80022f6:	7019      	strb	r1, [r3, #0]
 80022f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022fc:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002304:	b2db      	uxtb	r3, r3

}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000278 	.word	0x20000278

08002314 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8002314:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002318:	b08a      	sub	sp, #40	; 0x28
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a70      	ldr	r2, [pc, #448]	; (80024e4 <SpiritManagementSetFrequencyBase+0x1d0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d307      	bcc.n	8002336 <SpiritManagementSetFrequencyBase+0x22>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a6f      	ldr	r2, [pc, #444]	; (80024e8 <SpiritManagementSetFrequencyBase+0x1d4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d803      	bhi.n	8002336 <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002334:	e01a      	b.n	800236c <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a6c      	ldr	r2, [pc, #432]	; (80024ec <SpiritManagementSetFrequencyBase+0x1d8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d907      	bls.n	800234e <SpiritManagementSetFrequencyBase+0x3a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a6b      	ldr	r2, [pc, #428]	; (80024f0 <SpiritManagementSetFrequencyBase+0x1dc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d803      	bhi.n	800234e <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8002346:	2301      	movs	r3, #1
 8002348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800234c:	e00e      	b.n	800236c <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a68      	ldr	r2, [pc, #416]	; (80024f4 <SpiritManagementSetFrequencyBase+0x1e0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d907      	bls.n	8002366 <SpiritManagementSetFrequencyBase+0x52>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a67      	ldr	r2, [pc, #412]	; (80024f8 <SpiritManagementSetFrequencyBase+0x1e4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d803      	bhi.n	8002366 <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 800235e:	2302      	movs	r3, #2
 8002360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002364:	e002      	b.n	800236c <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8002366:	2303      	movs	r3, #3
 8002368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 800236c:	f000 ffde 	bl	800332c <SpiritRadioGetFrequencyOffset>
 8002370:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002372:	f000 ffbb 	bl	80032ec <SpiritRadioGetChannelSpace>
 8002376:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002378:	f000 ffa0 	bl	80032bc <SpiritRadioGetChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002380:	6a3a      	ldr	r2, [r7, #32]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	441a      	add	r2, r3
 8002386:	7efb      	ldrb	r3, [r7, #27]
 8002388:	69f9      	ldr	r1, [r7, #28]
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8002392:	f001 fdbb 	bl	8003f0c <SpiritRadioGetRefDiv>
 8002396:	4603      	mov	r3, r0
 8002398:	3301      	adds	r3, #1
 800239a:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 800239c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d83a      	bhi.n	800241a <SpiritManagementSetFrequencyBase+0x106>
 80023a4:	a201      	add	r2, pc, #4	; (adr r2, 80023ac <SpiritManagementSetFrequencyBase+0x98>)
 80023a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023aa:	bf00      	nop
 80023ac:	08002405 	.word	0x08002405
 80023b0:	080023ed 	.word	0x080023ed
 80023b4:	080023d5 	.word	0x080023d5
 80023b8:	080023bd 	.word	0x080023bd
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	4a4f      	ldr	r2, [pc, #316]	; (80024fc <SpiritManagementSetFrequencyBase+0x1e8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d803      	bhi.n	80023cc <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff fe47 	bl	8002058 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80023ca:	e026      	b.n	800241a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80023cc:	2001      	movs	r0, #1
 80023ce:	f7ff fe43 	bl	8002058 <SpiritCalibrationSelectVco>
    break;
 80023d2:	e022      	b.n	800241a <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <SpiritManagementSetFrequencyBase+0x1ec>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d803      	bhi.n	80023e4 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80023dc:	2000      	movs	r0, #0
 80023de:	f7ff fe3b 	bl	8002058 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80023e2:	e01a      	b.n	800241a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80023e4:	2001      	movs	r0, #1
 80023e6:	f7ff fe37 	bl	8002058 <SpiritCalibrationSelectVco>
    break;
 80023ea:	e016      	b.n	800241a <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	4a45      	ldr	r2, [pc, #276]	; (8002504 <SpiritManagementSetFrequencyBase+0x1f0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d803      	bhi.n	80023fc <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff fe2f 	bl	8002058 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80023fa:	e00e      	b.n	800241a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80023fc:	2001      	movs	r0, #1
 80023fe:	f7ff fe2b 	bl	8002058 <SpiritCalibrationSelectVco>
    break;
 8002402:	e00a      	b.n	800241a <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	4a40      	ldr	r2, [pc, #256]	; (8002508 <SpiritManagementSetFrequencyBase+0x1f4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d803      	bhi.n	8002414 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800240c:	2000      	movs	r0, #0
 800240e:	f7ff fe23 	bl	8002058 <SpiritCalibrationSelectVco>
 8002412:	e002      	b.n	800241a <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002414:	2001      	movs	r0, #1
 8002416:	f7ff fe1f 	bl	8002058 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800241a:	6978      	ldr	r0, [r7, #20]
 800241c:	f000 fe66 	bl	80030ec <SpiritRadioSearchWCP>
 8002420:	4603      	mov	r3, r0
 8002422:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7fe f86d 	bl	8000504 <__aeabi_ui2d>
 800242a:	4604      	mov	r4, r0
 800242c:	460d      	mov	r5, r1
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002434:	4935      	ldr	r1, [pc, #212]	; (800250c <SpiritManagementSetFrequencyBase+0x1f8>)
 8002436:	5c8a      	ldrb	r2, [r1, r2]
 8002438:	fb02 f303 	mul.w	r3, r2, r3
 800243c:	049b      	lsls	r3, r3, #18
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f870 	bl	8000524 <__aeabi_i2d>
 8002444:	4680      	mov	r8, r0
 8002446:	4689      	mov	r9, r1
 8002448:	f001 fdd4 	bl	8003ff4 <SpiritRadioGetXtalFrequency>
 800244c:	4603      	mov	r3, r0
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f858 	bl	8000504 <__aeabi_ui2d>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4640      	mov	r0, r8
 800245a:	4649      	mov	r1, r9
 800245c:	f7fe f9f6 	bl	800084c <__aeabi_ddiv>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4620      	mov	r0, r4
 8002466:	4629      	mov	r1, r5
 8002468:	f7fe f8c6 	bl	80005f8 <__aeabi_dmul>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	f7fe fad2 	bl	8000a1c <__aeabi_d2uiz>
 8002478:	4603      	mov	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	0d5b      	lsrs	r3, r3, #21
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	b2da      	uxtb	r2, r3
 8002488:	7cbb      	ldrb	r3, [r7, #18]
 800248a:	015b      	lsls	r3, r3, #5
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	b2db      	uxtb	r3, r3
 8002492:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	0b5b      	lsrs	r3, r3, #13
 8002498:	b2db      	uxtb	r3, r3
 800249a:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024b0:	4917      	ldr	r1, [pc, #92]	; (8002510 <SpiritManagementSetFrequencyBase+0x1fc>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80024ba:	f107 0308 	add.w	r3, r7, #8
 80024be:	461a      	mov	r2, r3
 80024c0:	2104      	movs	r1, #4
 80024c2:	2008      	movs	r0, #8
 80024c4:	f001 ff86 	bl	80043d4 <RadioSpiWriteRegisters>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <SpiritManagementSetFrequencyBase+0x200>)
 80024cc:	b212      	sxth	r2, r2
 80024ce:	4611      	mov	r1, r2
 80024d0:	7019      	strb	r1, [r3, #0]
 80024d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024d6:	705a      	strb	r2, [r3, #1]
}
 80024d8:	bf00      	nop
 80024da:	3728      	adds	r7, #40	; 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024e2:	bf00      	nop
 80024e4:	2e5f5680 	.word	0x2e5f5680
 80024e8:	390c2fe0 	.word	0x390c2fe0
 80024ec:	1701e47f 	.word	0x1701e47f
 80024f0:	1c146a60 	.word	0x1c146a60
 80024f4:	11d260bf 	.word	0x11d260bf
 80024f8:	14ced7e0 	.word	0x14ced7e0
 80024fc:	099cf4e1 	.word	0x099cf4e1
 8002500:	1339e9c3 	.word	0x1339e9c3
 8002504:	19a28d05 	.word	0x19a28d05
 8002508:	33451a0a 	.word	0x33451a0a
 800250c:	0800cd28 	.word	0x0800cd28
 8002510:	0800cd24 	.word	0x0800cd24
 8002514:	20000278 	.word	0x20000278

08002518 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8002526:	f001 fd65 	bl	8003ff4 <SpiritRadioGetXtalFrequency>
 800252a:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 800252c:	2300      	movs	r3, #0
 800252e:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4a57      	ldr	r2, [pc, #348]	; (8002690 <SpiritManagementWaVcoCalibration+0x178>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d90f      	bls.n	8002558 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002538:	f001 fce8 	bl	8003f0c <SpiritRadioGetRefDiv>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10a      	bne.n	8002558 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 8002546:	f001 f853 	bl	80035f0 <SpiritRadioGetFrequencyBase>
 800254a:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 800254c:	2001      	movs	r0, #1
 800254e:	f001 fcad 	bl	8003eac <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fede 	bl	8002314 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8002558:	f001 f84a 	bl	80035f0 <SpiritRadioGetFrequencyBase>
 800255c:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 800255e:	2325      	movs	r3, #37	; 0x25
 8002560:	707b      	strb	r3, [r7, #1]
 8002562:	1c7b      	adds	r3, r7, #1
 8002564:	461a      	mov	r2, r3
 8002566:	2101      	movs	r1, #1
 8002568:	20a1      	movs	r0, #161	; 0xa1
 800256a:	f001 ff33 	bl	80043d4 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 800256e:	2001      	movs	r0, #1
 8002570:	f7ff fcb6 	bl	8001ee0 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8002574:	f001 fefc 	bl	8004370 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8002578:	4b46      	ldr	r3, [pc, #280]	; (8002694 <SpiritManagementWaVcoCalibration+0x17c>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b40      	cmp	r3, #64	; 0x40
 8002584:	d10d      	bne.n	80025a2 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 8002586:	2301      	movs	r3, #1
 8002588:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 800258a:	2062      	movs	r0, #98	; 0x62
 800258c:	f7ff fd8e 	bl	80020ac <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8002590:	f001 feee 	bl	8004370 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002594:	4b3f      	ldr	r3, [pc, #252]	; (8002694 <SpiritManagementWaVcoCalibration+0x17c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d1f6      	bne.n	8002590 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80025a2:	2066      	movs	r0, #102	; 0x66
 80025a4:	f7ff fd82 	bl	80020ac <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80025ac:	f001 fee0 	bl	8004370 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80025b0:	4b38      	ldr	r3, [pc, #224]	; (8002694 <SpiritManagementWaVcoCalibration+0x17c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b13      	cmp	r3, #19
 80025bc:	d106      	bne.n	80025cc <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 80025be:	7b7b      	ldrb	r3, [r7, #13]
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	737a      	strb	r2, [r7, #13]
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	d101      	bne.n	80025cc <SpiritManagementWaVcoCalibration+0xb4>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e05d      	b.n	8002688 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80025cc:	4b31      	ldr	r3, [pc, #196]	; (8002694 <SpiritManagementWaVcoCalibration+0x17c>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	d1e8      	bne.n	80025ac <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80025da:	f7ff fcb9 	bl	8001f50 <SpiritCalibrationGetVcoCalData>
 80025de:	4603      	mov	r3, r0
 80025e0:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 80025e2:	2062      	movs	r0, #98	; 0x62
 80025e4:	f7ff fd62 	bl	80020ac <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80025e8:	f001 fec2 	bl	8004370 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80025ec:	4b29      	ldr	r3, [pc, #164]	; (8002694 <SpiritManagementWaVcoCalibration+0x17c>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d1f6      	bne.n	80025e8 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 80025fa:	2065      	movs	r0, #101	; 0x65
 80025fc:	f7ff fd56 	bl	80020ac <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002600:	2300      	movs	r3, #0
 8002602:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002604:	f001 feb4 	bl	8004370 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <SpiritManagementWaVcoCalibration+0x17c>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b13      	cmp	r3, #19
 8002614:	d106      	bne.n	8002624 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 8002616:	7b7b      	ldrb	r3, [r7, #13]
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	737a      	strb	r2, [r7, #13]
 800261c:	2b05      	cmp	r3, #5
 800261e:	d101      	bne.n	8002624 <SpiritManagementWaVcoCalibration+0x10c>
 8002620:	2301      	movs	r3, #1
 8002622:	e031      	b.n	8002688 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <SpiritManagementWaVcoCalibration+0x17c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b0f      	cmp	r3, #15
 8002630:	d1e8      	bne.n	8002604 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8002632:	f7ff fc8d 	bl	8001f50 <SpiritCalibrationGetVcoCalData>
 8002636:	4603      	mov	r3, r0
 8002638:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 800263a:	2062      	movs	r0, #98	; 0x62
 800263c:	f7ff fd36 	bl	80020ac <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002640:	f001 fe96 	bl	8004370 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <SpiritManagementWaVcoCalibration+0x17c>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b03      	cmp	r3, #3
 8002650:	d1f6      	bne.n	8002640 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8002652:	7bbb      	ldrb	r3, [r7, #14]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d102      	bne.n	800265e <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002658:	2063      	movs	r0, #99	; 0x63
 800265a:	f7ff fd27 	bl	80020ac <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 800265e:	2000      	movs	r0, #0
 8002660:	f7ff fc3e 	bl	8001ee0 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 800266a:	2000      	movs	r0, #0
 800266c:	f001 fc1e 	bl	8003eac <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff fe4f 	bl	8002314 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fc85 	bl	8001f88 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 800267e:	78bb      	ldrb	r3, [r7, #2]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fcb5 	bl	8001ff0 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	01c9c380 	.word	0x01c9c380
 8002694:	20000278 	.word	0x20000278

08002698 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 800269e:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <SpiritManagementWaCmdStrobeTx+0x60>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d023      	beq.n	80026f0 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <SpiritManagementWaCmdStrobeTx+0x64>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <SpiritManagementWaCmdStrobeTx+0x68>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d908      	bls.n	80026c4 <SpiritManagementWaCmdStrobeTx+0x2c>
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <SpiritManagementWaCmdStrobeTx+0x64>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a13      	ldr	r2, [pc, #76]	; (8002704 <SpiritManagementWaCmdStrobeTx+0x6c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d803      	bhi.n	80026c4 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 80026bc:	20c0      	movs	r0, #192	; 0xc0
 80026be:	f001 fb6b 	bl	8003d98 <SpiritRadioSetPACwc>
 80026c2:	e002      	b.n	80026ca <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f001 fb67 	bl	8003d98 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80026ca:	2311      	movs	r3, #17
 80026cc:	71fb      	strb	r3, [r7, #7]
 80026ce:	1dfb      	adds	r3, r7, #7
 80026d0:	461a      	mov	r2, r3
 80026d2:	2101      	movs	r1, #1
 80026d4:	20a9      	movs	r0, #169	; 0xa9
 80026d6:	f001 fe7d 	bl	80043d4 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 80026da:	2320      	movs	r3, #32
 80026dc:	71fb      	strb	r3, [r7, #7]
 80026de:	1dfb      	adds	r3, r7, #7
 80026e0:	461a      	mov	r2, r3
 80026e2:	2101      	movs	r1, #1
 80026e4:	20a5      	movs	r0, #165	; 0xa5
 80026e6:	f001 fe75 	bl	80043d4 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 80026ea:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <SpiritManagementWaCmdStrobeTx+0x60>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
  }
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000006 	.word	0x20000006
 80026fc:	20000270 	.word	0x20000270
 8002700:	08f0d17f 	.word	0x08f0d17f
 8002704:	1c03a180 	.word	0x1c03a180

08002708 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b01      	cmp	r3, #1
 8002716:	d00d      	beq.n	8002734 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002718:	2398      	movs	r3, #152	; 0x98
 800271a:	71fb      	strb	r3, [r7, #7]
 800271c:	1dfb      	adds	r3, r7, #7
 800271e:	461a      	mov	r2, r3
 8002720:	2101      	movs	r1, #1
 8002722:	20a5      	movs	r0, #165	; 0xa5
 8002724:	f001 fe56 	bl	80043d4 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002728:	2000      	movs	r0, #0
 800272a:	f001 fb35 	bl	8003d98 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 800272e:	4b03      	ldr	r3, [pc, #12]	; (800273c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
  }
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000006 	.word	0x20000006

08002740 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <SpiritManagementWaTRxFcMem+0x20>)
 800274a:	2202      	movs	r2, #2
 800274c:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <SpiritManagementWaTRxFcMem+0x24>)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	20000006 	.word	0x20000006
 8002764:	20000270 	.word	0x20000270

08002768 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 800276e:	23ca      	movs	r3, #202	; 0xca
 8002770:	71fb      	strb	r3, [r7, #7]
 8002772:	1dfb      	adds	r3, r7, #7
 8002774:	461a      	mov	r2, r3
 8002776:	2101      	movs	r1, #1
 8002778:	20b2      	movs	r0, #178	; 0xb2
 800277a:	f001 fe2b 	bl	80043d4 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 800277e:	2304      	movs	r3, #4
 8002780:	71fb      	strb	r3, [r7, #7]
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	461a      	mov	r2, r3
 8002786:	2101      	movs	r1, #1
 8002788:	20a8      	movs	r0, #168	; 0xa8
 800278a:	f001 fe23 	bl	80043d4 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 800278e:	1dfb      	adds	r3, r7, #7
 8002790:	461a      	mov	r2, r3
 8002792:	2101      	movs	r1, #1
 8002794:	20a8      	movs	r0, #168	; 0xa8
 8002796:	f001 fe69 	bl	800446c <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 800279a:	2300      	movs	r3, #0
 800279c:	71fb      	strb	r3, [r7, #7]
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	461a      	mov	r2, r3
 80027a2:	2101      	movs	r1, #1
 80027a4:	20a8      	movs	r0, #168	; 0xa8
 80027a6:	f001 fe15 	bl	80043d4 <RadioSpiWriteRegisters>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 80027ba:	1dfb      	adds	r3, r7, #7
 80027bc:	461a      	mov	r2, r3
 80027be:	2101      	movs	r1, #1
 80027c0:	2030      	movs	r0, #48	; 0x30
 80027c2:	f001 fe53 	bl	800446c <RadioSpiReadRegisters>
 80027c6:	4602      	mov	r2, r0
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <SpiritPktCommonGetControlLength+0x34>)
 80027ca:	b212      	sxth	r2, r2
 80027cc:	4611      	mov	r1, r2
 80027ce:	7019      	strb	r1, [r3, #0]
 80027d0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027d4:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	b2db      	uxtb	r3, r3

}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000278 	.word	0x20000278

080027ec <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80027f6:	f107 030f 	add.w	r3, r7, #15
 80027fa:	461a      	mov	r2, r3
 80027fc:	2101      	movs	r1, #1
 80027fe:	204f      	movs	r0, #79	; 0x4f
 8002800:	f001 fe34 	bl	800446c <RadioSpiReadRegisters>
 8002804:	4602      	mov	r2, r0
 8002806:	4b14      	ldr	r3, [pc, #80]	; (8002858 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002808:	b212      	sxth	r2, r2
 800280a:	4611      	mov	r1, r2
 800280c:	7019      	strb	r1, [r3, #0]
 800280e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002812:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d105      	bne.n	8002826 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	73fb      	strb	r3, [r7, #15]
 8002824:	e004      	b.n	8002830 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002830:	f107 030f 	add.w	r3, r7, #15
 8002834:	461a      	mov	r2, r3
 8002836:	2101      	movs	r1, #1
 8002838:	204f      	movs	r0, #79	; 0x4f
 800283a:	f001 fdcb 	bl	80043d4 <RadioSpiWriteRegisters>
 800283e:	4602      	mov	r2, r0
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002842:	b212      	sxth	r2, r2
 8002844:	4611      	mov	r1, r2
 8002846:	7019      	strb	r1, [r3, #0]
 8002848:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800284c:	705a      	strb	r2, [r3, #1]

}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000278 	.word	0x20000278

0800285c <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8002866:	1dfb      	adds	r3, r7, #7
 8002868:	461a      	mov	r2, r3
 800286a:	2101      	movs	r1, #1
 800286c:	204b      	movs	r0, #75	; 0x4b
 800286e:	f001 fdb1 	bl	80043d4 <RadioSpiWriteRegisters>
 8002872:	4602      	mov	r2, r0
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <SpiritPktCommonSetDestinationAddress+0x30>)
 8002876:	b212      	sxth	r2, r2
 8002878:	4611      	mov	r1, r2
 800287a:	7019      	strb	r1, [r3, #0]
 800287c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002880:	705a      	strb	r2, [r3, #1]

}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000278 	.word	0x20000278

08002890 <SpiritPktCommonGetReceivedSourceAddress>:
 * @brief  Returns the source address of the received packet.
 * @param  None.
 * @retval uint8_t Source address of the received packet.
 */
uint8_t SpiritPktCommonGetReceivedSourceAddress(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD1 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD1_BASE, 1, &tempRegValue);
 8002896:	1dfb      	adds	r3, r7, #7
 8002898:	461a      	mov	r2, r3
 800289a:	2101      	movs	r1, #1
 800289c:	20d2      	movs	r0, #210	; 0xd2
 800289e:	f001 fde5 	bl	800446c <RadioSpiReadRegisters>
 80028a2:	4602      	mov	r2, r0
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <SpiritPktCommonGetReceivedSourceAddress+0x2c>)
 80028a6:	b212      	sxth	r2, r2
 80028a8:	4611      	mov	r1, r2
 80028aa:	7019      	strb	r1, [r3, #0]
 80028ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028b0:	705a      	strb	r2, [r3, #1]

  /* Returns value */
  return tempRegValue;
 80028b2:	79fb      	ldrb	r3, [r7, #7]

}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000278 	.word	0x20000278

080028c0 <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80028c8:	f107 0308 	add.w	r3, r7, #8
 80028cc:	461a      	mov	r2, r3
 80028ce:	2101      	movs	r1, #1
 80028d0:	2051      	movs	r0, #81	; 0x51
 80028d2:	f001 fdcb 	bl	800446c <RadioSpiReadRegisters>
 80028d6:	4602      	mov	r2, r0
 80028d8:	4b60      	ldr	r3, [pc, #384]	; (8002a5c <SpiritPktStackInit+0x19c>)
 80028da:	b212      	sxth	r2, r2
 80028dc:	4611      	mov	r1, r2
 80028de:	7019      	strb	r1, [r3, #0]
 80028e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028e4:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 80028e6:	7a3b      	ldrb	r3, [r7, #8]
 80028e8:	f023 0320 	bic.w	r3, r3, #32
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 80028f0:	7a3b      	ldrb	r3, [r7, #8]
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80028fa:	f107 0308 	add.w	r3, r7, #8
 80028fe:	461a      	mov	r2, r3
 8002900:	2101      	movs	r1, #1
 8002902:	2051      	movs	r0, #81	; 0x51
 8002904:	f001 fd66 	bl	80043d4 <RadioSpiWriteRegisters>
 8002908:	4602      	mov	r2, r0
 800290a:	4b54      	ldr	r3, [pc, #336]	; (8002a5c <SpiritPktStackInit+0x19c>)
 800290c:	b212      	sxth	r2, r2
 800290e:	4611      	mov	r1, r2
 8002910:	7019      	strb	r1, [r3, #0]
 8002912:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002916:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002918:	f107 0308 	add.w	r3, r7, #8
 800291c:	461a      	mov	r2, r3
 800291e:	2101      	movs	r1, #1
 8002920:	204f      	movs	r0, #79	; 0x4f
 8002922:	f001 fda3 	bl	800446c <RadioSpiReadRegisters>
 8002926:	4602      	mov	r2, r0
 8002928:	4b4c      	ldr	r3, [pc, #304]	; (8002a5c <SpiritPktStackInit+0x19c>)
 800292a:	b212      	sxth	r2, r2
 800292c:	4611      	mov	r1, r2
 800292e:	7019      	strb	r1, [r3, #0]
 8002930:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002934:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8002936:	7a3b      	ldrb	r3, [r7, #8]
 8002938:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800293c:	b2db      	uxtb	r3, r3
 800293e:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002940:	f107 0308 	add.w	r3, r7, #8
 8002944:	461a      	mov	r2, r3
 8002946:	2101      	movs	r1, #1
 8002948:	204f      	movs	r0, #79	; 0x4f
 800294a:	f001 fd43 	bl	80043d4 <RadioSpiWriteRegisters>
 800294e:	4602      	mov	r2, r0
 8002950:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <SpiritPktStackInit+0x19c>)
 8002952:	b212      	sxth	r2, r2
 8002954:	4611      	mov	r1, r2
 8002956:	7019      	strb	r1, [r3, #0]
 8002958:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800295c:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7adb      	ldrb	r3, [r3, #11]
 8002962:	f043 0310 	orr.w	r3, r3, #16
 8002966:	b2db      	uxtb	r3, r3
 8002968:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7a5b      	ldrb	r3, [r3, #9]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d102      	bne.n	8002978 <SpiritPktStackInit+0xb8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7a5b      	ldrb	r3, [r3, #9]
 800297c:	3b01      	subs	r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002984:	b2db      	uxtb	r3, r3
 8002986:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	781a      	ldrb	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	785b      	ldrb	r3, [r3, #1]
 8002990:	4313      	orrs	r3, r2
 8002992:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002998:	4313      	orrs	r3, r2
 800299a:	b2db      	uxtb	r3, r3
 800299c:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7a9b      	ldrb	r3, [r3, #10]
 80029a2:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	7b5b      	ldrb	r3, [r3, #13]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d104      	bne.n	80029b6 <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 80029ac:	7afb      	ldrb	r3, [r7, #11]
 80029ae:	f043 0310 	orr.w	r3, r3, #16
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7b1b      	ldrb	r3, [r3, #12]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d104      	bne.n	80029c8 <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 80029be:	7afb      	ldrb	r3, [r7, #11]
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 80029c8:	f107 0308 	add.w	r3, r7, #8
 80029cc:	461a      	mov	r2, r3
 80029ce:	2104      	movs	r1, #4
 80029d0:	2030      	movs	r0, #48	; 0x30
 80029d2:	f001 fcff 	bl	80043d4 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	e01d      	b.n	8002a18 <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	785b      	ldrb	r3, [r3, #1]
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f1c3 0303 	rsb	r3, r3, #3
 80029ea:	429a      	cmp	r2, r3
 80029ec:	da06      	bge.n	80029fc <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	3310      	adds	r3, #16
 80029f2:	443b      	add	r3, r7
 80029f4:	2200      	movs	r2, #0
 80029f6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80029fa:	e00a      	b.n	8002a12 <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	40da      	lsrs	r2, r3
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	3310      	adds	r3, #16
 8002a0c:	443b      	add	r3, r7
 8002a0e:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	3301      	adds	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d9de      	bls.n	80029dc <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7a9b      	ldrb	r3, [r3, #10]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d103      	bne.n	8002a2e <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7ff fee0 	bl	80027ec <SpiritPktCommonFilterOnCrc>
 8002a2c:	e002      	b.n	8002a34 <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f7ff fedc 	bl	80027ec <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002a34:	f107 0308 	add.w	r3, r7, #8
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	2036      	movs	r0, #54	; 0x36
 8002a3e:	f001 fcc9 	bl	80043d4 <RadioSpiWriteRegisters>
 8002a42:	4602      	mov	r2, r0
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <SpiritPktStackInit+0x19c>)
 8002a46:	b212      	sxth	r2, r2
 8002a48:	4611      	mov	r1, r2
 8002a4a:	7019      	strb	r1, [r3, #0]
 8002a4c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a50:	705a      	strb	r2, [r3, #1]

}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000278 	.word	0x20000278

08002a60 <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2101      	movs	r1, #1
 8002a70:	204f      	movs	r0, #79	; 0x4f
 8002a72:	f001 fcfb 	bl	800446c <RadioSpiReadRegisters>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b2f      	ldr	r3, [pc, #188]	; (8002b38 <SpiritPktStackAddressesInit+0xd8>)
 8002a7a:	b212      	sxth	r2, r2
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	7019      	strb	r1, [r3, #0]
 8002a80:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a84:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d105      	bne.n	8002a9a <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002a8e:	7b3b      	ldrb	r3, [r7, #12]
 8002a90:	f043 0308 	orr.w	r3, r3, #8
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	733b      	strb	r3, [r7, #12]
 8002a98:	e004      	b.n	8002aa4 <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002a9a:	7b3b      	ldrb	r3, [r7, #12]
 8002a9c:	f023 0308 	bic.w	r3, r3, #8
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	789b      	ldrb	r3, [r3, #2]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d105      	bne.n	8002ab8 <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002aac:	7b3b      	ldrb	r3, [r7, #12]
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	733b      	strb	r3, [r7, #12]
 8002ab6:	e004      	b.n	8002ac2 <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002ab8:	7b3b      	ldrb	r3, [r7, #12]
 8002aba:	f023 0304 	bic.w	r3, r3, #4
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	791b      	ldrb	r3, [r3, #4]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d105      	bne.n	8002ad6 <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002aca:	7b3b      	ldrb	r3, [r7, #12]
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	733b      	strb	r3, [r7, #12]
 8002ad4:	e004      	b.n	8002ae0 <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002ad6:	7b3b      	ldrb	r3, [r7, #12]
 8002ad8:	f023 0302 	bic.w	r3, r3, #2
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	204f      	movs	r0, #79	; 0x4f
 8002aea:	f001 fc73 	bl	80043d4 <RadioSpiWriteRegisters>
 8002aee:	4602      	mov	r2, r0
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <SpiritPktStackAddressesInit+0xd8>)
 8002af2:	b212      	sxth	r2, r2
 8002af4:	4611      	mov	r1, r2
 8002af6:	7019      	strb	r1, [r3, #0]
 8002af8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002afc:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	795b      	ldrb	r3, [r3, #5]
 8002b02:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	78db      	ldrb	r3, [r3, #3]
 8002b08:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	785b      	ldrb	r3, [r3, #1]
 8002b0e:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	461a      	mov	r2, r3
 8002b16:	2103      	movs	r1, #3
 8002b18:	204c      	movs	r0, #76	; 0x4c
 8002b1a:	f001 fc5b 	bl	80043d4 <RadioSpiWriteRegisters>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <SpiritPktStackAddressesInit+0xd8>)
 8002b22:	b212      	sxth	r2, r2
 8002b24:	4611      	mov	r1, r2
 8002b26:	7019      	strb	r1, [r3, #0]
 8002b28:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b2c:	705a      	strb	r2, [r3, #1]
  
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000278 	.word	0x20000278

08002b3c <SpiritPktStackSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter can be any value of uint16_t.
 * @retval None.
 */
void SpiritPktStackSetPayloadLength(uint16_t nPayloadLength)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];

  /* Computes the oversize (address + control) size */
  uint16_t overSize = 2 + (uint16_t) SpiritPktStackGetControlLength();
 8002b46:	f7ff fe35 	bl	80027b4 <SpiritPktCommonGetControlLength>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3302      	adds	r3, #2
 8002b50:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from lPayloadLength */
  tempRegValue[1]=STACK_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	89fb      	ldrh	r3, [r7, #14]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from lPayloadLength */
  tempRegValue[0]=STACK_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8002b60:	88fa      	ldrh	r2, [r7, #6]
 8002b62:	89fb      	ldrh	r3, [r7, #14]
 8002b64:	4413      	add	r3, r2
 8002b66:	121b      	asrs	r3, r3, #8
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	733b      	strb	r3, [r7, #12]

  /* Writes the value on the PCKTLENx registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002b6c:	f107 030c 	add.w	r3, r7, #12
 8002b70:	461a      	mov	r2, r3
 8002b72:	2102      	movs	r1, #2
 8002b74:	2034      	movs	r0, #52	; 0x34
 8002b76:	f001 fc2d 	bl	80043d4 <RadioSpiWriteRegisters>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <SpiritPktStackSetPayloadLength+0x58>)
 8002b7e:	b212      	sxth	r2, r2
 8002b80:	4611      	mov	r1, r2
 8002b82:	7019      	strb	r1, [r3, #0]
 8002b84:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b88:	705a      	strb	r2, [r3, #1]

}
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000278 	.word	0x20000278

08002b98 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002ba2:	f107 030f 	add.w	r3, r7, #15
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2101      	movs	r1, #1
 8002baa:	203a      	movs	r0, #58	; 0x3a
 8002bac:	f001 fc5e 	bl	800446c <RadioSpiReadRegisters>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <SpiritQiSqiCheck+0x6c>)
 8002bb4:	b212      	sxth	r2, r2
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	7019      	strb	r1, [r3, #0]
 8002bba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bbe:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d105      	bne.n	8002bd2 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	e004      	b.n	8002bdc <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	f023 0302 	bic.w	r3, r3, #2
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002bdc:	f107 030f 	add.w	r3, r7, #15
 8002be0:	461a      	mov	r2, r3
 8002be2:	2101      	movs	r1, #1
 8002be4:	203a      	movs	r0, #58	; 0x3a
 8002be6:	f001 fbf5 	bl	80043d4 <RadioSpiWriteRegisters>
 8002bea:	4602      	mov	r2, r0
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <SpiritQiSqiCheck+0x6c>)
 8002bee:	b212      	sxth	r2, r2
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	7019      	strb	r1, [r3, #0]
 8002bf4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bf8:	705a      	strb	r2, [r3, #1]

}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000278 	.word	0x20000278

08002c08 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002c12:	f107 030f 	add.w	r3, r7, #15
 8002c16:	461a      	mov	r2, r3
 8002c18:	2101      	movs	r1, #1
 8002c1a:	203a      	movs	r0, #58	; 0x3a
 8002c1c:	f001 fc26 	bl	800446c <RadioSpiReadRegisters>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <SpiritQiSetSqiThreshold+0x64>)
 8002c24:	b212      	sxth	r2, r2
 8002c26:	4611      	mov	r1, r2
 8002c28:	7019      	strb	r1, [r3, #0]
 8002c2a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c2e:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002c44:	f107 030f 	add.w	r3, r7, #15
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	203a      	movs	r0, #58	; 0x3a
 8002c4e:	f001 fbc1 	bl	80043d4 <RadioSpiWriteRegisters>
 8002c52:	4602      	mov	r2, r0
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <SpiritQiSetSqiThreshold+0x64>)
 8002c56:	b212      	sxth	r2, r2
 8002c58:	4611      	mov	r1, r2
 8002c5a:	7019      	strb	r1, [r3, #0]
 8002c5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c60:	705a      	strb	r2, [r3, #1]

}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000278 	.word	0x20000278

08002c70 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3382      	adds	r3, #130	; 0x82
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002c84:	f107 030f 	add.w	r3, r7, #15
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2022      	movs	r0, #34	; 0x22
 8002c8e:	f001 fba1 	bl	80043d4 <RadioSpiWriteRegisters>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <SpiritQiSetRssiThresholddBm+0x3c>)
 8002c96:	b212      	sxth	r2, r2
 8002c98:	4611      	mov	r1, r2
 8002c9a:	7019      	strb	r1, [r3, #0]
 8002c9c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ca0:	705a      	strb	r2, [r3, #1]

}
 8002ca2:	bf00      	nop
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000278 	.word	0x20000278

08002cb0 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08c      	sub	sp, #48	; 0x30
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002cb8:	23a0      	movs	r3, #160	; 0xa0
 8002cba:	747b      	strb	r3, [r7, #17]
 8002cbc:	f107 0311 	add.w	r3, r7, #17
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	209f      	movs	r0, #159	; 0x9f
 8002cc6:	f001 fb85 	bl	80043d4 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd0:	ee07 3a90 	vmov	s15, r3
 8002cd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ce8:	eddf 6aae 	vldr	s13, [pc, #696]	; 8002fa4 <SpiritRadioInit+0x2f4>
 8002cec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf4:	ee17 3a90 	vmov	r3, s15
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002cfa:	2063      	movs	r0, #99	; 0x63
 8002cfc:	f001 fc02 	bl	8004504 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002d00:	2300      	movs	r3, #0
 8002d02:	73bb      	strb	r3, [r7, #14]
 8002d04:	e004      	b.n	8002d10 <SpiritRadioInit+0x60>
 8002d06:	7bbb      	ldrb	r3, [r7, #14]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	73bb      	strb	r3, [r7, #14]
 8002d10:	7bbb      	ldrb	r3, [r7, #14]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2bff      	cmp	r3, #255	; 0xff
 8002d16:	d1f6      	bne.n	8002d06 <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002d18:	f001 fb2a 	bl	8004370 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002d1c:	4ba2      	ldr	r3, [pc, #648]	; (8002fa8 <SpiritRadioInit+0x2f8>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b40      	cmp	r3, #64	; 0x40
 8002d28:	d1ea      	bne.n	8002d00 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002d2a:	4ba0      	ldr	r3, [pc, #640]	; (8002fac <SpiritRadioInit+0x2fc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4aa0      	ldr	r2, [pc, #640]	; (8002fb0 <SpiritRadioInit+0x300>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d803      	bhi.n	8002d3c <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002d34:	2000      	movs	r0, #0
 8002d36:	f001 f90b 	bl	8003f50 <SpiritRadioSetDigDiv>
 8002d3a:	e002      	b.n	8002d42 <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f001 f907 	bl	8003f50 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002d42:	2062      	movs	r0, #98	; 0x62
 8002d44:	f001 fbde 	bl	8004504 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	737b      	strb	r3, [r7, #13]
 8002d4c:	e004      	b.n	8002d58 <SpiritRadioInit+0xa8>
 8002d4e:	7b7b      	ldrb	r3, [r7, #13]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	737b      	strb	r3, [r7, #13]
 8002d58:	7b7b      	ldrb	r3, [r7, #13]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2bff      	cmp	r3, #255	; 0xff
 8002d5e:	d1f6      	bne.n	8002d4e <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002d60:	f001 fb06 	bl	8004370 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002d64:	4b90      	ldr	r3, [pc, #576]	; (8002fa8 <SpiritRadioInit+0x2f8>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d1ea      	bne.n	8002d48 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	ee07 3a90 	vmov	s15, r3
 8002d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d7c:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8002fb4 <SpiritRadioInit+0x304>
 8002d80:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002d84:	4b89      	ldr	r3, [pc, #548]	; (8002fac <SpiritRadioInit+0x2fc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d98:	ee17 3a90 	vmov	r3, s15
 8002d9c:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002d9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002dae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	025a      	lsls	r2, r3, #9
 8002dba:	4b7c      	ldr	r3, [pc, #496]	; (8002fac <SpiritRadioInit+0x2fc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	099b      	lsrs	r3, r3, #6
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fcb5 	bl	8002740 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002dd6:	f107 0310 	add.w	r3, r7, #16
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2101      	movs	r1, #1
 8002dde:	20a3      	movs	r0, #163	; 0xa3
 8002de0:	f001 fb44 	bl	800446c <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002de4:	7c3b      	ldrb	r3, [r7, #16]
 8002de6:	f023 0302 	bic.w	r3, r3, #2
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	743b      	strb	r3, [r7, #16]
 8002dee:	f107 0310 	add.w	r3, r7, #16
 8002df2:	461a      	mov	r2, r3
 8002df4:	2101      	movs	r1, #1
 8002df6:	20a3      	movs	r0, #163	; 0xa3
 8002df8:	f001 faec 	bl	80043d4 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f107 0216 	add.w	r2, r7, #22
 8002e04:	f107 0117 	add.w	r1, r7, #23
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fc3d 	bl	8003688 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	7b5a      	ldrb	r2, [r3, #13]
 8002e16:	7dbb      	ldrb	r3, [r7, #22]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002e1e:	f107 0310 	add.w	r3, r7, #16
 8002e22:	461a      	mov	r2, r3
 8002e24:	2101      	movs	r1, #1
 8002e26:	201c      	movs	r0, #28
 8002e28:	f001 fb20 	bl	800446c <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f107 0214 	add.w	r2, r7, #20
 8002e34:	f107 0115 	add.w	r1, r7, #21
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fdbd 	bl	80039b8 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002e3e:	7d3b      	ldrb	r3, [r7, #20]
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	b25a      	sxtb	r2, r3
 8002e44:	7c3b      	ldrb	r3, [r7, #16]
 8002e46:	b25b      	sxtb	r3, r3
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	b25b      	sxtb	r3, r3
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	b25a      	sxtb	r2, r3
 8002e52:	7d7b      	ldrb	r3, [r7, #21]
 8002e54:	b25b      	sxtb	r3, r3
 8002e56:	4313      	orrs	r3, r2
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f107 0212 	add.w	r2, r7, #18
 8002e66:	f107 0113 	add.w	r1, r7, #19
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fcbe 	bl	80037ec <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	b25a      	sxtb	r2, r3
 8002e76:	7cbb      	ldrb	r3, [r7, #18]
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002e82:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <SpiritRadioInit+0x2fc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	0b1b      	lsrs	r3, r3, #12
 8002e88:	ee07 3a90 	vmov	s15, r3
 8002e8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e90:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002fb8 <SpiritRadioInit+0x308>
 8002e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e98:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002fbc <SpiritRadioInit+0x30c>
 8002e9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ea0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002ea4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec4:	dd09      	ble.n	8002eda <SpiritRadioInit+0x22a>
 8002ec6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ece:	edc7 7a00 	vstr	s15, [r7]
 8002ed2:	783b      	ldrb	r3, [r7, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	e006      	b.n	8002ee8 <SpiritRadioInit+0x238>
 8002eda:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee2:	edc7 7a00 	vstr	s15, [r7]
 8002ee6:	783b      	ldrb	r3, [r7, #0]
 8002ee8:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002eea:	4b30      	ldr	r3, [pc, #192]	; (8002fac <SpiritRadioInit+0x2fc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a30      	ldr	r2, [pc, #192]	; (8002fb0 <SpiritRadioInit+0x300>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d802      	bhi.n	8002efa <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	777b      	strb	r3, [r7, #29]
 8002ef8:	e033      	b.n	8002f62 <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002efa:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <SpiritRadioInit+0x2fc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	0b5b      	lsrs	r3, r3, #13
 8002f00:	ee07 3a90 	vmov	s15, r3
 8002f04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f08:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002fb8 <SpiritRadioInit+0x308>
 8002f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f10:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002fbc <SpiritRadioInit+0x30c>
 8002f14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002f1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f28:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3c:	dd09      	ble.n	8002f52 <SpiritRadioInit+0x2a2>
 8002f3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f46:	edc7 7a00 	vstr	s15, [r7]
 8002f4a:	783b      	ldrb	r3, [r7, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	e006      	b.n	8002f60 <SpiritRadioInit+0x2b0>
 8002f52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f5a:	edc7 7a00 	vstr	s15, [r7]
 8002f5e:	783b      	ldrb	r3, [r7, #0]
 8002f60:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002f62:	f107 030f 	add.w	r3, r7, #15
 8002f66:	461a      	mov	r2, r3
 8002f68:	2101      	movs	r1, #1
 8002f6a:	2007      	movs	r0, #7
 8002f6c:	f001 fa32 	bl	80043d4 <RadioSpiWriteRegisters>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <SpiritRadioInit+0x2f8>)
 8002f74:	b212      	sxth	r2, r2
 8002f76:	4611      	mov	r1, r2
 8002f78:	7019      	strb	r1, [r3, #0]
 8002f7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f7e:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <SpiritRadioInit+0x2fc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <SpiritRadioInit+0x310>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d91e      	bls.n	8002fc8 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <SpiritRadioInit+0x2fc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a0d      	ldr	r2, [pc, #52]	; (8002fc4 <SpiritRadioInit+0x314>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	bf8c      	ite	hi
 8002f94:	2301      	movhi	r3, #1
 8002f96:	2300      	movls	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f86c 	bl	8003078 <SpiritRadioSetXtalFlag>
 8002fa0:	e01d      	b.n	8002fde <SpiritRadioInit+0x32e>
 8002fa2:	bf00      	nop
 8002fa4:	49742400 	.word	0x49742400
 8002fa8:	20000278 	.word	0x20000278
 8002fac:	20000274 	.word	0x20000274
 8002fb0:	01c9c37f 	.word	0x01c9c37f
 8002fb4:	48800000 	.word	0x48800000
 8002fb8:	49afd520 	.word	0x49afd520
 8002fbc:	42800000 	.word	0x42800000
 8002fc0:	01c9c380 	.word	0x01c9c380
 8002fc4:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002fc8:	4b28      	ldr	r3, [pc, #160]	; (800306c <SpiritRadioInit+0x3bc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a28      	ldr	r2, [pc, #160]	; (8003070 <SpiritRadioInit+0x3c0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	bf8c      	ite	hi
 8002fd2:	2301      	movhi	r3, #1
 8002fd4:	2300      	movls	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 f84d 	bl	8003078 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	330c      	adds	r3, #12
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	206c      	movs	r0, #108	; 0x6c
 8002fe8:	f001 f9f4 	bl	80043d4 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002fec:	f107 031c 	add.w	r3, r7, #28
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2104      	movs	r1, #4
 8002ff4:	200c      	movs	r0, #12
 8002ff6:	f001 f9ed 	bl	80043d4 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002ffa:	f107 0318 	add.w	r3, r7, #24
 8002ffe:	461a      	mov	r2, r3
 8003000:	2104      	movs	r1, #4
 8003002:	201a      	movs	r0, #26
 8003004:	f001 f9e6 	bl	80043d4 <RadioSpiWriteRegisters>
 8003008:	4602      	mov	r2, r0
 800300a:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <SpiritRadioInit+0x3c4>)
 800300c:	b212      	sxth	r2, r2
 800300e:	4611      	mov	r1, r2
 8003010:	7019      	strb	r1, [r3, #0]
 8003012:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003016:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8003018:	2001      	movs	r0, #1
 800301a:	f000 ff15 	bl	8003e48 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8003022:	23e3      	movs	r3, #227	; 0xe3
 8003024:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8003026:	f107 031c 	add.w	r3, r7, #28
 800302a:	461a      	mov	r2, r3
 800302c:	2102      	movs	r1, #2
 800302e:	2099      	movs	r0, #153	; 0x99
 8003030:	f001 f9d0 	bl	80043d4 <RadioSpiWriteRegisters>
 8003034:	4602      	mov	r2, r0
 8003036:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <SpiritRadioInit+0x3c4>)
 8003038:	b212      	sxth	r2, r2
 800303a:	4611      	mov	r1, r2
 800303c:	7019      	strb	r1, [r3, #0]
 800303e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003042:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8003044:	2322      	movs	r3, #34	; 0x22
 8003046:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8003048:	f107 031c 	add.w	r3, r7, #28
 800304c:	461a      	mov	r2, r3
 800304e:	2101      	movs	r1, #1
 8003050:	20bc      	movs	r0, #188	; 0xbc
 8003052:	f001 f9bf 	bl	80043d4 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f9aa 	bl	80033b4 <SpiritRadioSetFrequencyBase>
 8003060:	4603      	mov	r3, r0
  
}
 8003062:	4618      	mov	r0, r3
 8003064:	3730      	adds	r7, #48	; 0x30
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000274 	.word	0x20000274
 8003070:	017d783f 	.word	0x017d783f
 8003074:	20000278 	.word	0x20000278

08003078 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8003086:	f107 030f 	add.w	r3, r7, #15
 800308a:	461a      	mov	r2, r3
 800308c:	2101      	movs	r1, #1
 800308e:	2001      	movs	r0, #1
 8003090:	f001 f9ec 	bl	800446c <RadioSpiReadRegisters>
 8003094:	4602      	mov	r2, r0
 8003096:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <SpiritRadioSetXtalFlag+0x70>)
 8003098:	b212      	sxth	r2, r2
 800309a:	4611      	mov	r1, r2
 800309c:	7019      	strb	r1, [r3, #0]
 800309e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030a2:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d105      	bne.n	80030b6 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	e004      	b.n	80030c0 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80030c0:	f107 030f 	add.w	r3, r7, #15
 80030c4:	461a      	mov	r2, r3
 80030c6:	2101      	movs	r1, #1
 80030c8:	2001      	movs	r0, #1
 80030ca:	f001 f983 	bl	80043d4 <RadioSpiWriteRegisters>
 80030ce:	4602      	mov	r2, r0
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <SpiritRadioSetXtalFlag+0x70>)
 80030d2:	b212      	sxth	r2, r2
 80030d4:	4611      	mov	r1, r2
 80030d6:	7019      	strb	r1, [r3, #0]
 80030d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030dc:	705a      	strb	r2, [r3, #1]
  
}
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000278 	.word	0x20000278

080030ec <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a3a      	ldr	r2, [pc, #232]	; (80031ec <SpiritRadioSearchWCP+0x100>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d306      	bcc.n	8003116 <SpiritRadioSearchWCP+0x2a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a39      	ldr	r2, [pc, #228]	; (80031f0 <SpiritRadioSearchWCP+0x104>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d802      	bhi.n	8003116 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8003110:	2306      	movs	r3, #6
 8003112:	73bb      	strb	r3, [r7, #14]
 8003114:	e01f      	b.n	8003156 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a36      	ldr	r2, [pc, #216]	; (80031f4 <SpiritRadioSearchWCP+0x108>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d906      	bls.n	800312c <SpiritRadioSearchWCP+0x40>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a35      	ldr	r2, [pc, #212]	; (80031f8 <SpiritRadioSearchWCP+0x10c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d802      	bhi.n	800312c <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8003126:	230c      	movs	r3, #12
 8003128:	73bb      	strb	r3, [r7, #14]
 800312a:	e014      	b.n	8003156 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a33      	ldr	r2, [pc, #204]	; (80031fc <SpiritRadioSearchWCP+0x110>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d906      	bls.n	8003142 <SpiritRadioSearchWCP+0x56>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a32      	ldr	r2, [pc, #200]	; (8003200 <SpiritRadioSearchWCP+0x114>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d802      	bhi.n	8003142 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 800313c:	2310      	movs	r3, #16
 800313e:	73bb      	strb	r3, [r7, #14]
 8003140:	e009      	b.n	8003156 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a2f      	ldr	r2, [pc, #188]	; (8003204 <SpiritRadioSearchWCP+0x118>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d905      	bls.n	8003156 <SpiritRadioSearchWCP+0x6a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a2e      	ldr	r2, [pc, #184]	; (8003208 <SpiritRadioSearchWCP+0x11c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d801      	bhi.n	8003156 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8003152:	2320      	movs	r3, #32
 8003154:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a2c      	ldr	r2, [pc, #176]	; (800320c <SpiritRadioSearchWCP+0x120>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	099b      	lsrs	r3, r3, #6
 8003160:	7bba      	ldrb	r2, [r7, #14]
 8003162:	fb02 f303 	mul.w	r3, r2, r3
 8003166:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8003168:	f241 631f 	movw	r3, #5663	; 0x161f
 800316c:	461a      	mov	r2, r3
 800316e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 800317c:	230f      	movs	r3, #15
 800317e:	73fb      	strb	r3, [r7, #15]
 8003180:	e023      	b.n	80031ca <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
 8003186:	e005      	b.n	8003194 <SpiritRadioSearchWCP+0xa8>
 8003188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	3301      	adds	r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003198:	2b0e      	cmp	r3, #14
 800319a:	dc0c      	bgt.n	80031b6 <SpiritRadioSearchWCP+0xca>
 800319c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a0:	4a1b      	ldr	r2, [pc, #108]	; (8003210 <SpiritRadioSearchWCP+0x124>)
 80031a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d8e8      	bhi.n	8003188 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 80031b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <SpiritRadioSearchWCP+0xde>
      i--;
 80031be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	425a      	negs	r2, r3
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	f002 0207 	and.w	r2, r2, #7
 80031d8:	bf58      	it	pl
 80031da:	4253      	negpl	r3, r2
 80031dc:	b25b      	sxtb	r3, r3
 80031de:	b2db      	uxtb	r3, r3
  
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	2e5f5680 	.word	0x2e5f5680
 80031f0:	390c2fe0 	.word	0x390c2fe0
 80031f4:	1701e47f 	.word	0x1701e47f
 80031f8:	1c146a60 	.word	0x1c146a60
 80031fc:	11d260bf 	.word	0x11d260bf
 8003200:	14ced7e0 	.word	0x14ced7e0
 8003204:	08e18f3f 	.word	0x08e18f3f
 8003208:	0a6fd060 	.word	0x0a6fd060
 800320c:	10624dd3 	.word	0x10624dd3
 8003210:	0800cde8 	.word	0x0800cde8

08003214 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	461a      	mov	r2, r3
 800321e:	2104      	movs	r1, #4
 8003220:	2008      	movs	r0, #8
 8003222:	f001 f923 	bl	800446c <RadioSpiReadRegisters>
 8003226:	4602      	mov	r2, r0
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <SpiritRadioGetSynthWord+0x48>)
 800322a:	b212      	sxth	r2, r2
 800322c:	4611      	mov	r1, r2
 800322e:	7019      	strb	r1, [r3, #0]
 8003230:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003234:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8003236:	793b      	ldrb	r3, [r7, #4]
 8003238:	055b      	lsls	r3, r3, #21
 800323a:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 800323e:	797b      	ldrb	r3, [r7, #5]
 8003240:	035b      	lsls	r3, r3, #13
 8003242:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8003244:	79bb      	ldrb	r3, [r7, #6]
 8003246:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8003248:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 800324a:	79fa      	ldrb	r2, [r7, #7]
 800324c:	08d2      	lsrs	r2, r2, #3
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	4413      	add	r3, r2
  
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000278 	.word	0x20000278

08003260 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8003266:	1dfb      	adds	r3, r7, #7
 8003268:	461a      	mov	r2, r3
 800326a:	2101      	movs	r1, #1
 800326c:	200b      	movs	r0, #11
 800326e:	f001 f8fd 	bl	800446c <RadioSpiReadRegisters>
 8003272:	4602      	mov	r2, r0
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <SpiritRadioGetBand+0x58>)
 8003276:	b212      	sxth	r2, r2
 8003278:	4611      	mov	r1, r2
 800327a:	7019      	strb	r1, [r3, #0]
 800327c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003280:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 800328c:	2300      	movs	r3, #0
 800328e:	e00e      	b.n	80032ae <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	2b03      	cmp	r3, #3
 8003298:	d101      	bne.n	800329e <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 800329a:	2301      	movs	r3, #1
 800329c:	e007      	b.n	80032ae <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d101      	bne.n	80032ac <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 80032a8:	2302      	movs	r3, #2
 80032aa:	e000      	b.n	80032ae <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 80032ac:	2303      	movs	r3, #3
  }
  
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000278 	.word	0x20000278

080032bc <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 80032c2:	1dfb      	adds	r3, r7, #7
 80032c4:	461a      	mov	r2, r3
 80032c6:	2101      	movs	r1, #1
 80032c8:	206c      	movs	r0, #108	; 0x6c
 80032ca:	f001 f8cf 	bl	800446c <RadioSpiReadRegisters>
 80032ce:	4602      	mov	r2, r0
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <SpiritRadioGetChannel+0x2c>)
 80032d2:	b212      	sxth	r2, r2
 80032d4:	4611      	mov	r1, r2
 80032d6:	7019      	strb	r1, [r3, #0]
 80032d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80032dc:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 80032de:	79fb      	ldrb	r3, [r7, #7]
  
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000278 	.word	0x20000278

080032ec <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 80032f2:	1dfb      	adds	r3, r7, #7
 80032f4:	461a      	mov	r2, r3
 80032f6:	2101      	movs	r1, #1
 80032f8:	200c      	movs	r0, #12
 80032fa:	f001 f8b7 	bl	800446c <RadioSpiReadRegisters>
 80032fe:	4602      	mov	r2, r0
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <SpiritRadioGetChannelSpace+0x38>)
 8003302:	b212      	sxth	r2, r2
 8003304:	4611      	mov	r1, r2
 8003306:	7019      	strb	r1, [r3, #0]
 8003308:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800330c:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	461a      	mov	r2, r3
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <SpiritRadioGetChannelSpace+0x3c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	0bdb      	lsrs	r3, r3, #15
  
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	20000278 	.word	0x20000278
 8003328:	20000274 	.word	0x20000274

0800332c <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	461a      	mov	r2, r3
 8003336:	2102      	movs	r1, #2
 8003338:	200e      	movs	r0, #14
 800333a:	f001 f897 	bl	800446c <RadioSpiReadRegisters>
 800333e:	4602      	mov	r2, r0
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <SpiritRadioGetFrequencyOffset+0x80>)
 8003342:	b212      	sxth	r2, r2
 8003344:	4611      	mov	r1, r2
 8003346:	7019      	strb	r1, [r3, #0]
 8003348:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800334c:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 800334e:	793b      	ldrb	r3, [r7, #4]
 8003350:	b29b      	uxth	r3, r3
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	b29a      	uxth	r2, r3
 8003356:	797b      	ldrb	r3, [r7, #5]
 8003358:	b29b      	uxth	r3, r3
 800335a:	4413      	add	r3, r2
 800335c:	b29b      	uxth	r3, r3
 800335e:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 8003360:	887b      	ldrh	r3, [r7, #2]
 8003362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8003370:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8003374:	b29b      	uxth	r3, r3
 8003376:	807b      	strh	r3, [r7, #2]
 8003378:	e004      	b.n	8003384 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 800337a:	887b      	ldrh	r3, [r7, #2]
 800337c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003380:	b29b      	uxth	r3, r3
 8003382:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8003384:	1cbb      	adds	r3, r7, #2
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 800338a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800338e:	4a08      	ldr	r2, [pc, #32]	; (80033b0 <SpiritRadioGetFrequencyOffset+0x84>)
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	da03      	bge.n	80033a2 <SpiritRadioGetFrequencyOffset+0x76>
 800339a:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800339e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80033a2:	149b      	asrs	r3, r3, #18
  
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000278 	.word	0x20000278
 80033b0:	20000274 	.word	0x20000274

080033b4 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 80033b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033b8:	b08a      	sub	sp, #40	; 0x28
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 80033be:	2300      	movs	r3, #0
 80033c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a79      	ldr	r2, [pc, #484]	; (80035ac <SpiritRadioSetFrequencyBase+0x1f8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d307      	bcc.n	80033dc <SpiritRadioSetFrequencyBase+0x28>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a78      	ldr	r2, [pc, #480]	; (80035b0 <SpiritRadioSetFrequencyBase+0x1fc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d803      	bhi.n	80033dc <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033da:	e022      	b.n	8003422 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a75      	ldr	r2, [pc, #468]	; (80035b4 <SpiritRadioSetFrequencyBase+0x200>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d907      	bls.n	80033f4 <SpiritRadioSetFrequencyBase+0x40>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a74      	ldr	r2, [pc, #464]	; (80035b8 <SpiritRadioSetFrequencyBase+0x204>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d803      	bhi.n	80033f4 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033f2:	e016      	b.n	8003422 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a71      	ldr	r2, [pc, #452]	; (80035bc <SpiritRadioSetFrequencyBase+0x208>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d907      	bls.n	800340c <SpiritRadioSetFrequencyBase+0x58>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a70      	ldr	r2, [pc, #448]	; (80035c0 <SpiritRadioSetFrequencyBase+0x20c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d803      	bhi.n	800340c <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8003404:	2302      	movs	r3, #2
 8003406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800340a:	e00a      	b.n	8003422 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a6d      	ldr	r2, [pc, #436]	; (80035c4 <SpiritRadioSetFrequencyBase+0x210>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d906      	bls.n	8003422 <SpiritRadioSetFrequencyBase+0x6e>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a6c      	ldr	r2, [pc, #432]	; (80035c8 <SpiritRadioSetFrequencyBase+0x214>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d802      	bhi.n	8003422 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 800341c:	2303      	movs	r3, #3
 800341e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8003422:	f7ff ff83 	bl	800332c <SpiritRadioGetFrequencyOffset>
 8003426:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8003428:	f7ff ff60 	bl	80032ec <SpiritRadioGetChannelSpace>
 800342c:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800342e:	f7ff ff45 	bl	80032bc <SpiritRadioGetChannel>
 8003432:	4603      	mov	r3, r0
 8003434:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8003436:	6a3a      	ldr	r2, [r7, #32]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	441a      	add	r2, r3
 800343c:	7efb      	ldrb	r3, [r7, #27]
 800343e:	69f9      	ldr	r1, [r7, #28]
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8003448:	f000 fd60 	bl	8003f0c <SpiritRadioGetRefDiv>
 800344c:	4603      	mov	r3, r0
 800344e:	3301      	adds	r3, #1
 8003450:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 8003452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003456:	2b03      	cmp	r3, #3
 8003458:	d839      	bhi.n	80034ce <SpiritRadioSetFrequencyBase+0x11a>
 800345a:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <SpiritRadioSetFrequencyBase+0xac>)
 800345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003460:	080034b9 	.word	0x080034b9
 8003464:	080034a1 	.word	0x080034a1
 8003468:	08003489 	.word	0x08003489
 800346c:	08003471 	.word	0x08003471
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	4a56      	ldr	r2, [pc, #344]	; (80035cc <SpiritRadioSetFrequencyBase+0x218>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d803      	bhi.n	8003480 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003478:	2000      	movs	r0, #0
 800347a:	f7fe fded 	bl	8002058 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800347e:	e026      	b.n	80034ce <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003480:	2001      	movs	r0, #1
 8003482:	f7fe fde9 	bl	8002058 <SpiritCalibrationSelectVco>
    break;
 8003486:	e022      	b.n	80034ce <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	4a51      	ldr	r2, [pc, #324]	; (80035d0 <SpiritRadioSetFrequencyBase+0x21c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d803      	bhi.n	8003498 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003490:	2000      	movs	r0, #0
 8003492:	f7fe fde1 	bl	8002058 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003496:	e01a      	b.n	80034ce <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003498:	2001      	movs	r0, #1
 800349a:	f7fe fddd 	bl	8002058 <SpiritCalibrationSelectVco>
    break;
 800349e:	e016      	b.n	80034ce <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	4a4c      	ldr	r2, [pc, #304]	; (80035d4 <SpiritRadioSetFrequencyBase+0x220>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d803      	bhi.n	80034b0 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7fe fdd5 	bl	8002058 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80034ae:	e00e      	b.n	80034ce <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80034b0:	2001      	movs	r0, #1
 80034b2:	f7fe fdd1 	bl	8002058 <SpiritCalibrationSelectVco>
    break;
 80034b6:	e00a      	b.n	80034ce <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	4a47      	ldr	r2, [pc, #284]	; (80035d8 <SpiritRadioSetFrequencyBase+0x224>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d803      	bhi.n	80034c8 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80034c0:	2000      	movs	r0, #0
 80034c2:	f7fe fdc9 	bl	8002058 <SpiritCalibrationSelectVco>
 80034c6:	e002      	b.n	80034ce <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80034c8:	2001      	movs	r0, #1
 80034ca:	f7fe fdc5 	bl	8002058 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff fe0c 	bl	80030ec <SpiritRadioSearchWCP>
 80034d4:	4603      	mov	r3, r0
 80034d6:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 80034d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034dc:	4a3f      	ldr	r2, [pc, #252]	; (80035dc <SpiritRadioSetFrequencyBase+0x228>)
 80034de:	5cd3      	ldrb	r3, [r2, r3]
 80034e0:	461a      	mov	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	fb02 f303 	mul.w	r3, r2, r3
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd f80b 	bl	8000504 <__aeabi_ui2d>
 80034ee:	4604      	mov	r4, r0
 80034f0:	460d      	mov	r5, r1
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	049b      	lsls	r3, r3, #18
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd f814 	bl	8000524 <__aeabi_i2d>
 80034fc:	4680      	mov	r8, r0
 80034fe:	4689      	mov	r9, r1
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <SpiritRadioSetFrequencyBase+0x22c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7fc fffd 	bl	8000504 <__aeabi_ui2d>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4640      	mov	r0, r8
 8003510:	4649      	mov	r1, r9
 8003512:	f7fd f99b 	bl	800084c <__aeabi_ddiv>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4620      	mov	r0, r4
 800351c:	4629      	mov	r1, r5
 800351e:	f7fd f86b 	bl	80005f8 <__aeabi_dmul>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4610      	mov	r0, r2
 8003528:	4619      	mov	r1, r3
 800352a:	f7fd fa77 	bl	8000a1c <__aeabi_d2uiz>
 800352e:	4603      	mov	r3, r0
 8003530:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	0d5b      	lsrs	r3, r3, #21
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	b2da      	uxtb	r2, r3
 800353e:	7cbb      	ldrb	r3, [r7, #18]
 8003540:	015b      	lsls	r3, r3, #5
 8003542:	b2db      	uxtb	r3, r3
 8003544:	4313      	orrs	r3, r2
 8003546:	b2db      	uxtb	r3, r3
 8003548:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	0b5b      	lsrs	r3, r3, #13
 800354e:	b2db      	uxtb	r3, r3
 8003550:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	b2db      	uxtb	r3, r3
 8003558:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	b2da      	uxtb	r2, r3
 8003562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003566:	491f      	ldr	r1, [pc, #124]	; (80035e4 <SpiritRadioSetFrequencyBase+0x230>)
 8003568:	5ccb      	ldrb	r3, [r1, r3]
 800356a:	4313      	orrs	r3, r2
 800356c:	b2db      	uxtb	r3, r3
 800356e:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8003570:	f107 0308 	add.w	r3, r7, #8
 8003574:	461a      	mov	r2, r3
 8003576:	2104      	movs	r1, #4
 8003578:	2008      	movs	r0, #8
 800357a:	f000 ff2b 	bl	80043d4 <RadioSpiWriteRegisters>
 800357e:	4602      	mov	r2, r0
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <SpiritRadioSetFrequencyBase+0x234>)
 8003582:	b212      	sxth	r2, r2
 8003584:	4611      	mov	r1, r2
 8003586:	7019      	strb	r1, [r3, #0]
 8003588:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800358c:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 800358e:	4b17      	ldr	r3, [pc, #92]	; (80035ec <SpiritRadioSetFrequencyBase+0x238>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d103      	bne.n	800359e <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 8003596:	f7fe ffbf 	bl	8002518 <SpiritManagementWaVcoCalibration>
 800359a:	4603      	mov	r3, r0
 800359c:	e000      	b.n	80035a0 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3728      	adds	r7, #40	; 0x28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035aa:	bf00      	nop
 80035ac:	2e5f5680 	.word	0x2e5f5680
 80035b0:	390c2fe0 	.word	0x390c2fe0
 80035b4:	1701e47f 	.word	0x1701e47f
 80035b8:	1c146a60 	.word	0x1c146a60
 80035bc:	11d260bf 	.word	0x11d260bf
 80035c0:	14ced7e0 	.word	0x14ced7e0
 80035c4:	08e18f3f 	.word	0x08e18f3f
 80035c8:	0a6fd060 	.word	0x0a6fd060
 80035cc:	099cf4e1 	.word	0x099cf4e1
 80035d0:	1339e9c3 	.word	0x1339e9c3
 80035d4:	19a28d05 	.word	0x19a28d05
 80035d8:	33451a0a 	.word	0x33451a0a
 80035dc:	0800cd2c 	.word	0x0800cd2c
 80035e0:	20000274 	.word	0x20000274
 80035e4:	0800cd30 	.word	0x0800cd30
 80035e8:	20000278 	.word	0x20000278
 80035ec:	20000007 	.word	0x20000007

080035f0 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 80035f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 80035f8:	f7ff fe0c 	bl	8003214 <SpiritRadioGetSynthWord>
 80035fc:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 80035fe:	f7ff fe2f 	bl	8003260 <SpiritRadioGetBand>
 8003602:	4603      	mov	r3, r0
 8003604:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8003606:	f000 fc81 	bl	8003f0c <SpiritRadioGetRefDiv>
 800360a:	4603      	mov	r3, r0
 800360c:	3301      	adds	r3, #1
 800360e:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7fc ff77 	bl	8000504 <__aeabi_ui2d>
 8003616:	4604      	mov	r4, r0
 8003618:	460d      	mov	r5, r1
 800361a:	4b19      	ldr	r3, [pc, #100]	; (8003680 <SpiritRadioGetFrequencyBase+0x90>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7fc ff70 	bl	8000504 <__aeabi_ui2d>
 8003624:	4680      	mov	r8, r0
 8003626:	4689      	mov	r9, r1
 8003628:	78bb      	ldrb	r3, [r7, #2]
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	4915      	ldr	r1, [pc, #84]	; (8003684 <SpiritRadioGetFrequencyBase+0x94>)
 800362e:	5c8a      	ldrb	r2, [r1, r2]
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	049b      	lsls	r3, r3, #18
 8003636:	4618      	mov	r0, r3
 8003638:	f7fc ff74 	bl	8000524 <__aeabi_i2d>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4640      	mov	r0, r8
 8003642:	4649      	mov	r1, r9
 8003644:	f7fd f902 	bl	800084c <__aeabi_ddiv>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4620      	mov	r0, r4
 800364e:	4629      	mov	r1, r5
 8003650:	f7fc ffd2 	bl	80005f8 <__aeabi_dmul>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	ec43 2b17 	vmov	d7, r2, r3
 800365c:	eeb0 0a47 	vmov.f32	s0, s14
 8003660:	eef0 0a67 	vmov.f32	s1, s15
 8003664:	f009 fa60 	bl	800cb28 <round>
 8003668:	ec53 2b10 	vmov	r2, r3, d0
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	f7fd f9d4 	bl	8000a1c <__aeabi_d2uiz>
 8003674:	4603      	mov	r3, r0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003680:	20000274 	.word	0x20000274
 8003684:	0800cd2c 	.word	0x0800cd2c

08003688 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8003694:	2300      	movs	r3, #0
 8003696:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003698:	230f      	movs	r3, #15
 800369a:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 80036a0:	f000 fc86 	bl	8003fb0 <SpiritRadioGetDigDiv>
 80036a4:	4603      	mov	r3, r0
 80036a6:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 80036a8:	e015      	b.n	80036d6 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 80036aa:	4b4f      	ldr	r3, [pc, #316]	; (80037e8 <SpiritRadioSearchDatarateME+0x160>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036b2:	f1c3 0114 	rsb	r1, r3, #20
 80036b6:	7ebb      	ldrb	r3, [r7, #26]
 80036b8:	440b      	add	r3, r1
 80036ba:	fa22 f303 	lsr.w	r3, r2, r3
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 80036c4:	2301      	movs	r3, #1
 80036c6:	763b      	strb	r3, [r7, #24]
 80036c8:	e005      	b.n	80036d6 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 80036ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 80036d6:	7e3b      	ldrb	r3, [r7, #24]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <SpiritRadioSearchDatarateME+0x5e>
 80036de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	dae1      	bge.n	80036aa <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 80036e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	da01      	bge.n	80036f2 <SpiritRadioSearchDatarateME+0x6a>
 80036ee:	2300      	movs	r3, #0
 80036f0:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 80036f2:	7ffa      	ldrb	r2, [r7, #31]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 80036f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036fc:	f1c3 0317 	rsb	r3, r3, #23
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	409a      	lsls	r2, r3
 8003704:	4b38      	ldr	r3, [pc, #224]	; (80037e8 <SpiritRadioSearchDatarateME+0x160>)
 8003706:	6819      	ldr	r1, [r3, #0]
 8003708:	7ebb      	ldrb	r3, [r7, #26]
 800370a:	3305      	adds	r3, #5
 800370c:	fa21 f303 	lsr.w	r3, r1, r3
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8003716:	2300      	movs	r3, #0
 8003718:	77bb      	strb	r3, [r7, #30]
 800371a:	e031      	b.n	8003780 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 800371c:	7e7a      	ldrb	r2, [r7, #25]
 800371e:	7fbb      	ldrb	r3, [r7, #30]
 8003720:	4413      	add	r3, r2
 8003722:	2b01      	cmp	r3, #1
 8003724:	d021      	beq.n	800376a <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	b29a      	uxth	r2, r3
 800372a:	7e7b      	ldrb	r3, [r7, #25]
 800372c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8003730:	7fbb      	ldrb	r3, [r7, #30]
 8003732:	440b      	add	r3, r1
 8003734:	3b01      	subs	r3, #1
 8003736:	4618      	mov	r0, r3
 8003738:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <SpiritRadioSearchDatarateME+0x160>)
 800373a:	6819      	ldr	r1, [r3, #0]
 800373c:	7ebb      	ldrb	r3, [r7, #26]
 800373e:	3305      	adds	r3, #5
 8003740:	fa21 f303 	lsr.w	r3, r1, r3
 8003744:	fb03 f100 	mul.w	r1, r3, r0
 8003748:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800374c:	f1c3 0317 	rsb	r3, r3, #23
 8003750:	fa21 f303 	lsr.w	r3, r1, r3
 8003754:	b29b      	uxth	r3, r3
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	b29a      	uxth	r2, r3
 800375a:	7fbb      	ldrb	r3, [r7, #30]
 800375c:	b212      	sxth	r2, r2
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	3320      	adds	r3, #32
 8003762:	443b      	add	r3, r7
 8003764:	f823 2c10 	strh.w	r2, [r3, #-16]
 8003768:	e007      	b.n	800377a <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 800376a:	7fbb      	ldrb	r3, [r7, #30]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	3320      	adds	r3, #32
 8003770:	443b      	add	r3, r7
 8003772:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003776:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 800377a:	7fbb      	ldrb	r3, [r7, #30]
 800377c:	3301      	adds	r3, #1
 800377e:	77bb      	strb	r3, [r7, #30]
 8003780:	7fbb      	ldrb	r3, [r7, #30]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d9ca      	bls.n	800371c <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8003786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800378a:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 800378c:	2300      	movs	r3, #0
 800378e:	76fb      	strb	r3, [r7, #27]
 8003790:	e021      	b.n	80037d6 <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8003792:	7efb      	ldrb	r3, [r7, #27]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	3320      	adds	r3, #32
 8003798:	443b      	add	r3, r7
 800379a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bfb8      	it	lt
 80037a2:	425b      	neglt	r3, r3
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	8bba      	ldrh	r2, [r7, #28]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d911      	bls.n	80037d0 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 80037ac:	7efb      	ldrb	r3, [r7, #27]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	3320      	adds	r3, #32
 80037b2:	443b      	add	r3, r7
 80037b4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bfb8      	it	lt
 80037bc:	425b      	neglt	r3, r3
 80037be:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 80037c0:	7e7a      	ldrb	r2, [r7, #25]
 80037c2:	7efb      	ldrb	r3, [r7, #27]
 80037c4:	4413      	add	r3, r2
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 80037d0:	7efb      	ldrb	r3, [r7, #27]
 80037d2:	3301      	adds	r3, #1
 80037d4:	76fb      	strb	r3, [r7, #27]
 80037d6:	7efb      	ldrb	r3, [r7, #27]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d9da      	bls.n	8003792 <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000274 	.word	0x20000274

080037ec <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 80037fe:	f000 fbd7 	bl	8003fb0 <SpiritRadioGetDigDiv>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003808:	2302      	movs	r3, #2
 800380a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800380e:	e002      	b.n	8003816 <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8003816:	4b63      	ldr	r3, [pc, #396]	; (80039a4 <SpiritRadioSearchChannelBwME+0x1b8>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	4a61      	ldr	r2, [pc, #388]	; (80039a8 <SpiritRadioSearchChannelBwME+0x1bc>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 800382c:	2300      	movs	r3, #0
 800382e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003832:	e006      	b.n	8003842 <SpiritRadioSearchChannelBwME+0x56>
 8003834:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003838:	b2db      	uxtb	r3, r3
 800383a:	3301      	adds	r3, #1
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003842:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003846:	2b59      	cmp	r3, #89	; 0x59
 8003848:	dc0f      	bgt.n	800386a <SpiritRadioSearchChannelBwME+0x7e>
 800384a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800384e:	4a57      	ldr	r2, [pc, #348]	; (80039ac <SpiritRadioSearchChannelBwME+0x1c0>)
 8003850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003854:	461a      	mov	r2, r3
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	fb02 f303 	mul.w	r3, r2, r3
 800385c:	4a54      	ldr	r2, [pc, #336]	; (80039b0 <SpiritRadioSearchChannelBwME+0x1c4>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	0adb      	lsrs	r3, r3, #11
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	429a      	cmp	r2, r3
 8003868:	d3e4      	bcc.n	8003834 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 800386a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800386e:	2b00      	cmp	r3, #0
 8003870:	d077      	beq.n	8003962 <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8003872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003876:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8003878:	2300      	movs	r3, #0
 800387a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800387e:	e03a      	b.n	80038f6 <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003880:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003884:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003888:	4413      	add	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	dc06      	bgt.n	800389c <SpiritRadioSearchChannelBwME+0xb0>
 800388e:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003892:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003896:	4413      	add	r3, r2
 8003898:	2b5a      	cmp	r3, #90	; 0x5a
 800389a:	dc1e      	bgt.n	80038da <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	f997 101b 	ldrsb.w	r1, [r7, #27]
 80038a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80038a8:	440b      	add	r3, r1
 80038aa:	3b01      	subs	r3, #1
 80038ac:	493f      	ldr	r1, [pc, #252]	; (80039ac <SpiritRadioSearchChannelBwME+0x1c0>)
 80038ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80038b2:	4619      	mov	r1, r3
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	493d      	ldr	r1, [pc, #244]	; (80039b0 <SpiritRadioSearchChannelBwME+0x1c4>)
 80038bc:	fba1 1303 	umull	r1, r3, r1, r3
 80038c0:	0adb      	lsrs	r3, r3, #11
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80038cc:	b212      	sxth	r2, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	3328      	adds	r3, #40	; 0x28
 80038d2:	443b      	add	r3, r7
 80038d4:	f823 2c14 	strh.w	r2, [r3, #-20]
 80038d8:	e008      	b.n	80038ec <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 80038da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	3328      	adds	r3, #40	; 0x28
 80038e2:	443b      	add	r3, r7
 80038e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80038e8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 80038ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80038f0:	3301      	adds	r3, #1
 80038f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80038f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d9c0      	bls.n	8003880 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 80038fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003902:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003904:	2300      	movs	r3, #0
 8003906:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800390a:	e026      	b.n	800395a <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 800390c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	3328      	adds	r3, #40	; 0x28
 8003914:	443b      	add	r3, r7
 8003916:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	bfb8      	it	lt
 800391e:	425b      	neglt	r3, r3
 8003920:	b29b      	uxth	r3, r3
 8003922:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003924:	429a      	cmp	r2, r3
 8003926:	d913      	bls.n	8003950 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003928:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	3328      	adds	r3, #40	; 0x28
 8003930:	443b      	add	r3, r7
 8003932:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003936:	2b00      	cmp	r3, #0
 8003938:	bfb8      	it	lt
 800393a:	425b      	neglt	r3, r3
 800393c:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 800393e:	7efa      	ldrb	r2, [r7, #27]
 8003940:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003944:	4413      	add	r3, r2
 8003946:	b2db      	uxtb	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8003950:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003954:	3301      	adds	r3, #1
 8003956:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800395a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800395e:	2b02      	cmp	r3, #2
 8003960:	d9d4      	bls.n	800390c <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8003962:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003966:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003968:	fb82 1203 	smull	r1, r2, r2, r3
 800396c:	1052      	asrs	r2, r2, #1
 800396e:	17db      	asrs	r3, r3, #31
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	b25b      	sxtb	r3, r3
 8003974:	b2da      	uxtb	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 800397a:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 800397e:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003980:	fb83 1302 	smull	r1, r3, r3, r2
 8003984:	1059      	asrs	r1, r3, #1
 8003986:	17d3      	asrs	r3, r2, #31
 8003988:	1ac9      	subs	r1, r1, r3
 800398a:	460b      	mov	r3, r1
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	440b      	add	r3, r1
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	b25b      	sxtb	r3, r3
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	701a      	strb	r2, [r3, #0]
  
}
 800399a:	bf00      	nop
 800399c:	3728      	adds	r7, #40	; 0x28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000274 	.word	0x20000274
 80039a8:	51eb851f 	.word	0x51eb851f
 80039ac:	0800cd34 	.word	0x0800cd34
 80039b0:	c9a633fd 	.word	0xc9a633fd
 80039b4:	38e38e39 	.word	0x38e38e39

080039b8 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 80039b8:	b5b0      	push	{r4, r5, r7, lr}
 80039ba:	b08a      	sub	sp, #40	; 0x28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 80039c8:	4b53      	ldr	r3, [pc, #332]	; (8003b18 <SpiritRadioSearchFreqDevME+0x160>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	ee07 3a90 	vmov	s15, r3
 80039d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039d4:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003b1c <SpiritRadioSearchFreqDevME+0x164>
 80039d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039dc:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 80039e0:	2300      	movs	r3, #0
 80039e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039e6:	e028      	b.n	8003a3a <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 80039e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039ec:	2201      	movs	r2, #1
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fc fd96 	bl	8000524 <__aeabi_i2d>
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	4b48      	ldr	r3, [pc, #288]	; (8003b20 <SpiritRadioSearchFreqDevME+0x168>)
 80039fe:	f7fc fdfb 	bl	80005f8 <__aeabi_dmul>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4610      	mov	r0, r2
 8003a08:	4619      	mov	r1, r3
 8003a0a:	f7fd f807 	bl	8000a1c <__aeabi_d2uiz>
 8003a0e:	ee07 0a90 	vmov	s15, r0
 8003a12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a16:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a22:	ee17 3a90 	vmov	r3, s15
 8003a26:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d309      	bcc.n	8003a44 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a34:	3301      	adds	r3, #1
 8003a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a3e:	2b09      	cmp	r3, #9
 8003a40:	d9d2      	bls.n	80039e8 <SpiritRadioSearchFreqDevME+0x30>
 8003a42:	e000      	b.n	8003a46 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003a44:	bf00      	nop
  }
  (*pcE) = i;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a4c:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a54:	e043      	b.n	8003ade <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 8003a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fc fd60 	bl	8000524 <__aeabi_i2d>
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	4b2e      	ldr	r3, [pc, #184]	; (8003b24 <SpiritRadioSearchFreqDevME+0x16c>)
 8003a6a:	f7fc fc0f 	bl	800028c <__adddf3>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a7e:	f7fc fee5 	bl	800084c <__aeabi_ddiv>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4614      	mov	r4, r2
 8003a88:	461d      	mov	r5, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2301      	movs	r3, #1
 8003a92:	4093      	lsls	r3, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fc fd45 	bl	8000524 <__aeabi_i2d>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	f7fc fda9 	bl	80005f8 <__aeabi_dmul>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4610      	mov	r0, r2
 8003aac:	4619      	mov	r1, r3
 8003aae:	f7fc ffb5 	bl	8000a1c <__aeabi_d2uiz>
 8003ab2:	ee07 0a90 	vmov	s15, r0
 8003ab6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003aba:	edd7 7a06 	vldr	s15, [r7, #24]
 8003abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ac6:	ee17 3a90 	vmov	r3, s15
 8003aca:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d309      	bcc.n	8003ae8 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ae2:	2b07      	cmp	r3, #7
 8003ae4:	d9b7      	bls.n	8003a56 <SpiritRadioSearchFreqDevME+0x9e>
 8003ae6:	e000      	b.n	8003aea <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003ae8:	bf00      	nop
  }
  
  (*pcM)=i;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003af0:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	1ad2      	subs	r2, r2, r3
 8003af8:	69f9      	ldr	r1, [r7, #28]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1acb      	subs	r3, r1, r3
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d205      	bcs.n	8003b0e <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	701a      	strb	r2, [r3, #0]
  
}
 8003b0e:	bf00      	nop
 8003b10:	3728      	adds	r7, #40	; 0x28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bdb0      	pop	{r4, r5, r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000274 	.word	0x20000274
 8003b1c:	48800000 	.word	0x48800000
 8003b20:	401e0000 	.word	0x401e0000
 8003b24:	40200000 	.word	0x40200000

08003b28 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4a74      	ldr	r2, [pc, #464]	; (8003d10 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d30c      	bcc.n	8003b5e <SpiritRadioGetdBm2Reg+0x36>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a73      	ldr	r2, [pc, #460]	; (8003d14 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d808      	bhi.n	8003b5e <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a71      	ldr	r2, [pc, #452]	; (8003d18 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d822      	bhi.n	8003b9e <SpiritRadioGetdBm2Reg+0x76>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	75fb      	strb	r3, [r7, #23]
 8003b5c:	e01f      	b.n	8003b9e <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a6e      	ldr	r2, [pc, #440]	; (8003d1c <SpiritRadioGetdBm2Reg+0x1f4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d906      	bls.n	8003b74 <SpiritRadioGetdBm2Reg+0x4c>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a6d      	ldr	r2, [pc, #436]	; (8003d20 <SpiritRadioGetdBm2Reg+0x1f8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d802      	bhi.n	8003b74 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	75fb      	strb	r3, [r7, #23]
 8003b72:	e014      	b.n	8003b9e <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a6b      	ldr	r2, [pc, #428]	; (8003d24 <SpiritRadioGetdBm2Reg+0x1fc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d906      	bls.n	8003b8a <SpiritRadioGetdBm2Reg+0x62>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a6a      	ldr	r2, [pc, #424]	; (8003d28 <SpiritRadioGetdBm2Reg+0x200>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d802      	bhi.n	8003b8a <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8003b84:	2303      	movs	r3, #3
 8003b86:	75fb      	strb	r3, [r7, #23]
 8003b88:	e009      	b.n	8003b9e <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a67      	ldr	r2, [pc, #412]	; (8003d2c <SpiritRadioGetdBm2Reg+0x204>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d905      	bls.n	8003b9e <SpiritRadioGetdBm2Reg+0x76>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a66      	ldr	r2, [pc, #408]	; (8003d30 <SpiritRadioGetdBm2Reg+0x208>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d801      	bhi.n	8003b9e <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003ba2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bae:	dd2f      	ble.n	8003c10 <SpiritRadioGetdBm2Reg+0xe8>
 8003bb0:	7dfa      	ldrb	r2, [r7, #23]
 8003bb2:	4960      	ldr	r1, [pc, #384]	; (8003d34 <SpiritRadioGetdBm2Reg+0x20c>)
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	4413      	add	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	440b      	add	r3, r1
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	edd3 7a00 	vldr	s15, [r3]
 8003bc4:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8003bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bcc:	7dfa      	ldrb	r2, [r7, #23]
 8003bce:	4959      	ldr	r1, [pc, #356]	; (8003d34 <SpiritRadioGetdBm2Reg+0x20c>)
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4413      	add	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	440b      	add	r3, r1
 8003bda:	330c      	adds	r3, #12
 8003bdc:	ed93 6a00 	vldr	s12, [r3]
 8003be0:	7dfa      	ldrb	r2, [r7, #23]
 8003be2:	4954      	ldr	r1, [pc, #336]	; (8003d34 <SpiritRadioGetdBm2Reg+0x20c>)
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	440b      	add	r3, r1
 8003bee:	3308      	adds	r3, #8
 8003bf0:	edd3 6a00 	vldr	s13, [r3]
 8003bf4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bfc:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c08:	dd02      	ble.n	8003c10 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	75bb      	strb	r3, [r7, #22]
 8003c0e:	e035      	b.n	8003c7c <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003c10:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1c:	d82e      	bhi.n	8003c7c <SpiritRadioGetdBm2Reg+0x154>
 8003c1e:	7dfa      	ldrb	r2, [r7, #23]
 8003c20:	4944      	ldr	r1, [pc, #272]	; (8003d34 <SpiritRadioGetdBm2Reg+0x20c>)
 8003c22:	4613      	mov	r3, r2
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	4413      	add	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	440b      	add	r3, r1
 8003c2c:	3308      	adds	r3, #8
 8003c2e:	edd3 7a00 	vldr	s15, [r3]
 8003c32:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003d38 <SpiritRadioGetdBm2Reg+0x210>
 8003c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3a:	7dfa      	ldrb	r2, [r7, #23]
 8003c3c:	493d      	ldr	r1, [pc, #244]	; (8003d34 <SpiritRadioGetdBm2Reg+0x20c>)
 8003c3e:	4613      	mov	r3, r2
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	440b      	add	r3, r1
 8003c48:	330c      	adds	r3, #12
 8003c4a:	ed93 6a00 	vldr	s12, [r3]
 8003c4e:	7dfa      	ldrb	r2, [r7, #23]
 8003c50:	4938      	ldr	r1, [pc, #224]	; (8003d34 <SpiritRadioGetdBm2Reg+0x20c>)
 8003c52:	4613      	mov	r3, r2
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	4413      	add	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	edd3 6a00 	vldr	s13, [r3]
 8003c62:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c6a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c76:	d501      	bpl.n	8003c7c <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003c7c:	7dfa      	ldrb	r2, [r7, #23]
 8003c7e:	7dbb      	ldrb	r3, [r7, #22]
 8003c80:	0059      	lsls	r1, r3, #1
 8003c82:	482c      	ldr	r0, [pc, #176]	; (8003d34 <SpiritRadioGetdBm2Reg+0x20c>)
 8003c84:	4613      	mov	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4413      	add	r3, r2
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	440b      	add	r3, r1
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4403      	add	r3, r0
 8003c92:	ed93 7a00 	vldr	s14, [r3]
 8003c96:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c9e:	7dfa      	ldrb	r2, [r7, #23]
 8003ca0:	7dbb      	ldrb	r3, [r7, #22]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	1c59      	adds	r1, r3, #1
 8003ca6:	4823      	ldr	r0, [pc, #140]	; (8003d34 <SpiritRadioGetdBm2Reg+0x20c>)
 8003ca8:	4613      	mov	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4413      	add	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	440b      	add	r3, r1
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4403      	add	r3, r0
 8003cb6:	edd3 7a00 	vldr	s15, [r3]
 8003cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cbe:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8003cc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd2:	d503      	bpl.n	8003cdc <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8003cd4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	e00a      	b.n	8003cf2 <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 8003cdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ce0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003d3c <SpiritRadioGetdBm2Reg+0x214>
 8003ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cec:	dd01      	ble.n	8003cf2 <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 8003cee:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <SpiritRadioGetdBm2Reg+0x218>)
 8003cf0:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8003cf2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cfa:	edc7 7a01 	vstr	s15, [r7, #4]
 8003cfe:	793b      	ldrb	r3, [r7, #4]
 8003d00:	b2db      	uxtb	r3, r3
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	2e5f5680 	.word	0x2e5f5680
 8003d14:	390c2fe0 	.word	0x390c2fe0
 8003d18:	35a4e8ff 	.word	0x35a4e8ff
 8003d1c:	1701e47f 	.word	0x1701e47f
 8003d20:	1c146a60 	.word	0x1c146a60
 8003d24:	11d260bf 	.word	0x11d260bf
 8003d28:	14ced7e0 	.word	0x14ced7e0
 8003d2c:	08e18f3f 	.word	0x08e18f3f
 8003d30:	0a6fd060 	.word	0x0a6fd060
 8003d34:	0800ce08 	.word	0x0800ce08
 8003d38:	42200000 	.word	0x42200000
 8003d3c:	42b40000 	.word	0x42b40000
 8003d40:	42b40000 	.word	0x42b40000

08003d44 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	ed87 0a00 	vstr	s0, [r7]
 8003d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003d52:	f7ff fc4d 	bl	80035f0 <SpiritRadioGetFrequencyBase>
 8003d56:	4603      	mov	r3, r0
 8003d58:	ed97 0a00 	vldr	s0, [r7]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fee3 	bl	8003b28 <SpiritRadioGetdBm2Reg>
 8003d62:	4603      	mov	r3, r0
 8003d64:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	f1c3 0317 	rsb	r3, r3, #23
 8003d6c:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8003d6e:	f107 020e 	add.w	r2, r7, #14
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fb2c 	bl	80043d4 <RadioSpiWriteRegisters>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <SpiritRadioSetPALeveldBm+0x50>)
 8003d80:	b212      	sxth	r2, r2
 8003d82:	4611      	mov	r1, r2
 8003d84:	7019      	strb	r1, [r3, #0]
 8003d86:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d8a:	705a      	strb	r2, [r3, #1]
  
}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20000278 	.word	0x20000278

08003d98 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003da2:	f107 030f 	add.w	r3, r7, #15
 8003da6:	461a      	mov	r2, r3
 8003da8:	2101      	movs	r1, #1
 8003daa:	2018      	movs	r0, #24
 8003dac:	f000 fb5e 	bl	800446c <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003dba:	7bfa      	ldrb	r2, [r7, #15]
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003dc4:	f107 030f 	add.w	r3, r7, #15
 8003dc8:	461a      	mov	r2, r3
 8003dca:	2101      	movs	r1, #1
 8003dcc:	2018      	movs	r0, #24
 8003dce:	f000 fb01 	bl	80043d4 <RadioSpiWriteRegisters>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <SpiritRadioSetPACwc+0x54>)
 8003dd6:	b212      	sxth	r2, r2
 8003dd8:	4611      	mov	r1, r2
 8003dda:	7019      	strb	r1, [r3, #0]
 8003ddc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003de0:	705a      	strb	r2, [r3, #1]
  
}
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000278 	.word	0x20000278

08003df0 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003dfa:	f107 030f 	add.w	r3, r7, #15
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2101      	movs	r1, #1
 8003e02:	2018      	movs	r0, #24
 8003e04:	f000 fb32 	bl	800446c <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	f023 0307 	bic.w	r3, r3, #7
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8003e12:	7bfa      	ldrb	r2, [r7, #15]
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003e1c:	f107 030f 	add.w	r3, r7, #15
 8003e20:	461a      	mov	r2, r3
 8003e22:	2101      	movs	r1, #1
 8003e24:	2018      	movs	r0, #24
 8003e26:	f000 fad5 	bl	80043d4 <RadioSpiWriteRegisters>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003e2e:	b212      	sxth	r2, r2
 8003e30:	4611      	mov	r1, r2
 8003e32:	7019      	strb	r1, [r3, #0]
 8003e34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e38:	705a      	strb	r2, [r3, #1]
  
}
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000278 	.word	0x20000278

08003e48 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003e56:	f107 030f 	add.w	r3, r7, #15
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	201e      	movs	r0, #30
 8003e60:	f000 fb04 	bl	800446c <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d105      	bne.n	8003e76 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e004      	b.n	8003e80 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003e80:	f107 030f 	add.w	r3, r7, #15
 8003e84:	461a      	mov	r2, r3
 8003e86:	2101      	movs	r1, #1
 8003e88:	201e      	movs	r0, #30
 8003e8a:	f000 faa3 	bl	80043d4 <RadioSpiWriteRegisters>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <SpiritRadioAFCFreezeOnSync+0x60>)
 8003e92:	b212      	sxth	r2, r2
 8003e94:	4611      	mov	r1, r2
 8003e96:	7019      	strb	r1, [r3, #0]
 8003e98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e9c:	705a      	strb	r2, [r3, #1]
  
}
 8003e9e:	bf00      	nop
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000278 	.word	0x20000278

08003eac <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003eb6:	f107 030f 	add.w	r3, r7, #15
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	209e      	movs	r0, #158	; 0x9e
 8003ec0:	f000 fad4 	bl	800446c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	73fb      	strb	r3, [r7, #15]
 8003ed4:	e004      	b.n	8003ee0 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003ee0:	f107 030f 	add.w	r3, r7, #15
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	209e      	movs	r0, #158	; 0x9e
 8003eea:	f000 fa73 	bl	80043d4 <RadioSpiWriteRegisters>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <SpiritRadioSetRefDiv+0x5c>)
 8003ef2:	b212      	sxth	r2, r2
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	7019      	strb	r1, [r3, #0]
 8003ef8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003efc:	705a      	strb	r2, [r3, #1]
  
}
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000278 	.word	0x20000278

08003f0c <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003f12:	1dfb      	adds	r3, r7, #7
 8003f14:	461a      	mov	r2, r3
 8003f16:	2101      	movs	r1, #1
 8003f18:	209e      	movs	r0, #158	; 0x9e
 8003f1a:	f000 faa7 	bl	800446c <RadioSpiReadRegisters>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <SpiritRadioGetRefDiv+0x40>)
 8003f22:	b212      	sxth	r2, r2
 8003f24:	4611      	mov	r1, r2
 8003f26:	7019      	strb	r1, [r3, #0]
 8003f28:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f2c:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	09db      	lsrs	r3, r3, #7
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003f40:	2300      	movs	r3, #0
  }
  
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000278 	.word	0x20000278

08003f50 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003f5a:	f107 030f 	add.w	r3, r7, #15
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2101      	movs	r1, #1
 8003f62:	20b4      	movs	r0, #180	; 0xb4
 8003f64:	f000 fa82 	bl	800446c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	f023 0308 	bic.w	r3, r3, #8
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	73fb      	strb	r3, [r7, #15]
 8003f78:	e004      	b.n	8003f84 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	f043 0308 	orr.w	r3, r3, #8
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003f84:	f107 030f 	add.w	r3, r7, #15
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	20b4      	movs	r0, #180	; 0xb4
 8003f8e:	f000 fa21 	bl	80043d4 <RadioSpiWriteRegisters>
 8003f92:	4602      	mov	r2, r0
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <SpiritRadioSetDigDiv+0x5c>)
 8003f96:	b212      	sxth	r2, r2
 8003f98:	4611      	mov	r1, r2
 8003f9a:	7019      	strb	r1, [r3, #0]
 8003f9c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003fa0:	705a      	strb	r2, [r3, #1]
  
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000278 	.word	0x20000278

08003fb0 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003fb6:	1dfb      	adds	r3, r7, #7
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2101      	movs	r1, #1
 8003fbc:	20b4      	movs	r0, #180	; 0xb4
 8003fbe:	f000 fa55 	bl	800446c <RadioSpiReadRegisters>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <SpiritRadioGetDigDiv+0x40>)
 8003fc6:	b212      	sxth	r2, r2
 8003fc8:	4611      	mov	r1, r2
 8003fca:	7019      	strb	r1, [r3, #0]
 8003fcc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003fd0:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	08db      	lsrs	r3, r3, #3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e000      	b.n	8003fe6 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003fe4:	2301      	movs	r3, #1
  }
  
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000278 	.word	0x20000278

08003ff4 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <SpiritRadioGetXtalFrequency+0x14>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20000274 	.word	0x20000274

0800400c <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <SpiritRadioSetXtalFrequency+0x1c>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6013      	str	r3, [r2, #0]
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000274 	.word	0x20000274

0800402c <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 8004036:	f107 020c 	add.w	r2, r7, #12
 800403a:	f107 030c 	add.w	r3, r7, #12
 800403e:	3301      	adds	r3, #1
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	ed97 0a01 	vldr	s0, [r7, #4]
 8004048:	f000 f816 	bl	8004078 <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 800404c:	f107 030c 	add.w	r3, r7, #12
 8004050:	461a      	mov	r2, r3
 8004052:	2102      	movs	r1, #2
 8004054:	2053      	movs	r0, #83	; 0x53
 8004056:	f000 f9bd 	bl	80043d4 <RadioSpiWriteRegisters>
 800405a:	4602      	mov	r2, r0
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <SpiritTimerSetRxTimeoutMs+0x48>)
 800405e:	b212      	sxth	r2, r2
 8004060:	4611      	mov	r1, r2
 8004062:	7019      	strb	r1, [r3, #0]
 8004064:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004068:	705a      	strb	r2, [r3, #1]

}
 800406a:	bf00      	nop
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000278 	.word	0x20000278

08004078 <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af00      	add	r7, sp, #0
 800407e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004082:	60b8      	str	r0, [r7, #8]
 8004084:	6079      	str	r1, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 8004086:	f7ff ffb5 	bl	8003ff4 <SpiritRadioGetXtalFrequency>
 800408a:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4a91      	ldr	r2, [pc, #580]	; (80042d4 <SpiritTimerComputeRxTimeoutValues+0x25c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d902      	bls.n	800409a <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	085b      	lsrs	r3, r3, #1
 8004098:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	ee07 3a90 	vmov	s15, r3
 80040a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80040a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ac:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80042d8 <SpiritTimerComputeRxTimeoutValues+0x260>
 80040b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b8:	ee17 3a90 	vmov	r3, s15
 80040bc:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	f64f 5201 	movw	r2, #64769	; 0xfd01
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d906      	bls.n	80040d6 <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	22ff      	movs	r2, #255	; 0xff
 80040cc:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	22ff      	movs	r2, #255	; 0xff
 80040d2:	701a      	strb	r2, [r3, #0]
    return;
 80040d4:	e0fa      	b.n	80042cc <SpiritTimerComputeRxTimeoutValues+0x254>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	4a80      	ldr	r2, [pc, #512]	; (80042dc <SpiritTimerComputeRxTimeoutValues+0x264>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	09db      	lsrs	r3, r3, #7
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	3302      	adds	r3, #2
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	ee07 3a90 	vmov	s15, r3
 8004104:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	ee07 3a90 	vmov	s15, r3
 8004110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004118:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80042d8 <SpiritTimerComputeRxTimeoutValues+0x260>
 800411c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800412e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800413a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413e:	dd1d      	ble.n	800417c <SpiritTimerComputeRxTimeoutValues+0x104>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	ee07 3a90 	vmov	s15, r3
 8004148:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	ee07 3a90 	vmov	s15, r3
 8004154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80042d8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004160:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004172:	edd7 7a03 	vldr	s15, [r7, #12]
 8004176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800417a:	e01e      	b.n	80041ba <SpiritTimerComputeRxTimeoutValues+0x142>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	ee07 3a90 	vmov	s15, r3
 8004184:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	ee07 3a90 	vmov	s15, r3
 8004190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004198:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80042d8 <SpiritTimerComputeRxTimeoutValues+0x260>
 800419c:	ee67 6a87 	vmul.f32	s13, s15, s14
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80041b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041b6:	eef1 7a67 	vneg.f32	s15, s15
 80041ba:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if((*pcCounter)<=254)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2bff      	cmp	r3, #255	; 0xff
 80041c4:	d06e      	beq.n	80042a4 <SpiritTimerComputeRxTimeoutValues+0x22c>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	3301      	adds	r3, #1
 80041cc:	ee07 3a90 	vmov	s15, r3
 80041d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	ee07 3a90 	vmov	s15, r3
 80041dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80042d8 <SpiritTimerComputeRxTimeoutValues+0x260>
 80041e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80041fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420a:	dd1e      	ble.n	800424a <SpiritTimerComputeRxTimeoutValues+0x1d2>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	3301      	adds	r3, #1
 8004212:	ee07 3a90 	vmov	s15, r3
 8004216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80042d8 <SpiritTimerComputeRxTimeoutValues+0x260>
 800422e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	ee07 3a90 	vmov	s15, r3
 8004238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004240:	edd7 7a03 	vldr	s15, [r7, #12]
 8004244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004248:	e01f      	b.n	800428a <SpiritTimerComputeRxTimeoutValues+0x212>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	3301      	adds	r3, #1
 8004250:	ee07 3a90 	vmov	s15, r3
 8004254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	ee07 3a90 	vmov	s15, r3
 8004260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004268:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80042d8 <SpiritTimerComputeRxTimeoutValues+0x260>
 800426c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	ee07 3a90 	vmov	s15, r3
 8004276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800427a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800427e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004286:	eef1 7a67 	vneg.f32	s15, s15
 800428a:	ed97 7a05 	vldr	s14, [r7, #20]
 800428e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004296:	d505      	bpl.n	80042a4 <SpiritTimerComputeRxTimeoutValues+0x22c>
      (*pcCounter)=(*pcCounter)+1;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	3301      	adds	r3, #1
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d906      	bls.n	80042c6 <SpiritTimerComputeRxTimeoutValues+0x24e>
    (*pcCounter)--;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	3b01      	subs	r3, #1
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	e002      	b.n	80042cc <SpiritTimerComputeRxTimeoutValues+0x254>
  else
    (*pcCounter)=1;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]
}
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	01c9c380 	.word	0x01c9c380
 80042d8:	4993b480 	.word	0x4993b480
 80042dc:	80808081 	.word	0x80808081

080042e0 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 80042ea:	f107 030c 	add.w	r3, r7, #12
 80042ee:	461a      	mov	r2, r3
 80042f0:	2102      	movs	r1, #2
 80042f2:	204f      	movs	r0, #79	; 0x4f
 80042f4:	f000 f8ba 	bl	800446c <RadioSpiReadRegisters>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b1c      	ldr	r3, [pc, #112]	; (800436c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 80042fc:	b212      	sxth	r2, r2
 80042fe:	4611      	mov	r1, r2
 8004300:	7019      	strb	r1, [r3, #0]
 8004302:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004306:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8004308:	7b3b      	ldrb	r3, [r7, #12]
 800430a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800430e:	b2db      	uxtb	r3, r3
 8004310:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8004312:	7b3b      	ldrb	r3, [r7, #12]
 8004314:	b25a      	sxtb	r2, r3
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	b25b      	sxtb	r3, r3
 800431c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004320:	b25b      	sxtb	r3, r3
 8004322:	4313      	orrs	r3, r2
 8004324:	b25b      	sxtb	r3, r3
 8004326:	b2db      	uxtb	r3, r3
 8004328:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 800432a:	7b7b      	ldrb	r3, [r7, #13]
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	b2db      	uxtb	r3, r3
 8004332:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8004334:	7b7b      	ldrb	r3, [r7, #13]
 8004336:	b25a      	sxtb	r2, r3
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	015b      	lsls	r3, r3, #5
 800433c:	b25b      	sxtb	r3, r3
 800433e:	4313      	orrs	r3, r2
 8004340:	b25b      	sxtb	r3, r3
 8004342:	b2db      	uxtb	r3, r3
 8004344:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004346:	f107 030c 	add.w	r3, r7, #12
 800434a:	461a      	mov	r2, r3
 800434c:	2102      	movs	r1, #2
 800434e:	204f      	movs	r0, #79	; 0x4f
 8004350:	f000 f840 	bl	80043d4 <RadioSpiWriteRegisters>
 8004354:	4602      	mov	r2, r0
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004358:	b212      	sxth	r2, r2
 800435a:	4611      	mov	r1, r2
 800435c:	7019      	strb	r1, [r3, #0]
 800435e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004362:	705a      	strb	r2, [r3, #1]

}
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000278 	.word	0x20000278

08004370 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8004376:	1d3b      	adds	r3, r7, #4
 8004378:	461a      	mov	r2, r3
 800437a:	2102      	movs	r1, #2
 800437c:	20c0      	movs	r0, #192	; 0xc0
 800437e:	f000 f875 	bl	800446c <RadioSpiReadRegisters>
 8004382:	4603      	mov	r3, r0
 8004384:	4a09      	ldr	r2, [pc, #36]	; (80043ac <SpiritRefreshStatus+0x3c>)
 8004386:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <SpiritRefreshStatus+0x3c>)
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 800438e:	429a      	cmp	r2, r3
 8004390:	d1f1      	bne.n	8004376 <SpiritRefreshStatus+0x6>
 8004392:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <SpiritRefreshStatus+0x40>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 800439c:	4293      	cmp	r3, r2
 800439e:	d1ea      	bne.n	8004376 <SpiritRefreshStatus+0x6>

}
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000278 	.word	0x20000278
 80043b0:	20000279 	.word	0x20000279

080043b4 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <RadioSpiInit+0x1c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <RadioSpiInit+0x16>
  {
    Error_Handler();
 80043c6:	f7fd f89f 	bl	8001508 <Error_Handler>
  }
}
 80043ca:	bf00      	nop
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000008 	.word	0x20000008

080043d4 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af02      	add	r7, sp, #8
 80043da:	4603      	mov	r3, r0
 80043dc:	603a      	str	r2, [r7, #0]
 80043de:	71fb      	strb	r3, [r7, #7]
 80043e0:	460b      	mov	r3, r1
 80043e2:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 80043e4:	2300      	movs	r3, #0
 80043e6:	743b      	strb	r3, [r7, #16]
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80043ec:	2017      	movs	r0, #23
 80043ee:	f000 fadd 	bl	80049ac <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 80043f2:	2200      	movs	r2, #0
 80043f4:	2140      	movs	r1, #64	; 0x40
 80043f6:	481b      	ldr	r0, [pc, #108]	; (8004464 <RadioSpiWriteRegisters+0x90>)
 80043f8:	f000 fc90 	bl	8004d1c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80043fc:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <RadioSpiWriteRegisters+0x94>)
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	f107 020c 	add.w	r2, r7, #12
 8004404:	f107 0110 	add.w	r1, r7, #16
 8004408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	2302      	movs	r3, #2
 8004410:	f002 fb47 	bl	8006aa2 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004414:	4b14      	ldr	r3, [pc, #80]	; (8004468 <RadioSpiWriteRegisters+0x94>)
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	79bb      	ldrb	r3, [r7, #6]
 800441a:	b29a      	uxth	r2, r3
 800441c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004420:	6839      	ldr	r1, [r7, #0]
 8004422:	f002 f8a0 	bl	8006566 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004426:	2201      	movs	r2, #1
 8004428:	2140      	movs	r1, #64	; 0x40
 800442a:	480e      	ldr	r0, [pc, #56]	; (8004464 <RadioSpiWriteRegisters+0x90>)
 800442c:	f000 fc76 	bl	8004d1c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004430:	2017      	movs	r0, #23
 8004432:	f000 faad 	bl	8004990 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004436:	f107 0308 	add.w	r3, r7, #8
 800443a:	3301      	adds	r3, #1
 800443c:	7b3a      	ldrb	r2, [r7, #12]
 800443e:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004440:	f107 0308 	add.w	r3, r7, #8
 8004444:	7b7a      	ldrb	r2, [r7, #13]
 8004446:	701a      	strb	r2, [r3, #0]

  return status;
 8004448:	893b      	ldrh	r3, [r7, #8]
 800444a:	82bb      	strh	r3, [r7, #20]
 800444c:	2300      	movs	r3, #0
 800444e:	7d3a      	ldrb	r2, [r7, #20]
 8004450:	f362 0307 	bfi	r3, r2, #0, #8
 8004454:	7d7a      	ldrb	r2, [r7, #21]
 8004456:	f362 230f 	bfi	r3, r2, #8, #8

}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	48000400 	.word	0x48000400
 8004468:	20000008 	.word	0x20000008

0800446c <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af02      	add	r7, sp, #8
 8004472:	4603      	mov	r3, r0
 8004474:	603a      	str	r2, [r7, #0]
 8004476:	71fb      	strb	r3, [r7, #7]
 8004478:	460b      	mov	r3, r1
 800447a:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 800447c:	2301      	movs	r3, #1
 800447e:	743b      	strb	r3, [r7, #16]
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004484:	2017      	movs	r0, #23
 8004486:	f000 fa91 	bl	80049ac <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800448a:	2200      	movs	r2, #0
 800448c:	2140      	movs	r1, #64	; 0x40
 800448e:	481b      	ldr	r0, [pc, #108]	; (80044fc <RadioSpiReadRegisters+0x90>)
 8004490:	f000 fc44 	bl	8004d1c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004494:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <RadioSpiReadRegisters+0x94>)
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	f107 020c 	add.w	r2, r7, #12
 800449c:	f107 0110 	add.w	r1, r7, #16
 80044a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	2302      	movs	r3, #2
 80044a8:	f002 fafb 	bl	8006aa2 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80044ac:	4b14      	ldr	r3, [pc, #80]	; (8004500 <RadioSpiReadRegisters+0x94>)
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	79bb      	ldrb	r3, [r7, #6]
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	f002 f9c2 	bl	8006842 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80044be:	2201      	movs	r2, #1
 80044c0:	2140      	movs	r1, #64	; 0x40
 80044c2:	480e      	ldr	r0, [pc, #56]	; (80044fc <RadioSpiReadRegisters+0x90>)
 80044c4:	f000 fc2a 	bl	8004d1c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80044c8:	2017      	movs	r0, #23
 80044ca:	f000 fa61 	bl	8004990 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80044ce:	f107 0308 	add.w	r3, r7, #8
 80044d2:	3301      	adds	r3, #1
 80044d4:	7b3a      	ldrb	r2, [r7, #12]
 80044d6:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80044d8:	f107 0308 	add.w	r3, r7, #8
 80044dc:	7b7a      	ldrb	r2, [r7, #13]
 80044de:	701a      	strb	r2, [r3, #0]

  return status;
 80044e0:	893b      	ldrh	r3, [r7, #8]
 80044e2:	82bb      	strh	r3, [r7, #20]
 80044e4:	2300      	movs	r3, #0
 80044e6:	7d3a      	ldrb	r2, [r7, #20]
 80044e8:	f362 0307 	bfi	r3, r2, #0, #8
 80044ec:	7d7a      	ldrb	r2, [r7, #21]
 80044ee:	f362 230f 	bfi	r3, r2, #8, #8
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	48000400 	.word	0x48000400
 8004500:	20000008 	.word	0x20000008

08004504 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af02      	add	r7, sp, #8
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	743b      	strb	r3, [r7, #16]
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004516:	2017      	movs	r0, #23
 8004518:	f000 fa48 	bl	80049ac <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800451c:	2200      	movs	r2, #0
 800451e:	2140      	movs	r1, #64	; 0x40
 8004520:	4816      	ldr	r0, [pc, #88]	; (800457c <RadioSpiCommandStrobes+0x78>)
 8004522:	f000 fbfb 	bl	8004d1c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004526:	4b16      	ldr	r3, [pc, #88]	; (8004580 <RadioSpiCommandStrobes+0x7c>)
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	f107 020c 	add.w	r2, r7, #12
 800452e:	f107 0110 	add.w	r1, r7, #16
 8004532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	2302      	movs	r3, #2
 800453a:	f002 fab2 	bl	8006aa2 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800453e:	2201      	movs	r2, #1
 8004540:	2140      	movs	r1, #64	; 0x40
 8004542:	480e      	ldr	r0, [pc, #56]	; (800457c <RadioSpiCommandStrobes+0x78>)
 8004544:	f000 fbea 	bl	8004d1c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004548:	2017      	movs	r0, #23
 800454a:	f000 fa21 	bl	8004990 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800454e:	f107 0308 	add.w	r3, r7, #8
 8004552:	3301      	adds	r3, #1
 8004554:	7b3a      	ldrb	r2, [r7, #12]
 8004556:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004558:	f107 0308 	add.w	r3, r7, #8
 800455c:	7b7a      	ldrb	r2, [r7, #13]
 800455e:	701a      	strb	r2, [r3, #0]

  return status;
 8004560:	893b      	ldrh	r3, [r7, #8]
 8004562:	82bb      	strh	r3, [r7, #20]
 8004564:	2300      	movs	r3, #0
 8004566:	7d3a      	ldrb	r2, [r7, #20]
 8004568:	f362 0307 	bfi	r3, r2, #0, #8
 800456c:	7d7a      	ldrb	r2, [r7, #21]
 800456e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	48000400 	.word	0x48000400
 8004580:	20000008 	.word	0x20000008

08004584 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af02      	add	r7, sp, #8
 800458a:	4603      	mov	r3, r0
 800458c:	6039      	str	r1, [r7, #0]
 800458e:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8004590:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004594:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004596:	2017      	movs	r0, #23
 8004598:	f000 fa08 	bl	80049ac <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800459c:	2200      	movs	r2, #0
 800459e:	2140      	movs	r1, #64	; 0x40
 80045a0:	481a      	ldr	r0, [pc, #104]	; (800460c <RadioSpiWriteFifo+0x88>)
 80045a2:	f000 fbbb 	bl	8004d1c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80045a6:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <RadioSpiWriteFifo+0x8c>)
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	f107 020c 	add.w	r2, r7, #12
 80045ae:	f107 0110 	add.w	r1, r7, #16
 80045b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2302      	movs	r3, #2
 80045ba:	f002 fa72 	bl	8006aa2 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80045be:	4b14      	ldr	r3, [pc, #80]	; (8004610 <RadioSpiWriteFifo+0x8c>)
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045ca:	6839      	ldr	r1, [r7, #0]
 80045cc:	f001 ffcb 	bl	8006566 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80045d0:	2201      	movs	r2, #1
 80045d2:	2140      	movs	r1, #64	; 0x40
 80045d4:	480d      	ldr	r0, [pc, #52]	; (800460c <RadioSpiWriteFifo+0x88>)
 80045d6:	f000 fba1 	bl	8004d1c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80045da:	2017      	movs	r0, #23
 80045dc:	f000 f9d8 	bl	8004990 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80045e0:	f107 0308 	add.w	r3, r7, #8
 80045e4:	3301      	adds	r3, #1
 80045e6:	7b3a      	ldrb	r2, [r7, #12]
 80045e8:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80045ea:	f107 0308 	add.w	r3, r7, #8
 80045ee:	7b7a      	ldrb	r2, [r7, #13]
 80045f0:	701a      	strb	r2, [r3, #0]

  return status;
 80045f2:	893b      	ldrh	r3, [r7, #8]
 80045f4:	82bb      	strh	r3, [r7, #20]
 80045f6:	2300      	movs	r3, #0
 80045f8:	7d3a      	ldrb	r2, [r7, #20]
 80045fa:	f362 0307 	bfi	r3, r2, #0, #8
 80045fe:	7d7a      	ldrb	r2, [r7, #21]
 8004600:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	48000400 	.word	0x48000400
 8004610:	20000008 	.word	0x20000008

08004614 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af02      	add	r7, sp, #8
 800461a:	4603      	mov	r3, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 8004620:	f64f 7301 	movw	r3, #65281	; 0xff01
 8004624:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004626:	2017      	movs	r0, #23
 8004628:	f000 f9c0 	bl	80049ac <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800462c:	2200      	movs	r2, #0
 800462e:	2140      	movs	r1, #64	; 0x40
 8004630:	481a      	ldr	r0, [pc, #104]	; (800469c <RadioSpiReadFifo+0x88>)
 8004632:	f000 fb73 	bl	8004d1c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004636:	4b1a      	ldr	r3, [pc, #104]	; (80046a0 <RadioSpiReadFifo+0x8c>)
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	f107 020c 	add.w	r2, r7, #12
 800463e:	f107 0110 	add.w	r1, r7, #16
 8004642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2302      	movs	r3, #2
 800464a:	f002 fa2a 	bl	8006aa2 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <RadioSpiReadFifo+0x8c>)
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	b29a      	uxth	r2, r3
 8004656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800465a:	6839      	ldr	r1, [r7, #0]
 800465c:	f002 f8f1 	bl	8006842 <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 8004660:	2201      	movs	r2, #1
 8004662:	2140      	movs	r1, #64	; 0x40
 8004664:	480d      	ldr	r0, [pc, #52]	; (800469c <RadioSpiReadFifo+0x88>)
 8004666:	f000 fb59 	bl	8004d1c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800466a:	2017      	movs	r0, #23
 800466c:	f000 f990 	bl	8004990 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004670:	f107 0308 	add.w	r3, r7, #8
 8004674:	3301      	adds	r3, #1
 8004676:	7b3a      	ldrb	r2, [r7, #12]
 8004678:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 800467a:	f107 0308 	add.w	r3, r7, #8
 800467e:	7b7a      	ldrb	r2, [r7, #13]
 8004680:	701a      	strb	r2, [r3, #0]

  return status;
 8004682:	893b      	ldrh	r3, [r7, #8]
 8004684:	82bb      	strh	r3, [r7, #20]
 8004686:	2300      	movs	r3, #0
 8004688:	7d3a      	ldrb	r2, [r7, #20]
 800468a:	f362 0307 	bfi	r3, r2, #0, #8
 800468e:	7d7a      	ldrb	r2, [r7, #21]
 8004690:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	48000400 	.word	0x48000400
 80046a0:	20000008 	.word	0x20000008

080046a4 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 80046a8:	2201      	movs	r2, #1
 80046aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046b2:	f000 fb33 	bl	8004d1c <HAL_GPIO_WritePin>
}
 80046b6:	bf00      	nop
 80046b8:	bd80      	pop	{r7, pc}

080046ba <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 80046be:	2200      	movs	r2, #0
 80046c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046c8:	f000 fb28 	bl	8004d1c <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 80046cc:	2001      	movs	r0, #1
 80046ce:	f000 f843 	bl	8004758 <HAL_Delay>
}
 80046d2:	bf00      	nop
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <HAL_Init+0x3c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a0b      	ldr	r2, [pc, #44]	; (8004714 <HAL_Init+0x3c>)
 80046e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ee:	2003      	movs	r0, #3
 80046f0:	f000 f927 	bl	8004942 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046f4:	200f      	movs	r0, #15
 80046f6:	f7fd f90f 	bl	8001918 <HAL_InitTick>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	71fb      	strb	r3, [r7, #7]
 8004704:	e001      	b.n	800470a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004706:	f7fd f8df 	bl	80018c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800470a:	79fb      	ldrb	r3, [r7, #7]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40022000 	.word	0x40022000

08004718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800471c:	4b06      	ldr	r3, [pc, #24]	; (8004738 <HAL_IncTick+0x20>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_IncTick+0x24>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4413      	add	r3, r2
 8004728:	4a04      	ldr	r2, [pc, #16]	; (800473c <HAL_IncTick+0x24>)
 800472a:	6013      	str	r3, [r2, #0]
}
 800472c:	bf00      	nop
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000010 	.word	0x20000010
 800473c:	2000027c 	.word	0x2000027c

08004740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  return uwTick;
 8004744:	4b03      	ldr	r3, [pc, #12]	; (8004754 <HAL_GetTick+0x14>)
 8004746:	681b      	ldr	r3, [r3, #0]
}
 8004748:	4618      	mov	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	2000027c 	.word	0x2000027c

08004758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004760:	f7ff ffee 	bl	8004740 <HAL_GetTick>
 8004764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004770:	d005      	beq.n	800477e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <HAL_Delay+0x44>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800477e:	bf00      	nop
 8004780:	f7ff ffde 	bl	8004740 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	429a      	cmp	r2, r3
 800478e:	d8f7      	bhi.n	8004780 <HAL_Delay+0x28>
  {
  }
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	20000010 	.word	0x20000010

080047a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <__NVIC_SetPriorityGrouping+0x44>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047bc:	4013      	ands	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047d2:	4a04      	ldr	r2, [pc, #16]	; (80047e4 <__NVIC_SetPriorityGrouping+0x44>)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	60d3      	str	r3, [r2, #12]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	e000ed00 	.word	0xe000ed00

080047e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047ec:	4b04      	ldr	r3, [pc, #16]	; (8004800 <__NVIC_GetPriorityGrouping+0x18>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	0a1b      	lsrs	r3, r3, #8
 80047f2:	f003 0307 	and.w	r3, r3, #7
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	e000ed00 	.word	0xe000ed00

08004804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800480e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004812:	2b00      	cmp	r3, #0
 8004814:	db0b      	blt.n	800482e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004816:	79fb      	ldrb	r3, [r7, #7]
 8004818:	f003 021f 	and.w	r2, r3, #31
 800481c:	4907      	ldr	r1, [pc, #28]	; (800483c <__NVIC_EnableIRQ+0x38>)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	2001      	movs	r0, #1
 8004826:	fa00 f202 	lsl.w	r2, r0, r2
 800482a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	e000e100 	.word	0xe000e100

08004840 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	4603      	mov	r3, r0
 8004848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800484a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484e:	2b00      	cmp	r3, #0
 8004850:	db12      	blt.n	8004878 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	f003 021f 	and.w	r2, r3, #31
 8004858:	490a      	ldr	r1, [pc, #40]	; (8004884 <__NVIC_DisableIRQ+0x44>)
 800485a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	2001      	movs	r0, #1
 8004862:	fa00 f202 	lsl.w	r2, r0, r2
 8004866:	3320      	adds	r3, #32
 8004868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800486c:	f3bf 8f4f 	dsb	sy
}
 8004870:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004872:	f3bf 8f6f 	isb	sy
}
 8004876:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	e000e100 	.word	0xe000e100

08004888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	6039      	str	r1, [r7, #0]
 8004892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004898:	2b00      	cmp	r3, #0
 800489a:	db0a      	blt.n	80048b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	490c      	ldr	r1, [pc, #48]	; (80048d4 <__NVIC_SetPriority+0x4c>)
 80048a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a6:	0112      	lsls	r2, r2, #4
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	440b      	add	r3, r1
 80048ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048b0:	e00a      	b.n	80048c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	4908      	ldr	r1, [pc, #32]	; (80048d8 <__NVIC_SetPriority+0x50>)
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	3b04      	subs	r3, #4
 80048c0:	0112      	lsls	r2, r2, #4
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	440b      	add	r3, r1
 80048c6:	761a      	strb	r2, [r3, #24]
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	e000e100 	.word	0xe000e100
 80048d8:	e000ed00 	.word	0xe000ed00

080048dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048dc:	b480      	push	{r7}
 80048de:	b089      	sub	sp, #36	; 0x24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f1c3 0307 	rsb	r3, r3, #7
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	bf28      	it	cs
 80048fa:	2304      	movcs	r3, #4
 80048fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3304      	adds	r3, #4
 8004902:	2b06      	cmp	r3, #6
 8004904:	d902      	bls.n	800490c <NVIC_EncodePriority+0x30>
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3b03      	subs	r3, #3
 800490a:	e000      	b.n	800490e <NVIC_EncodePriority+0x32>
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43da      	mvns	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	401a      	ands	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004924:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	fa01 f303 	lsl.w	r3, r1, r3
 800492e:	43d9      	mvns	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004934:	4313      	orrs	r3, r2
         );
}
 8004936:	4618      	mov	r0, r3
 8004938:	3724      	adds	r7, #36	; 0x24
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b082      	sub	sp, #8
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff ff28 	bl	80047a0 <__NVIC_SetPriorityGrouping>
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800496a:	f7ff ff3d 	bl	80047e8 <__NVIC_GetPriorityGrouping>
 800496e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	68b9      	ldr	r1, [r7, #8]
 8004974:	6978      	ldr	r0, [r7, #20]
 8004976:	f7ff ffb1 	bl	80048dc <NVIC_EncodePriority>
 800497a:	4602      	mov	r2, r0
 800497c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004980:	4611      	mov	r1, r2
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff ff80 	bl	8004888 <__NVIC_SetPriority>
}
 8004988:	bf00      	nop
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800499a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff ff30 	bl	8004804 <__NVIC_EnableIRQ>
}
 80049a4:	bf00      	nop
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ff40 	bl	8004840 <__NVIC_DisableIRQ>
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049d6:	e17f      	b.n	8004cd8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	2101      	movs	r1, #1
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	fa01 f303 	lsl.w	r3, r1, r3
 80049e4:	4013      	ands	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8171 	beq.w	8004cd2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d005      	beq.n	8004a08 <HAL_GPIO_Init+0x40>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d130      	bne.n	8004a6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	2203      	movs	r2, #3
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a3e:	2201      	movs	r2, #1
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	f003 0201 	and.w	r2, r3, #1
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d118      	bne.n	8004aa8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	43db      	mvns	r3, r3
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	08db      	lsrs	r3, r3, #3
 8004a92:	f003 0201 	and.w	r2, r3, #1
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d017      	beq.n	8004ae4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	2203      	movs	r2, #3
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d123      	bne.n	8004b38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	08da      	lsrs	r2, r3, #3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3208      	adds	r2, #8
 8004af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	220f      	movs	r2, #15
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4013      	ands	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	08da      	lsrs	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3208      	adds	r2, #8
 8004b32:	6939      	ldr	r1, [r7, #16]
 8004b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	2203      	movs	r2, #3
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 0203 	and.w	r2, r3, #3
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80ac 	beq.w	8004cd2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b7a:	4b5f      	ldr	r3, [pc, #380]	; (8004cf8 <HAL_GPIO_Init+0x330>)
 8004b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b7e:	4a5e      	ldr	r2, [pc, #376]	; (8004cf8 <HAL_GPIO_Init+0x330>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6613      	str	r3, [r2, #96]	; 0x60
 8004b86:	4b5c      	ldr	r3, [pc, #368]	; (8004cf8 <HAL_GPIO_Init+0x330>)
 8004b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	60bb      	str	r3, [r7, #8]
 8004b90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004b92:	4a5a      	ldr	r2, [pc, #360]	; (8004cfc <HAL_GPIO_Init+0x334>)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	089b      	lsrs	r3, r3, #2
 8004b98:	3302      	adds	r3, #2
 8004b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	220f      	movs	r2, #15
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004bbc:	d025      	beq.n	8004c0a <HAL_GPIO_Init+0x242>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a4f      	ldr	r2, [pc, #316]	; (8004d00 <HAL_GPIO_Init+0x338>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01f      	beq.n	8004c06 <HAL_GPIO_Init+0x23e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a4e      	ldr	r2, [pc, #312]	; (8004d04 <HAL_GPIO_Init+0x33c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d019      	beq.n	8004c02 <HAL_GPIO_Init+0x23a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a4d      	ldr	r2, [pc, #308]	; (8004d08 <HAL_GPIO_Init+0x340>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <HAL_GPIO_Init+0x236>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a4c      	ldr	r2, [pc, #304]	; (8004d0c <HAL_GPIO_Init+0x344>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00d      	beq.n	8004bfa <HAL_GPIO_Init+0x232>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a4b      	ldr	r2, [pc, #300]	; (8004d10 <HAL_GPIO_Init+0x348>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d007      	beq.n	8004bf6 <HAL_GPIO_Init+0x22e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a4a      	ldr	r2, [pc, #296]	; (8004d14 <HAL_GPIO_Init+0x34c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d101      	bne.n	8004bf2 <HAL_GPIO_Init+0x22a>
 8004bee:	2306      	movs	r3, #6
 8004bf0:	e00c      	b.n	8004c0c <HAL_GPIO_Init+0x244>
 8004bf2:	2307      	movs	r3, #7
 8004bf4:	e00a      	b.n	8004c0c <HAL_GPIO_Init+0x244>
 8004bf6:	2305      	movs	r3, #5
 8004bf8:	e008      	b.n	8004c0c <HAL_GPIO_Init+0x244>
 8004bfa:	2304      	movs	r3, #4
 8004bfc:	e006      	b.n	8004c0c <HAL_GPIO_Init+0x244>
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e004      	b.n	8004c0c <HAL_GPIO_Init+0x244>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e002      	b.n	8004c0c <HAL_GPIO_Init+0x244>
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <HAL_GPIO_Init+0x244>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	f002 0203 	and.w	r2, r2, #3
 8004c12:	0092      	lsls	r2, r2, #2
 8004c14:	4093      	lsls	r3, r2
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c1c:	4937      	ldr	r1, [pc, #220]	; (8004cfc <HAL_GPIO_Init+0x334>)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	089b      	lsrs	r3, r3, #2
 8004c22:	3302      	adds	r3, #2
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c2a:	4b3b      	ldr	r3, [pc, #236]	; (8004d18 <HAL_GPIO_Init+0x350>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	43db      	mvns	r3, r3
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4013      	ands	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c4e:	4a32      	ldr	r2, [pc, #200]	; (8004d18 <HAL_GPIO_Init+0x350>)
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c54:	4b30      	ldr	r3, [pc, #192]	; (8004d18 <HAL_GPIO_Init+0x350>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4013      	ands	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <HAL_GPIO_Init+0x350>)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c7e:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <HAL_GPIO_Init+0x350>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	43db      	mvns	r3, r3
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ca2:	4a1d      	ldr	r2, [pc, #116]	; (8004d18 <HAL_GPIO_Init+0x350>)
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004ca8:	4b1b      	ldr	r3, [pc, #108]	; (8004d18 <HAL_GPIO_Init+0x350>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ccc:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <HAL_GPIO_Init+0x350>)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f47f ae78 	bne.w	80049d8 <HAL_GPIO_Init+0x10>
  }
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	48000400 	.word	0x48000400
 8004d04:	48000800 	.word	0x48000800
 8004d08:	48000c00 	.word	0x48000c00
 8004d0c:	48001000 	.word	0x48001000
 8004d10:	48001400 	.word	0x48001400
 8004d14:	48001800 	.word	0x48001800
 8004d18:	40010400 	.word	0x40010400

08004d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	807b      	strh	r3, [r7, #2]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d2c:	787b      	ldrb	r3, [r7, #1]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d32:	887a      	ldrh	r2, [r7, #2]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d38:	e002      	b.n	8004d40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d3a:	887a      	ldrh	r2, [r7, #2]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d56:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d006      	beq.n	8004d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d62:	4a05      	ldr	r2, [pc, #20]	; (8004d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d64:	88fb      	ldrh	r3, [r7, #6]
 8004d66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fc fb7c 	bl	8001468 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40010400 	.word	0x40010400

08004d7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d80:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40007000 	.word	0x40007000

08004d98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da6:	d130      	bne.n	8004e0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004da8:	4b23      	ldr	r3, [pc, #140]	; (8004e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db4:	d038      	beq.n	8004e28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004db6:	4b20      	ldr	r3, [pc, #128]	; (8004e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dbe:	4a1e      	ldr	r2, [pc, #120]	; (8004e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2232      	movs	r2, #50	; 0x32
 8004dcc:	fb02 f303 	mul.w	r3, r2, r3
 8004dd0:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	0c9b      	lsrs	r3, r3, #18
 8004dd8:	3301      	adds	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ddc:	e002      	b.n	8004de4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004de4:	4b14      	ldr	r3, [pc, #80]	; (8004e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df0:	d102      	bne.n	8004df8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f2      	bne.n	8004dde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004df8:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e04:	d110      	bne.n	8004e28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e00f      	b.n	8004e2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e16:	d007      	beq.n	8004e28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e18:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e20:	4a05      	ldr	r2, [pc, #20]	; (8004e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40007000 	.word	0x40007000
 8004e3c:	20000000 	.word	0x20000000
 8004e40:	431bde83 	.word	0x431bde83

08004e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e3ca      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e56:	4b97      	ldr	r3, [pc, #604]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e60:	4b94      	ldr	r3, [pc, #592]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 80e4 	beq.w	8005040 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <HAL_RCC_OscConfig+0x4a>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b0c      	cmp	r3, #12
 8004e82:	f040 808b 	bne.w	8004f9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	f040 8087 	bne.w	8004f9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e8e:	4b89      	ldr	r3, [pc, #548]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x62>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e3a2      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	4b82      	ldr	r3, [pc, #520]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d004      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x7c>
 8004eb6:	4b7f      	ldr	r3, [pc, #508]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ebe:	e005      	b.n	8004ecc <HAL_RCC_OscConfig+0x88>
 8004ec0:	4b7c      	ldr	r3, [pc, #496]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec6:	091b      	lsrs	r3, r3, #4
 8004ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d223      	bcs.n	8004f18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 fd87 	bl	80059e8 <RCC_SetFlashLatencyFromMSIRange>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e383      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ee4:	4b73      	ldr	r3, [pc, #460]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a72      	ldr	r2, [pc, #456]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004eea:	f043 0308 	orr.w	r3, r3, #8
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	4b70      	ldr	r3, [pc, #448]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	496d      	ldr	r1, [pc, #436]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f02:	4b6c      	ldr	r3, [pc, #432]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	4968      	ldr	r1, [pc, #416]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	604b      	str	r3, [r1, #4]
 8004f16:	e025      	b.n	8004f64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f18:	4b66      	ldr	r3, [pc, #408]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a65      	ldr	r2, [pc, #404]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004f1e:	f043 0308 	orr.w	r3, r3, #8
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	4b63      	ldr	r3, [pc, #396]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	4960      	ldr	r1, [pc, #384]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f36:	4b5f      	ldr	r3, [pc, #380]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	495b      	ldr	r1, [pc, #364]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d109      	bne.n	8004f64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fd47 	bl	80059e8 <RCC_SetFlashLatencyFromMSIRange>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e343      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f64:	f000 fc4a 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	4b52      	ldr	r3, [pc, #328]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	091b      	lsrs	r3, r3, #4
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	4950      	ldr	r1, [pc, #320]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004f76:	5ccb      	ldrb	r3, [r1, r3]
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f80:	4a4e      	ldr	r2, [pc, #312]	; (80050bc <HAL_RCC_OscConfig+0x278>)
 8004f82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f84:	4b4e      	ldr	r3, [pc, #312]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fc fcc5 	bl	8001918 <HAL_InitTick>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d052      	beq.n	800503e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	e327      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d032      	beq.n	800500a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fa4:	4b43      	ldr	r3, [pc, #268]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a42      	ldr	r2, [pc, #264]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fb0:	f7ff fbc6 	bl	8004740 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fb8:	f7ff fbc2 	bl	8004740 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e310      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fca:	4b3a      	ldr	r3, [pc, #232]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fd6:	4b37      	ldr	r3, [pc, #220]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a36      	ldr	r2, [pc, #216]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004fdc:	f043 0308 	orr.w	r3, r3, #8
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	4b34      	ldr	r3, [pc, #208]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	4931      	ldr	r1, [pc, #196]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ff4:	4b2f      	ldr	r3, [pc, #188]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	021b      	lsls	r3, r3, #8
 8005002:	492c      	ldr	r1, [pc, #176]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8005004:	4313      	orrs	r3, r2
 8005006:	604b      	str	r3, [r1, #4]
 8005008:	e01a      	b.n	8005040 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800500a:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a29      	ldr	r2, [pc, #164]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8005010:	f023 0301 	bic.w	r3, r3, #1
 8005014:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005016:	f7ff fb93 	bl	8004740 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800501e:	f7ff fb8f 	bl	8004740 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e2dd      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005030:	4b20      	ldr	r3, [pc, #128]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f0      	bne.n	800501e <HAL_RCC_OscConfig+0x1da>
 800503c:	e000      	b.n	8005040 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800503e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d074      	beq.n	8005136 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	2b08      	cmp	r3, #8
 8005050:	d005      	beq.n	800505e <HAL_RCC_OscConfig+0x21a>
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b0c      	cmp	r3, #12
 8005056:	d10e      	bne.n	8005076 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2b03      	cmp	r3, #3
 800505c:	d10b      	bne.n	8005076 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800505e:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d064      	beq.n	8005134 <HAL_RCC_OscConfig+0x2f0>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d160      	bne.n	8005134 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e2ba      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507e:	d106      	bne.n	800508e <HAL_RCC_OscConfig+0x24a>
 8005080:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a0b      	ldr	r2, [pc, #44]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 8005086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	e026      	b.n	80050dc <HAL_RCC_OscConfig+0x298>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005096:	d115      	bne.n	80050c4 <HAL_RCC_OscConfig+0x280>
 8005098:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a05      	ldr	r2, [pc, #20]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 800509e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a02      	ldr	r2, [pc, #8]	; (80050b4 <HAL_RCC_OscConfig+0x270>)
 80050aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	e014      	b.n	80050dc <HAL_RCC_OscConfig+0x298>
 80050b2:	bf00      	nop
 80050b4:	40021000 	.word	0x40021000
 80050b8:	0800ccdc 	.word	0x0800ccdc
 80050bc:	20000000 	.word	0x20000000
 80050c0:	2000000c 	.word	0x2000000c
 80050c4:	4ba0      	ldr	r3, [pc, #640]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a9f      	ldr	r2, [pc, #636]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 80050ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	4b9d      	ldr	r3, [pc, #628]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a9c      	ldr	r2, [pc, #624]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 80050d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d013      	beq.n	800510c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7ff fb2c 	bl	8004740 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ec:	f7ff fb28 	bl	8004740 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	; 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e276      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050fe:	4b92      	ldr	r3, [pc, #584]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0x2a8>
 800510a:	e014      	b.n	8005136 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7ff fb18 	bl	8004740 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005114:	f7ff fb14 	bl	8004740 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	; 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e262      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005126:	4b88      	ldr	r3, [pc, #544]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0x2d0>
 8005132:	e000      	b.n	8005136 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d060      	beq.n	8005204 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b04      	cmp	r3, #4
 8005146:	d005      	beq.n	8005154 <HAL_RCC_OscConfig+0x310>
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2b0c      	cmp	r3, #12
 800514c:	d119      	bne.n	8005182 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d116      	bne.n	8005182 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005154:	4b7c      	ldr	r3, [pc, #496]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_OscConfig+0x328>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e23f      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516c:	4b76      	ldr	r3, [pc, #472]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	061b      	lsls	r3, r3, #24
 800517a:	4973      	ldr	r1, [pc, #460]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 800517c:	4313      	orrs	r3, r2
 800517e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005180:	e040      	b.n	8005204 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d023      	beq.n	80051d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800518a:	4b6f      	ldr	r3, [pc, #444]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a6e      	ldr	r2, [pc, #440]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 8005190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005196:	f7ff fad3 	bl	8004740 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800519e:	f7ff facf 	bl	8004740 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e21d      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051b0:	4b65      	ldr	r3, [pc, #404]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051bc:	4b62      	ldr	r3, [pc, #392]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	061b      	lsls	r3, r3, #24
 80051ca:	495f      	ldr	r1, [pc, #380]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	604b      	str	r3, [r1, #4]
 80051d0:	e018      	b.n	8005204 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051d2:	4b5d      	ldr	r3, [pc, #372]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a5c      	ldr	r2, [pc, #368]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 80051d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051de:	f7ff faaf 	bl	8004740 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051e6:	f7ff faab 	bl	8004740 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e1f9      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051f8:	4b53      	ldr	r3, [pc, #332]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1f0      	bne.n	80051e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d03c      	beq.n	800528a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01c      	beq.n	8005252 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005218:	4b4b      	ldr	r3, [pc, #300]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 800521a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800521e:	4a4a      	ldr	r2, [pc, #296]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005228:	f7ff fa8a 	bl	8004740 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005230:	f7ff fa86 	bl	8004740 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e1d4      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005242:	4b41      	ldr	r3, [pc, #260]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 8005244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0ef      	beq.n	8005230 <HAL_RCC_OscConfig+0x3ec>
 8005250:	e01b      	b.n	800528a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005252:	4b3d      	ldr	r3, [pc, #244]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 8005254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005258:	4a3b      	ldr	r2, [pc, #236]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 800525a:	f023 0301 	bic.w	r3, r3, #1
 800525e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005262:	f7ff fa6d 	bl	8004740 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800526a:	f7ff fa69 	bl	8004740 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e1b7      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800527c:	4b32      	ldr	r3, [pc, #200]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 800527e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1ef      	bne.n	800526a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 80a6 	beq.w	80053e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005298:	2300      	movs	r3, #0
 800529a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800529c:	4b2a      	ldr	r3, [pc, #168]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 800529e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10d      	bne.n	80052c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a8:	4b27      	ldr	r3, [pc, #156]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 80052aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ac:	4a26      	ldr	r2, [pc, #152]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 80052ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b2:	6593      	str	r3, [r2, #88]	; 0x58
 80052b4:	4b24      	ldr	r3, [pc, #144]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 80052b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052c0:	2301      	movs	r3, #1
 80052c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052c4:	4b21      	ldr	r3, [pc, #132]	; (800534c <HAL_RCC_OscConfig+0x508>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d118      	bne.n	8005302 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052d0:	4b1e      	ldr	r3, [pc, #120]	; (800534c <HAL_RCC_OscConfig+0x508>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1d      	ldr	r2, [pc, #116]	; (800534c <HAL_RCC_OscConfig+0x508>)
 80052d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052dc:	f7ff fa30 	bl	8004740 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e4:	f7ff fa2c 	bl	8004740 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e17a      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052f6:	4b15      	ldr	r3, [pc, #84]	; (800534c <HAL_RCC_OscConfig+0x508>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0f0      	beq.n	80052e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d108      	bne.n	800531c <HAL_RCC_OscConfig+0x4d8>
 800530a:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005310:	4a0d      	ldr	r2, [pc, #52]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800531a:	e029      	b.n	8005370 <HAL_RCC_OscConfig+0x52c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b05      	cmp	r3, #5
 8005322:	d115      	bne.n	8005350 <HAL_RCC_OscConfig+0x50c>
 8005324:	4b08      	ldr	r3, [pc, #32]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532a:	4a07      	ldr	r2, [pc, #28]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 800532c:	f043 0304 	orr.w	r3, r3, #4
 8005330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005334:	4b04      	ldr	r3, [pc, #16]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 8005336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533a:	4a03      	ldr	r2, [pc, #12]	; (8005348 <HAL_RCC_OscConfig+0x504>)
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005344:	e014      	b.n	8005370 <HAL_RCC_OscConfig+0x52c>
 8005346:	bf00      	nop
 8005348:	40021000 	.word	0x40021000
 800534c:	40007000 	.word	0x40007000
 8005350:	4b9c      	ldr	r3, [pc, #624]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005356:	4a9b      	ldr	r2, [pc, #620]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005360:	4b98      	ldr	r3, [pc, #608]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005366:	4a97      	ldr	r2, [pc, #604]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 8005368:	f023 0304 	bic.w	r3, r3, #4
 800536c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d016      	beq.n	80053a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005378:	f7ff f9e2 	bl	8004740 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800537e:	e00a      	b.n	8005396 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005380:	f7ff f9de 	bl	8004740 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	; 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e12a      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005396:	4b8b      	ldr	r3, [pc, #556]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 8005398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0ed      	beq.n	8005380 <HAL_RCC_OscConfig+0x53c>
 80053a4:	e015      	b.n	80053d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a6:	f7ff f9cb 	bl	8004740 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053ac:	e00a      	b.n	80053c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ae:	f7ff f9c7 	bl	8004740 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053bc:	4293      	cmp	r3, r2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e113      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053c4:	4b7f      	ldr	r3, [pc, #508]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1ed      	bne.n	80053ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053d2:	7ffb      	ldrb	r3, [r7, #31]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d105      	bne.n	80053e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d8:	4b7a      	ldr	r3, [pc, #488]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 80053da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053dc:	4a79      	ldr	r2, [pc, #484]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 80053de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 80fe 	beq.w	80055ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	f040 80d0 	bne.w	8005598 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80053f8:	4b72      	ldr	r3, [pc, #456]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f003 0203 	and.w	r2, r3, #3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	429a      	cmp	r2, r3
 800540a:	d130      	bne.n	800546e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	3b01      	subs	r3, #1
 8005418:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800541a:	429a      	cmp	r2, r3
 800541c:	d127      	bne.n	800546e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005428:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d11f      	bne.n	800546e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005438:	2a07      	cmp	r2, #7
 800543a:	bf14      	ite	ne
 800543c:	2201      	movne	r2, #1
 800543e:	2200      	moveq	r2, #0
 8005440:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005442:	4293      	cmp	r3, r2
 8005444:	d113      	bne.n	800546e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005450:	085b      	lsrs	r3, r3, #1
 8005452:	3b01      	subs	r3, #1
 8005454:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005456:	429a      	cmp	r2, r3
 8005458:	d109      	bne.n	800546e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	085b      	lsrs	r3, r3, #1
 8005466:	3b01      	subs	r3, #1
 8005468:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800546a:	429a      	cmp	r2, r3
 800546c:	d06e      	beq.n	800554c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	2b0c      	cmp	r3, #12
 8005472:	d069      	beq.n	8005548 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005474:	4b53      	ldr	r3, [pc, #332]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d105      	bne.n	800548c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005480:	4b50      	ldr	r3, [pc, #320]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0ad      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005490:	4b4c      	ldr	r3, [pc, #304]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a4b      	ldr	r2, [pc, #300]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 8005496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800549a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800549c:	f7ff f950 	bl	8004740 <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a4:	f7ff f94c 	bl	8004740 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e09a      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b6:	4b43      	ldr	r3, [pc, #268]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054c2:	4b40      	ldr	r3, [pc, #256]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	4b40      	ldr	r3, [pc, #256]	; (80055c8 <HAL_RCC_OscConfig+0x784>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054d2:	3a01      	subs	r2, #1
 80054d4:	0112      	lsls	r2, r2, #4
 80054d6:	4311      	orrs	r1, r2
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054dc:	0212      	lsls	r2, r2, #8
 80054de:	4311      	orrs	r1, r2
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054e4:	0852      	lsrs	r2, r2, #1
 80054e6:	3a01      	subs	r2, #1
 80054e8:	0552      	lsls	r2, r2, #21
 80054ea:	4311      	orrs	r1, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054f0:	0852      	lsrs	r2, r2, #1
 80054f2:	3a01      	subs	r2, #1
 80054f4:	0652      	lsls	r2, r2, #25
 80054f6:	4311      	orrs	r1, r2
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054fc:	0912      	lsrs	r2, r2, #4
 80054fe:	0452      	lsls	r2, r2, #17
 8005500:	430a      	orrs	r2, r1
 8005502:	4930      	ldr	r1, [pc, #192]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 8005504:	4313      	orrs	r3, r2
 8005506:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005508:	4b2e      	ldr	r3, [pc, #184]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2d      	ldr	r2, [pc, #180]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 800550e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005512:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005514:	4b2b      	ldr	r3, [pc, #172]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a2a      	ldr	r2, [pc, #168]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 800551a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800551e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005520:	f7ff f90e 	bl	8004740 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005528:	f7ff f90a 	bl	8004740 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e058      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800553a:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005546:	e050      	b.n	80055ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e04f      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800554c:	4b1d      	ldr	r3, [pc, #116]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d148      	bne.n	80055ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005558:	4b1a      	ldr	r3, [pc, #104]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a19      	ldr	r2, [pc, #100]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 800555e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005562:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005564:	4b17      	ldr	r3, [pc, #92]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 800556a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800556e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005570:	f7ff f8e6 	bl	8004740 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005578:	f7ff f8e2 	bl	8004740 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e030      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800558a:	4b0e      	ldr	r3, [pc, #56]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f0      	beq.n	8005578 <HAL_RCC_OscConfig+0x734>
 8005596:	e028      	b.n	80055ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	2b0c      	cmp	r3, #12
 800559c:	d023      	beq.n	80055e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800559e:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a08      	ldr	r2, [pc, #32]	; (80055c4 <HAL_RCC_OscConfig+0x780>)
 80055a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055aa:	f7ff f8c9 	bl	8004740 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055b0:	e00c      	b.n	80055cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b2:	f7ff f8c5 	bl	8004740 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d905      	bls.n	80055cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e013      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
 80055c4:	40021000 	.word	0x40021000
 80055c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055cc:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <HAL_RCC_OscConfig+0x7b0>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1ec      	bne.n	80055b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <HAL_RCC_OscConfig+0x7b0>)
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	4905      	ldr	r1, [pc, #20]	; (80055f4 <HAL_RCC_OscConfig+0x7b0>)
 80055de:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <HAL_RCC_OscConfig+0x7b4>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	60cb      	str	r3, [r1, #12]
 80055e4:	e001      	b.n	80055ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3720      	adds	r7, #32
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40021000 	.word	0x40021000
 80055f8:	feeefffc 	.word	0xfeeefffc

080055fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0e7      	b.n	80057e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005610:	4b75      	ldr	r3, [pc, #468]	; (80057e8 <HAL_RCC_ClockConfig+0x1ec>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d910      	bls.n	8005640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561e:	4b72      	ldr	r3, [pc, #456]	; (80057e8 <HAL_RCC_ClockConfig+0x1ec>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f023 0207 	bic.w	r2, r3, #7
 8005626:	4970      	ldr	r1, [pc, #448]	; (80057e8 <HAL_RCC_ClockConfig+0x1ec>)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	4313      	orrs	r3, r2
 800562c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800562e:	4b6e      	ldr	r3, [pc, #440]	; (80057e8 <HAL_RCC_ClockConfig+0x1ec>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d001      	beq.n	8005640 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e0cf      	b.n	80057e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d010      	beq.n	800566e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	4b66      	ldr	r3, [pc, #408]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005658:	429a      	cmp	r2, r3
 800565a:	d908      	bls.n	800566e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800565c:	4b63      	ldr	r3, [pc, #396]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	4960      	ldr	r1, [pc, #384]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 800566a:	4313      	orrs	r3, r2
 800566c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d04c      	beq.n	8005714 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b03      	cmp	r3, #3
 8005680:	d107      	bne.n	8005692 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005682:	4b5a      	ldr	r3, [pc, #360]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d121      	bne.n	80056d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e0a6      	b.n	80057e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b02      	cmp	r3, #2
 8005698:	d107      	bne.n	80056aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800569a:	4b54      	ldr	r3, [pc, #336]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d115      	bne.n	80056d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e09a      	b.n	80057e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d107      	bne.n	80056c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056b2:	4b4e      	ldr	r3, [pc, #312]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d109      	bne.n	80056d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e08e      	b.n	80057e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056c2:	4b4a      	ldr	r3, [pc, #296]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e086      	b.n	80057e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056d2:	4b46      	ldr	r3, [pc, #280]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f023 0203 	bic.w	r2, r3, #3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	4943      	ldr	r1, [pc, #268]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e4:	f7ff f82c 	bl	8004740 <HAL_GetTick>
 80056e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ea:	e00a      	b.n	8005702 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ec:	f7ff f828 	bl	8004740 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e06e      	b.n	80057e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005702:	4b3a      	ldr	r3, [pc, #232]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 020c 	and.w	r2, r3, #12
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	429a      	cmp	r2, r3
 8005712:	d1eb      	bne.n	80056ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d010      	beq.n	8005742 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	4b31      	ldr	r3, [pc, #196]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800572c:	429a      	cmp	r2, r3
 800572e:	d208      	bcs.n	8005742 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005730:	4b2e      	ldr	r3, [pc, #184]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	492b      	ldr	r1, [pc, #172]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005742:	4b29      	ldr	r3, [pc, #164]	; (80057e8 <HAL_RCC_ClockConfig+0x1ec>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d210      	bcs.n	8005772 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005750:	4b25      	ldr	r3, [pc, #148]	; (80057e8 <HAL_RCC_ClockConfig+0x1ec>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f023 0207 	bic.w	r2, r3, #7
 8005758:	4923      	ldr	r1, [pc, #140]	; (80057e8 <HAL_RCC_ClockConfig+0x1ec>)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	4313      	orrs	r3, r2
 800575e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005760:	4b21      	ldr	r3, [pc, #132]	; (80057e8 <HAL_RCC_ClockConfig+0x1ec>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d001      	beq.n	8005772 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e036      	b.n	80057e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	d008      	beq.n	8005790 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800577e:	4b1b      	ldr	r3, [pc, #108]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	4918      	ldr	r1, [pc, #96]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 800578c:	4313      	orrs	r3, r2
 800578e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b00      	cmp	r3, #0
 800579a:	d009      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800579c:	4b13      	ldr	r3, [pc, #76]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4910      	ldr	r1, [pc, #64]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057b0:	f000 f824 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 80057b4:	4602      	mov	r2, r0
 80057b6:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <HAL_RCC_ClockConfig+0x1f0>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	091b      	lsrs	r3, r3, #4
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	490b      	ldr	r1, [pc, #44]	; (80057f0 <HAL_RCC_ClockConfig+0x1f4>)
 80057c2:	5ccb      	ldrb	r3, [r1, r3]
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	fa22 f303 	lsr.w	r3, r2, r3
 80057cc:	4a09      	ldr	r2, [pc, #36]	; (80057f4 <HAL_RCC_ClockConfig+0x1f8>)
 80057ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80057d0:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <HAL_RCC_ClockConfig+0x1fc>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fc f89f 	bl	8001918 <HAL_InitTick>
 80057da:	4603      	mov	r3, r0
 80057dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80057de:	7afb      	ldrb	r3, [r7, #11]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40022000 	.word	0x40022000
 80057ec:	40021000 	.word	0x40021000
 80057f0:	0800ccdc 	.word	0x0800ccdc
 80057f4:	20000000 	.word	0x20000000
 80057f8:	2000000c 	.word	0x2000000c

080057fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b089      	sub	sp, #36	; 0x24
 8005800:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	2300      	movs	r3, #0
 8005808:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800580a:	4b3e      	ldr	r3, [pc, #248]	; (8005904 <HAL_RCC_GetSysClockFreq+0x108>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005814:	4b3b      	ldr	r3, [pc, #236]	; (8005904 <HAL_RCC_GetSysClockFreq+0x108>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_RCC_GetSysClockFreq+0x34>
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2b0c      	cmp	r3, #12
 8005828:	d121      	bne.n	800586e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d11e      	bne.n	800586e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005830:	4b34      	ldr	r3, [pc, #208]	; (8005904 <HAL_RCC_GetSysClockFreq+0x108>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d107      	bne.n	800584c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800583c:	4b31      	ldr	r3, [pc, #196]	; (8005904 <HAL_RCC_GetSysClockFreq+0x108>)
 800583e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005842:	0a1b      	lsrs	r3, r3, #8
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	e005      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800584c:	4b2d      	ldr	r3, [pc, #180]	; (8005904 <HAL_RCC_GetSysClockFreq+0x108>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	091b      	lsrs	r3, r3, #4
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005858:	4a2b      	ldr	r2, [pc, #172]	; (8005908 <HAL_RCC_GetSysClockFreq+0x10c>)
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005860:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10d      	bne.n	8005884 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800586c:	e00a      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b04      	cmp	r3, #4
 8005872:	d102      	bne.n	800587a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005874:	4b25      	ldr	r3, [pc, #148]	; (800590c <HAL_RCC_GetSysClockFreq+0x110>)
 8005876:	61bb      	str	r3, [r7, #24]
 8005878:	e004      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b08      	cmp	r3, #8
 800587e:	d101      	bne.n	8005884 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005880:	4b23      	ldr	r3, [pc, #140]	; (8005910 <HAL_RCC_GetSysClockFreq+0x114>)
 8005882:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	2b0c      	cmp	r3, #12
 8005888:	d134      	bne.n	80058f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800588a:	4b1e      	ldr	r3, [pc, #120]	; (8005904 <HAL_RCC_GetSysClockFreq+0x108>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d003      	beq.n	80058a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d003      	beq.n	80058a8 <HAL_RCC_GetSysClockFreq+0xac>
 80058a0:	e005      	b.n	80058ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80058a2:	4b1a      	ldr	r3, [pc, #104]	; (800590c <HAL_RCC_GetSysClockFreq+0x110>)
 80058a4:	617b      	str	r3, [r7, #20]
      break;
 80058a6:	e005      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80058a8:	4b19      	ldr	r3, [pc, #100]	; (8005910 <HAL_RCC_GetSysClockFreq+0x114>)
 80058aa:	617b      	str	r3, [r7, #20]
      break;
 80058ac:	e002      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	617b      	str	r3, [r7, #20]
      break;
 80058b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058b4:	4b13      	ldr	r3, [pc, #76]	; (8005904 <HAL_RCC_GetSysClockFreq+0x108>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	091b      	lsrs	r3, r3, #4
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	3301      	adds	r3, #1
 80058c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80058c2:	4b10      	ldr	r3, [pc, #64]	; (8005904 <HAL_RCC_GetSysClockFreq+0x108>)
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	fb03 f202 	mul.w	r2, r3, r2
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058da:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <HAL_RCC_GetSysClockFreq+0x108>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	0e5b      	lsrs	r3, r3, #25
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	3301      	adds	r3, #1
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80058f4:	69bb      	ldr	r3, [r7, #24]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3724      	adds	r7, #36	; 0x24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40021000 	.word	0x40021000
 8005908:	0800ccf4 	.word	0x0800ccf4
 800590c:	00f42400 	.word	0x00f42400
 8005910:	007a1200 	.word	0x007a1200

08005914 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005918:	4b03      	ldr	r3, [pc, #12]	; (8005928 <HAL_RCC_GetHCLKFreq+0x14>)
 800591a:	681b      	ldr	r3, [r3, #0]
}
 800591c:	4618      	mov	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	20000000 	.word	0x20000000

0800592c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005930:	f7ff fff0 	bl	8005914 <HAL_RCC_GetHCLKFreq>
 8005934:	4602      	mov	r2, r0
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	0a1b      	lsrs	r3, r3, #8
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	4904      	ldr	r1, [pc, #16]	; (8005954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005942:	5ccb      	ldrb	r3, [r1, r3]
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800594c:	4618      	mov	r0, r3
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40021000 	.word	0x40021000
 8005954:	0800ccec 	.word	0x0800ccec

08005958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800595c:	f7ff ffda 	bl	8005914 <HAL_RCC_GetHCLKFreq>
 8005960:	4602      	mov	r2, r0
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	0adb      	lsrs	r3, r3, #11
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	4904      	ldr	r1, [pc, #16]	; (8005980 <HAL_RCC_GetPCLK2Freq+0x28>)
 800596e:	5ccb      	ldrb	r3, [r1, r3]
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005978:	4618      	mov	r0, r3
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40021000 	.word	0x40021000
 8005980:	0800ccec 	.word	0x0800ccec

08005984 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	220f      	movs	r2, #15
 8005992:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005994:	4b12      	ldr	r3, [pc, #72]	; (80059e0 <HAL_RCC_GetClockConfig+0x5c>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 0203 	and.w	r2, r3, #3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80059a0:	4b0f      	ldr	r3, [pc, #60]	; (80059e0 <HAL_RCC_GetClockConfig+0x5c>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80059ac:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <HAL_RCC_GetClockConfig+0x5c>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80059b8:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <HAL_RCC_GetClockConfig+0x5c>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	08db      	lsrs	r3, r3, #3
 80059be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80059c6:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <HAL_RCC_GetClockConfig+0x60>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0207 	and.w	r2, r3, #7
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	601a      	str	r2, [r3, #0]
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40021000 	.word	0x40021000
 80059e4:	40022000 	.word	0x40022000

080059e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059f0:	2300      	movs	r3, #0
 80059f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059f4:	4b2a      	ldr	r3, [pc, #168]	; (8005aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a00:	f7ff f9bc 	bl	8004d7c <HAL_PWREx_GetVoltageRange>
 8005a04:	6178      	str	r0, [r7, #20]
 8005a06:	e014      	b.n	8005a32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a08:	4b25      	ldr	r3, [pc, #148]	; (8005aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0c:	4a24      	ldr	r2, [pc, #144]	; (8005aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a12:	6593      	str	r3, [r2, #88]	; 0x58
 8005a14:	4b22      	ldr	r3, [pc, #136]	; (8005aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a20:	f7ff f9ac 	bl	8004d7c <HAL_PWREx_GetVoltageRange>
 8005a24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a26:	4b1e      	ldr	r3, [pc, #120]	; (8005aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2a:	4a1d      	ldr	r2, [pc, #116]	; (8005aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a38:	d10b      	bne.n	8005a52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b80      	cmp	r3, #128	; 0x80
 8005a3e:	d919      	bls.n	8005a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2ba0      	cmp	r3, #160	; 0xa0
 8005a44:	d902      	bls.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a46:	2302      	movs	r3, #2
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	e013      	b.n	8005a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	e010      	b.n	8005a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b80      	cmp	r3, #128	; 0x80
 8005a56:	d902      	bls.n	8005a5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a58:	2303      	movs	r3, #3
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	e00a      	b.n	8005a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b80      	cmp	r3, #128	; 0x80
 8005a62:	d102      	bne.n	8005a6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a64:	2302      	movs	r3, #2
 8005a66:	613b      	str	r3, [r7, #16]
 8005a68:	e004      	b.n	8005a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b70      	cmp	r3, #112	; 0x70
 8005a6e:	d101      	bne.n	8005a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a70:	2301      	movs	r3, #1
 8005a72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f023 0207 	bic.w	r2, r3, #7
 8005a7c:	4909      	ldr	r1, [pc, #36]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a84:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d001      	beq.n	8005a96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	40022000 	.word	0x40022000

08005aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d041      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005acc:	d02a      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005ace:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ad2:	d824      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ad4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ad8:	d008      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ada:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ade:	d81e      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae8:	d010      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005aea:	e018      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005aec:	4b86      	ldr	r3, [pc, #536]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	4a85      	ldr	r2, [pc, #532]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005af8:	e015      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3304      	adds	r3, #4
 8005afe:	2100      	movs	r1, #0
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fabb 	bl	800607c <RCCEx_PLLSAI1_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b0a:	e00c      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3320      	adds	r3, #32
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fba6 	bl	8006264 <RCCEx_PLLSAI2_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b1c:	e003      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	74fb      	strb	r3, [r7, #19]
      break;
 8005b22:	e000      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b26:	7cfb      	ldrb	r3, [r7, #19]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10b      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b2c:	4b76      	ldr	r3, [pc, #472]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b3a:	4973      	ldr	r1, [pc, #460]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b42:	e001      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	7cfb      	ldrb	r3, [r7, #19]
 8005b46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d041      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b5c:	d02a      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b62:	d824      	bhi.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b68:	d008      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b6e:	d81e      	bhi.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00a      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b78:	d010      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b7a:	e018      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b7c:	4b62      	ldr	r3, [pc, #392]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4a61      	ldr	r2, [pc, #388]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b88:	e015      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	2100      	movs	r1, #0
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 fa73 	bl	800607c <RCCEx_PLLSAI1_Config>
 8005b96:	4603      	mov	r3, r0
 8005b98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b9a:	e00c      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3320      	adds	r3, #32
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fb5e 	bl	8006264 <RCCEx_PLLSAI2_Config>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bac:	e003      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	74fb      	strb	r3, [r7, #19]
      break;
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bb6:	7cfb      	ldrb	r3, [r7, #19]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10b      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bbc:	4b52      	ldr	r3, [pc, #328]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bca:	494f      	ldr	r1, [pc, #316]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005bd2:	e001      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	7cfb      	ldrb	r3, [r7, #19]
 8005bd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 80a0 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005be6:	2300      	movs	r3, #0
 8005be8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bea:	4b47      	ldr	r3, [pc, #284]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00d      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c00:	4b41      	ldr	r3, [pc, #260]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c04:	4a40      	ldr	r2, [pc, #256]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8005c0c:	4b3e      	ldr	r3, [pc, #248]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c1c:	4b3b      	ldr	r3, [pc, #236]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a3a      	ldr	r2, [pc, #232]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c28:	f7fe fd8a 	bl	8004740 <HAL_GetTick>
 8005c2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c2e:	e009      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c30:	f7fe fd86 	bl	8004740 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d902      	bls.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	74fb      	strb	r3, [r7, #19]
        break;
 8005c42:	e005      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c44:	4b31      	ldr	r3, [pc, #196]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0ef      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c50:	7cfb      	ldrb	r3, [r7, #19]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d15c      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c56:	4b2c      	ldr	r3, [pc, #176]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01f      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d019      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c74:	4b24      	ldr	r3, [pc, #144]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c80:	4b21      	ldr	r3, [pc, #132]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c86:	4a20      	ldr	r2, [pc, #128]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c90:	4b1d      	ldr	r3, [pc, #116]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	4a1c      	ldr	r2, [pc, #112]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ca0:	4a19      	ldr	r2, [pc, #100]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d016      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb2:	f7fe fd45 	bl	8004740 <HAL_GetTick>
 8005cb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb8:	e00b      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cba:	f7fe fd41 	bl	8004740 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d902      	bls.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	74fb      	strb	r3, [r7, #19]
            break;
 8005cd0:	e006      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0ec      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005ce0:	7cfb      	ldrb	r3, [r7, #19]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10c      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ce6:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf6:	4904      	ldr	r1, [pc, #16]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cfe:	e009      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d00:	7cfb      	ldrb	r3, [r7, #19]
 8005d02:	74bb      	strb	r3, [r7, #18]
 8005d04:	e006      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005d06:	bf00      	nop
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d10:	7cfb      	ldrb	r3, [r7, #19]
 8005d12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d14:	7c7b      	ldrb	r3, [r7, #17]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d105      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d1a:	4b9e      	ldr	r3, [pc, #632]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1e:	4a9d      	ldr	r2, [pc, #628]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d32:	4b98      	ldr	r3, [pc, #608]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d38:	f023 0203 	bic.w	r2, r3, #3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	4994      	ldr	r1, [pc, #592]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d54:	4b8f      	ldr	r3, [pc, #572]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	f023 020c 	bic.w	r2, r3, #12
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d62:	498c      	ldr	r1, [pc, #560]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d76:	4b87      	ldr	r3, [pc, #540]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	4983      	ldr	r1, [pc, #524]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00a      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d98:	4b7e      	ldr	r3, [pc, #504]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da6:	497b      	ldr	r1, [pc, #492]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0310 	and.w	r3, r3, #16
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dba:	4b76      	ldr	r3, [pc, #472]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc8:	4972      	ldr	r1, [pc, #456]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ddc:	4b6d      	ldr	r3, [pc, #436]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dea:	496a      	ldr	r1, [pc, #424]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dfe:	4b65      	ldr	r3, [pc, #404]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0c:	4961      	ldr	r1, [pc, #388]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e20:	4b5c      	ldr	r3, [pc, #368]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2e:	4959      	ldr	r1, [pc, #356]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e42:	4b54      	ldr	r3, [pc, #336]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e50:	4950      	ldr	r1, [pc, #320]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e64:	4b4b      	ldr	r3, [pc, #300]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e72:	4948      	ldr	r1, [pc, #288]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e86:	4b43      	ldr	r3, [pc, #268]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e94:	493f      	ldr	r1, [pc, #252]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d028      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ea8:	4b3a      	ldr	r3, [pc, #232]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb6:	4937      	ldr	r1, [pc, #220]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ec6:	d106      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec8:	4b32      	ldr	r3, [pc, #200]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	4a31      	ldr	r2, [pc, #196]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ed2:	60d3      	str	r3, [r2, #12]
 8005ed4:	e011      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ede:	d10c      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 f8c8 	bl	800607c <RCCEx_PLLSAI1_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ef0:	7cfb      	ldrb	r3, [r7, #19]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005ef6:	7cfb      	ldrb	r3, [r7, #19]
 8005ef8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d028      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f06:	4b23      	ldr	r3, [pc, #140]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f14:	491f      	ldr	r1, [pc, #124]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f24:	d106      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f26:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	4a1a      	ldr	r2, [pc, #104]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f30:	60d3      	str	r3, [r2, #12]
 8005f32:	e011      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f3c:	d10c      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3304      	adds	r3, #4
 8005f42:	2101      	movs	r1, #1
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 f899 	bl	800607c <RCCEx_PLLSAI1_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f4e:	7cfb      	ldrb	r3, [r7, #19]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005f54:	7cfb      	ldrb	r3, [r7, #19]
 8005f56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d02b      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f64:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f72:	4908      	ldr	r1, [pc, #32]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f82:	d109      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f84:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	4a02      	ldr	r2, [pc, #8]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f8e:	60d3      	str	r3, [r2, #12]
 8005f90:	e014      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f92:	bf00      	nop
 8005f94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fa0:	d10c      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 f867 	bl	800607c <RCCEx_PLLSAI1_Config>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fb2:	7cfb      	ldrb	r3, [r7, #19]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005fb8:	7cfb      	ldrb	r3, [r7, #19]
 8005fba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d02f      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fc8:	4b2b      	ldr	r3, [pc, #172]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fd6:	4928      	ldr	r1, [pc, #160]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fe6:	d10d      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3304      	adds	r3, #4
 8005fec:	2102      	movs	r1, #2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 f844 	bl	800607c <RCCEx_PLLSAI1_Config>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ff8:	7cfb      	ldrb	r3, [r7, #19]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d014      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ffe:	7cfb      	ldrb	r3, [r7, #19]
 8006000:	74bb      	strb	r3, [r7, #18]
 8006002:	e011      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800600c:	d10c      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3320      	adds	r3, #32
 8006012:	2102      	movs	r1, #2
 8006014:	4618      	mov	r0, r3
 8006016:	f000 f925 	bl	8006264 <RCCEx_PLLSAI2_Config>
 800601a:	4603      	mov	r3, r0
 800601c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800601e:	7cfb      	ldrb	r3, [r7, #19]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006024:	7cfb      	ldrb	r3, [r7, #19]
 8006026:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006034:	4b10      	ldr	r3, [pc, #64]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006042:	490d      	ldr	r1, [pc, #52]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00b      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006056:	4b08      	ldr	r3, [pc, #32]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006066:	4904      	ldr	r1, [pc, #16]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800606e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40021000 	.word	0x40021000

0800607c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800608a:	4b75      	ldr	r3, [pc, #468]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d018      	beq.n	80060c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006096:	4b72      	ldr	r3, [pc, #456]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f003 0203 	and.w	r2, r3, #3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d10d      	bne.n	80060c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
       ||
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80060ae:	4b6c      	ldr	r3, [pc, #432]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	091b      	lsrs	r3, r3, #4
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
       ||
 80060be:	429a      	cmp	r2, r3
 80060c0:	d047      	beq.n	8006152 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	73fb      	strb	r3, [r7, #15]
 80060c6:	e044      	b.n	8006152 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b03      	cmp	r3, #3
 80060ce:	d018      	beq.n	8006102 <RCCEx_PLLSAI1_Config+0x86>
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d825      	bhi.n	8006120 <RCCEx_PLLSAI1_Config+0xa4>
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d002      	beq.n	80060de <RCCEx_PLLSAI1_Config+0x62>
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d009      	beq.n	80060f0 <RCCEx_PLLSAI1_Config+0x74>
 80060dc:	e020      	b.n	8006120 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060de:	4b60      	ldr	r3, [pc, #384]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d11d      	bne.n	8006126 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060ee:	e01a      	b.n	8006126 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060f0:	4b5b      	ldr	r3, [pc, #364]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d116      	bne.n	800612a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006100:	e013      	b.n	800612a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006102:	4b57      	ldr	r3, [pc, #348]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10f      	bne.n	800612e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800610e:	4b54      	ldr	r3, [pc, #336]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d109      	bne.n	800612e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800611e:	e006      	b.n	800612e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	73fb      	strb	r3, [r7, #15]
      break;
 8006124:	e004      	b.n	8006130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006126:	bf00      	nop
 8006128:	e002      	b.n	8006130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800612a:	bf00      	nop
 800612c:	e000      	b.n	8006130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800612e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10d      	bne.n	8006152 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006136:	4b4a      	ldr	r3, [pc, #296]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6819      	ldr	r1, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	3b01      	subs	r3, #1
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	430b      	orrs	r3, r1
 800614c:	4944      	ldr	r1, [pc, #272]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800614e:	4313      	orrs	r3, r2
 8006150:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d17d      	bne.n	8006254 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006158:	4b41      	ldr	r3, [pc, #260]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a40      	ldr	r2, [pc, #256]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800615e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006164:	f7fe faec 	bl	8004740 <HAL_GetTick>
 8006168:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800616a:	e009      	b.n	8006180 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800616c:	f7fe fae8 	bl	8004740 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d902      	bls.n	8006180 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	73fb      	strb	r3, [r7, #15]
        break;
 800617e:	e005      	b.n	800618c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006180:	4b37      	ldr	r3, [pc, #220]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1ef      	bne.n	800616c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d160      	bne.n	8006254 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d111      	bne.n	80061bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006198:	4b31      	ldr	r3, [pc, #196]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80061a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6892      	ldr	r2, [r2, #8]
 80061a8:	0211      	lsls	r1, r2, #8
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	68d2      	ldr	r2, [r2, #12]
 80061ae:	0912      	lsrs	r2, r2, #4
 80061b0:	0452      	lsls	r2, r2, #17
 80061b2:	430a      	orrs	r2, r1
 80061b4:	492a      	ldr	r1, [pc, #168]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	610b      	str	r3, [r1, #16]
 80061ba:	e027      	b.n	800620c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d112      	bne.n	80061e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061c2:	4b27      	ldr	r3, [pc, #156]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80061ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6892      	ldr	r2, [r2, #8]
 80061d2:	0211      	lsls	r1, r2, #8
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6912      	ldr	r2, [r2, #16]
 80061d8:	0852      	lsrs	r2, r2, #1
 80061da:	3a01      	subs	r2, #1
 80061dc:	0552      	lsls	r2, r2, #21
 80061de:	430a      	orrs	r2, r1
 80061e0:	491f      	ldr	r1, [pc, #124]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	610b      	str	r3, [r1, #16]
 80061e6:	e011      	b.n	800620c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061e8:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80061f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6892      	ldr	r2, [r2, #8]
 80061f8:	0211      	lsls	r1, r2, #8
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6952      	ldr	r2, [r2, #20]
 80061fe:	0852      	lsrs	r2, r2, #1
 8006200:	3a01      	subs	r2, #1
 8006202:	0652      	lsls	r2, r2, #25
 8006204:	430a      	orrs	r2, r1
 8006206:	4916      	ldr	r1, [pc, #88]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006208:	4313      	orrs	r3, r2
 800620a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800620c:	4b14      	ldr	r3, [pc, #80]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a13      	ldr	r2, [pc, #76]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006212:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006216:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006218:	f7fe fa92 	bl	8004740 <HAL_GetTick>
 800621c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800621e:	e009      	b.n	8006234 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006220:	f7fe fa8e 	bl	8004740 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d902      	bls.n	8006234 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	73fb      	strb	r3, [r7, #15]
          break;
 8006232:	e005      	b.n	8006240 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006234:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0ef      	beq.n	8006220 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006246:	4b06      	ldr	r3, [pc, #24]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	4904      	ldr	r1, [pc, #16]	; (8006260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006250:	4313      	orrs	r3, r2
 8006252:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40021000 	.word	0x40021000

08006264 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006272:	4b6a      	ldr	r3, [pc, #424]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d018      	beq.n	80062b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800627e:	4b67      	ldr	r3, [pc, #412]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f003 0203 	and.w	r2, r3, #3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	429a      	cmp	r2, r3
 800628c:	d10d      	bne.n	80062aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
       ||
 8006292:	2b00      	cmp	r3, #0
 8006294:	d009      	beq.n	80062aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006296:	4b61      	ldr	r3, [pc, #388]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	091b      	lsrs	r3, r3, #4
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
       ||
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d047      	beq.n	800633a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	73fb      	strb	r3, [r7, #15]
 80062ae:	e044      	b.n	800633a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d018      	beq.n	80062ea <RCCEx_PLLSAI2_Config+0x86>
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d825      	bhi.n	8006308 <RCCEx_PLLSAI2_Config+0xa4>
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d002      	beq.n	80062c6 <RCCEx_PLLSAI2_Config+0x62>
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d009      	beq.n	80062d8 <RCCEx_PLLSAI2_Config+0x74>
 80062c4:	e020      	b.n	8006308 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062c6:	4b55      	ldr	r3, [pc, #340]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d11d      	bne.n	800630e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d6:	e01a      	b.n	800630e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062d8:	4b50      	ldr	r3, [pc, #320]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d116      	bne.n	8006312 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062e8:	e013      	b.n	8006312 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062ea:	4b4c      	ldr	r3, [pc, #304]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10f      	bne.n	8006316 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062f6:	4b49      	ldr	r3, [pc, #292]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d109      	bne.n	8006316 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006306:	e006      	b.n	8006316 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	73fb      	strb	r3, [r7, #15]
      break;
 800630c:	e004      	b.n	8006318 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800630e:	bf00      	nop
 8006310:	e002      	b.n	8006318 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006312:	bf00      	nop
 8006314:	e000      	b.n	8006318 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006316:	bf00      	nop
    }

    if(status == HAL_OK)
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10d      	bne.n	800633a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800631e:	4b3f      	ldr	r3, [pc, #252]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6819      	ldr	r1, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	3b01      	subs	r3, #1
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	430b      	orrs	r3, r1
 8006334:	4939      	ldr	r1, [pc, #228]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006336:	4313      	orrs	r3, r2
 8006338:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d167      	bne.n	8006410 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006340:	4b36      	ldr	r3, [pc, #216]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a35      	ldr	r2, [pc, #212]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800634a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800634c:	f7fe f9f8 	bl	8004740 <HAL_GetTick>
 8006350:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006352:	e009      	b.n	8006368 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006354:	f7fe f9f4 	bl	8004740 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d902      	bls.n	8006368 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	73fb      	strb	r3, [r7, #15]
        break;
 8006366:	e005      	b.n	8006374 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006368:	4b2c      	ldr	r3, [pc, #176]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1ef      	bne.n	8006354 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d14a      	bne.n	8006410 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d111      	bne.n	80063a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006380:	4b26      	ldr	r3, [pc, #152]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6892      	ldr	r2, [r2, #8]
 8006390:	0211      	lsls	r1, r2, #8
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	68d2      	ldr	r2, [r2, #12]
 8006396:	0912      	lsrs	r2, r2, #4
 8006398:	0452      	lsls	r2, r2, #17
 800639a:	430a      	orrs	r2, r1
 800639c:	491f      	ldr	r1, [pc, #124]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	614b      	str	r3, [r1, #20]
 80063a2:	e011      	b.n	80063c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063a4:	4b1d      	ldr	r3, [pc, #116]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80063ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6892      	ldr	r2, [r2, #8]
 80063b4:	0211      	lsls	r1, r2, #8
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6912      	ldr	r2, [r2, #16]
 80063ba:	0852      	lsrs	r2, r2, #1
 80063bc:	3a01      	subs	r2, #1
 80063be:	0652      	lsls	r2, r2, #25
 80063c0:	430a      	orrs	r2, r1
 80063c2:	4916      	ldr	r1, [pc, #88]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80063c8:	4b14      	ldr	r3, [pc, #80]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a13      	ldr	r2, [pc, #76]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 80063ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d4:	f7fe f9b4 	bl	8004740 <HAL_GetTick>
 80063d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063da:	e009      	b.n	80063f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063dc:	f7fe f9b0 	bl	8004740 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d902      	bls.n	80063f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	73fb      	strb	r3, [r7, #15]
          break;
 80063ee:	e005      	b.n	80063fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063f0:	4b0a      	ldr	r3, [pc, #40]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0ef      	beq.n	80063dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006402:	4b06      	ldr	r3, [pc, #24]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006404:	695a      	ldr	r2, [r3, #20]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	4904      	ldr	r1, [pc, #16]	; (800641c <RCCEx_PLLSAI2_Config+0x1b8>)
 800640c:	4313      	orrs	r3, r2
 800640e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	40021000 	.word	0x40021000

08006420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e095      	b.n	800655e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	2b00      	cmp	r3, #0
 8006438:	d108      	bne.n	800644c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006442:	d009      	beq.n	8006458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	61da      	str	r2, [r3, #28]
 800644a:	e005      	b.n	8006458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fb f88c 	bl	8001590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800648e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006498:	d902      	bls.n	80064a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	e002      	b.n	80064a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064ae:	d007      	beq.n	80064c0 <HAL_SPI_Init+0xa0>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064b8:	d002      	beq.n	80064c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064f8:	431a      	orrs	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	ea42 0103 	orr.w	r1, r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	0c1b      	lsrs	r3, r3, #16
 800651c:	f003 0204 	and.w	r2, r3, #4
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800653c:	ea42 0103 	orr.w	r1, r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b088      	sub	sp, #32
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	4613      	mov	r3, r2
 8006574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_SPI_Transmit+0x22>
 8006584:	2302      	movs	r3, #2
 8006586:	e158      	b.n	800683a <HAL_SPI_Transmit+0x2d4>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006590:	f7fe f8d6 	bl	8004740 <HAL_GetTick>
 8006594:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d002      	beq.n	80065ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80065a6:	2302      	movs	r3, #2
 80065a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065aa:	e13d      	b.n	8006828 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <HAL_SPI_Transmit+0x52>
 80065b2:	88fb      	ldrh	r3, [r7, #6]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d102      	bne.n	80065be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065bc:	e134      	b.n	8006828 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2203      	movs	r2, #3
 80065c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	88fa      	ldrh	r2, [r7, #6]
 80065d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	88fa      	ldrh	r2, [r7, #6]
 80065dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006608:	d10f      	bne.n	800662a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006618:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006628:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006634:	2b40      	cmp	r3, #64	; 0x40
 8006636:	d007      	beq.n	8006648 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006646:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006650:	d94b      	bls.n	80066ea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <HAL_SPI_Transmit+0xfa>
 800665a:	8afb      	ldrh	r3, [r7, #22]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d13e      	bne.n	80066de <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006664:	881a      	ldrh	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	1c9a      	adds	r2, r3, #2
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006684:	e02b      	b.n	80066de <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b02      	cmp	r3, #2
 8006692:	d112      	bne.n	80066ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	881a      	ldrh	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	1c9a      	adds	r2, r3, #2
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	3b01      	subs	r3, #1
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066b8:	e011      	b.n	80066de <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066ba:	f7fe f841 	bl	8004740 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d803      	bhi.n	80066d2 <HAL_SPI_Transmit+0x16c>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066d0:	d102      	bne.n	80066d8 <HAL_SPI_Transmit+0x172>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d102      	bne.n	80066de <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066dc:	e0a4      	b.n	8006828 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1ce      	bne.n	8006686 <HAL_SPI_Transmit+0x120>
 80066e8:	e07c      	b.n	80067e4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <HAL_SPI_Transmit+0x192>
 80066f2:	8afb      	ldrh	r3, [r7, #22]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d170      	bne.n	80067da <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d912      	bls.n	8006728 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	881a      	ldrh	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	1c9a      	adds	r2, r3, #2
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b02      	subs	r3, #2
 8006720:	b29a      	uxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006726:	e058      	b.n	80067da <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	330c      	adds	r3, #12
 8006732:	7812      	ldrb	r2, [r2, #0]
 8006734:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800674e:	e044      	b.n	80067da <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b02      	cmp	r3, #2
 800675c:	d12b      	bne.n	80067b6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006762:	b29b      	uxth	r3, r3
 8006764:	2b01      	cmp	r3, #1
 8006766:	d912      	bls.n	800678e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	881a      	ldrh	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006778:	1c9a      	adds	r2, r3, #2
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b02      	subs	r3, #2
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800678c:	e025      	b.n	80067da <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	330c      	adds	r3, #12
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067b4:	e011      	b.n	80067da <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067b6:	f7fd ffc3 	bl	8004740 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d803      	bhi.n	80067ce <HAL_SPI_Transmit+0x268>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067cc:	d102      	bne.n	80067d4 <HAL_SPI_Transmit+0x26e>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d102      	bne.n	80067da <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067d8:	e026      	b.n	8006828 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067de:	b29b      	uxth	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1b5      	bne.n	8006750 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fce3 	bl	80071b4 <SPI_EndRxTxTransaction>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006802:	2300      	movs	r3, #0
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	77fb      	strb	r3, [r7, #31]
 8006824:	e000      	b.n	8006828 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006826:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006838:	7ffb      	ldrb	r3, [r7, #31]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3720      	adds	r7, #32
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b088      	sub	sp, #32
 8006846:	af02      	add	r7, sp, #8
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	4613      	mov	r3, r2
 8006850:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800685e:	d112      	bne.n	8006886 <HAL_SPI_Receive+0x44>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10e      	bne.n	8006886 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2204      	movs	r2, #4
 800686c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006870:	88fa      	ldrh	r2, [r7, #6]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	4613      	mov	r3, r2
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 f910 	bl	8006aa2 <HAL_SPI_TransmitReceive>
 8006882:	4603      	mov	r3, r0
 8006884:	e109      	b.n	8006a9a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_SPI_Receive+0x52>
 8006890:	2302      	movs	r3, #2
 8006892:	e102      	b.n	8006a9a <HAL_SPI_Receive+0x258>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800689c:	f7fd ff50 	bl	8004740 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d002      	beq.n	80068b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80068ae:	2302      	movs	r3, #2
 80068b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068b2:	e0e9      	b.n	8006a88 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <HAL_SPI_Receive+0x7e>
 80068ba:	88fb      	ldrh	r3, [r7, #6]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d102      	bne.n	80068c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068c4:	e0e0      	b.n	8006a88 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2204      	movs	r2, #4
 80068ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	88fa      	ldrh	r2, [r7, #6]
 80068de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	88fa      	ldrh	r2, [r7, #6]
 80068e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006910:	d908      	bls.n	8006924 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006920:	605a      	str	r2, [r3, #4]
 8006922:	e007      	b.n	8006934 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006932:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800693c:	d10f      	bne.n	800695e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800694c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800695c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006968:	2b40      	cmp	r3, #64	; 0x40
 800696a:	d007      	beq.n	800697c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800697a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006984:	d867      	bhi.n	8006a56 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006986:	e030      	b.n	80069ea <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b01      	cmp	r3, #1
 8006994:	d117      	bne.n	80069c6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f103 020c 	add.w	r2, r3, #12
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	7812      	ldrb	r2, [r2, #0]
 80069a4:	b2d2      	uxtb	r2, r2
 80069a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80069c4:	e011      	b.n	80069ea <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069c6:	f7fd febb 	bl	8004740 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d803      	bhi.n	80069de <HAL_SPI_Receive+0x19c>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069dc:	d102      	bne.n	80069e4 <HAL_SPI_Receive+0x1a2>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80069e8:	e04e      	b.n	8006a88 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1c8      	bne.n	8006988 <HAL_SPI_Receive+0x146>
 80069f6:	e034      	b.n	8006a62 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d115      	bne.n	8006a32 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68da      	ldr	r2, [r3, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	b292      	uxth	r2, r2
 8006a12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	1c9a      	adds	r2, r3, #2
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	3b01      	subs	r3, #1
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006a30:	e011      	b.n	8006a56 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a32:	f7fd fe85 	bl	8004740 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d803      	bhi.n	8006a4a <HAL_SPI_Receive+0x208>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a48:	d102      	bne.n	8006a50 <HAL_SPI_Receive+0x20e>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a54:	e018      	b.n	8006a88 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1ca      	bne.n	80069f8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 fb4c 	bl	8007104 <SPI_EndRxTransaction>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2220      	movs	r2, #32
 8006a76:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	75fb      	strb	r3, [r7, #23]
 8006a84:	e000      	b.n	8006a88 <HAL_SPI_Receive+0x246>
  }

error :
 8006a86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b08a      	sub	sp, #40	; 0x28
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	607a      	str	r2, [r7, #4]
 8006aae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d101      	bne.n	8006ac8 <HAL_SPI_TransmitReceive+0x26>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e1fb      	b.n	8006ec0 <HAL_SPI_TransmitReceive+0x41e>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ad0:	f7fd fe36 	bl	8004740 <HAL_GetTick>
 8006ad4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006adc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006ae4:	887b      	ldrh	r3, [r7, #2]
 8006ae6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006ae8:	887b      	ldrh	r3, [r7, #2]
 8006aea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006aec:	7efb      	ldrb	r3, [r7, #27]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d00e      	beq.n	8006b10 <HAL_SPI_TransmitReceive+0x6e>
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006af8:	d106      	bne.n	8006b08 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d102      	bne.n	8006b08 <HAL_SPI_TransmitReceive+0x66>
 8006b02:	7efb      	ldrb	r3, [r7, #27]
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d003      	beq.n	8006b10 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006b08:	2302      	movs	r3, #2
 8006b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006b0e:	e1cd      	b.n	8006eac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <HAL_SPI_TransmitReceive+0x80>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <HAL_SPI_TransmitReceive+0x80>
 8006b1c:	887b      	ldrh	r3, [r7, #2]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d103      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006b28:	e1c0      	b.n	8006eac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d003      	beq.n	8006b3e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2205      	movs	r2, #5
 8006b3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	887a      	ldrh	r2, [r7, #2]
 8006b4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	887a      	ldrh	r2, [r7, #2]
 8006b56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	887a      	ldrh	r2, [r7, #2]
 8006b64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	887a      	ldrh	r2, [r7, #2]
 8006b6a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b80:	d802      	bhi.n	8006b88 <HAL_SPI_TransmitReceive+0xe6>
 8006b82:	8a3b      	ldrh	r3, [r7, #16]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d908      	bls.n	8006b9a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b96:	605a      	str	r2, [r3, #4]
 8006b98:	e007      	b.n	8006baa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ba8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb4:	2b40      	cmp	r3, #64	; 0x40
 8006bb6:	d007      	beq.n	8006bc8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bd0:	d97c      	bls.n	8006ccc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <HAL_SPI_TransmitReceive+0x13e>
 8006bda:	8a7b      	ldrh	r3, [r7, #18]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d169      	bne.n	8006cb4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	881a      	ldrh	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	1c9a      	adds	r2, r3, #2
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c04:	e056      	b.n	8006cb4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d11b      	bne.n	8006c4c <HAL_SPI_TransmitReceive+0x1aa>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d016      	beq.n	8006c4c <HAL_SPI_TransmitReceive+0x1aa>
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d113      	bne.n	8006c4c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	881a      	ldrh	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	1c9a      	adds	r2, r3, #2
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d11c      	bne.n	8006c94 <HAL_SPI_TransmitReceive+0x1f2>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d016      	beq.n	8006c94 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c70:	b292      	uxth	r2, r2
 8006c72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c78:	1c9a      	adds	r2, r3, #2
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c90:	2301      	movs	r3, #1
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c94:	f7fd fd54 	bl	8004740 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d807      	bhi.n	8006cb4 <HAL_SPI_TransmitReceive+0x212>
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006caa:	d003      	beq.n	8006cb4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006cb2:	e0fb      	b.n	8006eac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1a3      	bne.n	8006c06 <HAL_SPI_TransmitReceive+0x164>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d19d      	bne.n	8006c06 <HAL_SPI_TransmitReceive+0x164>
 8006cca:	e0df      	b.n	8006e8c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_SPI_TransmitReceive+0x23a>
 8006cd4:	8a7b      	ldrh	r3, [r7, #18]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	f040 80cb 	bne.w	8006e72 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d912      	bls.n	8006d0c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cea:	881a      	ldrh	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	1c9a      	adds	r2, r3, #2
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	3b02      	subs	r3, #2
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d0a:	e0b2      	b.n	8006e72 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	330c      	adds	r3, #12
 8006d16:	7812      	ldrb	r2, [r2, #0]
 8006d18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d32:	e09e      	b.n	8006e72 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d134      	bne.n	8006dac <HAL_SPI_TransmitReceive+0x30a>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d02f      	beq.n	8006dac <HAL_SPI_TransmitReceive+0x30a>
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d12c      	bne.n	8006dac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d912      	bls.n	8006d82 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	881a      	ldrh	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	1c9a      	adds	r2, r3, #2
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b02      	subs	r3, #2
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d80:	e012      	b.n	8006da8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	330c      	adds	r3, #12
 8006d8c:	7812      	ldrb	r2, [r2, #0]
 8006d8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	3b01      	subs	r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d148      	bne.n	8006e4c <HAL_SPI_TransmitReceive+0x3aa>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d042      	beq.n	8006e4c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d923      	bls.n	8006e1a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	b292      	uxth	r2, r2
 8006dde:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de4:	1c9a      	adds	r2, r3, #2
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	3b02      	subs	r3, #2
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d81f      	bhi.n	8006e48 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e16:	605a      	str	r2, [r3, #4]
 8006e18:	e016      	b.n	8006e48 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f103 020c 	add.w	r2, r3, #12
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	7812      	ldrb	r2, [r2, #0]
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e4c:	f7fd fc78 	bl	8004740 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d803      	bhi.n	8006e64 <HAL_SPI_TransmitReceive+0x3c2>
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e62:	d102      	bne.n	8006e6a <HAL_SPI_TransmitReceive+0x3c8>
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d103      	bne.n	8006e72 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006e70:	e01c      	b.n	8006eac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f47f af5b 	bne.w	8006d34 <HAL_SPI_TransmitReceive+0x292>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f47f af54 	bne.w	8006d34 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e8c:	69fa      	ldr	r2, [r7, #28]
 8006e8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 f98f 	bl	80071b4 <SPI_EndRxTxTransaction>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d006      	beq.n	8006eaa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	661a      	str	r2, [r3, #96]	; 0x60
 8006ea8:	e000      	b.n	8006eac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006eaa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3728      	adds	r7, #40	; 0x28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ed8:	f7fd fc32 	bl	8004740 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	1a9b      	subs	r3, r3, r2
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ee8:	f7fd fc2a 	bl	8004740 <HAL_GetTick>
 8006eec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006eee:	4b39      	ldr	r3, [pc, #228]	; (8006fd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	015b      	lsls	r3, r3, #5
 8006ef4:	0d1b      	lsrs	r3, r3, #20
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	fb02 f303 	mul.w	r3, r2, r3
 8006efc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006efe:	e054      	b.n	8006faa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f06:	d050      	beq.n	8006faa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f08:	f7fd fc1a 	bl	8004740 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	69fa      	ldr	r2, [r7, #28]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d902      	bls.n	8006f1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d13d      	bne.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f36:	d111      	bne.n	8006f5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f40:	d004      	beq.n	8006f4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4a:	d107      	bne.n	8006f5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f64:	d10f      	bne.n	8006f86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e017      	b.n	8006fca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	bf0c      	ite	eq
 8006fba:	2301      	moveq	r3, #1
 8006fbc:	2300      	movne	r3, #0
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d19b      	bne.n	8006f00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3720      	adds	r7, #32
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20000000 	.word	0x20000000

08006fd8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08a      	sub	sp, #40	; 0x28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006fea:	f7fd fba9 	bl	8004740 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	1a9b      	subs	r3, r3, r2
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006ffa:	f7fd fba1 	bl	8004740 <HAL_GetTick>
 8006ffe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	330c      	adds	r3, #12
 8007006:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007008:	4b3d      	ldr	r3, [pc, #244]	; (8007100 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	00da      	lsls	r2, r3, #3
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	0d1b      	lsrs	r3, r3, #20
 8007018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701a:	fb02 f303 	mul.w	r3, r2, r3
 800701e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007020:	e060      	b.n	80070e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007028:	d107      	bne.n	800703a <SPI_WaitFifoStateUntilTimeout+0x62>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d104      	bne.n	800703a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007038:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007040:	d050      	beq.n	80070e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007042:	f7fd fb7d 	bl	8004740 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800704e:	429a      	cmp	r2, r3
 8007050:	d902      	bls.n	8007058 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	d13d      	bne.n	80070d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007066:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007070:	d111      	bne.n	8007096 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800707a:	d004      	beq.n	8007086 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007084:	d107      	bne.n	8007096 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007094:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800709e:	d10f      	bne.n	80070c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e010      	b.n	80070f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	3b01      	subs	r3, #1
 80070e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689a      	ldr	r2, [r3, #8]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	4013      	ands	r3, r2
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d196      	bne.n	8007022 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3728      	adds	r7, #40	; 0x28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	20000000 	.word	0x20000000

08007104 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af02      	add	r7, sp, #8
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007118:	d111      	bne.n	800713e <SPI_EndRxTransaction+0x3a>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007122:	d004      	beq.n	800712e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800712c:	d107      	bne.n	800713e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800713c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2200      	movs	r2, #0
 8007146:	2180      	movs	r1, #128	; 0x80
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f7ff febd 	bl	8006ec8 <SPI_WaitFlagStateUntilTimeout>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d007      	beq.n	8007164 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007158:	f043 0220 	orr.w	r2, r3, #32
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e023      	b.n	80071ac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800716c:	d11d      	bne.n	80071aa <SPI_EndRxTransaction+0xa6>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007176:	d004      	beq.n	8007182 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007180:	d113      	bne.n	80071aa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2200      	movs	r2, #0
 800718a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f7ff ff22 	bl	8006fd8 <SPI_WaitFifoStateUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d007      	beq.n	80071aa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719e:	f043 0220 	orr.w	r2, r3, #32
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e000      	b.n	80071ac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f7ff ff03 	bl	8006fd8 <SPI_WaitFifoStateUntilTimeout>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d007      	beq.n	80071e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071dc:	f043 0220 	orr.w	r2, r3, #32
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e027      	b.n	8007238 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2200      	movs	r2, #0
 80071f0:	2180      	movs	r1, #128	; 0x80
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f7ff fe68 	bl	8006ec8 <SPI_WaitFlagStateUntilTimeout>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d007      	beq.n	800720e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007202:	f043 0220 	orr.w	r2, r3, #32
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e014      	b.n	8007238 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2200      	movs	r2, #0
 8007216:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f7ff fedc 	bl	8006fd8 <SPI_WaitFifoStateUntilTimeout>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d007      	beq.n	8007236 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800722a:	f043 0220 	orr.w	r2, r3, #32
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e000      	b.n	8007238 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e049      	b.n	80072e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d106      	bne.n	800726c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f841 	bl	80072ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3304      	adds	r3, #4
 800727c:	4619      	mov	r1, r3
 800727e:	4610      	mov	r0, r2
 8007280:	f000 f9f8 	bl	8007674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
	...

08007304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b01      	cmp	r3, #1
 8007316:	d001      	beq.n	800731c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e04f      	b.n	80073bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f042 0201 	orr.w	r2, r2, #1
 8007332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a23      	ldr	r2, [pc, #140]	; (80073c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d01d      	beq.n	800737a <HAL_TIM_Base_Start_IT+0x76>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007346:	d018      	beq.n	800737a <HAL_TIM_Base_Start_IT+0x76>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a1f      	ldr	r2, [pc, #124]	; (80073cc <HAL_TIM_Base_Start_IT+0xc8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d013      	beq.n	800737a <HAL_TIM_Base_Start_IT+0x76>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a1e      	ldr	r2, [pc, #120]	; (80073d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00e      	beq.n	800737a <HAL_TIM_Base_Start_IT+0x76>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1c      	ldr	r2, [pc, #112]	; (80073d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d009      	beq.n	800737a <HAL_TIM_Base_Start_IT+0x76>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a1b      	ldr	r2, [pc, #108]	; (80073d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d004      	beq.n	800737a <HAL_TIM_Base_Start_IT+0x76>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a19      	ldr	r2, [pc, #100]	; (80073dc <HAL_TIM_Base_Start_IT+0xd8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d115      	bne.n	80073a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	4b17      	ldr	r3, [pc, #92]	; (80073e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007382:	4013      	ands	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b06      	cmp	r3, #6
 800738a:	d015      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0xb4>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007392:	d011      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0201 	orr.w	r2, r2, #1
 80073a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a4:	e008      	b.n	80073b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0201 	orr.w	r2, r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	e000      	b.n	80073ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	40012c00 	.word	0x40012c00
 80073cc:	40000400 	.word	0x40000400
 80073d0:	40000800 	.word	0x40000800
 80073d4:	40000c00 	.word	0x40000c00
 80073d8:	40013400 	.word	0x40013400
 80073dc:	40014000 	.word	0x40014000
 80073e0:	00010007 	.word	0x00010007

080073e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d122      	bne.n	8007440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b02      	cmp	r3, #2
 8007406:	d11b      	bne.n	8007440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f06f 0202 	mvn.w	r2, #2
 8007410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f905 	bl	8007636 <HAL_TIM_IC_CaptureCallback>
 800742c:	e005      	b.n	800743a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f8f7 	bl	8007622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f908 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f003 0304 	and.w	r3, r3, #4
 800744a:	2b04      	cmp	r3, #4
 800744c:	d122      	bne.n	8007494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b04      	cmp	r3, #4
 800745a:	d11b      	bne.n	8007494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f06f 0204 	mvn.w	r2, #4
 8007464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2202      	movs	r2, #2
 800746a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f8db 	bl	8007636 <HAL_TIM_IC_CaptureCallback>
 8007480:	e005      	b.n	800748e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f8cd 	bl	8007622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f8de 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f003 0308 	and.w	r3, r3, #8
 800749e:	2b08      	cmp	r3, #8
 80074a0:	d122      	bne.n	80074e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 0308 	and.w	r3, r3, #8
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d11b      	bne.n	80074e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f06f 0208 	mvn.w	r2, #8
 80074b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2204      	movs	r2, #4
 80074be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f8b1 	bl	8007636 <HAL_TIM_IC_CaptureCallback>
 80074d4:	e005      	b.n	80074e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f8a3 	bl	8007622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f8b4 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f003 0310 	and.w	r3, r3, #16
 80074f2:	2b10      	cmp	r3, #16
 80074f4:	d122      	bne.n	800753c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f003 0310 	and.w	r3, r3, #16
 8007500:	2b10      	cmp	r3, #16
 8007502:	d11b      	bne.n	800753c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0210 	mvn.w	r2, #16
 800750c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2208      	movs	r2, #8
 8007512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f887 	bl	8007636 <HAL_TIM_IC_CaptureCallback>
 8007528:	e005      	b.n	8007536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f879 	bl	8007622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f88a 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b01      	cmp	r3, #1
 8007548:	d10e      	bne.n	8007568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b01      	cmp	r3, #1
 8007556:	d107      	bne.n	8007568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f06f 0201 	mvn.w	r2, #1
 8007560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7f9 ffbe 	bl	80014e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007572:	2b80      	cmp	r3, #128	; 0x80
 8007574:	d10e      	bne.n	8007594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007580:	2b80      	cmp	r3, #128	; 0x80
 8007582:	d107      	bne.n	8007594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800758c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f914 	bl	80077bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075a2:	d10e      	bne.n	80075c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ae:	2b80      	cmp	r3, #128	; 0x80
 80075b0:	d107      	bne.n	80075c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80075ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f907 	bl	80077d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075cc:	2b40      	cmp	r3, #64	; 0x40
 80075ce:	d10e      	bne.n	80075ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	d107      	bne.n	80075ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f838 	bl	800765e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	f003 0320 	and.w	r3, r3, #32
 80075f8:	2b20      	cmp	r3, #32
 80075fa:	d10e      	bne.n	800761a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b20      	cmp	r3, #32
 8007608:	d107      	bne.n	800761a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f06f 0220 	mvn.w	r2, #32
 8007612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f8c7 	bl	80077a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800762a:	bf00      	nop
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
	...

08007674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a40      	ldr	r2, [pc, #256]	; (8007788 <TIM_Base_SetConfig+0x114>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d013      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007692:	d00f      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a3d      	ldr	r2, [pc, #244]	; (800778c <TIM_Base_SetConfig+0x118>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00b      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a3c      	ldr	r2, [pc, #240]	; (8007790 <TIM_Base_SetConfig+0x11c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d007      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a3b      	ldr	r2, [pc, #236]	; (8007794 <TIM_Base_SetConfig+0x120>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d003      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a3a      	ldr	r2, [pc, #232]	; (8007798 <TIM_Base_SetConfig+0x124>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d108      	bne.n	80076c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a2f      	ldr	r2, [pc, #188]	; (8007788 <TIM_Base_SetConfig+0x114>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d01f      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d4:	d01b      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a2c      	ldr	r2, [pc, #176]	; (800778c <TIM_Base_SetConfig+0x118>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d017      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a2b      	ldr	r2, [pc, #172]	; (8007790 <TIM_Base_SetConfig+0x11c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d013      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a2a      	ldr	r2, [pc, #168]	; (8007794 <TIM_Base_SetConfig+0x120>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00f      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a29      	ldr	r2, [pc, #164]	; (8007798 <TIM_Base_SetConfig+0x124>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00b      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a28      	ldr	r2, [pc, #160]	; (800779c <TIM_Base_SetConfig+0x128>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d007      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a27      	ldr	r2, [pc, #156]	; (80077a0 <TIM_Base_SetConfig+0x12c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d003      	beq.n	800770e <TIM_Base_SetConfig+0x9a>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a26      	ldr	r2, [pc, #152]	; (80077a4 <TIM_Base_SetConfig+0x130>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d108      	bne.n	8007720 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	4313      	orrs	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a10      	ldr	r2, [pc, #64]	; (8007788 <TIM_Base_SetConfig+0x114>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00f      	beq.n	800776c <TIM_Base_SetConfig+0xf8>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a12      	ldr	r2, [pc, #72]	; (8007798 <TIM_Base_SetConfig+0x124>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d00b      	beq.n	800776c <TIM_Base_SetConfig+0xf8>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a11      	ldr	r2, [pc, #68]	; (800779c <TIM_Base_SetConfig+0x128>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d007      	beq.n	800776c <TIM_Base_SetConfig+0xf8>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a10      	ldr	r2, [pc, #64]	; (80077a0 <TIM_Base_SetConfig+0x12c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d003      	beq.n	800776c <TIM_Base_SetConfig+0xf8>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a0f      	ldr	r2, [pc, #60]	; (80077a4 <TIM_Base_SetConfig+0x130>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d103      	bne.n	8007774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	615a      	str	r2, [r3, #20]
}
 800777a:	bf00      	nop
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40012c00 	.word	0x40012c00
 800778c:	40000400 	.word	0x40000400
 8007790:	40000800 	.word	0x40000800
 8007794:	40000c00 	.word	0x40000c00
 8007798:	40013400 	.word	0x40013400
 800779c:	40014000 	.word	0x40014000
 80077a0:	40014400 	.word	0x40014400
 80077a4:	40014800 	.word	0x40014800

080077a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e040      	b.n	8007878 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d106      	bne.n	800780c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7fa f9aa 	bl	8001b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2224      	movs	r2, #36	; 0x24
 8007810:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0201 	bic.w	r2, r2, #1
 8007820:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f82c 	bl	8007880 <UART_SetConfig>
 8007828:	4603      	mov	r3, r0
 800782a:	2b01      	cmp	r3, #1
 800782c:	d101      	bne.n	8007832 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e022      	b.n	8007878 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fad8 	bl	8007df0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800784e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800785e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0201 	orr.w	r2, r2, #1
 800786e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fb5f 	bl	8007f34 <UART_CheckIdleState>
 8007876:	4603      	mov	r3, r0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007884:	b08a      	sub	sp, #40	; 0x28
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	431a      	orrs	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	431a      	orrs	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4ba4      	ldr	r3, [pc, #656]	; (8007b40 <UART_SetConfig+0x2c0>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	6812      	ldr	r2, [r2, #0]
 80078b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078b8:	430b      	orrs	r3, r1
 80078ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a99      	ldr	r2, [pc, #612]	; (8007b44 <UART_SetConfig+0x2c4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e8:	4313      	orrs	r3, r2
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fc:	430a      	orrs	r2, r1
 80078fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a90      	ldr	r2, [pc, #576]	; (8007b48 <UART_SetConfig+0x2c8>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d126      	bne.n	8007958 <UART_SetConfig+0xd8>
 800790a:	4b90      	ldr	r3, [pc, #576]	; (8007b4c <UART_SetConfig+0x2cc>)
 800790c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007910:	f003 0303 	and.w	r3, r3, #3
 8007914:	2b03      	cmp	r3, #3
 8007916:	d81b      	bhi.n	8007950 <UART_SetConfig+0xd0>
 8007918:	a201      	add	r2, pc, #4	; (adr r2, 8007920 <UART_SetConfig+0xa0>)
 800791a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791e:	bf00      	nop
 8007920:	08007931 	.word	0x08007931
 8007924:	08007941 	.word	0x08007941
 8007928:	08007939 	.word	0x08007939
 800792c:	08007949 	.word	0x08007949
 8007930:	2301      	movs	r3, #1
 8007932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007936:	e116      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007938:	2302      	movs	r3, #2
 800793a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800793e:	e112      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007940:	2304      	movs	r3, #4
 8007942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007946:	e10e      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007948:	2308      	movs	r3, #8
 800794a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800794e:	e10a      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007950:	2310      	movs	r3, #16
 8007952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007956:	e106      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a7c      	ldr	r2, [pc, #496]	; (8007b50 <UART_SetConfig+0x2d0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d138      	bne.n	80079d4 <UART_SetConfig+0x154>
 8007962:	4b7a      	ldr	r3, [pc, #488]	; (8007b4c <UART_SetConfig+0x2cc>)
 8007964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007968:	f003 030c 	and.w	r3, r3, #12
 800796c:	2b0c      	cmp	r3, #12
 800796e:	d82d      	bhi.n	80079cc <UART_SetConfig+0x14c>
 8007970:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <UART_SetConfig+0xf8>)
 8007972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007976:	bf00      	nop
 8007978:	080079ad 	.word	0x080079ad
 800797c:	080079cd 	.word	0x080079cd
 8007980:	080079cd 	.word	0x080079cd
 8007984:	080079cd 	.word	0x080079cd
 8007988:	080079bd 	.word	0x080079bd
 800798c:	080079cd 	.word	0x080079cd
 8007990:	080079cd 	.word	0x080079cd
 8007994:	080079cd 	.word	0x080079cd
 8007998:	080079b5 	.word	0x080079b5
 800799c:	080079cd 	.word	0x080079cd
 80079a0:	080079cd 	.word	0x080079cd
 80079a4:	080079cd 	.word	0x080079cd
 80079a8:	080079c5 	.word	0x080079c5
 80079ac:	2300      	movs	r3, #0
 80079ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079b2:	e0d8      	b.n	8007b66 <UART_SetConfig+0x2e6>
 80079b4:	2302      	movs	r3, #2
 80079b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079ba:	e0d4      	b.n	8007b66 <UART_SetConfig+0x2e6>
 80079bc:	2304      	movs	r3, #4
 80079be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079c2:	e0d0      	b.n	8007b66 <UART_SetConfig+0x2e6>
 80079c4:	2308      	movs	r3, #8
 80079c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079ca:	e0cc      	b.n	8007b66 <UART_SetConfig+0x2e6>
 80079cc:	2310      	movs	r3, #16
 80079ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079d2:	e0c8      	b.n	8007b66 <UART_SetConfig+0x2e6>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a5e      	ldr	r2, [pc, #376]	; (8007b54 <UART_SetConfig+0x2d4>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d125      	bne.n	8007a2a <UART_SetConfig+0x1aa>
 80079de:	4b5b      	ldr	r3, [pc, #364]	; (8007b4c <UART_SetConfig+0x2cc>)
 80079e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079e8:	2b30      	cmp	r3, #48	; 0x30
 80079ea:	d016      	beq.n	8007a1a <UART_SetConfig+0x19a>
 80079ec:	2b30      	cmp	r3, #48	; 0x30
 80079ee:	d818      	bhi.n	8007a22 <UART_SetConfig+0x1a2>
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d00a      	beq.n	8007a0a <UART_SetConfig+0x18a>
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d814      	bhi.n	8007a22 <UART_SetConfig+0x1a2>
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <UART_SetConfig+0x182>
 80079fc:	2b10      	cmp	r3, #16
 80079fe:	d008      	beq.n	8007a12 <UART_SetConfig+0x192>
 8007a00:	e00f      	b.n	8007a22 <UART_SetConfig+0x1a2>
 8007a02:	2300      	movs	r3, #0
 8007a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a08:	e0ad      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a10:	e0a9      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007a12:	2304      	movs	r3, #4
 8007a14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a18:	e0a5      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007a1a:	2308      	movs	r3, #8
 8007a1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a20:	e0a1      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007a22:	2310      	movs	r3, #16
 8007a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a28:	e09d      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a4a      	ldr	r2, [pc, #296]	; (8007b58 <UART_SetConfig+0x2d8>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d125      	bne.n	8007a80 <UART_SetConfig+0x200>
 8007a34:	4b45      	ldr	r3, [pc, #276]	; (8007b4c <UART_SetConfig+0x2cc>)
 8007a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a3e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a40:	d016      	beq.n	8007a70 <UART_SetConfig+0x1f0>
 8007a42:	2bc0      	cmp	r3, #192	; 0xc0
 8007a44:	d818      	bhi.n	8007a78 <UART_SetConfig+0x1f8>
 8007a46:	2b80      	cmp	r3, #128	; 0x80
 8007a48:	d00a      	beq.n	8007a60 <UART_SetConfig+0x1e0>
 8007a4a:	2b80      	cmp	r3, #128	; 0x80
 8007a4c:	d814      	bhi.n	8007a78 <UART_SetConfig+0x1f8>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <UART_SetConfig+0x1d8>
 8007a52:	2b40      	cmp	r3, #64	; 0x40
 8007a54:	d008      	beq.n	8007a68 <UART_SetConfig+0x1e8>
 8007a56:	e00f      	b.n	8007a78 <UART_SetConfig+0x1f8>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a5e:	e082      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007a60:	2302      	movs	r3, #2
 8007a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a66:	e07e      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007a68:	2304      	movs	r3, #4
 8007a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a6e:	e07a      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007a70:	2308      	movs	r3, #8
 8007a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a76:	e076      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007a78:	2310      	movs	r3, #16
 8007a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a7e:	e072      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a35      	ldr	r2, [pc, #212]	; (8007b5c <UART_SetConfig+0x2dc>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d12a      	bne.n	8007ae0 <UART_SetConfig+0x260>
 8007a8a:	4b30      	ldr	r3, [pc, #192]	; (8007b4c <UART_SetConfig+0x2cc>)
 8007a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a98:	d01a      	beq.n	8007ad0 <UART_SetConfig+0x250>
 8007a9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a9e:	d81b      	bhi.n	8007ad8 <UART_SetConfig+0x258>
 8007aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa4:	d00c      	beq.n	8007ac0 <UART_SetConfig+0x240>
 8007aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aaa:	d815      	bhi.n	8007ad8 <UART_SetConfig+0x258>
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <UART_SetConfig+0x238>
 8007ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab4:	d008      	beq.n	8007ac8 <UART_SetConfig+0x248>
 8007ab6:	e00f      	b.n	8007ad8 <UART_SetConfig+0x258>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007abe:	e052      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ac6:	e04e      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007ac8:	2304      	movs	r3, #4
 8007aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ace:	e04a      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007ad0:	2308      	movs	r3, #8
 8007ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ad6:	e046      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007ad8:	2310      	movs	r3, #16
 8007ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ade:	e042      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a17      	ldr	r2, [pc, #92]	; (8007b44 <UART_SetConfig+0x2c4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d13a      	bne.n	8007b60 <UART_SetConfig+0x2e0>
 8007aea:	4b18      	ldr	r3, [pc, #96]	; (8007b4c <UART_SetConfig+0x2cc>)
 8007aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007af0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007af4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007af8:	d01a      	beq.n	8007b30 <UART_SetConfig+0x2b0>
 8007afa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007afe:	d81b      	bhi.n	8007b38 <UART_SetConfig+0x2b8>
 8007b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b04:	d00c      	beq.n	8007b20 <UART_SetConfig+0x2a0>
 8007b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b0a:	d815      	bhi.n	8007b38 <UART_SetConfig+0x2b8>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <UART_SetConfig+0x298>
 8007b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b14:	d008      	beq.n	8007b28 <UART_SetConfig+0x2a8>
 8007b16:	e00f      	b.n	8007b38 <UART_SetConfig+0x2b8>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b1e:	e022      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007b20:	2302      	movs	r3, #2
 8007b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b26:	e01e      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007b28:	2304      	movs	r3, #4
 8007b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b2e:	e01a      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007b30:	2308      	movs	r3, #8
 8007b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b36:	e016      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007b38:	2310      	movs	r3, #16
 8007b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b3e:	e012      	b.n	8007b66 <UART_SetConfig+0x2e6>
 8007b40:	efff69f3 	.word	0xefff69f3
 8007b44:	40008000 	.word	0x40008000
 8007b48:	40013800 	.word	0x40013800
 8007b4c:	40021000 	.word	0x40021000
 8007b50:	40004400 	.word	0x40004400
 8007b54:	40004800 	.word	0x40004800
 8007b58:	40004c00 	.word	0x40004c00
 8007b5c:	40005000 	.word	0x40005000
 8007b60:	2310      	movs	r3, #16
 8007b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a9f      	ldr	r2, [pc, #636]	; (8007de8 <UART_SetConfig+0x568>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d17a      	bne.n	8007c66 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d824      	bhi.n	8007bc2 <UART_SetConfig+0x342>
 8007b78:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <UART_SetConfig+0x300>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007ba5 	.word	0x08007ba5
 8007b84:	08007bc3 	.word	0x08007bc3
 8007b88:	08007bad 	.word	0x08007bad
 8007b8c:	08007bc3 	.word	0x08007bc3
 8007b90:	08007bb3 	.word	0x08007bb3
 8007b94:	08007bc3 	.word	0x08007bc3
 8007b98:	08007bc3 	.word	0x08007bc3
 8007b9c:	08007bc3 	.word	0x08007bc3
 8007ba0:	08007bbb 	.word	0x08007bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ba4:	f7fd fec2 	bl	800592c <HAL_RCC_GetPCLK1Freq>
 8007ba8:	61f8      	str	r0, [r7, #28]
        break;
 8007baa:	e010      	b.n	8007bce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bac:	4b8f      	ldr	r3, [pc, #572]	; (8007dec <UART_SetConfig+0x56c>)
 8007bae:	61fb      	str	r3, [r7, #28]
        break;
 8007bb0:	e00d      	b.n	8007bce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bb2:	f7fd fe23 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 8007bb6:	61f8      	str	r0, [r7, #28]
        break;
 8007bb8:	e009      	b.n	8007bce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bbe:	61fb      	str	r3, [r7, #28]
        break;
 8007bc0:	e005      	b.n	8007bce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007bcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 80fb 	beq.w	8007dcc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	4413      	add	r3, r2
 8007be0:	69fa      	ldr	r2, [r7, #28]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d305      	bcc.n	8007bf2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007bec:	69fa      	ldr	r2, [r7, #28]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d903      	bls.n	8007bfa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007bf8:	e0e8      	b.n	8007dcc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	461c      	mov	r4, r3
 8007c00:	4615      	mov	r5, r2
 8007c02:	f04f 0200 	mov.w	r2, #0
 8007c06:	f04f 0300 	mov.w	r3, #0
 8007c0a:	022b      	lsls	r3, r5, #8
 8007c0c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c10:	0222      	lsls	r2, r4, #8
 8007c12:	68f9      	ldr	r1, [r7, #12]
 8007c14:	6849      	ldr	r1, [r1, #4]
 8007c16:	0849      	lsrs	r1, r1, #1
 8007c18:	2000      	movs	r0, #0
 8007c1a:	4688      	mov	r8, r1
 8007c1c:	4681      	mov	r9, r0
 8007c1e:	eb12 0a08 	adds.w	sl, r2, r8
 8007c22:	eb43 0b09 	adc.w	fp, r3, r9
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	603b      	str	r3, [r7, #0]
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c34:	4650      	mov	r0, sl
 8007c36:	4659      	mov	r1, fp
 8007c38:	f7f8 ff10 	bl	8000a5c <__aeabi_uldivmod>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	4613      	mov	r3, r2
 8007c42:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c4a:	d308      	bcc.n	8007c5e <UART_SetConfig+0x3de>
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c52:	d204      	bcs.n	8007c5e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	60da      	str	r2, [r3, #12]
 8007c5c:	e0b6      	b.n	8007dcc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007c64:	e0b2      	b.n	8007dcc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c6e:	d15e      	bne.n	8007d2e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007c70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c74:	2b08      	cmp	r3, #8
 8007c76:	d828      	bhi.n	8007cca <UART_SetConfig+0x44a>
 8007c78:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <UART_SetConfig+0x400>)
 8007c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7e:	bf00      	nop
 8007c80:	08007ca5 	.word	0x08007ca5
 8007c84:	08007cad 	.word	0x08007cad
 8007c88:	08007cb5 	.word	0x08007cb5
 8007c8c:	08007ccb 	.word	0x08007ccb
 8007c90:	08007cbb 	.word	0x08007cbb
 8007c94:	08007ccb 	.word	0x08007ccb
 8007c98:	08007ccb 	.word	0x08007ccb
 8007c9c:	08007ccb 	.word	0x08007ccb
 8007ca0:	08007cc3 	.word	0x08007cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ca4:	f7fd fe42 	bl	800592c <HAL_RCC_GetPCLK1Freq>
 8007ca8:	61f8      	str	r0, [r7, #28]
        break;
 8007caa:	e014      	b.n	8007cd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cac:	f7fd fe54 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 8007cb0:	61f8      	str	r0, [r7, #28]
        break;
 8007cb2:	e010      	b.n	8007cd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cb4:	4b4d      	ldr	r3, [pc, #308]	; (8007dec <UART_SetConfig+0x56c>)
 8007cb6:	61fb      	str	r3, [r7, #28]
        break;
 8007cb8:	e00d      	b.n	8007cd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cba:	f7fd fd9f 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 8007cbe:	61f8      	str	r0, [r7, #28]
        break;
 8007cc0:	e009      	b.n	8007cd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cc6:	61fb      	str	r3, [r7, #28]
        break;
 8007cc8:	e005      	b.n	8007cd6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007cd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d077      	beq.n	8007dcc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	005a      	lsls	r2, r3, #1
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	085b      	lsrs	r3, r3, #1
 8007ce6:	441a      	add	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	2b0f      	cmp	r3, #15
 8007cf6:	d916      	bls.n	8007d26 <UART_SetConfig+0x4a6>
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cfe:	d212      	bcs.n	8007d26 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f023 030f 	bic.w	r3, r3, #15
 8007d08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	085b      	lsrs	r3, r3, #1
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	8afb      	ldrh	r3, [r7, #22]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	8afa      	ldrh	r2, [r7, #22]
 8007d22:	60da      	str	r2, [r3, #12]
 8007d24:	e052      	b.n	8007dcc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d2c:	e04e      	b.n	8007dcc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d32:	2b08      	cmp	r3, #8
 8007d34:	d827      	bhi.n	8007d86 <UART_SetConfig+0x506>
 8007d36:	a201      	add	r2, pc, #4	; (adr r2, 8007d3c <UART_SetConfig+0x4bc>)
 8007d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3c:	08007d61 	.word	0x08007d61
 8007d40:	08007d69 	.word	0x08007d69
 8007d44:	08007d71 	.word	0x08007d71
 8007d48:	08007d87 	.word	0x08007d87
 8007d4c:	08007d77 	.word	0x08007d77
 8007d50:	08007d87 	.word	0x08007d87
 8007d54:	08007d87 	.word	0x08007d87
 8007d58:	08007d87 	.word	0x08007d87
 8007d5c:	08007d7f 	.word	0x08007d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d60:	f7fd fde4 	bl	800592c <HAL_RCC_GetPCLK1Freq>
 8007d64:	61f8      	str	r0, [r7, #28]
        break;
 8007d66:	e014      	b.n	8007d92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d68:	f7fd fdf6 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 8007d6c:	61f8      	str	r0, [r7, #28]
        break;
 8007d6e:	e010      	b.n	8007d92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d70:	4b1e      	ldr	r3, [pc, #120]	; (8007dec <UART_SetConfig+0x56c>)
 8007d72:	61fb      	str	r3, [r7, #28]
        break;
 8007d74:	e00d      	b.n	8007d92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d76:	f7fd fd41 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 8007d7a:	61f8      	str	r0, [r7, #28]
        break;
 8007d7c:	e009      	b.n	8007d92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d82:	61fb      	str	r3, [r7, #28]
        break;
 8007d84:	e005      	b.n	8007d92 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007d90:	bf00      	nop
    }

    if (pclk != 0U)
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d019      	beq.n	8007dcc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	085a      	lsrs	r2, r3, #1
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	441a      	add	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007daa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	2b0f      	cmp	r3, #15
 8007db0:	d909      	bls.n	8007dc6 <UART_SetConfig+0x546>
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007db8:	d205      	bcs.n	8007dc6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	60da      	str	r2, [r3, #12]
 8007dc4:	e002      	b.n	8007dcc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007dd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3728      	adds	r7, #40	; 0x28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007de6:	bf00      	nop
 8007de8:	40008000 	.word	0x40008000
 8007dec:	00f42400 	.word	0x00f42400

08007df0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00a      	beq.n	8007e1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00a      	beq.n	8007e3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	430a      	orrs	r2, r1
 8007e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e40:	f003 0304 	and.w	r3, r3, #4
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00a      	beq.n	8007e5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	f003 0308 	and.w	r3, r3, #8
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e84:	f003 0310 	and.w	r3, r3, #16
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00a      	beq.n	8007ea2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01a      	beq.n	8007f06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eee:	d10a      	bne.n	8007f06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00a      	beq.n	8007f28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	605a      	str	r2, [r3, #4]
  }
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af02      	add	r7, sp, #8
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f44:	f7fc fbfc 	bl	8004740 <HAL_GetTick>
 8007f48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0308 	and.w	r3, r3, #8
 8007f54:	2b08      	cmp	r3, #8
 8007f56:	d10e      	bne.n	8007f76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f82d 	bl	8007fc6 <UART_WaitOnFlagUntilTimeout>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e023      	b.n	8007fbe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b04      	cmp	r3, #4
 8007f82:	d10e      	bne.n	8007fa2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f817 	bl	8007fc6 <UART_WaitOnFlagUntilTimeout>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e00d      	b.n	8007fbe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2220      	movs	r2, #32
 8007fac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b09c      	sub	sp, #112	; 0x70
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	603b      	str	r3, [r7, #0]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fd6:	e0a5      	b.n	8008124 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fde:	f000 80a1 	beq.w	8008124 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fe2:	f7fc fbad 	bl	8004740 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d302      	bcc.n	8007ff8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d13e      	bne.n	8008076 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008008:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800800c:	667b      	str	r3, [r7, #100]	; 0x64
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008016:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008018:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800801c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800801e:	e841 2300 	strex	r3, r2, [r1]
 8008022:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1e6      	bne.n	8007ff8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3308      	adds	r3, #8
 8008030:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008034:	e853 3f00 	ldrex	r3, [r3]
 8008038:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	f023 0301 	bic.w	r3, r3, #1
 8008040:	663b      	str	r3, [r7, #96]	; 0x60
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3308      	adds	r3, #8
 8008048:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800804a:	64ba      	str	r2, [r7, #72]	; 0x48
 800804c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008052:	e841 2300 	strex	r3, r2, [r1]
 8008056:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1e5      	bne.n	800802a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2220      	movs	r2, #32
 8008062:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2220      	movs	r2, #32
 8008068:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e067      	b.n	8008146 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0304 	and.w	r3, r3, #4
 8008080:	2b00      	cmp	r3, #0
 8008082:	d04f      	beq.n	8008124 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800808e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008092:	d147      	bne.n	8008124 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800809c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	e853 3f00 	ldrex	r3, [r3]
 80080aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	461a      	mov	r2, r3
 80080ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080bc:	637b      	str	r3, [r7, #52]	; 0x34
 80080be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080c4:	e841 2300 	strex	r3, r2, [r1]
 80080c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1e6      	bne.n	800809e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3308      	adds	r3, #8
 80080d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	e853 3f00 	ldrex	r3, [r3]
 80080de:	613b      	str	r3, [r7, #16]
   return(result);
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f023 0301 	bic.w	r3, r3, #1
 80080e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3308      	adds	r3, #8
 80080ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080f0:	623a      	str	r2, [r7, #32]
 80080f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f4:	69f9      	ldr	r1, [r7, #28]
 80080f6:	6a3a      	ldr	r2, [r7, #32]
 80080f8:	e841 2300 	strex	r3, r2, [r1]
 80080fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1e5      	bne.n	80080d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2220      	movs	r2, #32
 8008108:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2220      	movs	r2, #32
 800810e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2220      	movs	r2, #32
 8008114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e010      	b.n	8008146 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	69da      	ldr	r2, [r3, #28]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	4013      	ands	r3, r2
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	429a      	cmp	r2, r3
 8008132:	bf0c      	ite	eq
 8008134:	2301      	moveq	r3, #1
 8008136:	2300      	movne	r3, #0
 8008138:	b2db      	uxtb	r3, r3
 800813a:	461a      	mov	r2, r3
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	429a      	cmp	r2, r3
 8008140:	f43f af4a 	beq.w	8007fd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3770      	adds	r7, #112	; 0x70
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <__NVIC_SetPriority>:
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	4603      	mov	r3, r0
 8008158:	6039      	str	r1, [r7, #0]
 800815a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800815c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008160:	2b00      	cmp	r3, #0
 8008162:	db0a      	blt.n	800817a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	b2da      	uxtb	r2, r3
 8008168:	490c      	ldr	r1, [pc, #48]	; (800819c <__NVIC_SetPriority+0x4c>)
 800816a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800816e:	0112      	lsls	r2, r2, #4
 8008170:	b2d2      	uxtb	r2, r2
 8008172:	440b      	add	r3, r1
 8008174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008178:	e00a      	b.n	8008190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	b2da      	uxtb	r2, r3
 800817e:	4908      	ldr	r1, [pc, #32]	; (80081a0 <__NVIC_SetPriority+0x50>)
 8008180:	79fb      	ldrb	r3, [r7, #7]
 8008182:	f003 030f 	and.w	r3, r3, #15
 8008186:	3b04      	subs	r3, #4
 8008188:	0112      	lsls	r2, r2, #4
 800818a:	b2d2      	uxtb	r2, r2
 800818c:	440b      	add	r3, r1
 800818e:	761a      	strb	r2, [r3, #24]
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	e000e100 	.word	0xe000e100
 80081a0:	e000ed00 	.word	0xe000ed00

080081a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80081a8:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <SysTick_Handler+0x1c>)
 80081aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80081ac:	f002 fb00 	bl	800a7b0 <xTaskGetSchedulerState>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d001      	beq.n	80081ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80081b6:	f003 fb27 	bl	800b808 <xPortSysTickHandler>
  }
}
 80081ba:	bf00      	nop
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	e000e010 	.word	0xe000e010

080081c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80081c8:	2100      	movs	r1, #0
 80081ca:	f06f 0004 	mvn.w	r0, #4
 80081ce:	f7ff ffbf 	bl	8008150 <__NVIC_SetPriority>
#endif
}
 80081d2:	bf00      	nop
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081de:	f3ef 8305 	mrs	r3, IPSR
 80081e2:	603b      	str	r3, [r7, #0]
  return(result);
 80081e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081ea:	f06f 0305 	mvn.w	r3, #5
 80081ee:	607b      	str	r3, [r7, #4]
 80081f0:	e00c      	b.n	800820c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081f2:	4b0a      	ldr	r3, [pc, #40]	; (800821c <osKernelInitialize+0x44>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d105      	bne.n	8008206 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081fa:	4b08      	ldr	r3, [pc, #32]	; (800821c <osKernelInitialize+0x44>)
 80081fc:	2201      	movs	r2, #1
 80081fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008200:	2300      	movs	r3, #0
 8008202:	607b      	str	r3, [r7, #4]
 8008204:	e002      	b.n	800820c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800820a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800820c:	687b      	ldr	r3, [r7, #4]
}
 800820e:	4618      	mov	r0, r3
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	20000280 	.word	0x20000280

08008220 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008226:	f3ef 8305 	mrs	r3, IPSR
 800822a:	603b      	str	r3, [r7, #0]
  return(result);
 800822c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008232:	f06f 0305 	mvn.w	r3, #5
 8008236:	607b      	str	r3, [r7, #4]
 8008238:	e010      	b.n	800825c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800823a:	4b0b      	ldr	r3, [pc, #44]	; (8008268 <osKernelStart+0x48>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d109      	bne.n	8008256 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008242:	f7ff ffbf 	bl	80081c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008246:	4b08      	ldr	r3, [pc, #32]	; (8008268 <osKernelStart+0x48>)
 8008248:	2202      	movs	r2, #2
 800824a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800824c:	f001 fe1e 	bl	8009e8c <vTaskStartScheduler>
      stat = osOK;
 8008250:	2300      	movs	r3, #0
 8008252:	607b      	str	r3, [r7, #4]
 8008254:	e002      	b.n	800825c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800825a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800825c:	687b      	ldr	r3, [r7, #4]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000280 	.word	0x20000280

0800826c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800826c:	b580      	push	{r7, lr}
 800826e:	b08e      	sub	sp, #56	; 0x38
 8008270:	af04      	add	r7, sp, #16
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008278:	2300      	movs	r3, #0
 800827a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800827c:	f3ef 8305 	mrs	r3, IPSR
 8008280:	617b      	str	r3, [r7, #20]
  return(result);
 8008282:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008284:	2b00      	cmp	r3, #0
 8008286:	d17e      	bne.n	8008386 <osThreadNew+0x11a>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d07b      	beq.n	8008386 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800828e:	2380      	movs	r3, #128	; 0x80
 8008290:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008292:	2318      	movs	r3, #24
 8008294:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008296:	2300      	movs	r3, #0
 8008298:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800829a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800829e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d045      	beq.n	8008332 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <osThreadNew+0x48>
        name = attr->name;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d008      	beq.n	80082da <osThreadNew+0x6e>
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	2b38      	cmp	r3, #56	; 0x38
 80082cc:	d805      	bhi.n	80082da <osThreadNew+0x6e>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <osThreadNew+0x72>
        return (NULL);
 80082da:	2300      	movs	r3, #0
 80082dc:	e054      	b.n	8008388 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	089b      	lsrs	r3, r3, #2
 80082ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00e      	beq.n	8008314 <osThreadNew+0xa8>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	2bbb      	cmp	r3, #187	; 0xbb
 80082fc:	d90a      	bls.n	8008314 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008302:	2b00      	cmp	r3, #0
 8008304:	d006      	beq.n	8008314 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <osThreadNew+0xa8>
        mem = 1;
 800830e:	2301      	movs	r3, #1
 8008310:	61bb      	str	r3, [r7, #24]
 8008312:	e010      	b.n	8008336 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10c      	bne.n	8008336 <osThreadNew+0xca>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d108      	bne.n	8008336 <osThreadNew+0xca>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <osThreadNew+0xca>
          mem = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	61bb      	str	r3, [r7, #24]
 8008330:	e001      	b.n	8008336 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008332:	2300      	movs	r3, #0
 8008334:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d110      	bne.n	800835e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008344:	9202      	str	r2, [sp, #8]
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	6a3a      	ldr	r2, [r7, #32]
 8008350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f001 fbae 	bl	8009ab4 <xTaskCreateStatic>
 8008358:	4603      	mov	r3, r0
 800835a:	613b      	str	r3, [r7, #16]
 800835c:	e013      	b.n	8008386 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d110      	bne.n	8008386 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	b29a      	uxth	r2, r3
 8008368:	f107 0310 	add.w	r3, r7, #16
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f001 fbf9 	bl	8009b6e <xTaskCreate>
 800837c:	4603      	mov	r3, r0
 800837e:	2b01      	cmp	r3, #1
 8008380:	d001      	beq.n	8008386 <osThreadNew+0x11a>
            hTask = NULL;
 8008382:	2300      	movs	r3, #0
 8008384:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008386:	693b      	ldr	r3, [r7, #16]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3728      	adds	r7, #40	; 0x28
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008398:	f3ef 8305 	mrs	r3, IPSR
 800839c:	60bb      	str	r3, [r7, #8]
  return(result);
 800839e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <osDelay+0x1c>
    stat = osErrorISR;
 80083a4:	f06f 0305 	mvn.w	r3, #5
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	e007      	b.n	80083bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d002      	beq.n	80083bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 fd34 	bl	8009e24 <vTaskDelay>
    }
  }

  return (stat);
 80083bc:	68fb      	ldr	r3, [r7, #12]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
	...

080083c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4a07      	ldr	r2, [pc, #28]	; (80083f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80083d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	4a06      	ldr	r2, [pc, #24]	; (80083f8 <vApplicationGetIdleTaskMemory+0x30>)
 80083de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2280      	movs	r2, #128	; 0x80
 80083e4:	601a      	str	r2, [r3, #0]
}
 80083e6:	bf00      	nop
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	20000284 	.word	0x20000284
 80083f8:	20000340 	.word	0x20000340

080083fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	4a07      	ldr	r2, [pc, #28]	; (8008428 <vApplicationGetTimerTaskMemory+0x2c>)
 800840c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	4a06      	ldr	r2, [pc, #24]	; (800842c <vApplicationGetTimerTaskMemory+0x30>)
 8008412:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800841a:	601a      	str	r2, [r3, #0]
}
 800841c:	bf00      	nop
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	20000540 	.word	0x20000540
 800842c:	200005fc 	.word	0x200005fc

08008430 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f103 0208 	add.w	r2, r3, #8
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008448:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f103 0208 	add.w	r2, r3, #8
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f103 0208 	add.w	r2, r3, #8
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800848a:	b480      	push	{r7}
 800848c:	b085      	sub	sp, #20
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	1c5a      	adds	r2, r3, #1
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	601a      	str	r2, [r3, #0]
}
 80084c6:	bf00      	nop
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084d2:	b480      	push	{r7}
 80084d4:	b085      	sub	sp, #20
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084e8:	d103      	bne.n	80084f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	e00c      	b.n	800850c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3308      	adds	r3, #8
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e002      	b.n	8008500 <vListInsert+0x2e>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	429a      	cmp	r2, r3
 800850a:	d2f6      	bcs.n	80084fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	601a      	str	r2, [r3, #0]
}
 8008538:	bf00      	nop
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	6892      	ldr	r2, [r2, #8]
 800855a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	6852      	ldr	r2, [r2, #4]
 8008564:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	429a      	cmp	r2, r3
 800856e:	d103      	bne.n	8008578 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	1e5a      	subs	r2, r3, #1
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085be:	bf00      	nop
 80085c0:	e7fe      	b.n	80085c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085c2:	f003 f88f 	bl	800b6e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ce:	68f9      	ldr	r1, [r7, #12]
 80085d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085d2:	fb01 f303 	mul.w	r3, r1, r3
 80085d6:	441a      	add	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f2:	3b01      	subs	r3, #1
 80085f4:	68f9      	ldr	r1, [r7, #12]
 80085f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085f8:	fb01 f303 	mul.w	r3, r1, r3
 80085fc:	441a      	add	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	22ff      	movs	r2, #255	; 0xff
 8008606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	22ff      	movs	r2, #255	; 0xff
 800860e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d114      	bne.n	8008642 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01a      	beq.n	8008656 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3310      	adds	r3, #16
 8008624:	4618      	mov	r0, r3
 8008626:	f001 fecb 	bl	800a3c0 <xTaskRemoveFromEventList>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d012      	beq.n	8008656 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008630:	4b0c      	ldr	r3, [pc, #48]	; (8008664 <xQueueGenericReset+0xcc>)
 8008632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	e009      	b.n	8008656 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3310      	adds	r3, #16
 8008646:	4618      	mov	r0, r3
 8008648:	f7ff fef2 	bl	8008430 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3324      	adds	r3, #36	; 0x24
 8008650:	4618      	mov	r0, r3
 8008652:	f7ff feed 	bl	8008430 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008656:	f003 f875 	bl	800b744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800865a:	2301      	movs	r3, #1
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	e000ed04 	.word	0xe000ed04

08008668 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08e      	sub	sp, #56	; 0x38
 800866c:	af02      	add	r7, sp, #8
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10a      	bne.n	80086ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086aa:	bf00      	nop
 80086ac:	e7fe      	b.n	80086ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <xQueueGenericCreateStatic+0x52>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <xQueueGenericCreateStatic+0x56>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e000      	b.n	80086c0 <xQueueGenericCreateStatic+0x58>
 80086be:	2300      	movs	r3, #0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	623b      	str	r3, [r7, #32]
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d102      	bne.n	80086e6 <xQueueGenericCreateStatic+0x7e>
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <xQueueGenericCreateStatic+0x82>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e000      	b.n	80086ec <xQueueGenericCreateStatic+0x84>
 80086ea:	2300      	movs	r3, #0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10a      	bne.n	8008706 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	61fb      	str	r3, [r7, #28]
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008706:	2350      	movs	r3, #80	; 0x50
 8008708:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2b50      	cmp	r3, #80	; 0x50
 800870e:	d00a      	beq.n	8008726 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	61bb      	str	r3, [r7, #24]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008726:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00d      	beq.n	800874e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800873a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800873e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	4613      	mov	r3, r2
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	68b9      	ldr	r1, [r7, #8]
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 f83f 	bl	80087cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008750:	4618      	mov	r0, r3
 8008752:	3730      	adds	r7, #48	; 0x30
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08a      	sub	sp, #40	; 0x28
 800875c:	af02      	add	r7, sp, #8
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	4613      	mov	r3, r2
 8008764:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10a      	bne.n	8008782 <xQueueGenericCreate+0x2a>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	613b      	str	r3, [r7, #16]
}
 800877e:	bf00      	nop
 8008780:	e7fe      	b.n	8008780 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	fb02 f303 	mul.w	r3, r2, r3
 800878a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	3350      	adds	r3, #80	; 0x50
 8008790:	4618      	mov	r0, r3
 8008792:	f003 f8c9 	bl	800b928 <pvPortMalloc>
 8008796:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d011      	beq.n	80087c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	3350      	adds	r3, #80	; 0x50
 80087a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087b0:	79fa      	ldrb	r2, [r7, #7]
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	4613      	mov	r3, r2
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	68b9      	ldr	r1, [r7, #8]
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 f805 	bl	80087cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087c2:	69bb      	ldr	r3, [r7, #24]
	}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3720      	adds	r7, #32
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d103      	bne.n	80087e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	e002      	b.n	80087ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087fa:	2101      	movs	r1, #1
 80087fc:	69b8      	ldr	r0, [r7, #24]
 80087fe:	f7ff fecb 	bl	8008598 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	78fa      	ldrb	r2, [r7, #3]
 8008806:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800880a:	bf00      	nop
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00e      	beq.n	800883e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008832:	2300      	movs	r3, #0
 8008834:	2200      	movs	r2, #0
 8008836:	2100      	movs	r1, #0
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f81d 	bl	8008878 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800883e:	bf00      	nop
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008846:	b580      	push	{r7, lr}
 8008848:	b086      	sub	sp, #24
 800884a:	af00      	add	r7, sp, #0
 800884c:	4603      	mov	r3, r0
 800884e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008850:	2301      	movs	r3, #1
 8008852:	617b      	str	r3, [r7, #20]
 8008854:	2300      	movs	r3, #0
 8008856:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008858:	79fb      	ldrb	r3, [r7, #7]
 800885a:	461a      	mov	r2, r3
 800885c:	6939      	ldr	r1, [r7, #16]
 800885e:	6978      	ldr	r0, [r7, #20]
 8008860:	f7ff ff7a 	bl	8008758 <xQueueGenericCreate>
 8008864:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f7ff ffd3 	bl	8008812 <prvInitialiseMutex>

		return xNewQueue;
 800886c:	68fb      	ldr	r3, [r7, #12]
	}
 800886e:	4618      	mov	r0, r3
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
	...

08008878 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08e      	sub	sp, #56	; 0x38
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008886:	2300      	movs	r3, #0
 8008888:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10a      	bne.n	80088aa <xQueueGenericSend+0x32>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80088a6:	bf00      	nop
 80088a8:	e7fe      	b.n	80088a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d103      	bne.n	80088b8 <xQueueGenericSend+0x40>
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <xQueueGenericSend+0x44>
 80088b8:	2301      	movs	r3, #1
 80088ba:	e000      	b.n	80088be <xQueueGenericSend+0x46>
 80088bc:	2300      	movs	r3, #0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <xQueueGenericSend+0x60>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d103      	bne.n	80088e6 <xQueueGenericSend+0x6e>
 80088de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d101      	bne.n	80088ea <xQueueGenericSend+0x72>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <xQueueGenericSend+0x74>
 80088ea:	2300      	movs	r3, #0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10a      	bne.n	8008906 <xQueueGenericSend+0x8e>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	623b      	str	r3, [r7, #32]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008906:	f001 ff53 	bl	800a7b0 <xTaskGetSchedulerState>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <xQueueGenericSend+0x9e>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d101      	bne.n	800891a <xQueueGenericSend+0xa2>
 8008916:	2301      	movs	r3, #1
 8008918:	e000      	b.n	800891c <xQueueGenericSend+0xa4>
 800891a:	2300      	movs	r3, #0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10a      	bne.n	8008936 <xQueueGenericSend+0xbe>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	61fb      	str	r3, [r7, #28]
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008936:	f002 fed5 	bl	800b6e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008942:	429a      	cmp	r2, r3
 8008944:	d302      	bcc.n	800894c <xQueueGenericSend+0xd4>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b02      	cmp	r3, #2
 800894a:	d129      	bne.n	80089a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	68b9      	ldr	r1, [r7, #8]
 8008950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008952:	f000 fbbb 	bl	80090cc <prvCopyDataToQueue>
 8008956:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d010      	beq.n	8008982 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	3324      	adds	r3, #36	; 0x24
 8008964:	4618      	mov	r0, r3
 8008966:	f001 fd2b 	bl	800a3c0 <xTaskRemoveFromEventList>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d013      	beq.n	8008998 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008970:	4b3f      	ldr	r3, [pc, #252]	; (8008a70 <xQueueGenericSend+0x1f8>)
 8008972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	e00a      	b.n	8008998 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008984:	2b00      	cmp	r3, #0
 8008986:	d007      	beq.n	8008998 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008988:	4b39      	ldr	r3, [pc, #228]	; (8008a70 <xQueueGenericSend+0x1f8>)
 800898a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800898e:	601a      	str	r2, [r3, #0]
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008998:	f002 fed4 	bl	800b744 <vPortExitCritical>
				return pdPASS;
 800899c:	2301      	movs	r3, #1
 800899e:	e063      	b.n	8008a68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d103      	bne.n	80089ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089a6:	f002 fecd 	bl	800b744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	e05c      	b.n	8008a68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d106      	bne.n	80089c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089b4:	f107 0314 	add.w	r3, r7, #20
 80089b8:	4618      	mov	r0, r3
 80089ba:	f001 fd8b 	bl	800a4d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089be:	2301      	movs	r3, #1
 80089c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089c2:	f002 febf 	bl	800b744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089c6:	f001 fad1 	bl	8009f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089ca:	f002 fe8b 	bl	800b6e4 <vPortEnterCritical>
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089d4:	b25b      	sxtb	r3, r3
 80089d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089da:	d103      	bne.n	80089e4 <xQueueGenericSend+0x16c>
 80089dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089ea:	b25b      	sxtb	r3, r3
 80089ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089f0:	d103      	bne.n	80089fa <xQueueGenericSend+0x182>
 80089f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089fa:	f002 fea3 	bl	800b744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089fe:	1d3a      	adds	r2, r7, #4
 8008a00:	f107 0314 	add.w	r3, r7, #20
 8008a04:	4611      	mov	r1, r2
 8008a06:	4618      	mov	r0, r3
 8008a08:	f001 fd7a 	bl	800a500 <xTaskCheckForTimeOut>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d124      	bne.n	8008a5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a14:	f000 fc52 	bl	80092bc <prvIsQueueFull>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d018      	beq.n	8008a50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	3310      	adds	r3, #16
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	4611      	mov	r1, r2
 8008a26:	4618      	mov	r0, r3
 8008a28:	f001 fc7a 	bl	800a320 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a2e:	f000 fbdd 	bl	80091ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a32:	f001 faa9 	bl	8009f88 <xTaskResumeAll>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f47f af7c 	bne.w	8008936 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008a3e:	4b0c      	ldr	r3, [pc, #48]	; (8008a70 <xQueueGenericSend+0x1f8>)
 8008a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	e772      	b.n	8008936 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a52:	f000 fbcb 	bl	80091ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a56:	f001 fa97 	bl	8009f88 <xTaskResumeAll>
 8008a5a:	e76c      	b.n	8008936 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a5e:	f000 fbc5 	bl	80091ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a62:	f001 fa91 	bl	8009f88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3738      	adds	r7, #56	; 0x38
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	e000ed04 	.word	0xe000ed04

08008a74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b090      	sub	sp, #64	; 0x40
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10a      	bne.n	8008aa2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a9e:	bf00      	nop
 8008aa0:	e7fe      	b.n	8008aa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d103      	bne.n	8008ab0 <xQueueGenericSendFromISR+0x3c>
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <xQueueGenericSendFromISR+0x40>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e000      	b.n	8008ab6 <xQueueGenericSendFromISR+0x42>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10a      	bne.n	8008ad0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008acc:	bf00      	nop
 8008ace:	e7fe      	b.n	8008ace <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d103      	bne.n	8008ade <xQueueGenericSendFromISR+0x6a>
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d101      	bne.n	8008ae2 <xQueueGenericSendFromISR+0x6e>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e000      	b.n	8008ae4 <xQueueGenericSendFromISR+0x70>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10a      	bne.n	8008afe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	623b      	str	r3, [r7, #32]
}
 8008afa:	bf00      	nop
 8008afc:	e7fe      	b.n	8008afc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008afe:	f002 fed3 	bl	800b8a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b02:	f3ef 8211 	mrs	r2, BASEPRI
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	61fa      	str	r2, [r7, #28]
 8008b18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d302      	bcc.n	8008b30 <xQueueGenericSendFromISR+0xbc>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d12f      	bne.n	8008b90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	68b9      	ldr	r1, [r7, #8]
 8008b44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b46:	f000 fac1 	bl	80090cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b52:	d112      	bne.n	8008b7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d016      	beq.n	8008b8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	3324      	adds	r3, #36	; 0x24
 8008b60:	4618      	mov	r0, r3
 8008b62:	f001 fc2d 	bl	800a3c0 <xTaskRemoveFromEventList>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00e      	beq.n	8008b8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00b      	beq.n	8008b8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	e007      	b.n	8008b8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b7e:	3301      	adds	r3, #1
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	b25a      	sxtb	r2, r3
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008b8e:	e001      	b.n	8008b94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b90:	2300      	movs	r3, #0
 8008b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3740      	adds	r7, #64	; 0x40
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b08e      	sub	sp, #56	; 0x38
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10a      	bne.n	8008bd4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	623b      	str	r3, [r7, #32]
}
 8008bd0:	bf00      	nop
 8008bd2:	e7fe      	b.n	8008bd2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	61fb      	str	r3, [r7, #28]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d103      	bne.n	8008c02 <xQueueGiveFromISR+0x58>
 8008bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <xQueueGiveFromISR+0x5c>
 8008c02:	2301      	movs	r3, #1
 8008c04:	e000      	b.n	8008c08 <xQueueGiveFromISR+0x5e>
 8008c06:	2300      	movs	r3, #0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10a      	bne.n	8008c22 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	61bb      	str	r3, [r7, #24]
}
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c22:	f002 fe41 	bl	800b8a8 <vPortValidateInterruptPriority>
	__asm volatile
 8008c26:	f3ef 8211 	mrs	r2, BASEPRI
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	617a      	str	r2, [r7, #20]
 8008c3c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008c3e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d22b      	bcs.n	8008caa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c6c:	d112      	bne.n	8008c94 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d016      	beq.n	8008ca4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	3324      	adds	r3, #36	; 0x24
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f001 fba0 	bl	800a3c0 <xTaskRemoveFromEventList>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00e      	beq.n	8008ca4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00b      	beq.n	8008ca4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	e007      	b.n	8008ca4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c98:	3301      	adds	r3, #1
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	b25a      	sxtb	r2, r3
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ca8:	e001      	b.n	8008cae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34
 8008cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f383 8811 	msr	BASEPRI, r3
}
 8008cb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3738      	adds	r7, #56	; 0x38
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08c      	sub	sp, #48	; 0x30
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10a      	bne.n	8008cf4 <xQueueReceive+0x30>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	623b      	str	r3, [r7, #32]
}
 8008cf0:	bf00      	nop
 8008cf2:	e7fe      	b.n	8008cf2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d103      	bne.n	8008d02 <xQueueReceive+0x3e>
 8008cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d101      	bne.n	8008d06 <xQueueReceive+0x42>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e000      	b.n	8008d08 <xQueueReceive+0x44>
 8008d06:	2300      	movs	r3, #0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10a      	bne.n	8008d22 <xQueueReceive+0x5e>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	61fb      	str	r3, [r7, #28]
}
 8008d1e:	bf00      	nop
 8008d20:	e7fe      	b.n	8008d20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d22:	f001 fd45 	bl	800a7b0 <xTaskGetSchedulerState>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d102      	bne.n	8008d32 <xQueueReceive+0x6e>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <xQueueReceive+0x72>
 8008d32:	2301      	movs	r3, #1
 8008d34:	e000      	b.n	8008d38 <xQueueReceive+0x74>
 8008d36:	2300      	movs	r3, #0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10a      	bne.n	8008d52 <xQueueReceive+0x8e>
	__asm volatile
 8008d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d40:	f383 8811 	msr	BASEPRI, r3
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	61bb      	str	r3, [r7, #24]
}
 8008d4e:	bf00      	nop
 8008d50:	e7fe      	b.n	8008d50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d52:	f002 fcc7 	bl	800b6e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d01f      	beq.n	8008da2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d62:	68b9      	ldr	r1, [r7, #8]
 8008d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d66:	f000 fa1b 	bl	80091a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	1e5a      	subs	r2, r3, #1
 8008d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00f      	beq.n	8008d9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7c:	3310      	adds	r3, #16
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f001 fb1e 	bl	800a3c0 <xTaskRemoveFromEventList>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d007      	beq.n	8008d9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d8a:	4b3d      	ldr	r3, [pc, #244]	; (8008e80 <xQueueReceive+0x1bc>)
 8008d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d9a:	f002 fcd3 	bl	800b744 <vPortExitCritical>
				return pdPASS;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e069      	b.n	8008e76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d103      	bne.n	8008db0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008da8:	f002 fccc 	bl	800b744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dac:	2300      	movs	r3, #0
 8008dae:	e062      	b.n	8008e76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d106      	bne.n	8008dc4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008db6:	f107 0310 	add.w	r3, r7, #16
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f001 fb8a 	bl	800a4d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dc4:	f002 fcbe 	bl	800b744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dc8:	f001 f8d0 	bl	8009f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dcc:	f002 fc8a 	bl	800b6e4 <vPortEnterCritical>
 8008dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dd6:	b25b      	sxtb	r3, r3
 8008dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ddc:	d103      	bne.n	8008de6 <xQueueReceive+0x122>
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dec:	b25b      	sxtb	r3, r3
 8008dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008df2:	d103      	bne.n	8008dfc <xQueueReceive+0x138>
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dfc:	f002 fca2 	bl	800b744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e00:	1d3a      	adds	r2, r7, #4
 8008e02:	f107 0310 	add.w	r3, r7, #16
 8008e06:	4611      	mov	r1, r2
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f001 fb79 	bl	800a500 <xTaskCheckForTimeOut>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d123      	bne.n	8008e5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e16:	f000 fa3b 	bl	8009290 <prvIsQueueEmpty>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d017      	beq.n	8008e50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e22:	3324      	adds	r3, #36	; 0x24
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	4611      	mov	r1, r2
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f001 fa79 	bl	800a320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e30:	f000 f9dc 	bl	80091ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e34:	f001 f8a8 	bl	8009f88 <xTaskResumeAll>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d189      	bne.n	8008d52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008e3e:	4b10      	ldr	r3, [pc, #64]	; (8008e80 <xQueueReceive+0x1bc>)
 8008e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e44:	601a      	str	r2, [r3, #0]
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	e780      	b.n	8008d52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e52:	f000 f9cb 	bl	80091ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e56:	f001 f897 	bl	8009f88 <xTaskResumeAll>
 8008e5a:	e77a      	b.n	8008d52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e5e:	f000 f9c5 	bl	80091ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e62:	f001 f891 	bl	8009f88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e68:	f000 fa12 	bl	8009290 <prvIsQueueEmpty>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f43f af6f 	beq.w	8008d52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3730      	adds	r7, #48	; 0x30
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	e000ed04 	.word	0xe000ed04

08008e84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08e      	sub	sp, #56	; 0x38
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10a      	bne.n	8008eb6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	623b      	str	r3, [r7, #32]
}
 8008eb2:	bf00      	nop
 8008eb4:	e7fe      	b.n	8008eb4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00a      	beq.n	8008ed4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	61fb      	str	r3, [r7, #28]
}
 8008ed0:	bf00      	nop
 8008ed2:	e7fe      	b.n	8008ed2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ed4:	f001 fc6c 	bl	800a7b0 <xTaskGetSchedulerState>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d102      	bne.n	8008ee4 <xQueueSemaphoreTake+0x60>
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <xQueueSemaphoreTake+0x64>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e000      	b.n	8008eea <xQueueSemaphoreTake+0x66>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10a      	bne.n	8008f04 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	61bb      	str	r3, [r7, #24]
}
 8008f00:	bf00      	nop
 8008f02:	e7fe      	b.n	8008f02 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f04:	f002 fbee 	bl	800b6e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d024      	beq.n	8008f5e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	1e5a      	subs	r2, r3, #1
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d104      	bne.n	8008f2e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f24:	f001 fdba 	bl	800aa9c <pvTaskIncrementMutexHeldCount>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00f      	beq.n	8008f56 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	3310      	adds	r3, #16
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f001 fa40 	bl	800a3c0 <xTaskRemoveFromEventList>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d007      	beq.n	8008f56 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f46:	4b54      	ldr	r3, [pc, #336]	; (8009098 <xQueueSemaphoreTake+0x214>)
 8008f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f56:	f002 fbf5 	bl	800b744 <vPortExitCritical>
				return pdPASS;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e097      	b.n	800908e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d111      	bne.n	8008f88 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	617b      	str	r3, [r7, #20]
}
 8008f7c:	bf00      	nop
 8008f7e:	e7fe      	b.n	8008f7e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008f80:	f002 fbe0 	bl	800b744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f84:	2300      	movs	r3, #0
 8008f86:	e082      	b.n	800908e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d106      	bne.n	8008f9c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f8e:	f107 030c 	add.w	r3, r7, #12
 8008f92:	4618      	mov	r0, r3
 8008f94:	f001 fa9e 	bl	800a4d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f9c:	f002 fbd2 	bl	800b744 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fa0:	f000 ffe4 	bl	8009f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fa4:	f002 fb9e 	bl	800b6e4 <vPortEnterCritical>
 8008fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008faa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fae:	b25b      	sxtb	r3, r3
 8008fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fb4:	d103      	bne.n	8008fbe <xQueueSemaphoreTake+0x13a>
 8008fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fc4:	b25b      	sxtb	r3, r3
 8008fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fca:	d103      	bne.n	8008fd4 <xQueueSemaphoreTake+0x150>
 8008fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fd4:	f002 fbb6 	bl	800b744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fd8:	463a      	mov	r2, r7
 8008fda:	f107 030c 	add.w	r3, r7, #12
 8008fde:	4611      	mov	r1, r2
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f001 fa8d 	bl	800a500 <xTaskCheckForTimeOut>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d132      	bne.n	8009052 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fee:	f000 f94f 	bl	8009290 <prvIsQueueEmpty>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d026      	beq.n	8009046 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d109      	bne.n	8009014 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009000:	f002 fb70 	bl	800b6e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	4618      	mov	r0, r3
 800900a:	f001 fbef 	bl	800a7ec <xTaskPriorityInherit>
 800900e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009010:	f002 fb98 	bl	800b744 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009016:	3324      	adds	r3, #36	; 0x24
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	4611      	mov	r1, r2
 800901c:	4618      	mov	r0, r3
 800901e:	f001 f97f 	bl	800a320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009022:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009024:	f000 f8e2 	bl	80091ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009028:	f000 ffae 	bl	8009f88 <xTaskResumeAll>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	f47f af68 	bne.w	8008f04 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009034:	4b18      	ldr	r3, [pc, #96]	; (8009098 <xQueueSemaphoreTake+0x214>)
 8009036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	e75e      	b.n	8008f04 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009046:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009048:	f000 f8d0 	bl	80091ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800904c:	f000 ff9c 	bl	8009f88 <xTaskResumeAll>
 8009050:	e758      	b.n	8008f04 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009054:	f000 f8ca 	bl	80091ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009058:	f000 ff96 	bl	8009f88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800905c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800905e:	f000 f917 	bl	8009290 <prvIsQueueEmpty>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	f43f af4d 	beq.w	8008f04 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00d      	beq.n	800908c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009070:	f002 fb38 	bl	800b6e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009076:	f000 f811 	bl	800909c <prvGetDisinheritPriorityAfterTimeout>
 800907a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800907c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009082:	4618      	mov	r0, r3
 8009084:	f001 fc88 	bl	800a998 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009088:	f002 fb5c 	bl	800b744 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800908c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800908e:	4618      	mov	r0, r3
 8009090:	3738      	adds	r7, #56	; 0x38
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	e000ed04 	.word	0xe000ed04

0800909c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d006      	beq.n	80090ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	e001      	b.n	80090be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80090ba:	2300      	movs	r3, #0
 80090bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80090be:	68fb      	ldr	r3, [r7, #12]
	}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80090d8:	2300      	movs	r3, #0
 80090da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10d      	bne.n	8009106 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d14d      	bne.n	800918e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f001 fbe0 	bl	800a8bc <xTaskPriorityDisinherit>
 80090fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	609a      	str	r2, [r3, #8]
 8009104:	e043      	b.n	800918e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d119      	bne.n	8009140 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6858      	ldr	r0, [r3, #4]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009114:	461a      	mov	r2, r3
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	f002 fe42 	bl	800bda0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009124:	441a      	add	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	429a      	cmp	r2, r3
 8009134:	d32b      	bcc.n	800918e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	605a      	str	r2, [r3, #4]
 800913e:	e026      	b.n	800918e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	68d8      	ldr	r0, [r3, #12]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009148:	461a      	mov	r2, r3
 800914a:	68b9      	ldr	r1, [r7, #8]
 800914c:	f002 fe28 	bl	800bda0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009158:	425b      	negs	r3, r3
 800915a:	441a      	add	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	68da      	ldr	r2, [r3, #12]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	429a      	cmp	r2, r3
 800916a:	d207      	bcs.n	800917c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	689a      	ldr	r2, [r3, #8]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009174:	425b      	negs	r3, r3
 8009176:	441a      	add	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b02      	cmp	r3, #2
 8009180:	d105      	bne.n	800918e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d002      	beq.n	800918e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	3b01      	subs	r3, #1
 800918c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009196:	697b      	ldr	r3, [r7, #20]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3718      	adds	r7, #24
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d018      	beq.n	80091e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68da      	ldr	r2, [r3, #12]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ba:	441a      	add	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	68da      	ldr	r2, [r3, #12]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d303      	bcc.n	80091d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68d9      	ldr	r1, [r3, #12]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091dc:	461a      	mov	r2, r3
 80091de:	6838      	ldr	r0, [r7, #0]
 80091e0:	f002 fdde 	bl	800bda0 <memcpy>
	}
}
 80091e4:	bf00      	nop
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80091f4:	f002 fa76 	bl	800b6e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009200:	e011      	b.n	8009226 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	2b00      	cmp	r3, #0
 8009208:	d012      	beq.n	8009230 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	3324      	adds	r3, #36	; 0x24
 800920e:	4618      	mov	r0, r3
 8009210:	f001 f8d6 	bl	800a3c0 <xTaskRemoveFromEventList>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800921a:	f001 f9d3 	bl	800a5c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	3b01      	subs	r3, #1
 8009222:	b2db      	uxtb	r3, r3
 8009224:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800922a:	2b00      	cmp	r3, #0
 800922c:	dce9      	bgt.n	8009202 <prvUnlockQueue+0x16>
 800922e:	e000      	b.n	8009232 <prvUnlockQueue+0x46>
					break;
 8009230:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	22ff      	movs	r2, #255	; 0xff
 8009236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800923a:	f002 fa83 	bl	800b744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800923e:	f002 fa51 	bl	800b6e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009248:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800924a:	e011      	b.n	8009270 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d012      	beq.n	800927a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	3310      	adds	r3, #16
 8009258:	4618      	mov	r0, r3
 800925a:	f001 f8b1 	bl	800a3c0 <xTaskRemoveFromEventList>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009264:	f001 f9ae 	bl	800a5c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009268:	7bbb      	ldrb	r3, [r7, #14]
 800926a:	3b01      	subs	r3, #1
 800926c:	b2db      	uxtb	r3, r3
 800926e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009274:	2b00      	cmp	r3, #0
 8009276:	dce9      	bgt.n	800924c <prvUnlockQueue+0x60>
 8009278:	e000      	b.n	800927c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800927a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	22ff      	movs	r2, #255	; 0xff
 8009280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009284:	f002 fa5e 	bl	800b744 <vPortExitCritical>
}
 8009288:	bf00      	nop
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009298:	f002 fa24 	bl	800b6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d102      	bne.n	80092aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092a4:	2301      	movs	r3, #1
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	e001      	b.n	80092ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80092aa:	2300      	movs	r3, #0
 80092ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092ae:	f002 fa49 	bl	800b744 <vPortExitCritical>

	return xReturn;
 80092b2:	68fb      	ldr	r3, [r7, #12]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092c4:	f002 fa0e 	bl	800b6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d102      	bne.n	80092da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80092d4:	2301      	movs	r3, #1
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	e001      	b.n	80092de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80092da:	2300      	movs	r3, #0
 80092dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092de:	f002 fa31 	bl	800b744 <vPortExitCritical>

	return xReturn;
 80092e2:	68fb      	ldr	r3, [r7, #12]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092f6:	2300      	movs	r3, #0
 80092f8:	60fb      	str	r3, [r7, #12]
 80092fa:	e014      	b.n	8009326 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80092fc:	4a0f      	ldr	r2, [pc, #60]	; (800933c <vQueueAddToRegistry+0x50>)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10b      	bne.n	8009320 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009308:	490c      	ldr	r1, [pc, #48]	; (800933c <vQueueAddToRegistry+0x50>)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009312:	4a0a      	ldr	r2, [pc, #40]	; (800933c <vQueueAddToRegistry+0x50>)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	4413      	add	r3, r2
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800931e:	e006      	b.n	800932e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	3301      	adds	r3, #1
 8009324:	60fb      	str	r3, [r7, #12]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2b07      	cmp	r3, #7
 800932a:	d9e7      	bls.n	80092fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800932c:	bf00      	nop
 800932e:	bf00      	nop
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	200009fc 	.word	0x200009fc

08009340 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009350:	f002 f9c8 	bl	800b6e4 <vPortEnterCritical>
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800935a:	b25b      	sxtb	r3, r3
 800935c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009360:	d103      	bne.n	800936a <vQueueWaitForMessageRestricted+0x2a>
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009370:	b25b      	sxtb	r3, r3
 8009372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009376:	d103      	bne.n	8009380 <vQueueWaitForMessageRestricted+0x40>
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009380:	f002 f9e0 	bl	800b744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009388:	2b00      	cmp	r3, #0
 800938a:	d106      	bne.n	800939a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	3324      	adds	r3, #36	; 0x24
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	68b9      	ldr	r1, [r7, #8]
 8009394:	4618      	mov	r0, r3
 8009396:	f000 ffe7 	bl	800a368 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800939a:	6978      	ldr	r0, [r7, #20]
 800939c:	f7ff ff26 	bl	80091ec <prvUnlockQueue>
	}
 80093a0:	bf00      	nop
 80093a2:	3718      	adds	r7, #24
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b08c      	sub	sp, #48	; 0x30
 80093ac:	af02      	add	r7, sp, #8
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d110      	bne.n	80093dc <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80093ba:	2301      	movs	r3, #1
 80093bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2b04      	cmp	r3, #4
 80093c4:	d81b      	bhi.n	80093fe <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80093c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ca:	f383 8811 	msr	BASEPRI, r3
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f3bf 8f4f 	dsb	sy
 80093d6:	61fb      	str	r3, [r7, #28]
}
 80093d8:	bf00      	nop
 80093da:	e7fe      	b.n	80093da <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80093dc:	2300      	movs	r3, #0
 80093de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10a      	bne.n	80093fe <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	61bb      	str	r3, [r7, #24]
}
 80093fa:	bf00      	nop
 80093fc:	e7fe      	b.n	80093fc <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	429a      	cmp	r2, r3
 8009404:	d90a      	bls.n	800941c <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	617b      	str	r3, [r7, #20]
}
 8009418:	bf00      	nop
 800941a:	e7fe      	b.n	800941a <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8009422:	2301      	movs	r3, #1
 8009424:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	3301      	adds	r3, #1
 800942a:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3324      	adds	r3, #36	; 0x24
 8009430:	4618      	mov	r0, r3
 8009432:	f002 fa79 	bl	800b928 <pvPortMalloc>
 8009436:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00a      	beq.n	8009454 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	6a38      	ldr	r0, [r7, #32]
 8009450:	f000 fafd 	bl	8009a4e <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8009454:	6a3b      	ldr	r3, [r7, #32]
	}
 8009456:	4618      	mov	r0, r3
 8009458:	3728      	adds	r7, #40	; 0x28
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800945e:	b480      	push	{r7}
 8009460:	b087      	sub	sp, #28
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10a      	bne.n	8009486 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	60fb      	str	r3, [r7, #12]
}
 8009482:	bf00      	nop
 8009484:	e7fe      	b.n	8009484 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	689a      	ldr	r2, [r3, #8]
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4413      	add	r3, r2
 8009490:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	3b01      	subs	r3, #1
 80094a0:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d304      	bcc.n	80094b6 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 80094b6:	697b      	ldr	r3, [r7, #20]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	371c      	adds	r7, #28
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b090      	sub	sp, #64	; 0x40
 80094c8:	af02      	add	r7, sp, #8
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
 80094d0:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 80094d6:	2300      	movs	r3, #0
 80094d8:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10a      	bne.n	80094fa <xStreamBufferSend+0x36>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 80094fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10a      	bne.n	8009516 <xStreamBufferSend+0x52>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	623b      	str	r3, [r7, #32]
}
 8009512:	bf00      	nop
 8009514:	e7fe      	b.n	8009514 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009518:	7f1b      	ldrb	r3, [r3, #28]
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	d011      	beq.n	8009546 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	3304      	adds	r3, #4
 8009526:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8009528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	429a      	cmp	r2, r3
 800952e:	d80a      	bhi.n	8009546 <xStreamBufferSend+0x82>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	61fb      	str	r3, [r7, #28]
}
 8009542:	bf00      	nop
 8009544:	e7fe      	b.n	8009544 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d03e      	beq.n	80095ca <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800954c:	f107 0310 	add.w	r3, r7, #16
 8009550:	4618      	mov	r0, r3
 8009552:	f000 ff99 	bl	800a488 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8009556:	f002 f8c5 	bl	800b6e4 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800955a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800955c:	f7ff ff7f 	bl	800945e <xStreamBufferSpacesAvailable>
 8009560:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8009562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009566:	429a      	cmp	r2, r3
 8009568:	d217      	bcs.n	800959a <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800956a:	2000      	movs	r0, #0
 800956c:	f001 fbc8 	bl	800ad00 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8009570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009572:	695b      	ldr	r3, [r3, #20]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00a      	beq.n	800958e <xStreamBufferSend+0xca>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	61bb      	str	r3, [r7, #24]
}
 800958a:	bf00      	nop
 800958c:	e7fe      	b.n	800958c <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800958e:	f001 f8ff 	bl	800a790 <xTaskGetCurrentTaskHandle>
 8009592:	4602      	mov	r2, r0
 8009594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009596:	615a      	str	r2, [r3, #20]
 8009598:	e002      	b.n	80095a0 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 800959a:	f002 f8d3 	bl	800b744 <vPortExitCritical>
					break;
 800959e:	e014      	b.n	80095ca <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 80095a0:	f002 f8d0 	bl	800b744 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2200      	movs	r2, #0
 80095a8:	2100      	movs	r1, #0
 80095aa:	2000      	movs	r0, #0
 80095ac:	f001 fa8a 	bl	800aac4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 80095b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b2:	2200      	movs	r2, #0
 80095b4:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 80095b6:	463a      	mov	r2, r7
 80095b8:	f107 0310 	add.w	r3, r7, #16
 80095bc:	4611      	mov	r1, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 ff9e 	bl	800a500 <xTaskCheckForTimeOut>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d0c5      	beq.n	8009556 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 80095ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d103      	bne.n	80095d8 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80095d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095d2:	f7ff ff44 	bl	800945e <xStreamBufferSpacesAvailable>
 80095d6:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80095d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	68b9      	ldr	r1, [r7, #8]
 80095e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095e4:	f000 f823 	bl	800962e <prvWriteMessageToBuffer>
 80095e8:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 80095ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d019      	beq.n	8009624 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80095f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095f2:	f000 fa0c 	bl	8009a0e <prvBytesInBuffer>
 80095f6:	4602      	mov	r2, r0
 80095f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d311      	bcc.n	8009624 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8009600:	f000 fcb4 	bl	8009f6c <vTaskSuspendAll>
 8009604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d009      	beq.n	8009620 <xStreamBufferSend+0x15c>
 800960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960e:	6918      	ldr	r0, [r3, #16]
 8009610:	2300      	movs	r3, #0
 8009612:	2200      	movs	r2, #0
 8009614:	2100      	movs	r1, #0
 8009616:	f001 fab5 	bl	800ab84 <xTaskGenericNotify>
 800961a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961c:	2200      	movs	r2, #0
 800961e:	611a      	str	r2, [r3, #16]
 8009620:	f000 fcb2 	bl	8009f88 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009626:	4618      	mov	r0, r3
 8009628:	3738      	adds	r7, #56	; 0x38
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b086      	sub	sp, #24
 8009632:	af00      	add	r7, sp, #0
 8009634:	60f8      	str	r0, [r7, #12]
 8009636:	60b9      	str	r1, [r7, #8]
 8009638:	607a      	str	r2, [r7, #4]
 800963a:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d102      	bne.n	8009648 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8009642:	2300      	movs	r3, #0
 8009644:	617b      	str	r3, [r7, #20]
 8009646:	e01d      	b.n	8009684 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	7f1b      	ldrb	r3, [r3, #28]
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	2b00      	cmp	r3, #0
 8009652:	d108      	bne.n	8009666 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8009654:	2301      	movs	r3, #1
 8009656:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	4293      	cmp	r3, r2
 800965e:	bf28      	it	cs
 8009660:	4613      	movcs	r3, r2
 8009662:	607b      	str	r3, [r7, #4]
 8009664:	e00e      	b.n	8009684 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	429a      	cmp	r2, r3
 800966c:	d308      	bcc.n	8009680 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800966e:	2301      	movs	r3, #1
 8009670:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009672:	1d3b      	adds	r3, r7, #4
 8009674:	2204      	movs	r2, #4
 8009676:	4619      	mov	r1, r3
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 f8dc 	bl	8009836 <prvWriteBytesToBuffer>
 800967e:	e001      	b.n	8009684 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8009680:	2300      	movs	r3, #0
 8009682:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d007      	beq.n	800969a <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	461a      	mov	r2, r3
 800968e:	68b9      	ldr	r1, [r7, #8]
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 f8d0 	bl	8009836 <prvWriteBytesToBuffer>
 8009696:	6138      	str	r0, [r7, #16]
 8009698:	e001      	b.n	800969e <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800969a:	2300      	movs	r3, #0
 800969c:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800969e:	693b      	ldr	r3, [r7, #16]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08e      	sub	sp, #56	; 0x38
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80096ba:	2300      	movs	r3, #0
 80096bc:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10a      	bne.n	80096da <xStreamBufferReceive+0x32>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	61fb      	str	r3, [r7, #28]
}
 80096d6:	bf00      	nop
 80096d8:	e7fe      	b.n	80096d8 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 80096da:	6a3b      	ldr	r3, [r7, #32]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <xStreamBufferReceive+0x4e>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	61bb      	str	r3, [r7, #24]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	7f1b      	ldrb	r3, [r3, #28]
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009702:	2304      	movs	r3, #4
 8009704:	627b      	str	r3, [r7, #36]	; 0x24
 8009706:	e001      	b.n	800970c <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8009708:	2300      	movs	r3, #0
 800970a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d034      	beq.n	800977c <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8009712:	f001 ffe7 	bl	800b6e4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009716:	6a38      	ldr	r0, [r7, #32]
 8009718:	f000 f979 	bl	8009a0e <prvBytesInBuffer>
 800971c:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800971e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	429a      	cmp	r2, r3
 8009724:	d816      	bhi.n	8009754 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8009726:	2000      	movs	r0, #0
 8009728:	f001 faea 	bl	800ad00 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00a      	beq.n	800974a <xStreamBufferReceive+0xa2>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	617b      	str	r3, [r7, #20]
}
 8009746:	bf00      	nop
 8009748:	e7fe      	b.n	8009748 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800974a:	f001 f821 	bl	800a790 <xTaskGetCurrentTaskHandle>
 800974e:	4602      	mov	r2, r0
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009754:	f001 fff6 	bl	800b744 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	429a      	cmp	r2, r3
 800975e:	d811      	bhi.n	8009784 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2200      	movs	r2, #0
 8009764:	2100      	movs	r1, #0
 8009766:	2000      	movs	r0, #0
 8009768:	f001 f9ac 	bl	800aac4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	2200      	movs	r2, #0
 8009770:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009772:	6a38      	ldr	r0, [r7, #32]
 8009774:	f000 f94b 	bl	8009a0e <prvBytesInBuffer>
 8009778:	62b8      	str	r0, [r7, #40]	; 0x28
 800977a:	e003      	b.n	8009784 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800977c:	6a38      	ldr	r0, [r7, #32]
 800977e:	f000 f946 	bl	8009a0e <prvBytesInBuffer>
 8009782:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8009784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	429a      	cmp	r2, r3
 800978a:	d91d      	bls.n	80097c8 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	68b9      	ldr	r1, [r7, #8]
 8009796:	6a38      	ldr	r0, [r7, #32]
 8009798:	f000 f81b 	bl	80097d2 <prvReadMessageFromBuffer>
 800979c:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d011      	beq.n	80097c8 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80097a4:	f000 fbe2 	bl	8009f6c <vTaskSuspendAll>
 80097a8:	6a3b      	ldr	r3, [r7, #32]
 80097aa:	695b      	ldr	r3, [r3, #20]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d009      	beq.n	80097c4 <xStreamBufferReceive+0x11c>
 80097b0:	6a3b      	ldr	r3, [r7, #32]
 80097b2:	6958      	ldr	r0, [r3, #20]
 80097b4:	2300      	movs	r3, #0
 80097b6:	2200      	movs	r2, #0
 80097b8:	2100      	movs	r1, #0
 80097ba:	f001 f9e3 	bl	800ab84 <xTaskGenericNotify>
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	2200      	movs	r2, #0
 80097c2:	615a      	str	r2, [r3, #20]
 80097c4:	f000 fbe0 	bl	8009f88 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3730      	adds	r7, #48	; 0x30
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b088      	sub	sp, #32
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	607a      	str	r2, [r7, #4]
 80097de:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80097e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d019      	beq.n	800981a <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80097ec:	f107 0110 	add.w	r1, r7, #16
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 f890 	bl	800991a <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80097fe:	683a      	ldr	r2, [r7, #0]
 8009800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8009806:	69fa      	ldr	r2, [r7, #28]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	429a      	cmp	r2, r3
 800980c:	d907      	bls.n	800981e <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	69ba      	ldr	r2, [r7, #24]
 8009812:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	61fb      	str	r3, [r7, #28]
 8009818:	e001      	b.n	800981e <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	69fa      	ldr	r2, [r7, #28]
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 f878 	bl	800991a <prvReadBytesFromBuffer>
 800982a:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800982c:	697b      	ldr	r3, [r7, #20]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3720      	adds	r7, #32
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b08a      	sub	sp, #40	; 0x28
 800983a:	af00      	add	r7, sp, #0
 800983c:	60f8      	str	r0, [r7, #12]
 800983e:	60b9      	str	r1, [r7, #8]
 8009840:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10a      	bne.n	800985e <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8009848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	61fb      	str	r3, [r7, #28]
}
 800985a:	bf00      	nop
 800985c:	e7fe      	b.n	800985c <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	4293      	cmp	r3, r2
 8009870:	bf28      	it	cs
 8009872:	4613      	movcs	r3, r2
 8009874:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8009876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	441a      	add	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	429a      	cmp	r2, r3
 8009882:	d90a      	bls.n	800989a <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	61bb      	str	r3, [r7, #24]
}
 8009896:	bf00      	nop
 8009898:	e7fe      	b.n	8009898 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	699a      	ldr	r2, [r3, #24]
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	4413      	add	r3, r2
 80098a2:	6a3a      	ldr	r2, [r7, #32]
 80098a4:	68b9      	ldr	r1, [r7, #8]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f002 fa7a 	bl	800bda0 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d91c      	bls.n	80098ee <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	1ad2      	subs	r2, r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d90a      	bls.n	80098d8 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	617b      	str	r3, [r7, #20]
}
 80098d4:	bf00      	nop
 80098d6:	e7fe      	b.n	80098d6 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6998      	ldr	r0, [r3, #24]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	6a3b      	ldr	r3, [r7, #32]
 80098e0:	18d1      	adds	r1, r2, r3
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	461a      	mov	r2, r3
 80098ea:	f002 fa59 	bl	800bda0 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80098ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4413      	add	r3, r2
 80098f4:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d304      	bcc.n	800990a <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800990e:	605a      	str	r2, [r3, #4]

	return xCount;
 8009910:	687b      	ldr	r3, [r7, #4]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3728      	adds	r7, #40	; 0x28
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b08a      	sub	sp, #40	; 0x28
 800991e:	af00      	add	r7, sp, #0
 8009920:	60f8      	str	r0, [r7, #12]
 8009922:	60b9      	str	r1, [r7, #8]
 8009924:	607a      	str	r2, [r7, #4]
 8009926:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	4293      	cmp	r3, r2
 800992e:	bf28      	it	cs
 8009930:	4613      	movcs	r3, r2
 8009932:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8009934:	6a3b      	ldr	r3, [r7, #32]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d064      	beq.n	8009a04 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	689a      	ldr	r2, [r3, #8]
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	6a3a      	ldr	r2, [r7, #32]
 800994a:	4293      	cmp	r3, r2
 800994c:	bf28      	it	cs
 800994e:	4613      	movcs	r3, r2
 8009950:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8009952:	69fa      	ldr	r2, [r7, #28]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	429a      	cmp	r2, r3
 8009958:	d90a      	bls.n	8009970 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	61bb      	str	r3, [r7, #24]
}
 800996c:	bf00      	nop
 800996e:	e7fe      	b.n	800996e <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8009970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	441a      	add	r2, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	429a      	cmp	r2, r3
 800997c:	d90a      	bls.n	8009994 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	617b      	str	r3, [r7, #20]
}
 8009990:	bf00      	nop
 8009992:	e7fe      	b.n	8009992 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	699a      	ldr	r2, [r3, #24]
 8009998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999a:	4413      	add	r3, r2
 800999c:	69fa      	ldr	r2, [r7, #28]
 800999e:	4619      	mov	r1, r3
 80099a0:	68b8      	ldr	r0, [r7, #8]
 80099a2:	f002 f9fd 	bl	800bda0 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80099a6:	6a3a      	ldr	r2, [r7, #32]
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d919      	bls.n	80099e2 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80099ae:	6a3a      	ldr	r2, [r7, #32]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d90a      	bls.n	80099cc <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	613b      	str	r3, [r7, #16]
}
 80099c8:	bf00      	nop
 80099ca:	e7fe      	b.n	80099ca <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	18d0      	adds	r0, r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6999      	ldr	r1, [r3, #24]
 80099d6:	6a3a      	ldr	r2, [r7, #32]
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	461a      	mov	r2, r3
 80099de:	f002 f9df 	bl	800bda0 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80099e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	4413      	add	r3, r2
 80099e8:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d304      	bcc.n	80099fe <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a02:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8009a04:	6a3b      	ldr	r3, [r7, #32]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3728      	adds	r7, #40	; 0x28
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8009a0e:	b480      	push	{r7}
 8009a10:	b085      	sub	sp, #20
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	4413      	add	r3, r2
 8009a20:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d304      	bcc.n	8009a40 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8009a40:	68fb      	ldr	r3, [r7, #12]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b086      	sub	sp, #24
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	60f8      	str	r0, [r7, #12]
 8009a56:	60b9      	str	r1, [r7, #8]
 8009a58:	607a      	str	r2, [r7, #4]
 8009a5a:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8009a5c:	2355      	movs	r3, #85	; 0x55
 8009a5e:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	6979      	ldr	r1, [r7, #20]
 8009a64:	68b8      	ldr	r0, [r7, #8]
 8009a66:	f002 f9a9 	bl	800bdbc <memset>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d00a      	beq.n	8009a88 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	613b      	str	r3, [r7, #16]
}
 8009a84:	bf00      	nop
 8009a86:	e7fe      	b.n	8009a86 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8009a88:	2224      	movs	r2, #36	; 0x24
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f002 f995 	bl	800bdbc <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009aaa:	771a      	strb	r2, [r3, #28]
}
 8009aac:	bf00      	nop
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b08e      	sub	sp, #56	; 0x38
 8009ab8:	af04      	add	r7, sp, #16
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
 8009ac0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10a      	bne.n	8009ade <xTaskCreateStatic+0x2a>
	__asm volatile
 8009ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	623b      	str	r3, [r7, #32]
}
 8009ada:	bf00      	nop
 8009adc:	e7fe      	b.n	8009adc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10a      	bne.n	8009afa <xTaskCreateStatic+0x46>
	__asm volatile
 8009ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae8:	f383 8811 	msr	BASEPRI, r3
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	61fb      	str	r3, [r7, #28]
}
 8009af6:	bf00      	nop
 8009af8:	e7fe      	b.n	8009af8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009afa:	23bc      	movs	r3, #188	; 0xbc
 8009afc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	2bbc      	cmp	r3, #188	; 0xbc
 8009b02:	d00a      	beq.n	8009b1a <xTaskCreateStatic+0x66>
	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	61bb      	str	r3, [r7, #24]
}
 8009b16:	bf00      	nop
 8009b18:	e7fe      	b.n	8009b18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009b1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d01e      	beq.n	8009b60 <xTaskCreateStatic+0xac>
 8009b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d01b      	beq.n	8009b60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	2202      	movs	r2, #2
 8009b36:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	9303      	str	r3, [sp, #12]
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	9302      	str	r3, [sp, #8]
 8009b42:	f107 0314 	add.w	r3, r7, #20
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	68b9      	ldr	r1, [r7, #8]
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f000 f850 	bl	8009bf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b5a:	f000 f8f3 	bl	8009d44 <prvAddNewTaskToReadyList>
 8009b5e:	e001      	b.n	8009b64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009b60:	2300      	movs	r3, #0
 8009b62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b64:	697b      	ldr	r3, [r7, #20]
	}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3728      	adds	r7, #40	; 0x28
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b08c      	sub	sp, #48	; 0x30
 8009b72:	af04      	add	r7, sp, #16
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	603b      	str	r3, [r7, #0]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b7e:	88fb      	ldrh	r3, [r7, #6]
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f001 fed0 	bl	800b928 <pvPortMalloc>
 8009b88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00e      	beq.n	8009bae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b90:	20bc      	movs	r0, #188	; 0xbc
 8009b92:	f001 fec9 	bl	800b928 <pvPortMalloc>
 8009b96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8009ba4:	e005      	b.n	8009bb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ba6:	6978      	ldr	r0, [r7, #20]
 8009ba8:	f001 ff8a 	bl	800bac0 <vPortFree>
 8009bac:	e001      	b.n	8009bb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d017      	beq.n	8009be8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009bc0:	88fa      	ldrh	r2, [r7, #6]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	9303      	str	r3, [sp, #12]
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	9302      	str	r3, [sp, #8]
 8009bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bcc:	9301      	str	r3, [sp, #4]
 8009bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	68b9      	ldr	r1, [r7, #8]
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 f80e 	bl	8009bf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bdc:	69f8      	ldr	r0, [r7, #28]
 8009bde:	f000 f8b1 	bl	8009d44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009be2:	2301      	movs	r3, #1
 8009be4:	61bb      	str	r3, [r7, #24]
 8009be6:	e002      	b.n	8009bee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009bee:	69bb      	ldr	r3, [r7, #24]
	}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3720      	adds	r7, #32
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b088      	sub	sp, #32
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
 8009c04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	461a      	mov	r2, r3
 8009c10:	21a5      	movs	r1, #165	; 0xa5
 8009c12:	f002 f8d3 	bl	800bdbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c20:	3b01      	subs	r3, #1
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	f023 0307 	bic.w	r3, r3, #7
 8009c2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	f003 0307 	and.w	r3, r3, #7
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00a      	beq.n	8009c50 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	617b      	str	r3, [r7, #20]
}
 8009c4c:	bf00      	nop
 8009c4e:	e7fe      	b.n	8009c4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d01f      	beq.n	8009c96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c56:	2300      	movs	r3, #0
 8009c58:	61fb      	str	r3, [r7, #28]
 8009c5a:	e012      	b.n	8009c82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	4413      	add	r3, r2
 8009c62:	7819      	ldrb	r1, [r3, #0]
 8009c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	4413      	add	r3, r2
 8009c6a:	3334      	adds	r3, #52	; 0x34
 8009c6c:	460a      	mov	r2, r1
 8009c6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	4413      	add	r3, r2
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d006      	beq.n	8009c8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	61fb      	str	r3, [r7, #28]
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	2b0f      	cmp	r3, #15
 8009c86:	d9e9      	bls.n	8009c5c <prvInitialiseNewTask+0x64>
 8009c88:	e000      	b.n	8009c8c <prvInitialiseNewTask+0x94>
			{
				break;
 8009c8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c94:	e003      	b.n	8009c9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca0:	2b37      	cmp	r3, #55	; 0x37
 8009ca2:	d901      	bls.n	8009ca8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ca4:	2337      	movs	r3, #55	; 0x37
 8009ca6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbc:	3304      	adds	r3, #4
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fe fbd6 	bl	8008470 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc6:	3318      	adds	r3, #24
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fe fbd1 	bl	8008470 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ce2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf6:	3354      	adds	r3, #84	; 0x54
 8009cf8:	2260      	movs	r2, #96	; 0x60
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f002 f85d 	bl	800bdbc <memset>
 8009d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d04:	4a0c      	ldr	r2, [pc, #48]	; (8009d38 <prvInitialiseNewTask+0x140>)
 8009d06:	659a      	str	r2, [r3, #88]	; 0x58
 8009d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0a:	4a0c      	ldr	r2, [pc, #48]	; (8009d3c <prvInitialiseNewTask+0x144>)
 8009d0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d10:	4a0b      	ldr	r2, [pc, #44]	; (8009d40 <prvInitialiseNewTask+0x148>)
 8009d12:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	68f9      	ldr	r1, [r7, #12]
 8009d18:	69b8      	ldr	r0, [r7, #24]
 8009d1a:	f001 fbb9 	bl	800b490 <pxPortInitialiseStack>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d30:	bf00      	nop
 8009d32:	3720      	adds	r7, #32
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	0800cea0 	.word	0x0800cea0
 8009d3c:	0800cec0 	.word	0x0800cec0
 8009d40:	0800ce80 	.word	0x0800ce80

08009d44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d4c:	f001 fcca 	bl	800b6e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d50:	4b2d      	ldr	r3, [pc, #180]	; (8009e08 <prvAddNewTaskToReadyList+0xc4>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3301      	adds	r3, #1
 8009d56:	4a2c      	ldr	r2, [pc, #176]	; (8009e08 <prvAddNewTaskToReadyList+0xc4>)
 8009d58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d5a:	4b2c      	ldr	r3, [pc, #176]	; (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d109      	bne.n	8009d76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d62:	4a2a      	ldr	r2, [pc, #168]	; (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d68:	4b27      	ldr	r3, [pc, #156]	; (8009e08 <prvAddNewTaskToReadyList+0xc4>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d110      	bne.n	8009d92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d70:	f000 fc4c 	bl	800a60c <prvInitialiseTaskLists>
 8009d74:	e00d      	b.n	8009d92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d76:	4b26      	ldr	r3, [pc, #152]	; (8009e10 <prvAddNewTaskToReadyList+0xcc>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d109      	bne.n	8009d92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d7e:	4b23      	ldr	r3, [pc, #140]	; (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d802      	bhi.n	8009d92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d8c:	4a1f      	ldr	r2, [pc, #124]	; (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d92:	4b20      	ldr	r3, [pc, #128]	; (8009e14 <prvAddNewTaskToReadyList+0xd0>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3301      	adds	r3, #1
 8009d98:	4a1e      	ldr	r2, [pc, #120]	; (8009e14 <prvAddNewTaskToReadyList+0xd0>)
 8009d9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d9c:	4b1d      	ldr	r3, [pc, #116]	; (8009e14 <prvAddNewTaskToReadyList+0xd0>)
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da8:	4b1b      	ldr	r3, [pc, #108]	; (8009e18 <prvAddNewTaskToReadyList+0xd4>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d903      	bls.n	8009db8 <prvAddNewTaskToReadyList+0x74>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db4:	4a18      	ldr	r2, [pc, #96]	; (8009e18 <prvAddNewTaskToReadyList+0xd4>)
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4a15      	ldr	r2, [pc, #84]	; (8009e1c <prvAddNewTaskToReadyList+0xd8>)
 8009dc6:	441a      	add	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	4619      	mov	r1, r3
 8009dce:	4610      	mov	r0, r2
 8009dd0:	f7fe fb5b 	bl	800848a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009dd4:	f001 fcb6 	bl	800b744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009dd8:	4b0d      	ldr	r3, [pc, #52]	; (8009e10 <prvAddNewTaskToReadyList+0xcc>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00e      	beq.n	8009dfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009de0:	4b0a      	ldr	r3, [pc, #40]	; (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d207      	bcs.n	8009dfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009dee:	4b0c      	ldr	r3, [pc, #48]	; (8009e20 <prvAddNewTaskToReadyList+0xdc>)
 8009df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009df4:	601a      	str	r2, [r3, #0]
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20000f10 	.word	0x20000f10
 8009e0c:	20000a3c 	.word	0x20000a3c
 8009e10:	20000f1c 	.word	0x20000f1c
 8009e14:	20000f2c 	.word	0x20000f2c
 8009e18:	20000f18 	.word	0x20000f18
 8009e1c:	20000a40 	.word	0x20000a40
 8009e20:	e000ed04 	.word	0xe000ed04

08009e24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d017      	beq.n	8009e66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e36:	4b13      	ldr	r3, [pc, #76]	; (8009e84 <vTaskDelay+0x60>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00a      	beq.n	8009e54 <vTaskDelay+0x30>
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	60bb      	str	r3, [r7, #8]
}
 8009e50:	bf00      	nop
 8009e52:	e7fe      	b.n	8009e52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009e54:	f000 f88a 	bl	8009f6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009e58:	2100      	movs	r1, #0
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 ff76 	bl	800ad4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009e60:	f000 f892 	bl	8009f88 <xTaskResumeAll>
 8009e64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d107      	bne.n	8009e7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009e6c:	4b06      	ldr	r3, [pc, #24]	; (8009e88 <vTaskDelay+0x64>)
 8009e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e7c:	bf00      	nop
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	20000f38 	.word	0x20000f38
 8009e88:	e000ed04 	.word	0xe000ed04

08009e8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b08a      	sub	sp, #40	; 0x28
 8009e90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e9a:	463a      	mov	r2, r7
 8009e9c:	1d39      	adds	r1, r7, #4
 8009e9e:	f107 0308 	add.w	r3, r7, #8
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fe fa90 	bl	80083c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	9202      	str	r2, [sp, #8]
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	460a      	mov	r2, r1
 8009eba:	4924      	ldr	r1, [pc, #144]	; (8009f4c <vTaskStartScheduler+0xc0>)
 8009ebc:	4824      	ldr	r0, [pc, #144]	; (8009f50 <vTaskStartScheduler+0xc4>)
 8009ebe:	f7ff fdf9 	bl	8009ab4 <xTaskCreateStatic>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	4a23      	ldr	r2, [pc, #140]	; (8009f54 <vTaskStartScheduler+0xc8>)
 8009ec6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ec8:	4b22      	ldr	r3, [pc, #136]	; (8009f54 <vTaskStartScheduler+0xc8>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	617b      	str	r3, [r7, #20]
 8009ed4:	e001      	b.n	8009eda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d102      	bne.n	8009ee6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ee0:	f000 ff88 	bl	800adf4 <xTimerCreateTimerTask>
 8009ee4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d11b      	bne.n	8009f24 <vTaskStartScheduler+0x98>
	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	613b      	str	r3, [r7, #16]
}
 8009efe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f00:	4b15      	ldr	r3, [pc, #84]	; (8009f58 <vTaskStartScheduler+0xcc>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3354      	adds	r3, #84	; 0x54
 8009f06:	4a15      	ldr	r2, [pc, #84]	; (8009f5c <vTaskStartScheduler+0xd0>)
 8009f08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f0a:	4b15      	ldr	r3, [pc, #84]	; (8009f60 <vTaskStartScheduler+0xd4>)
 8009f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f12:	4b14      	ldr	r3, [pc, #80]	; (8009f64 <vTaskStartScheduler+0xd8>)
 8009f14:	2201      	movs	r2, #1
 8009f16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f18:	4b13      	ldr	r3, [pc, #76]	; (8009f68 <vTaskStartScheduler+0xdc>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f1e:	f001 fb3f 	bl	800b5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f22:	e00e      	b.n	8009f42 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f2a:	d10a      	bne.n	8009f42 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	60fb      	str	r3, [r7, #12]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <vTaskStartScheduler+0xb4>
}
 8009f42:	bf00      	nop
 8009f44:	3718      	adds	r7, #24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	0800cc94 	.word	0x0800cc94
 8009f50:	0800a5dd 	.word	0x0800a5dd
 8009f54:	20000f34 	.word	0x20000f34
 8009f58:	20000a3c 	.word	0x20000a3c
 8009f5c:	20000018 	.word	0x20000018
 8009f60:	20000f30 	.word	0x20000f30
 8009f64:	20000f1c 	.word	0x20000f1c
 8009f68:	20000f14 	.word	0x20000f14

08009f6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009f70:	4b04      	ldr	r3, [pc, #16]	; (8009f84 <vTaskSuspendAll+0x18>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	3301      	adds	r3, #1
 8009f76:	4a03      	ldr	r2, [pc, #12]	; (8009f84 <vTaskSuspendAll+0x18>)
 8009f78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009f7a:	bf00      	nop
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	20000f38 	.word	0x20000f38

08009f88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f92:	2300      	movs	r3, #0
 8009f94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f96:	4b42      	ldr	r3, [pc, #264]	; (800a0a0 <xTaskResumeAll+0x118>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10a      	bne.n	8009fb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	603b      	str	r3, [r7, #0]
}
 8009fb0:	bf00      	nop
 8009fb2:	e7fe      	b.n	8009fb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009fb4:	f001 fb96 	bl	800b6e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009fb8:	4b39      	ldr	r3, [pc, #228]	; (800a0a0 <xTaskResumeAll+0x118>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	4a38      	ldr	r2, [pc, #224]	; (800a0a0 <xTaskResumeAll+0x118>)
 8009fc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fc2:	4b37      	ldr	r3, [pc, #220]	; (800a0a0 <xTaskResumeAll+0x118>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d162      	bne.n	800a090 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009fca:	4b36      	ldr	r3, [pc, #216]	; (800a0a4 <xTaskResumeAll+0x11c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d05e      	beq.n	800a090 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fd2:	e02f      	b.n	800a034 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fd4:	4b34      	ldr	r3, [pc, #208]	; (800a0a8 <xTaskResumeAll+0x120>)
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	3318      	adds	r3, #24
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe faaf 	bl	8008544 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	3304      	adds	r3, #4
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fe faaa 	bl	8008544 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff4:	4b2d      	ldr	r3, [pc, #180]	; (800a0ac <xTaskResumeAll+0x124>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d903      	bls.n	800a004 <xTaskResumeAll+0x7c>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a000:	4a2a      	ldr	r2, [pc, #168]	; (800a0ac <xTaskResumeAll+0x124>)
 800a002:	6013      	str	r3, [r2, #0]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a008:	4613      	mov	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4a27      	ldr	r2, [pc, #156]	; (800a0b0 <xTaskResumeAll+0x128>)
 800a012:	441a      	add	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	3304      	adds	r3, #4
 800a018:	4619      	mov	r1, r3
 800a01a:	4610      	mov	r0, r2
 800a01c:	f7fe fa35 	bl	800848a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a024:	4b23      	ldr	r3, [pc, #140]	; (800a0b4 <xTaskResumeAll+0x12c>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d302      	bcc.n	800a034 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a02e:	4b22      	ldr	r3, [pc, #136]	; (800a0b8 <xTaskResumeAll+0x130>)
 800a030:	2201      	movs	r2, #1
 800a032:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a034:	4b1c      	ldr	r3, [pc, #112]	; (800a0a8 <xTaskResumeAll+0x120>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1cb      	bne.n	8009fd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a042:	f000 fb85 	bl	800a750 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a046:	4b1d      	ldr	r3, [pc, #116]	; (800a0bc <xTaskResumeAll+0x134>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d010      	beq.n	800a074 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a052:	f000 f847 	bl	800a0e4 <xTaskIncrementTick>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a05c:	4b16      	ldr	r3, [pc, #88]	; (800a0b8 <xTaskResumeAll+0x130>)
 800a05e:	2201      	movs	r2, #1
 800a060:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	3b01      	subs	r3, #1
 800a066:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1f1      	bne.n	800a052 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a06e:	4b13      	ldr	r3, [pc, #76]	; (800a0bc <xTaskResumeAll+0x134>)
 800a070:	2200      	movs	r2, #0
 800a072:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a074:	4b10      	ldr	r3, [pc, #64]	; (800a0b8 <xTaskResumeAll+0x130>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d009      	beq.n	800a090 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a07c:	2301      	movs	r3, #1
 800a07e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a080:	4b0f      	ldr	r3, [pc, #60]	; (800a0c0 <xTaskResumeAll+0x138>)
 800a082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a090:	f001 fb58 	bl	800b744 <vPortExitCritical>

	return xAlreadyYielded;
 800a094:	68bb      	ldr	r3, [r7, #8]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000f38 	.word	0x20000f38
 800a0a4:	20000f10 	.word	0x20000f10
 800a0a8:	20000ed0 	.word	0x20000ed0
 800a0ac:	20000f18 	.word	0x20000f18
 800a0b0:	20000a40 	.word	0x20000a40
 800a0b4:	20000a3c 	.word	0x20000a3c
 800a0b8:	20000f24 	.word	0x20000f24
 800a0bc:	20000f20 	.word	0x20000f20
 800a0c0:	e000ed04 	.word	0xe000ed04

0800a0c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a0ca:	4b05      	ldr	r3, [pc, #20]	; (800a0e0 <xTaskGetTickCount+0x1c>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a0d0:	687b      	ldr	r3, [r7, #4]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	20000f14 	.word	0x20000f14

0800a0e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0ee:	4b4f      	ldr	r3, [pc, #316]	; (800a22c <xTaskIncrementTick+0x148>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f040 808f 	bne.w	800a216 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a0f8:	4b4d      	ldr	r3, [pc, #308]	; (800a230 <xTaskIncrementTick+0x14c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a100:	4a4b      	ldr	r2, [pc, #300]	; (800a230 <xTaskIncrementTick+0x14c>)
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d120      	bne.n	800a14e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a10c:	4b49      	ldr	r3, [pc, #292]	; (800a234 <xTaskIncrementTick+0x150>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00a      	beq.n	800a12c <xTaskIncrementTick+0x48>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	603b      	str	r3, [r7, #0]
}
 800a128:	bf00      	nop
 800a12a:	e7fe      	b.n	800a12a <xTaskIncrementTick+0x46>
 800a12c:	4b41      	ldr	r3, [pc, #260]	; (800a234 <xTaskIncrementTick+0x150>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	60fb      	str	r3, [r7, #12]
 800a132:	4b41      	ldr	r3, [pc, #260]	; (800a238 <xTaskIncrementTick+0x154>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a3f      	ldr	r2, [pc, #252]	; (800a234 <xTaskIncrementTick+0x150>)
 800a138:	6013      	str	r3, [r2, #0]
 800a13a:	4a3f      	ldr	r2, [pc, #252]	; (800a238 <xTaskIncrementTick+0x154>)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6013      	str	r3, [r2, #0]
 800a140:	4b3e      	ldr	r3, [pc, #248]	; (800a23c <xTaskIncrementTick+0x158>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	3301      	adds	r3, #1
 800a146:	4a3d      	ldr	r2, [pc, #244]	; (800a23c <xTaskIncrementTick+0x158>)
 800a148:	6013      	str	r3, [r2, #0]
 800a14a:	f000 fb01 	bl	800a750 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a14e:	4b3c      	ldr	r3, [pc, #240]	; (800a240 <xTaskIncrementTick+0x15c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	429a      	cmp	r2, r3
 800a156:	d349      	bcc.n	800a1ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a158:	4b36      	ldr	r3, [pc, #216]	; (800a234 <xTaskIncrementTick+0x150>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d104      	bne.n	800a16c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a162:	4b37      	ldr	r3, [pc, #220]	; (800a240 <xTaskIncrementTick+0x15c>)
 800a164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a168:	601a      	str	r2, [r3, #0]
					break;
 800a16a:	e03f      	b.n	800a1ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a16c:	4b31      	ldr	r3, [pc, #196]	; (800a234 <xTaskIncrementTick+0x150>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	429a      	cmp	r2, r3
 800a182:	d203      	bcs.n	800a18c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a184:	4a2e      	ldr	r2, [pc, #184]	; (800a240 <xTaskIncrementTick+0x15c>)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a18a:	e02f      	b.n	800a1ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	3304      	adds	r3, #4
 800a190:	4618      	mov	r0, r3
 800a192:	f7fe f9d7 	bl	8008544 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d004      	beq.n	800a1a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	3318      	adds	r3, #24
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe f9ce 	bl	8008544 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ac:	4b25      	ldr	r3, [pc, #148]	; (800a244 <xTaskIncrementTick+0x160>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d903      	bls.n	800a1bc <xTaskIncrementTick+0xd8>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b8:	4a22      	ldr	r2, [pc, #136]	; (800a244 <xTaskIncrementTick+0x160>)
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4a1f      	ldr	r2, [pc, #124]	; (800a248 <xTaskIncrementTick+0x164>)
 800a1ca:	441a      	add	r2, r3
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	4610      	mov	r0, r2
 800a1d4:	f7fe f959 	bl	800848a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1dc:	4b1b      	ldr	r3, [pc, #108]	; (800a24c <xTaskIncrementTick+0x168>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d3b8      	bcc.n	800a158 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1ea:	e7b5      	b.n	800a158 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a1ec:	4b17      	ldr	r3, [pc, #92]	; (800a24c <xTaskIncrementTick+0x168>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f2:	4915      	ldr	r1, [pc, #84]	; (800a248 <xTaskIncrementTick+0x164>)
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	440b      	add	r3, r1
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d901      	bls.n	800a208 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a204:	2301      	movs	r3, #1
 800a206:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a208:	4b11      	ldr	r3, [pc, #68]	; (800a250 <xTaskIncrementTick+0x16c>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d007      	beq.n	800a220 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a210:	2301      	movs	r3, #1
 800a212:	617b      	str	r3, [r7, #20]
 800a214:	e004      	b.n	800a220 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a216:	4b0f      	ldr	r3, [pc, #60]	; (800a254 <xTaskIncrementTick+0x170>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	3301      	adds	r3, #1
 800a21c:	4a0d      	ldr	r2, [pc, #52]	; (800a254 <xTaskIncrementTick+0x170>)
 800a21e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a220:	697b      	ldr	r3, [r7, #20]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3718      	adds	r7, #24
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	20000f38 	.word	0x20000f38
 800a230:	20000f14 	.word	0x20000f14
 800a234:	20000ec8 	.word	0x20000ec8
 800a238:	20000ecc 	.word	0x20000ecc
 800a23c:	20000f28 	.word	0x20000f28
 800a240:	20000f30 	.word	0x20000f30
 800a244:	20000f18 	.word	0x20000f18
 800a248:	20000a40 	.word	0x20000a40
 800a24c:	20000a3c 	.word	0x20000a3c
 800a250:	20000f24 	.word	0x20000f24
 800a254:	20000f20 	.word	0x20000f20

0800a258 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a25e:	4b2a      	ldr	r3, [pc, #168]	; (800a308 <vTaskSwitchContext+0xb0>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a266:	4b29      	ldr	r3, [pc, #164]	; (800a30c <vTaskSwitchContext+0xb4>)
 800a268:	2201      	movs	r2, #1
 800a26a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a26c:	e046      	b.n	800a2fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a26e:	4b27      	ldr	r3, [pc, #156]	; (800a30c <vTaskSwitchContext+0xb4>)
 800a270:	2200      	movs	r2, #0
 800a272:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a274:	4b26      	ldr	r3, [pc, #152]	; (800a310 <vTaskSwitchContext+0xb8>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	e010      	b.n	800a29e <vTaskSwitchContext+0x46>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10a      	bne.n	800a298 <vTaskSwitchContext+0x40>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	607b      	str	r3, [r7, #4]
}
 800a294:	bf00      	nop
 800a296:	e7fe      	b.n	800a296 <vTaskSwitchContext+0x3e>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	60fb      	str	r3, [r7, #12]
 800a29e:	491d      	ldr	r1, [pc, #116]	; (800a314 <vTaskSwitchContext+0xbc>)
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4413      	add	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	440b      	add	r3, r1
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0e4      	beq.n	800a27c <vTaskSwitchContext+0x24>
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4a15      	ldr	r2, [pc, #84]	; (800a314 <vTaskSwitchContext+0xbc>)
 800a2be:	4413      	add	r3, r2
 800a2c0:	60bb      	str	r3, [r7, #8]
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	605a      	str	r2, [r3, #4]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	3308      	adds	r3, #8
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d104      	bne.n	800a2e2 <vTaskSwitchContext+0x8a>
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	605a      	str	r2, [r3, #4]
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	4a0b      	ldr	r2, [pc, #44]	; (800a318 <vTaskSwitchContext+0xc0>)
 800a2ea:	6013      	str	r3, [r2, #0]
 800a2ec:	4a08      	ldr	r2, [pc, #32]	; (800a310 <vTaskSwitchContext+0xb8>)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a2f2:	4b09      	ldr	r3, [pc, #36]	; (800a318 <vTaskSwitchContext+0xc0>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3354      	adds	r3, #84	; 0x54
 800a2f8:	4a08      	ldr	r2, [pc, #32]	; (800a31c <vTaskSwitchContext+0xc4>)
 800a2fa:	6013      	str	r3, [r2, #0]
}
 800a2fc:	bf00      	nop
 800a2fe:	3714      	adds	r7, #20
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr
 800a308:	20000f38 	.word	0x20000f38
 800a30c:	20000f24 	.word	0x20000f24
 800a310:	20000f18 	.word	0x20000f18
 800a314:	20000a40 	.word	0x20000a40
 800a318:	20000a3c 	.word	0x20000a3c
 800a31c:	20000018 	.word	0x20000018

0800a320 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10a      	bne.n	800a346 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	60fb      	str	r3, [r7, #12]
}
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a346:	4b07      	ldr	r3, [pc, #28]	; (800a364 <vTaskPlaceOnEventList+0x44>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3318      	adds	r3, #24
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7fe f8bf 	bl	80084d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a354:	2101      	movs	r1, #1
 800a356:	6838      	ldr	r0, [r7, #0]
 800a358:	f000 fcf8 	bl	800ad4c <prvAddCurrentTaskToDelayedList>
}
 800a35c:	bf00      	nop
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	20000a3c 	.word	0x20000a3c

0800a368 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10a      	bne.n	800a390 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	617b      	str	r3, [r7, #20]
}
 800a38c:	bf00      	nop
 800a38e:	e7fe      	b.n	800a38e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a390:	4b0a      	ldr	r3, [pc, #40]	; (800a3bc <vTaskPlaceOnEventListRestricted+0x54>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3318      	adds	r3, #24
 800a396:	4619      	mov	r1, r3
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f7fe f876 	bl	800848a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a3a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a3aa:	6879      	ldr	r1, [r7, #4]
 800a3ac:	68b8      	ldr	r0, [r7, #8]
 800a3ae:	f000 fccd 	bl	800ad4c <prvAddCurrentTaskToDelayedList>
	}
 800a3b2:	bf00      	nop
 800a3b4:	3718      	adds	r7, #24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20000a3c 	.word	0x20000a3c

0800a3c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d10a      	bne.n	800a3ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	60fb      	str	r3, [r7, #12]
}
 800a3e8:	bf00      	nop
 800a3ea:	e7fe      	b.n	800a3ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	3318      	adds	r3, #24
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fe f8a7 	bl	8008544 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3f6:	4b1e      	ldr	r3, [pc, #120]	; (800a470 <xTaskRemoveFromEventList+0xb0>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d11d      	bne.n	800a43a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	3304      	adds	r3, #4
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe f89e 	bl	8008544 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a40c:	4b19      	ldr	r3, [pc, #100]	; (800a474 <xTaskRemoveFromEventList+0xb4>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	429a      	cmp	r2, r3
 800a412:	d903      	bls.n	800a41c <xTaskRemoveFromEventList+0x5c>
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a418:	4a16      	ldr	r2, [pc, #88]	; (800a474 <xTaskRemoveFromEventList+0xb4>)
 800a41a:	6013      	str	r3, [r2, #0]
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a420:	4613      	mov	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4a13      	ldr	r2, [pc, #76]	; (800a478 <xTaskRemoveFromEventList+0xb8>)
 800a42a:	441a      	add	r2, r3
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	3304      	adds	r3, #4
 800a430:	4619      	mov	r1, r3
 800a432:	4610      	mov	r0, r2
 800a434:	f7fe f829 	bl	800848a <vListInsertEnd>
 800a438:	e005      	b.n	800a446 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	3318      	adds	r3, #24
 800a43e:	4619      	mov	r1, r3
 800a440:	480e      	ldr	r0, [pc, #56]	; (800a47c <xTaskRemoveFromEventList+0xbc>)
 800a442:	f7fe f822 	bl	800848a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a44a:	4b0d      	ldr	r3, [pc, #52]	; (800a480 <xTaskRemoveFromEventList+0xc0>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	429a      	cmp	r2, r3
 800a452:	d905      	bls.n	800a460 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a454:	2301      	movs	r3, #1
 800a456:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a458:	4b0a      	ldr	r3, [pc, #40]	; (800a484 <xTaskRemoveFromEventList+0xc4>)
 800a45a:	2201      	movs	r2, #1
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	e001      	b.n	800a464 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a460:	2300      	movs	r3, #0
 800a462:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a464:	697b      	ldr	r3, [r7, #20]
}
 800a466:	4618      	mov	r0, r3
 800a468:	3718      	adds	r7, #24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	20000f38 	.word	0x20000f38
 800a474:	20000f18 	.word	0x20000f18
 800a478:	20000a40 	.word	0x20000a40
 800a47c:	20000ed0 	.word	0x20000ed0
 800a480:	20000a3c 	.word	0x20000a3c
 800a484:	20000f24 	.word	0x20000f24

0800a488 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10a      	bne.n	800a4ac <vTaskSetTimeOutState+0x24>
	__asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	60fb      	str	r3, [r7, #12]
}
 800a4a8:	bf00      	nop
 800a4aa:	e7fe      	b.n	800a4aa <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800a4ac:	f001 f91a 	bl	800b6e4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a4b0:	4b06      	ldr	r3, [pc, #24]	; (800a4cc <vTaskSetTimeOutState+0x44>)
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a4b8:	4b05      	ldr	r3, [pc, #20]	; (800a4d0 <vTaskSetTimeOutState+0x48>)
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800a4c0:	f001 f940 	bl	800b744 <vPortExitCritical>
}
 800a4c4:	bf00      	nop
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	20000f28 	.word	0x20000f28
 800a4d0:	20000f14 	.word	0x20000f14

0800a4d4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a4dc:	4b06      	ldr	r3, [pc, #24]	; (800a4f8 <vTaskInternalSetTimeOutState+0x24>)
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a4e4:	4b05      	ldr	r3, [pc, #20]	; (800a4fc <vTaskInternalSetTimeOutState+0x28>)
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	605a      	str	r2, [r3, #4]
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	20000f28 	.word	0x20000f28
 800a4fc:	20000f14 	.word	0x20000f14

0800a500 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b088      	sub	sp, #32
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	613b      	str	r3, [r7, #16]
}
 800a522:	bf00      	nop
 800a524:	e7fe      	b.n	800a524 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10a      	bne.n	800a542 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	60fb      	str	r3, [r7, #12]
}
 800a53e:	bf00      	nop
 800a540:	e7fe      	b.n	800a540 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a542:	f001 f8cf 	bl	800b6e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a546:	4b1d      	ldr	r3, [pc, #116]	; (800a5bc <xTaskCheckForTimeOut+0xbc>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	69ba      	ldr	r2, [r7, #24]
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a55e:	d102      	bne.n	800a566 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a560:	2300      	movs	r3, #0
 800a562:	61fb      	str	r3, [r7, #28]
 800a564:	e023      	b.n	800a5ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	4b15      	ldr	r3, [pc, #84]	; (800a5c0 <xTaskCheckForTimeOut+0xc0>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d007      	beq.n	800a582 <xTaskCheckForTimeOut+0x82>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	69ba      	ldr	r2, [r7, #24]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d302      	bcc.n	800a582 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a57c:	2301      	movs	r3, #1
 800a57e:	61fb      	str	r3, [r7, #28]
 800a580:	e015      	b.n	800a5ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d20b      	bcs.n	800a5a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	1ad2      	subs	r2, r2, r3
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f7ff ff9b 	bl	800a4d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	61fb      	str	r3, [r7, #28]
 800a5a2:	e004      	b.n	800a5ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a5ae:	f001 f8c9 	bl	800b744 <vPortExitCritical>

	return xReturn;
 800a5b2:	69fb      	ldr	r3, [r7, #28]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3720      	adds	r7, #32
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20000f14 	.word	0x20000f14
 800a5c0:	20000f28 	.word	0x20000f28

0800a5c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a5c8:	4b03      	ldr	r3, [pc, #12]	; (800a5d8 <vTaskMissedYield+0x14>)
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	601a      	str	r2, [r3, #0]
}
 800a5ce:	bf00      	nop
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	20000f24 	.word	0x20000f24

0800a5dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a5e4:	f000 f852 	bl	800a68c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a5e8:	4b06      	ldr	r3, [pc, #24]	; (800a604 <prvIdleTask+0x28>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d9f9      	bls.n	800a5e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a5f0:	4b05      	ldr	r3, [pc, #20]	; (800a608 <prvIdleTask+0x2c>)
 800a5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5f6:	601a      	str	r2, [r3, #0]
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a600:	e7f0      	b.n	800a5e4 <prvIdleTask+0x8>
 800a602:	bf00      	nop
 800a604:	20000a40 	.word	0x20000a40
 800a608:	e000ed04 	.word	0xe000ed04

0800a60c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a612:	2300      	movs	r3, #0
 800a614:	607b      	str	r3, [r7, #4]
 800a616:	e00c      	b.n	800a632 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	4613      	mov	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4413      	add	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4a12      	ldr	r2, [pc, #72]	; (800a66c <prvInitialiseTaskLists+0x60>)
 800a624:	4413      	add	r3, r2
 800a626:	4618      	mov	r0, r3
 800a628:	f7fd ff02 	bl	8008430 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3301      	adds	r3, #1
 800a630:	607b      	str	r3, [r7, #4]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b37      	cmp	r3, #55	; 0x37
 800a636:	d9ef      	bls.n	800a618 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a638:	480d      	ldr	r0, [pc, #52]	; (800a670 <prvInitialiseTaskLists+0x64>)
 800a63a:	f7fd fef9 	bl	8008430 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a63e:	480d      	ldr	r0, [pc, #52]	; (800a674 <prvInitialiseTaskLists+0x68>)
 800a640:	f7fd fef6 	bl	8008430 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a644:	480c      	ldr	r0, [pc, #48]	; (800a678 <prvInitialiseTaskLists+0x6c>)
 800a646:	f7fd fef3 	bl	8008430 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a64a:	480c      	ldr	r0, [pc, #48]	; (800a67c <prvInitialiseTaskLists+0x70>)
 800a64c:	f7fd fef0 	bl	8008430 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a650:	480b      	ldr	r0, [pc, #44]	; (800a680 <prvInitialiseTaskLists+0x74>)
 800a652:	f7fd feed 	bl	8008430 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a656:	4b0b      	ldr	r3, [pc, #44]	; (800a684 <prvInitialiseTaskLists+0x78>)
 800a658:	4a05      	ldr	r2, [pc, #20]	; (800a670 <prvInitialiseTaskLists+0x64>)
 800a65a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a65c:	4b0a      	ldr	r3, [pc, #40]	; (800a688 <prvInitialiseTaskLists+0x7c>)
 800a65e:	4a05      	ldr	r2, [pc, #20]	; (800a674 <prvInitialiseTaskLists+0x68>)
 800a660:	601a      	str	r2, [r3, #0]
}
 800a662:	bf00      	nop
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20000a40 	.word	0x20000a40
 800a670:	20000ea0 	.word	0x20000ea0
 800a674:	20000eb4 	.word	0x20000eb4
 800a678:	20000ed0 	.word	0x20000ed0
 800a67c:	20000ee4 	.word	0x20000ee4
 800a680:	20000efc 	.word	0x20000efc
 800a684:	20000ec8 	.word	0x20000ec8
 800a688:	20000ecc 	.word	0x20000ecc

0800a68c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a692:	e019      	b.n	800a6c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a694:	f001 f826 	bl	800b6e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a698:	4b10      	ldr	r3, [pc, #64]	; (800a6dc <prvCheckTasksWaitingTermination+0x50>)
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	3304      	adds	r3, #4
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fd ff4d 	bl	8008544 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a6aa:	4b0d      	ldr	r3, [pc, #52]	; (800a6e0 <prvCheckTasksWaitingTermination+0x54>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	4a0b      	ldr	r2, [pc, #44]	; (800a6e0 <prvCheckTasksWaitingTermination+0x54>)
 800a6b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a6b4:	4b0b      	ldr	r3, [pc, #44]	; (800a6e4 <prvCheckTasksWaitingTermination+0x58>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	4a0a      	ldr	r2, [pc, #40]	; (800a6e4 <prvCheckTasksWaitingTermination+0x58>)
 800a6bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a6be:	f001 f841 	bl	800b744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f810 	bl	800a6e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6c8:	4b06      	ldr	r3, [pc, #24]	; (800a6e4 <prvCheckTasksWaitingTermination+0x58>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d1e1      	bne.n	800a694 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a6d0:	bf00      	nop
 800a6d2:	bf00      	nop
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	20000ee4 	.word	0x20000ee4
 800a6e0:	20000f10 	.word	0x20000f10
 800a6e4:	20000ef8 	.word	0x20000ef8

0800a6e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	3354      	adds	r3, #84	; 0x54
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f001 fc57 	bl	800bfa8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a700:	2b00      	cmp	r3, #0
 800a702:	d108      	bne.n	800a716 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a708:	4618      	mov	r0, r3
 800a70a:	f001 f9d9 	bl	800bac0 <vPortFree>
				vPortFree( pxTCB );
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f001 f9d6 	bl	800bac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a714:	e018      	b.n	800a748 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d103      	bne.n	800a728 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f001 f9cd 	bl	800bac0 <vPortFree>
	}
 800a726:	e00f      	b.n	800a748 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d00a      	beq.n	800a748 <prvDeleteTCB+0x60>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	60fb      	str	r3, [r7, #12]
}
 800a744:	bf00      	nop
 800a746:	e7fe      	b.n	800a746 <prvDeleteTCB+0x5e>
	}
 800a748:	bf00      	nop
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a756:	4b0c      	ldr	r3, [pc, #48]	; (800a788 <prvResetNextTaskUnblockTime+0x38>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d104      	bne.n	800a76a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a760:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <prvResetNextTaskUnblockTime+0x3c>)
 800a762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a766:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a768:	e008      	b.n	800a77c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a76a:	4b07      	ldr	r3, [pc, #28]	; (800a788 <prvResetNextTaskUnblockTime+0x38>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	4a04      	ldr	r2, [pc, #16]	; (800a78c <prvResetNextTaskUnblockTime+0x3c>)
 800a77a:	6013      	str	r3, [r2, #0]
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	20000ec8 	.word	0x20000ec8
 800a78c:	20000f30 	.word	0x20000f30

0800a790 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a796:	4b05      	ldr	r3, [pc, #20]	; (800a7ac <xTaskGetCurrentTaskHandle+0x1c>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a79c:	687b      	ldr	r3, [r7, #4]
	}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	20000a3c 	.word	0x20000a3c

0800a7b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a7b6:	4b0b      	ldr	r3, [pc, #44]	; (800a7e4 <xTaskGetSchedulerState+0x34>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d102      	bne.n	800a7c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	607b      	str	r3, [r7, #4]
 800a7c2:	e008      	b.n	800a7d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7c4:	4b08      	ldr	r3, [pc, #32]	; (800a7e8 <xTaskGetSchedulerState+0x38>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d102      	bne.n	800a7d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	607b      	str	r3, [r7, #4]
 800a7d0:	e001      	b.n	800a7d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a7d6:	687b      	ldr	r3, [r7, #4]
	}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	20000f1c 	.word	0x20000f1c
 800a7e8:	20000f38 	.word	0x20000f38

0800a7ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d051      	beq.n	800a8a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a806:	4b2a      	ldr	r3, [pc, #168]	; (800a8b0 <xTaskPriorityInherit+0xc4>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d241      	bcs.n	800a894 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	2b00      	cmp	r3, #0
 800a816:	db06      	blt.n	800a826 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a818:	4b25      	ldr	r3, [pc, #148]	; (800a8b0 <xTaskPriorityInherit+0xc4>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	6959      	ldr	r1, [r3, #20]
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a82e:	4613      	mov	r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4a1f      	ldr	r2, [pc, #124]	; (800a8b4 <xTaskPriorityInherit+0xc8>)
 800a838:	4413      	add	r3, r2
 800a83a:	4299      	cmp	r1, r3
 800a83c:	d122      	bne.n	800a884 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	3304      	adds	r3, #4
 800a842:	4618      	mov	r0, r3
 800a844:	f7fd fe7e 	bl	8008544 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a848:	4b19      	ldr	r3, [pc, #100]	; (800a8b0 <xTaskPriorityInherit+0xc4>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a856:	4b18      	ldr	r3, [pc, #96]	; (800a8b8 <xTaskPriorityInherit+0xcc>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d903      	bls.n	800a866 <xTaskPriorityInherit+0x7a>
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a862:	4a15      	ldr	r2, [pc, #84]	; (800a8b8 <xTaskPriorityInherit+0xcc>)
 800a864:	6013      	str	r3, [r2, #0]
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a86a:	4613      	mov	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4413      	add	r3, r2
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4a10      	ldr	r2, [pc, #64]	; (800a8b4 <xTaskPriorityInherit+0xc8>)
 800a874:	441a      	add	r2, r3
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	3304      	adds	r3, #4
 800a87a:	4619      	mov	r1, r3
 800a87c:	4610      	mov	r0, r2
 800a87e:	f7fd fe04 	bl	800848a <vListInsertEnd>
 800a882:	e004      	b.n	800a88e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a884:	4b0a      	ldr	r3, [pc, #40]	; (800a8b0 <xTaskPriorityInherit+0xc4>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a88e:	2301      	movs	r3, #1
 800a890:	60fb      	str	r3, [r7, #12]
 800a892:	e008      	b.n	800a8a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a898:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <xTaskPriorityInherit+0xc4>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d201      	bcs.n	800a8a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
	}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	20000a3c 	.word	0x20000a3c
 800a8b4:	20000a40 	.word	0x20000a40
 800a8b8:	20000f18 	.word	0x20000f18

0800a8bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d056      	beq.n	800a980 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a8d2:	4b2e      	ldr	r3, [pc, #184]	; (800a98c <xTaskPriorityDisinherit+0xd0>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d00a      	beq.n	800a8f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	60fb      	str	r3, [r7, #12]
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10a      	bne.n	800a910 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fe:	f383 8811 	msr	BASEPRI, r3
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	60bb      	str	r3, [r7, #8]
}
 800a90c:	bf00      	nop
 800a90e:	e7fe      	b.n	800a90e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a914:	1e5a      	subs	r2, r3, #1
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a922:	429a      	cmp	r2, r3
 800a924:	d02c      	beq.n	800a980 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d128      	bne.n	800a980 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	3304      	adds	r3, #4
 800a932:	4618      	mov	r0, r3
 800a934:	f7fd fe06 	bl	8008544 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a944:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a950:	4b0f      	ldr	r3, [pc, #60]	; (800a990 <xTaskPriorityDisinherit+0xd4>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	429a      	cmp	r2, r3
 800a956:	d903      	bls.n	800a960 <xTaskPriorityDisinherit+0xa4>
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95c:	4a0c      	ldr	r2, [pc, #48]	; (800a990 <xTaskPriorityDisinherit+0xd4>)
 800a95e:	6013      	str	r3, [r2, #0]
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a964:	4613      	mov	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4a09      	ldr	r2, [pc, #36]	; (800a994 <xTaskPriorityDisinherit+0xd8>)
 800a96e:	441a      	add	r2, r3
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	3304      	adds	r3, #4
 800a974:	4619      	mov	r1, r3
 800a976:	4610      	mov	r0, r2
 800a978:	f7fd fd87 	bl	800848a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a97c:	2301      	movs	r3, #1
 800a97e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a980:	697b      	ldr	r3, [r7, #20]
	}
 800a982:	4618      	mov	r0, r3
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	20000a3c 	.word	0x20000a3c
 800a990:	20000f18 	.word	0x20000f18
 800a994:	20000a40 	.word	0x20000a40

0800a998 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b088      	sub	sp, #32
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d06a      	beq.n	800aa86 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10a      	bne.n	800a9ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9bc:	f383 8811 	msr	BASEPRI, r3
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	60fb      	str	r3, [r7, #12]
}
 800a9ca:	bf00      	nop
 800a9cc:	e7fe      	b.n	800a9cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d902      	bls.n	800a9de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	61fb      	str	r3, [r7, #28]
 800a9dc:	e002      	b.n	800a9e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e8:	69fa      	ldr	r2, [r7, #28]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d04b      	beq.n	800aa86 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f2:	697a      	ldr	r2, [r7, #20]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d146      	bne.n	800aa86 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a9f8:	4b25      	ldr	r3, [pc, #148]	; (800aa90 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	69ba      	ldr	r2, [r7, #24]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d10a      	bne.n	800aa18 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	60bb      	str	r3, [r7, #8]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	69fa      	ldr	r2, [r7, #28]
 800aa22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	db04      	blt.n	800aa36 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	6959      	ldr	r1, [r3, #20]
 800aa3a:	693a      	ldr	r2, [r7, #16]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4a13      	ldr	r2, [pc, #76]	; (800aa94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800aa46:	4413      	add	r3, r2
 800aa48:	4299      	cmp	r1, r3
 800aa4a:	d11c      	bne.n	800aa86 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	3304      	adds	r3, #4
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fd fd77 	bl	8008544 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5a:	4b0f      	ldr	r3, [pc, #60]	; (800aa98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d903      	bls.n	800aa6a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa66:	4a0c      	ldr	r2, [pc, #48]	; (800aa98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aa68:	6013      	str	r3, [r2, #0]
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa6e:	4613      	mov	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4a07      	ldr	r2, [pc, #28]	; (800aa94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800aa78:	441a      	add	r2, r3
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	4619      	mov	r1, r3
 800aa80:	4610      	mov	r0, r2
 800aa82:	f7fd fd02 	bl	800848a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa86:	bf00      	nop
 800aa88:	3720      	adds	r7, #32
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20000a3c 	.word	0x20000a3c
 800aa94:	20000a40 	.word	0x20000a40
 800aa98:	20000f18 	.word	0x20000f18

0800aa9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aa9c:	b480      	push	{r7}
 800aa9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aaa0:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d004      	beq.n	800aab2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aaa8:	4b05      	ldr	r3, [pc, #20]	; (800aac0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aaae:	3201      	adds	r2, #1
 800aab0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800aab2:	4b03      	ldr	r3, [pc, #12]	; (800aac0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aab4:	681b      	ldr	r3, [r3, #0]
	}
 800aab6:	4618      	mov	r0, r3
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	20000a3c 	.word	0x20000a3c

0800aac4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800aad2:	f000 fe07 	bl	800b6e4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800aad6:	4b29      	ldr	r3, [pc, #164]	; (800ab7c <xTaskNotifyWait+0xb8>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b02      	cmp	r3, #2
 800aae2:	d01c      	beq.n	800ab1e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800aae4:	4b25      	ldr	r3, [pc, #148]	; (800ab7c <xTaskNotifyWait+0xb8>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	43d2      	mvns	r2, r2
 800aaf0:	400a      	ands	r2, r1
 800aaf2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800aaf6:	4b21      	ldr	r3, [pc, #132]	; (800ab7c <xTaskNotifyWait+0xb8>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00b      	beq.n	800ab1e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab06:	2101      	movs	r1, #1
 800ab08:	6838      	ldr	r0, [r7, #0]
 800ab0a:	f000 f91f 	bl	800ad4c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ab0e:	4b1c      	ldr	r3, [pc, #112]	; (800ab80 <xTaskNotifyWait+0xbc>)
 800ab10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ab1e:	f000 fe11 	bl	800b744 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ab22:	f000 fddf 	bl	800b6e4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d005      	beq.n	800ab38 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ab2c:	4b13      	ldr	r3, [pc, #76]	; (800ab7c <xTaskNotifyWait+0xb8>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ab38:	4b10      	ldr	r3, [pc, #64]	; (800ab7c <xTaskNotifyWait+0xb8>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d002      	beq.n	800ab4c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ab46:	2300      	movs	r3, #0
 800ab48:	617b      	str	r3, [r7, #20]
 800ab4a:	e00a      	b.n	800ab62 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ab4c:	4b0b      	ldr	r3, [pc, #44]	; (800ab7c <xTaskNotifyWait+0xb8>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	43d2      	mvns	r2, r2
 800ab58:	400a      	ands	r2, r1
 800ab5a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab62:	4b06      	ldr	r3, [pc, #24]	; (800ab7c <xTaskNotifyWait+0xb8>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800ab6c:	f000 fdea 	bl	800b744 <vPortExitCritical>

		return xReturn;
 800ab70:	697b      	ldr	r3, [r7, #20]
	}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20000a3c 	.word	0x20000a3c
 800ab80:	e000ed04 	.word	0xe000ed04

0800ab84 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b08a      	sub	sp, #40	; 0x28
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	4613      	mov	r3, r2
 800ab92:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ab94:	2301      	movs	r3, #1
 800ab96:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10a      	bne.n	800abb4 <xTaskGenericNotify+0x30>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	61bb      	str	r3, [r7, #24]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800abb8:	f000 fd94 	bl	800b6e4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d004      	beq.n	800abcc <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800abc2:	6a3b      	ldr	r3, [r7, #32]
 800abc4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800abd2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800abd4:	6a3b      	ldr	r3, [r7, #32]
 800abd6:	2202      	movs	r2, #2
 800abd8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800abdc:	79fb      	ldrb	r3, [r7, #7]
 800abde:	2b04      	cmp	r3, #4
 800abe0:	d82d      	bhi.n	800ac3e <xTaskGenericNotify+0xba>
 800abe2:	a201      	add	r2, pc, #4	; (adr r2, 800abe8 <xTaskGenericNotify+0x64>)
 800abe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe8:	0800ac61 	.word	0x0800ac61
 800abec:	0800abfd 	.word	0x0800abfd
 800abf0:	0800ac0f 	.word	0x0800ac0f
 800abf4:	0800ac1f 	.word	0x0800ac1f
 800abf8:	0800ac29 	.word	0x0800ac29
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	431a      	orrs	r2, r3
 800ac06:	6a3b      	ldr	r3, [r7, #32]
 800ac08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ac0c:	e02b      	b.n	800ac66 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ac0e:	6a3b      	ldr	r3, [r7, #32]
 800ac10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	6a3b      	ldr	r3, [r7, #32]
 800ac18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ac1c:	e023      	b.n	800ac66 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ac1e:	6a3b      	ldr	r3, [r7, #32]
 800ac20:	68ba      	ldr	r2, [r7, #8]
 800ac22:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ac26:	e01e      	b.n	800ac66 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ac28:	7ffb      	ldrb	r3, [r7, #31]
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d004      	beq.n	800ac38 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ac2e:	6a3b      	ldr	r3, [r7, #32]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ac36:	e016      	b.n	800ac66 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ac3c:	e013      	b.n	800ac66 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ac44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac48:	d00c      	beq.n	800ac64 <xTaskGenericNotify+0xe0>
	__asm volatile
 800ac4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	617b      	str	r3, [r7, #20]
}
 800ac5c:	bf00      	nop
 800ac5e:	e7fe      	b.n	800ac5e <xTaskGenericNotify+0xda>
					break;
 800ac60:	bf00      	nop
 800ac62:	e000      	b.n	800ac66 <xTaskGenericNotify+0xe2>

					break;
 800ac64:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ac66:	7ffb      	ldrb	r3, [r7, #31]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d13a      	bne.n	800ace2 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac6c:	6a3b      	ldr	r3, [r7, #32]
 800ac6e:	3304      	adds	r3, #4
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7fd fc67 	bl	8008544 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac7a:	4b1d      	ldr	r3, [pc, #116]	; (800acf0 <xTaskGenericNotify+0x16c>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d903      	bls.n	800ac8a <xTaskGenericNotify+0x106>
 800ac82:	6a3b      	ldr	r3, [r7, #32]
 800ac84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac86:	4a1a      	ldr	r2, [pc, #104]	; (800acf0 <xTaskGenericNotify+0x16c>)
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac8e:	4613      	mov	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4a17      	ldr	r2, [pc, #92]	; (800acf4 <xTaskGenericNotify+0x170>)
 800ac98:	441a      	add	r2, r3
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	4619      	mov	r1, r3
 800aca0:	4610      	mov	r0, r2
 800aca2:	f7fd fbf2 	bl	800848a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800aca6:	6a3b      	ldr	r3, [r7, #32]
 800aca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00a      	beq.n	800acc4 <xTaskGenericNotify+0x140>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	613b      	str	r3, [r7, #16]
}
 800acc0:	bf00      	nop
 800acc2:	e7fe      	b.n	800acc2 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acc4:	6a3b      	ldr	r3, [r7, #32]
 800acc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc8:	4b0b      	ldr	r3, [pc, #44]	; (800acf8 <xTaskGenericNotify+0x174>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acce:	429a      	cmp	r2, r3
 800acd0:	d907      	bls.n	800ace2 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800acd2:	4b0a      	ldr	r3, [pc, #40]	; (800acfc <xTaskGenericNotify+0x178>)
 800acd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ace2:	f000 fd2f 	bl	800b744 <vPortExitCritical>

		return xReturn;
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ace8:	4618      	mov	r0, r3
 800acea:	3728      	adds	r7, #40	; 0x28
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	20000f18 	.word	0x20000f18
 800acf4:	20000a40 	.word	0x20000a40
 800acf8:	20000a3c 	.word	0x20000a3c
 800acfc:	e000ed04 	.word	0xe000ed04

0800ad00 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d102      	bne.n	800ad14 <xTaskNotifyStateClear+0x14>
 800ad0e:	4b0e      	ldr	r3, [pc, #56]	; (800ad48 <xTaskNotifyStateClear+0x48>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	e000      	b.n	800ad16 <xTaskNotifyStateClear+0x16>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800ad18:	f000 fce4 	bl	800b6e4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	2b02      	cmp	r3, #2
 800ad26:	d106      	bne.n	800ad36 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 800ad30:	2301      	movs	r3, #1
 800ad32:	60fb      	str	r3, [r7, #12]
 800ad34:	e001      	b.n	800ad3a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800ad36:	2300      	movs	r3, #0
 800ad38:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800ad3a:	f000 fd03 	bl	800b744 <vPortExitCritical>

		return xReturn;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
	}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	20000a3c 	.word	0x20000a3c

0800ad4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad56:	4b21      	ldr	r3, [pc, #132]	; (800addc <prvAddCurrentTaskToDelayedList+0x90>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad5c:	4b20      	ldr	r3, [pc, #128]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3304      	adds	r3, #4
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fd fbee 	bl	8008544 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad6e:	d10a      	bne.n	800ad86 <prvAddCurrentTaskToDelayedList+0x3a>
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d007      	beq.n	800ad86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad76:	4b1a      	ldr	r3, [pc, #104]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	4819      	ldr	r0, [pc, #100]	; (800ade4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad80:	f7fd fb83 	bl	800848a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad84:	e026      	b.n	800add4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad8e:	4b14      	ldr	r3, [pc, #80]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d209      	bcs.n	800adb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad9e:	4b12      	ldr	r3, [pc, #72]	; (800ade8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	4b0f      	ldr	r3, [pc, #60]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3304      	adds	r3, #4
 800ada8:	4619      	mov	r1, r3
 800adaa:	4610      	mov	r0, r2
 800adac:	f7fd fb91 	bl	80084d2 <vListInsert>
}
 800adb0:	e010      	b.n	800add4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adb2:	4b0e      	ldr	r3, [pc, #56]	; (800adec <prvAddCurrentTaskToDelayedList+0xa0>)
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	4b0a      	ldr	r3, [pc, #40]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3304      	adds	r3, #4
 800adbc:	4619      	mov	r1, r3
 800adbe:	4610      	mov	r0, r2
 800adc0:	f7fd fb87 	bl	80084d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800adc4:	4b0a      	ldr	r3, [pc, #40]	; (800adf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d202      	bcs.n	800add4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800adce:	4a08      	ldr	r2, [pc, #32]	; (800adf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	6013      	str	r3, [r2, #0]
}
 800add4:	bf00      	nop
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	20000f14 	.word	0x20000f14
 800ade0:	20000a3c 	.word	0x20000a3c
 800ade4:	20000efc 	.word	0x20000efc
 800ade8:	20000ecc 	.word	0x20000ecc
 800adec:	20000ec8 	.word	0x20000ec8
 800adf0:	20000f30 	.word	0x20000f30

0800adf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08a      	sub	sp, #40	; 0x28
 800adf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800adfa:	2300      	movs	r3, #0
 800adfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800adfe:	f000 fb07 	bl	800b410 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae02:	4b1c      	ldr	r3, [pc, #112]	; (800ae74 <xTimerCreateTimerTask+0x80>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d021      	beq.n	800ae4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae12:	1d3a      	adds	r2, r7, #4
 800ae14:	f107 0108 	add.w	r1, r7, #8
 800ae18:	f107 030c 	add.w	r3, r7, #12
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fd faed 	bl	80083fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae22:	6879      	ldr	r1, [r7, #4]
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	9202      	str	r2, [sp, #8]
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	2300      	movs	r3, #0
 800ae32:	460a      	mov	r2, r1
 800ae34:	4910      	ldr	r1, [pc, #64]	; (800ae78 <xTimerCreateTimerTask+0x84>)
 800ae36:	4811      	ldr	r0, [pc, #68]	; (800ae7c <xTimerCreateTimerTask+0x88>)
 800ae38:	f7fe fe3c 	bl	8009ab4 <xTaskCreateStatic>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	4a10      	ldr	r2, [pc, #64]	; (800ae80 <xTimerCreateTimerTask+0x8c>)
 800ae40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae42:	4b0f      	ldr	r3, [pc, #60]	; (800ae80 <xTimerCreateTimerTask+0x8c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ae54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	613b      	str	r3, [r7, #16]
}
 800ae66:	bf00      	nop
 800ae68:	e7fe      	b.n	800ae68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae6a:	697b      	ldr	r3, [r7, #20]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	20000f6c 	.word	0x20000f6c
 800ae78:	0800cc9c 	.word	0x0800cc9c
 800ae7c:	0800afb9 	.word	0x0800afb9
 800ae80:	20000f70 	.word	0x20000f70

0800ae84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08a      	sub	sp, #40	; 0x28
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae92:	2300      	movs	r3, #0
 800ae94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	623b      	str	r3, [r7, #32]
}
 800aeae:	bf00      	nop
 800aeb0:	e7fe      	b.n	800aeb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aeb2:	4b1a      	ldr	r3, [pc, #104]	; (800af1c <xTimerGenericCommand+0x98>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d02a      	beq.n	800af10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2b05      	cmp	r3, #5
 800aeca:	dc18      	bgt.n	800aefe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aecc:	f7ff fc70 	bl	800a7b0 <xTaskGetSchedulerState>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	d109      	bne.n	800aeea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aed6:	4b11      	ldr	r3, [pc, #68]	; (800af1c <xTimerGenericCommand+0x98>)
 800aed8:	6818      	ldr	r0, [r3, #0]
 800aeda:	f107 0110 	add.w	r1, r7, #16
 800aede:	2300      	movs	r3, #0
 800aee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aee2:	f7fd fcc9 	bl	8008878 <xQueueGenericSend>
 800aee6:	6278      	str	r0, [r7, #36]	; 0x24
 800aee8:	e012      	b.n	800af10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aeea:	4b0c      	ldr	r3, [pc, #48]	; (800af1c <xTimerGenericCommand+0x98>)
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	f107 0110 	add.w	r1, r7, #16
 800aef2:	2300      	movs	r3, #0
 800aef4:	2200      	movs	r2, #0
 800aef6:	f7fd fcbf 	bl	8008878 <xQueueGenericSend>
 800aefa:	6278      	str	r0, [r7, #36]	; 0x24
 800aefc:	e008      	b.n	800af10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aefe:	4b07      	ldr	r3, [pc, #28]	; (800af1c <xTimerGenericCommand+0x98>)
 800af00:	6818      	ldr	r0, [r3, #0]
 800af02:	f107 0110 	add.w	r1, r7, #16
 800af06:	2300      	movs	r3, #0
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	f7fd fdb3 	bl	8008a74 <xQueueGenericSendFromISR>
 800af0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af12:	4618      	mov	r0, r3
 800af14:	3728      	adds	r7, #40	; 0x28
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20000f6c 	.word	0x20000f6c

0800af20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b088      	sub	sp, #32
 800af24:	af02      	add	r7, sp, #8
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af2a:	4b22      	ldr	r3, [pc, #136]	; (800afb4 <prvProcessExpiredTimer+0x94>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	3304      	adds	r3, #4
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fd fb03 	bl	8008544 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af44:	f003 0304 	and.w	r3, r3, #4
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d022      	beq.n	800af92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	699a      	ldr	r2, [r3, #24]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	18d1      	adds	r1, r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	6978      	ldr	r0, [r7, #20]
 800af5a:	f000 f8d1 	bl	800b100 <prvInsertTimerInActiveList>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d01f      	beq.n	800afa4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af64:	2300      	movs	r3, #0
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	2300      	movs	r3, #0
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	2100      	movs	r1, #0
 800af6e:	6978      	ldr	r0, [r7, #20]
 800af70:	f7ff ff88 	bl	800ae84 <xTimerGenericCommand>
 800af74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d113      	bne.n	800afa4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800af7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af80:	f383 8811 	msr	BASEPRI, r3
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	60fb      	str	r3, [r7, #12]
}
 800af8e:	bf00      	nop
 800af90:	e7fe      	b.n	800af90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af98:	f023 0301 	bic.w	r3, r3, #1
 800af9c:	b2da      	uxtb	r2, r3
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	6a1b      	ldr	r3, [r3, #32]
 800afa8:	6978      	ldr	r0, [r7, #20]
 800afaa:	4798      	blx	r3
}
 800afac:	bf00      	nop
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	20000f64 	.word	0x20000f64

0800afb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afc0:	f107 0308 	add.w	r3, r7, #8
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 f857 	bl	800b078 <prvGetNextExpireTime>
 800afca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	4619      	mov	r1, r3
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 f803 	bl	800afdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800afd6:	f000 f8d5 	bl	800b184 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afda:	e7f1      	b.n	800afc0 <prvTimerTask+0x8>

0800afdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afe6:	f7fe ffc1 	bl	8009f6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afea:	f107 0308 	add.w	r3, r7, #8
 800afee:	4618      	mov	r0, r3
 800aff0:	f000 f866 	bl	800b0c0 <prvSampleTimeNow>
 800aff4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d130      	bne.n	800b05e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d10a      	bne.n	800b018 <prvProcessTimerOrBlockTask+0x3c>
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	429a      	cmp	r2, r3
 800b008:	d806      	bhi.n	800b018 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b00a:	f7fe ffbd 	bl	8009f88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b00e:	68f9      	ldr	r1, [r7, #12]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7ff ff85 	bl	800af20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b016:	e024      	b.n	800b062 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d008      	beq.n	800b030 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b01e:	4b13      	ldr	r3, [pc, #76]	; (800b06c <prvProcessTimerOrBlockTask+0x90>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <prvProcessTimerOrBlockTask+0x50>
 800b028:	2301      	movs	r3, #1
 800b02a:	e000      	b.n	800b02e <prvProcessTimerOrBlockTask+0x52>
 800b02c:	2300      	movs	r3, #0
 800b02e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b030:	4b0f      	ldr	r3, [pc, #60]	; (800b070 <prvProcessTimerOrBlockTask+0x94>)
 800b032:	6818      	ldr	r0, [r3, #0]
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	4619      	mov	r1, r3
 800b03e:	f7fe f97f 	bl	8009340 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b042:	f7fe ffa1 	bl	8009f88 <xTaskResumeAll>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10a      	bne.n	800b062 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b04c:	4b09      	ldr	r3, [pc, #36]	; (800b074 <prvProcessTimerOrBlockTask+0x98>)
 800b04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	f3bf 8f6f 	isb	sy
}
 800b05c:	e001      	b.n	800b062 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b05e:	f7fe ff93 	bl	8009f88 <xTaskResumeAll>
}
 800b062:	bf00      	nop
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20000f68 	.word	0x20000f68
 800b070:	20000f6c 	.word	0x20000f6c
 800b074:	e000ed04 	.word	0xe000ed04

0800b078 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b080:	4b0e      	ldr	r3, [pc, #56]	; (800b0bc <prvGetNextExpireTime+0x44>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d101      	bne.n	800b08e <prvGetNextExpireTime+0x16>
 800b08a:	2201      	movs	r2, #1
 800b08c:	e000      	b.n	800b090 <prvGetNextExpireTime+0x18>
 800b08e:	2200      	movs	r2, #0
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d105      	bne.n	800b0a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b09c:	4b07      	ldr	r3, [pc, #28]	; (800b0bc <prvGetNextExpireTime+0x44>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	60fb      	str	r3, [r7, #12]
 800b0a6:	e001      	b.n	800b0ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3714      	adds	r7, #20
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	20000f64 	.word	0x20000f64

0800b0c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b0c8:	f7fe fffc 	bl	800a0c4 <xTaskGetTickCount>
 800b0cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0ce:	4b0b      	ldr	r3, [pc, #44]	; (800b0fc <prvSampleTimeNow+0x3c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d205      	bcs.n	800b0e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b0d8:	f000 f936 	bl	800b348 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	601a      	str	r2, [r3, #0]
 800b0e2:	e002      	b.n	800b0ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0ea:	4a04      	ldr	r2, [pc, #16]	; (800b0fc <prvSampleTimeNow+0x3c>)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20000f74 	.word	0x20000f74

0800b100 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b10e:	2300      	movs	r3, #0
 800b110:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	429a      	cmp	r2, r3
 800b124:	d812      	bhi.n	800b14c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	1ad2      	subs	r2, r2, r3
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	429a      	cmp	r2, r3
 800b132:	d302      	bcc.n	800b13a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b134:	2301      	movs	r3, #1
 800b136:	617b      	str	r3, [r7, #20]
 800b138:	e01b      	b.n	800b172 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b13a:	4b10      	ldr	r3, [pc, #64]	; (800b17c <prvInsertTimerInActiveList+0x7c>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3304      	adds	r3, #4
 800b142:	4619      	mov	r1, r3
 800b144:	4610      	mov	r0, r2
 800b146:	f7fd f9c4 	bl	80084d2 <vListInsert>
 800b14a:	e012      	b.n	800b172 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d206      	bcs.n	800b162 <prvInsertTimerInActiveList+0x62>
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d302      	bcc.n	800b162 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b15c:	2301      	movs	r3, #1
 800b15e:	617b      	str	r3, [r7, #20]
 800b160:	e007      	b.n	800b172 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b162:	4b07      	ldr	r3, [pc, #28]	; (800b180 <prvInsertTimerInActiveList+0x80>)
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3304      	adds	r3, #4
 800b16a:	4619      	mov	r1, r3
 800b16c:	4610      	mov	r0, r2
 800b16e:	f7fd f9b0 	bl	80084d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b172:	697b      	ldr	r3, [r7, #20]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3718      	adds	r7, #24
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	20000f68 	.word	0x20000f68
 800b180:	20000f64 	.word	0x20000f64

0800b184 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b08e      	sub	sp, #56	; 0x38
 800b188:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b18a:	e0ca      	b.n	800b322 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	da18      	bge.n	800b1c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b192:	1d3b      	adds	r3, r7, #4
 800b194:	3304      	adds	r3, #4
 800b196:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10a      	bne.n	800b1b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	61fb      	str	r3, [r7, #28]
}
 800b1b0:	bf00      	nop
 800b1b2:	e7fe      	b.n	800b1b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1ba:	6850      	ldr	r0, [r2, #4]
 800b1bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1be:	6892      	ldr	r2, [r2, #8]
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f2c0 80aa 	blt.w	800b320 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d2:	695b      	ldr	r3, [r3, #20]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d004      	beq.n	800b1e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1da:	3304      	adds	r3, #4
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fd f9b1 	bl	8008544 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1e2:	463b      	mov	r3, r7
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff ff6b 	bl	800b0c0 <prvSampleTimeNow>
 800b1ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b09      	cmp	r3, #9
 800b1f0:	f200 8097 	bhi.w	800b322 <prvProcessReceivedCommands+0x19e>
 800b1f4:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <prvProcessReceivedCommands+0x78>)
 800b1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fa:	bf00      	nop
 800b1fc:	0800b225 	.word	0x0800b225
 800b200:	0800b225 	.word	0x0800b225
 800b204:	0800b225 	.word	0x0800b225
 800b208:	0800b299 	.word	0x0800b299
 800b20c:	0800b2ad 	.word	0x0800b2ad
 800b210:	0800b2f7 	.word	0x0800b2f7
 800b214:	0800b225 	.word	0x0800b225
 800b218:	0800b225 	.word	0x0800b225
 800b21c:	0800b299 	.word	0x0800b299
 800b220:	0800b2ad 	.word	0x0800b2ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b22a:	f043 0301 	orr.w	r3, r3, #1
 800b22e:	b2da      	uxtb	r2, r3
 800b230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b236:	68ba      	ldr	r2, [r7, #8]
 800b238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	18d1      	adds	r1, r2, r3
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b244:	f7ff ff5c 	bl	800b100 <prvInsertTimerInActiveList>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d069      	beq.n	800b322 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b250:	6a1b      	ldr	r3, [r3, #32]
 800b252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b254:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b25c:	f003 0304 	and.w	r3, r3, #4
 800b260:	2b00      	cmp	r3, #0
 800b262:	d05e      	beq.n	800b322 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	441a      	add	r2, r3
 800b26c:	2300      	movs	r3, #0
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	2300      	movs	r3, #0
 800b272:	2100      	movs	r1, #0
 800b274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b276:	f7ff fe05 	bl	800ae84 <xTimerGenericCommand>
 800b27a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b27c:	6a3b      	ldr	r3, [r7, #32]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d14f      	bne.n	800b322 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	61bb      	str	r3, [r7, #24]
}
 800b294:	bf00      	nop
 800b296:	e7fe      	b.n	800b296 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b29e:	f023 0301 	bic.w	r3, r3, #1
 800b2a2:	b2da      	uxtb	r2, r3
 800b2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b2aa:	e03a      	b.n	800b322 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2b2:	f043 0301 	orr.w	r3, r3, #1
 800b2b6:	b2da      	uxtb	r2, r3
 800b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c6:	699b      	ldr	r3, [r3, #24]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10a      	bne.n	800b2e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	617b      	str	r3, [r7, #20]
}
 800b2de:	bf00      	nop
 800b2e0:	e7fe      	b.n	800b2e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e4:	699a      	ldr	r2, [r3, #24]
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	18d1      	adds	r1, r2, r3
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2f0:	f7ff ff06 	bl	800b100 <prvInsertTimerInActiveList>
					break;
 800b2f4:	e015      	b.n	800b322 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2fc:	f003 0302 	and.w	r3, r3, #2
 800b300:	2b00      	cmp	r3, #0
 800b302:	d103      	bne.n	800b30c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b306:	f000 fbdb 	bl	800bac0 <vPortFree>
 800b30a:	e00a      	b.n	800b322 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b312:	f023 0301 	bic.w	r3, r3, #1
 800b316:	b2da      	uxtb	r2, r3
 800b318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b31e:	e000      	b.n	800b322 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b320:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b322:	4b08      	ldr	r3, [pc, #32]	; (800b344 <prvProcessReceivedCommands+0x1c0>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	1d39      	adds	r1, r7, #4
 800b328:	2200      	movs	r2, #0
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fd fcca 	bl	8008cc4 <xQueueReceive>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	f47f af2a 	bne.w	800b18c <prvProcessReceivedCommands+0x8>
	}
}
 800b338:	bf00      	nop
 800b33a:	bf00      	nop
 800b33c:	3730      	adds	r7, #48	; 0x30
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20000f6c 	.word	0x20000f6c

0800b348 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b34e:	e048      	b.n	800b3e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b350:	4b2d      	ldr	r3, [pc, #180]	; (800b408 <prvSwitchTimerLists+0xc0>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b35a:	4b2b      	ldr	r3, [pc, #172]	; (800b408 <prvSwitchTimerLists+0xc0>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3304      	adds	r3, #4
 800b368:	4618      	mov	r0, r3
 800b36a:	f7fd f8eb 	bl	8008544 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6a1b      	ldr	r3, [r3, #32]
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b37c:	f003 0304 	and.w	r3, r3, #4
 800b380:	2b00      	cmp	r3, #0
 800b382:	d02e      	beq.n	800b3e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	699b      	ldr	r3, [r3, #24]
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	4413      	add	r3, r2
 800b38c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	429a      	cmp	r2, r3
 800b394:	d90e      	bls.n	800b3b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3a2:	4b19      	ldr	r3, [pc, #100]	; (800b408 <prvSwitchTimerLists+0xc0>)
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	f7fd f890 	bl	80084d2 <vListInsert>
 800b3b2:	e016      	b.n	800b3e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	693a      	ldr	r2, [r7, #16]
 800b3bc:	2100      	movs	r1, #0
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f7ff fd60 	bl	800ae84 <xTimerGenericCommand>
 800b3c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10a      	bne.n	800b3e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	603b      	str	r3, [r7, #0]
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3e2:	4b09      	ldr	r3, [pc, #36]	; (800b408 <prvSwitchTimerLists+0xc0>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1b1      	bne.n	800b350 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3ec:	4b06      	ldr	r3, [pc, #24]	; (800b408 <prvSwitchTimerLists+0xc0>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3f2:	4b06      	ldr	r3, [pc, #24]	; (800b40c <prvSwitchTimerLists+0xc4>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a04      	ldr	r2, [pc, #16]	; (800b408 <prvSwitchTimerLists+0xc0>)
 800b3f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3fa:	4a04      	ldr	r2, [pc, #16]	; (800b40c <prvSwitchTimerLists+0xc4>)
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	6013      	str	r3, [r2, #0]
}
 800b400:	bf00      	nop
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	20000f64 	.word	0x20000f64
 800b40c:	20000f68 	.word	0x20000f68

0800b410 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b416:	f000 f965 	bl	800b6e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b41a:	4b15      	ldr	r3, [pc, #84]	; (800b470 <prvCheckForValidListAndQueue+0x60>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d120      	bne.n	800b464 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b422:	4814      	ldr	r0, [pc, #80]	; (800b474 <prvCheckForValidListAndQueue+0x64>)
 800b424:	f7fd f804 	bl	8008430 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b428:	4813      	ldr	r0, [pc, #76]	; (800b478 <prvCheckForValidListAndQueue+0x68>)
 800b42a:	f7fd f801 	bl	8008430 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b42e:	4b13      	ldr	r3, [pc, #76]	; (800b47c <prvCheckForValidListAndQueue+0x6c>)
 800b430:	4a10      	ldr	r2, [pc, #64]	; (800b474 <prvCheckForValidListAndQueue+0x64>)
 800b432:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b434:	4b12      	ldr	r3, [pc, #72]	; (800b480 <prvCheckForValidListAndQueue+0x70>)
 800b436:	4a10      	ldr	r2, [pc, #64]	; (800b478 <prvCheckForValidListAndQueue+0x68>)
 800b438:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b43a:	2300      	movs	r3, #0
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	4b11      	ldr	r3, [pc, #68]	; (800b484 <prvCheckForValidListAndQueue+0x74>)
 800b440:	4a11      	ldr	r2, [pc, #68]	; (800b488 <prvCheckForValidListAndQueue+0x78>)
 800b442:	2110      	movs	r1, #16
 800b444:	200a      	movs	r0, #10
 800b446:	f7fd f90f 	bl	8008668 <xQueueGenericCreateStatic>
 800b44a:	4603      	mov	r3, r0
 800b44c:	4a08      	ldr	r2, [pc, #32]	; (800b470 <prvCheckForValidListAndQueue+0x60>)
 800b44e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b450:	4b07      	ldr	r3, [pc, #28]	; (800b470 <prvCheckForValidListAndQueue+0x60>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d005      	beq.n	800b464 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b458:	4b05      	ldr	r3, [pc, #20]	; (800b470 <prvCheckForValidListAndQueue+0x60>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	490b      	ldr	r1, [pc, #44]	; (800b48c <prvCheckForValidListAndQueue+0x7c>)
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fd ff44 	bl	80092ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b464:	f000 f96e 	bl	800b744 <vPortExitCritical>
}
 800b468:	bf00      	nop
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20000f6c 	.word	0x20000f6c
 800b474:	20000f3c 	.word	0x20000f3c
 800b478:	20000f50 	.word	0x20000f50
 800b47c:	20000f64 	.word	0x20000f64
 800b480:	20000f68 	.word	0x20000f68
 800b484:	20001018 	.word	0x20001018
 800b488:	20000f78 	.word	0x20000f78
 800b48c:	0800cca4 	.word	0x0800cca4

0800b490 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b490:	b480      	push	{r7}
 800b492:	b085      	sub	sp, #20
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	3b04      	subs	r3, #4
 800b4a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	3b04      	subs	r3, #4
 800b4ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	f023 0201 	bic.w	r2, r3, #1
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	3b04      	subs	r3, #4
 800b4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4c0:	4a0c      	ldr	r2, [pc, #48]	; (800b4f4 <pxPortInitialiseStack+0x64>)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3b14      	subs	r3, #20
 800b4ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	3b04      	subs	r3, #4
 800b4d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f06f 0202 	mvn.w	r2, #2
 800b4de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	3b20      	subs	r3, #32
 800b4e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	0800b4f9 	.word	0x0800b4f9

0800b4f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b502:	4b12      	ldr	r3, [pc, #72]	; (800b54c <prvTaskExitError+0x54>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b50a:	d00a      	beq.n	800b522 <prvTaskExitError+0x2a>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	60fb      	str	r3, [r7, #12]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <prvTaskExitError+0x28>
	__asm volatile
 800b522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	60bb      	str	r3, [r7, #8]
}
 800b534:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b536:	bf00      	nop
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d0fc      	beq.n	800b538 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b53e:	bf00      	nop
 800b540:	bf00      	nop
 800b542:	3714      	adds	r7, #20
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	20000014 	.word	0x20000014

0800b550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b550:	4b07      	ldr	r3, [pc, #28]	; (800b570 <pxCurrentTCBConst2>)
 800b552:	6819      	ldr	r1, [r3, #0]
 800b554:	6808      	ldr	r0, [r1, #0]
 800b556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55a:	f380 8809 	msr	PSP, r0
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f04f 0000 	mov.w	r0, #0
 800b566:	f380 8811 	msr	BASEPRI, r0
 800b56a:	4770      	bx	lr
 800b56c:	f3af 8000 	nop.w

0800b570 <pxCurrentTCBConst2>:
 800b570:	20000a3c 	.word	0x20000a3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b574:	bf00      	nop
 800b576:	bf00      	nop

0800b578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b578:	4808      	ldr	r0, [pc, #32]	; (800b59c <prvPortStartFirstTask+0x24>)
 800b57a:	6800      	ldr	r0, [r0, #0]
 800b57c:	6800      	ldr	r0, [r0, #0]
 800b57e:	f380 8808 	msr	MSP, r0
 800b582:	f04f 0000 	mov.w	r0, #0
 800b586:	f380 8814 	msr	CONTROL, r0
 800b58a:	b662      	cpsie	i
 800b58c:	b661      	cpsie	f
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	f3bf 8f6f 	isb	sy
 800b596:	df00      	svc	0
 800b598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b59a:	bf00      	nop
 800b59c:	e000ed08 	.word	0xe000ed08

0800b5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5a6:	4b46      	ldr	r3, [pc, #280]	; (800b6c0 <xPortStartScheduler+0x120>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a46      	ldr	r2, [pc, #280]	; (800b6c4 <xPortStartScheduler+0x124>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d10a      	bne.n	800b5c6 <xPortStartScheduler+0x26>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	613b      	str	r3, [r7, #16]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5c6:	4b3e      	ldr	r3, [pc, #248]	; (800b6c0 <xPortStartScheduler+0x120>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a3f      	ldr	r2, [pc, #252]	; (800b6c8 <xPortStartScheduler+0x128>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d10a      	bne.n	800b5e6 <xPortStartScheduler+0x46>
	__asm volatile
 800b5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	60fb      	str	r3, [r7, #12]
}
 800b5e2:	bf00      	nop
 800b5e4:	e7fe      	b.n	800b5e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5e6:	4b39      	ldr	r3, [pc, #228]	; (800b6cc <xPortStartScheduler+0x12c>)
 800b5e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	22ff      	movs	r2, #255	; 0xff
 800b5f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	b2db      	uxtb	r3, r3
 800b604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	4b31      	ldr	r3, [pc, #196]	; (800b6d0 <xPortStartScheduler+0x130>)
 800b60c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b60e:	4b31      	ldr	r3, [pc, #196]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b610:	2207      	movs	r2, #7
 800b612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b614:	e009      	b.n	800b62a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b616:	4b2f      	ldr	r3, [pc, #188]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	4a2d      	ldr	r2, [pc, #180]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b61e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b620:	78fb      	ldrb	r3, [r7, #3]
 800b622:	b2db      	uxtb	r3, r3
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	b2db      	uxtb	r3, r3
 800b628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b62a:	78fb      	ldrb	r3, [r7, #3]
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b632:	2b80      	cmp	r3, #128	; 0x80
 800b634:	d0ef      	beq.n	800b616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b636:	4b27      	ldr	r3, [pc, #156]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f1c3 0307 	rsb	r3, r3, #7
 800b63e:	2b04      	cmp	r3, #4
 800b640:	d00a      	beq.n	800b658 <xPortStartScheduler+0xb8>
	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	60bb      	str	r3, [r7, #8]
}
 800b654:	bf00      	nop
 800b656:	e7fe      	b.n	800b656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b658:	4b1e      	ldr	r3, [pc, #120]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	021b      	lsls	r3, r3, #8
 800b65e:	4a1d      	ldr	r2, [pc, #116]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b662:	4b1c      	ldr	r3, [pc, #112]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b66a:	4a1a      	ldr	r2, [pc, #104]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b66c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	b2da      	uxtb	r2, r3
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b676:	4b18      	ldr	r3, [pc, #96]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a17      	ldr	r2, [pc, #92]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b67c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b682:	4b15      	ldr	r3, [pc, #84]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a14      	ldr	r2, [pc, #80]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b68c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b68e:	f000 f8dd 	bl	800b84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b692:	4b12      	ldr	r3, [pc, #72]	; (800b6dc <xPortStartScheduler+0x13c>)
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b698:	f000 f8fc 	bl	800b894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b69c:	4b10      	ldr	r3, [pc, #64]	; (800b6e0 <xPortStartScheduler+0x140>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a0f      	ldr	r2, [pc, #60]	; (800b6e0 <xPortStartScheduler+0x140>)
 800b6a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b6a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6a8:	f7ff ff66 	bl	800b578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6ac:	f7fe fdd4 	bl	800a258 <vTaskSwitchContext>
	prvTaskExitError();
 800b6b0:	f7ff ff22 	bl	800b4f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	e000ed00 	.word	0xe000ed00
 800b6c4:	410fc271 	.word	0x410fc271
 800b6c8:	410fc270 	.word	0x410fc270
 800b6cc:	e000e400 	.word	0xe000e400
 800b6d0:	20001068 	.word	0x20001068
 800b6d4:	2000106c 	.word	0x2000106c
 800b6d8:	e000ed20 	.word	0xe000ed20
 800b6dc:	20000014 	.word	0x20000014
 800b6e0:	e000ef34 	.word	0xe000ef34

0800b6e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	607b      	str	r3, [r7, #4]
}
 800b6fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6fe:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <vPortEnterCritical+0x58>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3301      	adds	r3, #1
 800b704:	4a0d      	ldr	r2, [pc, #52]	; (800b73c <vPortEnterCritical+0x58>)
 800b706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b708:	4b0c      	ldr	r3, [pc, #48]	; (800b73c <vPortEnterCritical+0x58>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d10f      	bne.n	800b730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b710:	4b0b      	ldr	r3, [pc, #44]	; (800b740 <vPortEnterCritical+0x5c>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00a      	beq.n	800b730 <vPortEnterCritical+0x4c>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	603b      	str	r3, [r7, #0]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <vPortEnterCritical+0x4a>
	}
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	20000014 	.word	0x20000014
 800b740:	e000ed04 	.word	0xe000ed04

0800b744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b74a:	4b12      	ldr	r3, [pc, #72]	; (800b794 <vPortExitCritical+0x50>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10a      	bne.n	800b768 <vPortExitCritical+0x24>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	607b      	str	r3, [r7, #4]
}
 800b764:	bf00      	nop
 800b766:	e7fe      	b.n	800b766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b768:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <vPortExitCritical+0x50>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	4a09      	ldr	r2, [pc, #36]	; (800b794 <vPortExitCritical+0x50>)
 800b770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b772:	4b08      	ldr	r3, [pc, #32]	; (800b794 <vPortExitCritical+0x50>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d105      	bne.n	800b786 <vPortExitCritical+0x42>
 800b77a:	2300      	movs	r3, #0
 800b77c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	f383 8811 	msr	BASEPRI, r3
}
 800b784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	20000014 	.word	0x20000014
	...

0800b7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7a0:	f3ef 8009 	mrs	r0, PSP
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	4b15      	ldr	r3, [pc, #84]	; (800b800 <pxCurrentTCBConst>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	f01e 0f10 	tst.w	lr, #16
 800b7b0:	bf08      	it	eq
 800b7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ba:	6010      	str	r0, [r2, #0]
 800b7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7c4:	f380 8811 	msr	BASEPRI, r0
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f7fe fd42 	bl	800a258 <vTaskSwitchContext>
 800b7d4:	f04f 0000 	mov.w	r0, #0
 800b7d8:	f380 8811 	msr	BASEPRI, r0
 800b7dc:	bc09      	pop	{r0, r3}
 800b7de:	6819      	ldr	r1, [r3, #0]
 800b7e0:	6808      	ldr	r0, [r1, #0]
 800b7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e6:	f01e 0f10 	tst.w	lr, #16
 800b7ea:	bf08      	it	eq
 800b7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7f0:	f380 8809 	msr	PSP, r0
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	f3af 8000 	nop.w

0800b800 <pxCurrentTCBConst>:
 800b800:	20000a3c 	.word	0x20000a3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b804:	bf00      	nop
 800b806:	bf00      	nop

0800b808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	607b      	str	r3, [r7, #4]
}
 800b820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b822:	f7fe fc5f 	bl	800a0e4 <xTaskIncrementTick>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d003      	beq.n	800b834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b82c:	4b06      	ldr	r3, [pc, #24]	; (800b848 <xPortSysTickHandler+0x40>)
 800b82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	2300      	movs	r3, #0
 800b836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	f383 8811 	msr	BASEPRI, r3
}
 800b83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b840:	bf00      	nop
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	e000ed04 	.word	0xe000ed04

0800b84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b850:	4b0b      	ldr	r3, [pc, #44]	; (800b880 <vPortSetupTimerInterrupt+0x34>)
 800b852:	2200      	movs	r2, #0
 800b854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b856:	4b0b      	ldr	r3, [pc, #44]	; (800b884 <vPortSetupTimerInterrupt+0x38>)
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b85c:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <vPortSetupTimerInterrupt+0x3c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a0a      	ldr	r2, [pc, #40]	; (800b88c <vPortSetupTimerInterrupt+0x40>)
 800b862:	fba2 2303 	umull	r2, r3, r2, r3
 800b866:	099b      	lsrs	r3, r3, #6
 800b868:	4a09      	ldr	r2, [pc, #36]	; (800b890 <vPortSetupTimerInterrupt+0x44>)
 800b86a:	3b01      	subs	r3, #1
 800b86c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b86e:	4b04      	ldr	r3, [pc, #16]	; (800b880 <vPortSetupTimerInterrupt+0x34>)
 800b870:	2207      	movs	r2, #7
 800b872:	601a      	str	r2, [r3, #0]
}
 800b874:	bf00      	nop
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	e000e010 	.word	0xe000e010
 800b884:	e000e018 	.word	0xe000e018
 800b888:	20000000 	.word	0x20000000
 800b88c:	10624dd3 	.word	0x10624dd3
 800b890:	e000e014 	.word	0xe000e014

0800b894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b8a4 <vPortEnableVFP+0x10>
 800b898:	6801      	ldr	r1, [r0, #0]
 800b89a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b89e:	6001      	str	r1, [r0, #0]
 800b8a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b8a2:	bf00      	nop
 800b8a4:	e000ed88 	.word	0xe000ed88

0800b8a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8ae:	f3ef 8305 	mrs	r3, IPSR
 800b8b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b0f      	cmp	r3, #15
 800b8b8:	d914      	bls.n	800b8e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8ba:	4a17      	ldr	r2, [pc, #92]	; (800b918 <vPortValidateInterruptPriority+0x70>)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	4413      	add	r3, r2
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8c4:	4b15      	ldr	r3, [pc, #84]	; (800b91c <vPortValidateInterruptPriority+0x74>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	7afa      	ldrb	r2, [r7, #11]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d20a      	bcs.n	800b8e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	607b      	str	r3, [r7, #4]
}
 800b8e0:	bf00      	nop
 800b8e2:	e7fe      	b.n	800b8e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8e4:	4b0e      	ldr	r3, [pc, #56]	; (800b920 <vPortValidateInterruptPriority+0x78>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8ec:	4b0d      	ldr	r3, [pc, #52]	; (800b924 <vPortValidateInterruptPriority+0x7c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d90a      	bls.n	800b90a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	603b      	str	r3, [r7, #0]
}
 800b906:	bf00      	nop
 800b908:	e7fe      	b.n	800b908 <vPortValidateInterruptPriority+0x60>
	}
 800b90a:	bf00      	nop
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	e000e3f0 	.word	0xe000e3f0
 800b91c:	20001068 	.word	0x20001068
 800b920:	e000ed0c 	.word	0xe000ed0c
 800b924:	2000106c 	.word	0x2000106c

0800b928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b08a      	sub	sp, #40	; 0x28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b930:	2300      	movs	r3, #0
 800b932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b934:	f7fe fb1a 	bl	8009f6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b938:	4b5b      	ldr	r3, [pc, #364]	; (800baa8 <pvPortMalloc+0x180>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b940:	f000 f920 	bl	800bb84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b944:	4b59      	ldr	r3, [pc, #356]	; (800baac <pvPortMalloc+0x184>)
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4013      	ands	r3, r2
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f040 8093 	bne.w	800ba78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d01d      	beq.n	800b994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b958:	2208      	movs	r2, #8
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4413      	add	r3, r2
 800b95e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f003 0307 	and.w	r3, r3, #7
 800b966:	2b00      	cmp	r3, #0
 800b968:	d014      	beq.n	800b994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f023 0307 	bic.w	r3, r3, #7
 800b970:	3308      	adds	r3, #8
 800b972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f003 0307 	and.w	r3, r3, #7
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00a      	beq.n	800b994 <pvPortMalloc+0x6c>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	617b      	str	r3, [r7, #20]
}
 800b990:	bf00      	nop
 800b992:	e7fe      	b.n	800b992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d06e      	beq.n	800ba78 <pvPortMalloc+0x150>
 800b99a:	4b45      	ldr	r3, [pc, #276]	; (800bab0 <pvPortMalloc+0x188>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d869      	bhi.n	800ba78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b9a4:	4b43      	ldr	r3, [pc, #268]	; (800bab4 <pvPortMalloc+0x18c>)
 800b9a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b9a8:	4b42      	ldr	r3, [pc, #264]	; (800bab4 <pvPortMalloc+0x18c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9ae:	e004      	b.n	800b9ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d903      	bls.n	800b9cc <pvPortMalloc+0xa4>
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1f1      	bne.n	800b9b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9cc:	4b36      	ldr	r3, [pc, #216]	; (800baa8 <pvPortMalloc+0x180>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d050      	beq.n	800ba78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2208      	movs	r2, #8
 800b9dc:	4413      	add	r3, r2
 800b9de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	1ad2      	subs	r2, r2, r3
 800b9f0:	2308      	movs	r3, #8
 800b9f2:	005b      	lsls	r3, r3, #1
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d91f      	bls.n	800ba38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	f003 0307 	and.w	r3, r3, #7
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00a      	beq.n	800ba20 <pvPortMalloc+0xf8>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	613b      	str	r3, [r7, #16]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	685a      	ldr	r2, [r3, #4]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	1ad2      	subs	r2, r2, r3
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba32:	69b8      	ldr	r0, [r7, #24]
 800ba34:	f000 f908 	bl	800bc48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba38:	4b1d      	ldr	r3, [pc, #116]	; (800bab0 <pvPortMalloc+0x188>)
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	4a1b      	ldr	r2, [pc, #108]	; (800bab0 <pvPortMalloc+0x188>)
 800ba44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba46:	4b1a      	ldr	r3, [pc, #104]	; (800bab0 <pvPortMalloc+0x188>)
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	4b1b      	ldr	r3, [pc, #108]	; (800bab8 <pvPortMalloc+0x190>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d203      	bcs.n	800ba5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba52:	4b17      	ldr	r3, [pc, #92]	; (800bab0 <pvPortMalloc+0x188>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a18      	ldr	r2, [pc, #96]	; (800bab8 <pvPortMalloc+0x190>)
 800ba58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5c:	685a      	ldr	r2, [r3, #4]
 800ba5e:	4b13      	ldr	r3, [pc, #76]	; (800baac <pvPortMalloc+0x184>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	431a      	orrs	r2, r3
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba6e:	4b13      	ldr	r3, [pc, #76]	; (800babc <pvPortMalloc+0x194>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3301      	adds	r3, #1
 800ba74:	4a11      	ldr	r2, [pc, #68]	; (800babc <pvPortMalloc+0x194>)
 800ba76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba78:	f7fe fa86 	bl	8009f88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	f003 0307 	and.w	r3, r3, #7
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00a      	beq.n	800ba9c <pvPortMalloc+0x174>
	__asm volatile
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	60fb      	str	r3, [r7, #12]
}
 800ba98:	bf00      	nop
 800ba9a:	e7fe      	b.n	800ba9a <pvPortMalloc+0x172>
	return pvReturn;
 800ba9c:	69fb      	ldr	r3, [r7, #28]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3728      	adds	r7, #40	; 0x28
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20006e38 	.word	0x20006e38
 800baac:	20006e4c 	.word	0x20006e4c
 800bab0:	20006e3c 	.word	0x20006e3c
 800bab4:	20006e30 	.word	0x20006e30
 800bab8:	20006e40 	.word	0x20006e40
 800babc:	20006e44 	.word	0x20006e44

0800bac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d04d      	beq.n	800bb6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bad2:	2308      	movs	r3, #8
 800bad4:	425b      	negs	r3, r3
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	4413      	add	r3, r2
 800bada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	4b24      	ldr	r3, [pc, #144]	; (800bb78 <vPortFree+0xb8>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4013      	ands	r3, r2
 800baea:	2b00      	cmp	r3, #0
 800baec:	d10a      	bne.n	800bb04 <vPortFree+0x44>
	__asm volatile
 800baee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	60fb      	str	r3, [r7, #12]
}
 800bb00:	bf00      	nop
 800bb02:	e7fe      	b.n	800bb02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00a      	beq.n	800bb22 <vPortFree+0x62>
	__asm volatile
 800bb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb10:	f383 8811 	msr	BASEPRI, r3
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	f3bf 8f4f 	dsb	sy
 800bb1c:	60bb      	str	r3, [r7, #8]
}
 800bb1e:	bf00      	nop
 800bb20:	e7fe      	b.n	800bb20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	4b14      	ldr	r3, [pc, #80]	; (800bb78 <vPortFree+0xb8>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4013      	ands	r3, r2
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d01e      	beq.n	800bb6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d11a      	bne.n	800bb6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	4b0e      	ldr	r3, [pc, #56]	; (800bb78 <vPortFree+0xb8>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	43db      	mvns	r3, r3
 800bb42:	401a      	ands	r2, r3
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb48:	f7fe fa10 	bl	8009f6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	685a      	ldr	r2, [r3, #4]
 800bb50:	4b0a      	ldr	r3, [pc, #40]	; (800bb7c <vPortFree+0xbc>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4413      	add	r3, r2
 800bb56:	4a09      	ldr	r2, [pc, #36]	; (800bb7c <vPortFree+0xbc>)
 800bb58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb5a:	6938      	ldr	r0, [r7, #16]
 800bb5c:	f000 f874 	bl	800bc48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb60:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <vPortFree+0xc0>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	3301      	adds	r3, #1
 800bb66:	4a06      	ldr	r2, [pc, #24]	; (800bb80 <vPortFree+0xc0>)
 800bb68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb6a:	f7fe fa0d 	bl	8009f88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb6e:	bf00      	nop
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	20006e4c 	.word	0x20006e4c
 800bb7c:	20006e3c 	.word	0x20006e3c
 800bb80:	20006e48 	.word	0x20006e48

0800bb84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb8a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 800bb8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb90:	4b27      	ldr	r3, [pc, #156]	; (800bc30 <prvHeapInit+0xac>)
 800bb92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f003 0307 	and.w	r3, r3, #7
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00c      	beq.n	800bbb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3307      	adds	r3, #7
 800bba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f023 0307 	bic.w	r3, r3, #7
 800bbaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bbac:	68ba      	ldr	r2, [r7, #8]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	4a1f      	ldr	r2, [pc, #124]	; (800bc30 <prvHeapInit+0xac>)
 800bbb4:	4413      	add	r3, r2
 800bbb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bbbc:	4a1d      	ldr	r2, [pc, #116]	; (800bc34 <prvHeapInit+0xb0>)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bbc2:	4b1c      	ldr	r3, [pc, #112]	; (800bc34 <prvHeapInit+0xb0>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	68ba      	ldr	r2, [r7, #8]
 800bbcc:	4413      	add	r3, r2
 800bbce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbd0:	2208      	movs	r2, #8
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	1a9b      	subs	r3, r3, r2
 800bbd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f023 0307 	bic.w	r3, r3, #7
 800bbde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	4a15      	ldr	r2, [pc, #84]	; (800bc38 <prvHeapInit+0xb4>)
 800bbe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbe6:	4b14      	ldr	r3, [pc, #80]	; (800bc38 <prvHeapInit+0xb4>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2200      	movs	r2, #0
 800bbec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbee:	4b12      	ldr	r3, [pc, #72]	; (800bc38 <prvHeapInit+0xb4>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	1ad2      	subs	r2, r2, r3
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc04:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <prvHeapInit+0xb4>)
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	4a0a      	ldr	r2, [pc, #40]	; (800bc3c <prvHeapInit+0xb8>)
 800bc12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	4a09      	ldr	r2, [pc, #36]	; (800bc40 <prvHeapInit+0xbc>)
 800bc1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc1c:	4b09      	ldr	r3, [pc, #36]	; (800bc44 <prvHeapInit+0xc0>)
 800bc1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc22:	601a      	str	r2, [r3, #0]
}
 800bc24:	bf00      	nop
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	20001070 	.word	0x20001070
 800bc34:	20006e30 	.word	0x20006e30
 800bc38:	20006e38 	.word	0x20006e38
 800bc3c:	20006e40 	.word	0x20006e40
 800bc40:	20006e3c 	.word	0x20006e3c
 800bc44:	20006e4c 	.word	0x20006e4c

0800bc48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc50:	4b28      	ldr	r3, [pc, #160]	; (800bcf4 <prvInsertBlockIntoFreeList+0xac>)
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	e002      	b.n	800bc5c <prvInsertBlockIntoFreeList+0x14>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	60fb      	str	r3, [r7, #12]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d8f7      	bhi.n	800bc56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	4413      	add	r3, r2
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d108      	bne.n	800bc8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	441a      	add	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	441a      	add	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d118      	bne.n	800bcd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	4b15      	ldr	r3, [pc, #84]	; (800bcf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d00d      	beq.n	800bcc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	685a      	ldr	r2, [r3, #4]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	441a      	add	r2, r3
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	e008      	b.n	800bcd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bcc6:	4b0c      	ldr	r3, [pc, #48]	; (800bcf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	e003      	b.n	800bcd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d002      	beq.n	800bce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bce6:	bf00      	nop
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	20006e30 	.word	0x20006e30
 800bcf8:	20006e38 	.word	0x20006e38

0800bcfc <atoi>:
 800bcfc:	220a      	movs	r2, #10
 800bcfe:	2100      	movs	r1, #0
 800bd00:	f000 ba78 	b.w	800c1f4 <strtol>

0800bd04 <__errno>:
 800bd04:	4b01      	ldr	r3, [pc, #4]	; (800bd0c <__errno+0x8>)
 800bd06:	6818      	ldr	r0, [r3, #0]
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	20000018 	.word	0x20000018

0800bd10 <__libc_init_array>:
 800bd10:	b570      	push	{r4, r5, r6, lr}
 800bd12:	4d0d      	ldr	r5, [pc, #52]	; (800bd48 <__libc_init_array+0x38>)
 800bd14:	4c0d      	ldr	r4, [pc, #52]	; (800bd4c <__libc_init_array+0x3c>)
 800bd16:	1b64      	subs	r4, r4, r5
 800bd18:	10a4      	asrs	r4, r4, #2
 800bd1a:	2600      	movs	r6, #0
 800bd1c:	42a6      	cmp	r6, r4
 800bd1e:	d109      	bne.n	800bd34 <__libc_init_array+0x24>
 800bd20:	4d0b      	ldr	r5, [pc, #44]	; (800bd50 <__libc_init_array+0x40>)
 800bd22:	4c0c      	ldr	r4, [pc, #48]	; (800bd54 <__libc_init_array+0x44>)
 800bd24:	f000 ff46 	bl	800cbb4 <_init>
 800bd28:	1b64      	subs	r4, r4, r5
 800bd2a:	10a4      	asrs	r4, r4, #2
 800bd2c:	2600      	movs	r6, #0
 800bd2e:	42a6      	cmp	r6, r4
 800bd30:	d105      	bne.n	800bd3e <__libc_init_array+0x2e>
 800bd32:	bd70      	pop	{r4, r5, r6, pc}
 800bd34:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd38:	4798      	blx	r3
 800bd3a:	3601      	adds	r6, #1
 800bd3c:	e7ee      	b.n	800bd1c <__libc_init_array+0xc>
 800bd3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd42:	4798      	blx	r3
 800bd44:	3601      	adds	r6, #1
 800bd46:	e7f2      	b.n	800bd2e <__libc_init_array+0x1e>
 800bd48:	0800d030 	.word	0x0800d030
 800bd4c:	0800d030 	.word	0x0800d030
 800bd50:	0800d030 	.word	0x0800d030
 800bd54:	0800d034 	.word	0x0800d034

0800bd58 <__itoa>:
 800bd58:	1e93      	subs	r3, r2, #2
 800bd5a:	2b22      	cmp	r3, #34	; 0x22
 800bd5c:	b510      	push	{r4, lr}
 800bd5e:	460c      	mov	r4, r1
 800bd60:	d904      	bls.n	800bd6c <__itoa+0x14>
 800bd62:	2300      	movs	r3, #0
 800bd64:	700b      	strb	r3, [r1, #0]
 800bd66:	461c      	mov	r4, r3
 800bd68:	4620      	mov	r0, r4
 800bd6a:	bd10      	pop	{r4, pc}
 800bd6c:	2a0a      	cmp	r2, #10
 800bd6e:	d109      	bne.n	800bd84 <__itoa+0x2c>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	da07      	bge.n	800bd84 <__itoa+0x2c>
 800bd74:	232d      	movs	r3, #45	; 0x2d
 800bd76:	700b      	strb	r3, [r1, #0]
 800bd78:	4240      	negs	r0, r0
 800bd7a:	2101      	movs	r1, #1
 800bd7c:	4421      	add	r1, r4
 800bd7e:	f000 fa43 	bl	800c208 <__utoa>
 800bd82:	e7f1      	b.n	800bd68 <__itoa+0x10>
 800bd84:	2100      	movs	r1, #0
 800bd86:	e7f9      	b.n	800bd7c <__itoa+0x24>

0800bd88 <itoa>:
 800bd88:	f7ff bfe6 	b.w	800bd58 <__itoa>

0800bd8c <__retarget_lock_acquire_recursive>:
 800bd8c:	4770      	bx	lr

0800bd8e <__retarget_lock_release_recursive>:
 800bd8e:	4770      	bx	lr

0800bd90 <malloc>:
 800bd90:	4b02      	ldr	r3, [pc, #8]	; (800bd9c <malloc+0xc>)
 800bd92:	4601      	mov	r1, r0
 800bd94:	6818      	ldr	r0, [r3, #0]
 800bd96:	f000 b885 	b.w	800bea4 <_malloc_r>
 800bd9a:	bf00      	nop
 800bd9c:	20000018 	.word	0x20000018

0800bda0 <memcpy>:
 800bda0:	440a      	add	r2, r1
 800bda2:	4291      	cmp	r1, r2
 800bda4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bda8:	d100      	bne.n	800bdac <memcpy+0xc>
 800bdaa:	4770      	bx	lr
 800bdac:	b510      	push	{r4, lr}
 800bdae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdb6:	4291      	cmp	r1, r2
 800bdb8:	d1f9      	bne.n	800bdae <memcpy+0xe>
 800bdba:	bd10      	pop	{r4, pc}

0800bdbc <memset>:
 800bdbc:	4402      	add	r2, r0
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d100      	bne.n	800bdc6 <memset+0xa>
 800bdc4:	4770      	bx	lr
 800bdc6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdca:	e7f9      	b.n	800bdc0 <memset+0x4>

0800bdcc <_free_r>:
 800bdcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdce:	2900      	cmp	r1, #0
 800bdd0:	d044      	beq.n	800be5c <_free_r+0x90>
 800bdd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdd6:	9001      	str	r0, [sp, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f1a1 0404 	sub.w	r4, r1, #4
 800bdde:	bfb8      	it	lt
 800bde0:	18e4      	addlt	r4, r4, r3
 800bde2:	f000 fa53 	bl	800c28c <__malloc_lock>
 800bde6:	4a1e      	ldr	r2, [pc, #120]	; (800be60 <_free_r+0x94>)
 800bde8:	9801      	ldr	r0, [sp, #4]
 800bdea:	6813      	ldr	r3, [r2, #0]
 800bdec:	b933      	cbnz	r3, 800bdfc <_free_r+0x30>
 800bdee:	6063      	str	r3, [r4, #4]
 800bdf0:	6014      	str	r4, [r2, #0]
 800bdf2:	b003      	add	sp, #12
 800bdf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdf8:	f000 ba4e 	b.w	800c298 <__malloc_unlock>
 800bdfc:	42a3      	cmp	r3, r4
 800bdfe:	d908      	bls.n	800be12 <_free_r+0x46>
 800be00:	6825      	ldr	r5, [r4, #0]
 800be02:	1961      	adds	r1, r4, r5
 800be04:	428b      	cmp	r3, r1
 800be06:	bf01      	itttt	eq
 800be08:	6819      	ldreq	r1, [r3, #0]
 800be0a:	685b      	ldreq	r3, [r3, #4]
 800be0c:	1949      	addeq	r1, r1, r5
 800be0e:	6021      	streq	r1, [r4, #0]
 800be10:	e7ed      	b.n	800bdee <_free_r+0x22>
 800be12:	461a      	mov	r2, r3
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	b10b      	cbz	r3, 800be1c <_free_r+0x50>
 800be18:	42a3      	cmp	r3, r4
 800be1a:	d9fa      	bls.n	800be12 <_free_r+0x46>
 800be1c:	6811      	ldr	r1, [r2, #0]
 800be1e:	1855      	adds	r5, r2, r1
 800be20:	42a5      	cmp	r5, r4
 800be22:	d10b      	bne.n	800be3c <_free_r+0x70>
 800be24:	6824      	ldr	r4, [r4, #0]
 800be26:	4421      	add	r1, r4
 800be28:	1854      	adds	r4, r2, r1
 800be2a:	42a3      	cmp	r3, r4
 800be2c:	6011      	str	r1, [r2, #0]
 800be2e:	d1e0      	bne.n	800bdf2 <_free_r+0x26>
 800be30:	681c      	ldr	r4, [r3, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	6053      	str	r3, [r2, #4]
 800be36:	4421      	add	r1, r4
 800be38:	6011      	str	r1, [r2, #0]
 800be3a:	e7da      	b.n	800bdf2 <_free_r+0x26>
 800be3c:	d902      	bls.n	800be44 <_free_r+0x78>
 800be3e:	230c      	movs	r3, #12
 800be40:	6003      	str	r3, [r0, #0]
 800be42:	e7d6      	b.n	800bdf2 <_free_r+0x26>
 800be44:	6825      	ldr	r5, [r4, #0]
 800be46:	1961      	adds	r1, r4, r5
 800be48:	428b      	cmp	r3, r1
 800be4a:	bf04      	itt	eq
 800be4c:	6819      	ldreq	r1, [r3, #0]
 800be4e:	685b      	ldreq	r3, [r3, #4]
 800be50:	6063      	str	r3, [r4, #4]
 800be52:	bf04      	itt	eq
 800be54:	1949      	addeq	r1, r1, r5
 800be56:	6021      	streq	r1, [r4, #0]
 800be58:	6054      	str	r4, [r2, #4]
 800be5a:	e7ca      	b.n	800bdf2 <_free_r+0x26>
 800be5c:	b003      	add	sp, #12
 800be5e:	bd30      	pop	{r4, r5, pc}
 800be60:	20006e54 	.word	0x20006e54

0800be64 <sbrk_aligned>:
 800be64:	b570      	push	{r4, r5, r6, lr}
 800be66:	4e0e      	ldr	r6, [pc, #56]	; (800bea0 <sbrk_aligned+0x3c>)
 800be68:	460c      	mov	r4, r1
 800be6a:	6831      	ldr	r1, [r6, #0]
 800be6c:	4605      	mov	r5, r0
 800be6e:	b911      	cbnz	r1, 800be76 <sbrk_aligned+0x12>
 800be70:	f000 f8f6 	bl	800c060 <_sbrk_r>
 800be74:	6030      	str	r0, [r6, #0]
 800be76:	4621      	mov	r1, r4
 800be78:	4628      	mov	r0, r5
 800be7a:	f000 f8f1 	bl	800c060 <_sbrk_r>
 800be7e:	1c43      	adds	r3, r0, #1
 800be80:	d00a      	beq.n	800be98 <sbrk_aligned+0x34>
 800be82:	1cc4      	adds	r4, r0, #3
 800be84:	f024 0403 	bic.w	r4, r4, #3
 800be88:	42a0      	cmp	r0, r4
 800be8a:	d007      	beq.n	800be9c <sbrk_aligned+0x38>
 800be8c:	1a21      	subs	r1, r4, r0
 800be8e:	4628      	mov	r0, r5
 800be90:	f000 f8e6 	bl	800c060 <_sbrk_r>
 800be94:	3001      	adds	r0, #1
 800be96:	d101      	bne.n	800be9c <sbrk_aligned+0x38>
 800be98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800be9c:	4620      	mov	r0, r4
 800be9e:	bd70      	pop	{r4, r5, r6, pc}
 800bea0:	20006e58 	.word	0x20006e58

0800bea4 <_malloc_r>:
 800bea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea8:	1ccd      	adds	r5, r1, #3
 800beaa:	f025 0503 	bic.w	r5, r5, #3
 800beae:	3508      	adds	r5, #8
 800beb0:	2d0c      	cmp	r5, #12
 800beb2:	bf38      	it	cc
 800beb4:	250c      	movcc	r5, #12
 800beb6:	2d00      	cmp	r5, #0
 800beb8:	4607      	mov	r7, r0
 800beba:	db01      	blt.n	800bec0 <_malloc_r+0x1c>
 800bebc:	42a9      	cmp	r1, r5
 800bebe:	d905      	bls.n	800becc <_malloc_r+0x28>
 800bec0:	230c      	movs	r3, #12
 800bec2:	603b      	str	r3, [r7, #0]
 800bec4:	2600      	movs	r6, #0
 800bec6:	4630      	mov	r0, r6
 800bec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800becc:	4e2e      	ldr	r6, [pc, #184]	; (800bf88 <_malloc_r+0xe4>)
 800bece:	f000 f9dd 	bl	800c28c <__malloc_lock>
 800bed2:	6833      	ldr	r3, [r6, #0]
 800bed4:	461c      	mov	r4, r3
 800bed6:	bb34      	cbnz	r4, 800bf26 <_malloc_r+0x82>
 800bed8:	4629      	mov	r1, r5
 800beda:	4638      	mov	r0, r7
 800bedc:	f7ff ffc2 	bl	800be64 <sbrk_aligned>
 800bee0:	1c43      	adds	r3, r0, #1
 800bee2:	4604      	mov	r4, r0
 800bee4:	d14d      	bne.n	800bf82 <_malloc_r+0xde>
 800bee6:	6834      	ldr	r4, [r6, #0]
 800bee8:	4626      	mov	r6, r4
 800beea:	2e00      	cmp	r6, #0
 800beec:	d140      	bne.n	800bf70 <_malloc_r+0xcc>
 800beee:	6823      	ldr	r3, [r4, #0]
 800bef0:	4631      	mov	r1, r6
 800bef2:	4638      	mov	r0, r7
 800bef4:	eb04 0803 	add.w	r8, r4, r3
 800bef8:	f000 f8b2 	bl	800c060 <_sbrk_r>
 800befc:	4580      	cmp	r8, r0
 800befe:	d13a      	bne.n	800bf76 <_malloc_r+0xd2>
 800bf00:	6821      	ldr	r1, [r4, #0]
 800bf02:	3503      	adds	r5, #3
 800bf04:	1a6d      	subs	r5, r5, r1
 800bf06:	f025 0503 	bic.w	r5, r5, #3
 800bf0a:	3508      	adds	r5, #8
 800bf0c:	2d0c      	cmp	r5, #12
 800bf0e:	bf38      	it	cc
 800bf10:	250c      	movcc	r5, #12
 800bf12:	4629      	mov	r1, r5
 800bf14:	4638      	mov	r0, r7
 800bf16:	f7ff ffa5 	bl	800be64 <sbrk_aligned>
 800bf1a:	3001      	adds	r0, #1
 800bf1c:	d02b      	beq.n	800bf76 <_malloc_r+0xd2>
 800bf1e:	6823      	ldr	r3, [r4, #0]
 800bf20:	442b      	add	r3, r5
 800bf22:	6023      	str	r3, [r4, #0]
 800bf24:	e00e      	b.n	800bf44 <_malloc_r+0xa0>
 800bf26:	6822      	ldr	r2, [r4, #0]
 800bf28:	1b52      	subs	r2, r2, r5
 800bf2a:	d41e      	bmi.n	800bf6a <_malloc_r+0xc6>
 800bf2c:	2a0b      	cmp	r2, #11
 800bf2e:	d916      	bls.n	800bf5e <_malloc_r+0xba>
 800bf30:	1961      	adds	r1, r4, r5
 800bf32:	42a3      	cmp	r3, r4
 800bf34:	6025      	str	r5, [r4, #0]
 800bf36:	bf18      	it	ne
 800bf38:	6059      	strne	r1, [r3, #4]
 800bf3a:	6863      	ldr	r3, [r4, #4]
 800bf3c:	bf08      	it	eq
 800bf3e:	6031      	streq	r1, [r6, #0]
 800bf40:	5162      	str	r2, [r4, r5]
 800bf42:	604b      	str	r3, [r1, #4]
 800bf44:	4638      	mov	r0, r7
 800bf46:	f104 060b 	add.w	r6, r4, #11
 800bf4a:	f000 f9a5 	bl	800c298 <__malloc_unlock>
 800bf4e:	f026 0607 	bic.w	r6, r6, #7
 800bf52:	1d23      	adds	r3, r4, #4
 800bf54:	1af2      	subs	r2, r6, r3
 800bf56:	d0b6      	beq.n	800bec6 <_malloc_r+0x22>
 800bf58:	1b9b      	subs	r3, r3, r6
 800bf5a:	50a3      	str	r3, [r4, r2]
 800bf5c:	e7b3      	b.n	800bec6 <_malloc_r+0x22>
 800bf5e:	6862      	ldr	r2, [r4, #4]
 800bf60:	42a3      	cmp	r3, r4
 800bf62:	bf0c      	ite	eq
 800bf64:	6032      	streq	r2, [r6, #0]
 800bf66:	605a      	strne	r2, [r3, #4]
 800bf68:	e7ec      	b.n	800bf44 <_malloc_r+0xa0>
 800bf6a:	4623      	mov	r3, r4
 800bf6c:	6864      	ldr	r4, [r4, #4]
 800bf6e:	e7b2      	b.n	800bed6 <_malloc_r+0x32>
 800bf70:	4634      	mov	r4, r6
 800bf72:	6876      	ldr	r6, [r6, #4]
 800bf74:	e7b9      	b.n	800beea <_malloc_r+0x46>
 800bf76:	230c      	movs	r3, #12
 800bf78:	603b      	str	r3, [r7, #0]
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	f000 f98c 	bl	800c298 <__malloc_unlock>
 800bf80:	e7a1      	b.n	800bec6 <_malloc_r+0x22>
 800bf82:	6025      	str	r5, [r4, #0]
 800bf84:	e7de      	b.n	800bf44 <_malloc_r+0xa0>
 800bf86:	bf00      	nop
 800bf88:	20006e54 	.word	0x20006e54

0800bf8c <cleanup_glue>:
 800bf8c:	b538      	push	{r3, r4, r5, lr}
 800bf8e:	460c      	mov	r4, r1
 800bf90:	6809      	ldr	r1, [r1, #0]
 800bf92:	4605      	mov	r5, r0
 800bf94:	b109      	cbz	r1, 800bf9a <cleanup_glue+0xe>
 800bf96:	f7ff fff9 	bl	800bf8c <cleanup_glue>
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfa2:	f7ff bf13 	b.w	800bdcc <_free_r>
	...

0800bfa8 <_reclaim_reent>:
 800bfa8:	4b2c      	ldr	r3, [pc, #176]	; (800c05c <_reclaim_reent+0xb4>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4283      	cmp	r3, r0
 800bfae:	b570      	push	{r4, r5, r6, lr}
 800bfb0:	4604      	mov	r4, r0
 800bfb2:	d051      	beq.n	800c058 <_reclaim_reent+0xb0>
 800bfb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bfb6:	b143      	cbz	r3, 800bfca <_reclaim_reent+0x22>
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d14a      	bne.n	800c054 <_reclaim_reent+0xac>
 800bfbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfc0:	6819      	ldr	r1, [r3, #0]
 800bfc2:	b111      	cbz	r1, 800bfca <_reclaim_reent+0x22>
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f7ff ff01 	bl	800bdcc <_free_r>
 800bfca:	6961      	ldr	r1, [r4, #20]
 800bfcc:	b111      	cbz	r1, 800bfd4 <_reclaim_reent+0x2c>
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f7ff fefc 	bl	800bdcc <_free_r>
 800bfd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bfd6:	b111      	cbz	r1, 800bfde <_reclaim_reent+0x36>
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f7ff fef7 	bl	800bdcc <_free_r>
 800bfde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bfe0:	b111      	cbz	r1, 800bfe8 <_reclaim_reent+0x40>
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f7ff fef2 	bl	800bdcc <_free_r>
 800bfe8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bfea:	b111      	cbz	r1, 800bff2 <_reclaim_reent+0x4a>
 800bfec:	4620      	mov	r0, r4
 800bfee:	f7ff feed 	bl	800bdcc <_free_r>
 800bff2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bff4:	b111      	cbz	r1, 800bffc <_reclaim_reent+0x54>
 800bff6:	4620      	mov	r0, r4
 800bff8:	f7ff fee8 	bl	800bdcc <_free_r>
 800bffc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bffe:	b111      	cbz	r1, 800c006 <_reclaim_reent+0x5e>
 800c000:	4620      	mov	r0, r4
 800c002:	f7ff fee3 	bl	800bdcc <_free_r>
 800c006:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c008:	b111      	cbz	r1, 800c010 <_reclaim_reent+0x68>
 800c00a:	4620      	mov	r0, r4
 800c00c:	f7ff fede 	bl	800bdcc <_free_r>
 800c010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c012:	b111      	cbz	r1, 800c01a <_reclaim_reent+0x72>
 800c014:	4620      	mov	r0, r4
 800c016:	f7ff fed9 	bl	800bdcc <_free_r>
 800c01a:	69a3      	ldr	r3, [r4, #24]
 800c01c:	b1e3      	cbz	r3, 800c058 <_reclaim_reent+0xb0>
 800c01e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c020:	4620      	mov	r0, r4
 800c022:	4798      	blx	r3
 800c024:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c026:	b1b9      	cbz	r1, 800c058 <_reclaim_reent+0xb0>
 800c028:	4620      	mov	r0, r4
 800c02a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c02e:	f7ff bfad 	b.w	800bf8c <cleanup_glue>
 800c032:	5949      	ldr	r1, [r1, r5]
 800c034:	b941      	cbnz	r1, 800c048 <_reclaim_reent+0xa0>
 800c036:	3504      	adds	r5, #4
 800c038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c03a:	2d80      	cmp	r5, #128	; 0x80
 800c03c:	68d9      	ldr	r1, [r3, #12]
 800c03e:	d1f8      	bne.n	800c032 <_reclaim_reent+0x8a>
 800c040:	4620      	mov	r0, r4
 800c042:	f7ff fec3 	bl	800bdcc <_free_r>
 800c046:	e7ba      	b.n	800bfbe <_reclaim_reent+0x16>
 800c048:	680e      	ldr	r6, [r1, #0]
 800c04a:	4620      	mov	r0, r4
 800c04c:	f7ff febe 	bl	800bdcc <_free_r>
 800c050:	4631      	mov	r1, r6
 800c052:	e7ef      	b.n	800c034 <_reclaim_reent+0x8c>
 800c054:	2500      	movs	r5, #0
 800c056:	e7ef      	b.n	800c038 <_reclaim_reent+0x90>
 800c058:	bd70      	pop	{r4, r5, r6, pc}
 800c05a:	bf00      	nop
 800c05c:	20000018 	.word	0x20000018

0800c060 <_sbrk_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	4d06      	ldr	r5, [pc, #24]	; (800c07c <_sbrk_r+0x1c>)
 800c064:	2300      	movs	r3, #0
 800c066:	4604      	mov	r4, r0
 800c068:	4608      	mov	r0, r1
 800c06a:	602b      	str	r3, [r5, #0]
 800c06c:	f7f5 fcfe 	bl	8001a6c <_sbrk>
 800c070:	1c43      	adds	r3, r0, #1
 800c072:	d102      	bne.n	800c07a <_sbrk_r+0x1a>
 800c074:	682b      	ldr	r3, [r5, #0]
 800c076:	b103      	cbz	r3, 800c07a <_sbrk_r+0x1a>
 800c078:	6023      	str	r3, [r4, #0]
 800c07a:	bd38      	pop	{r3, r4, r5, pc}
 800c07c:	20006e5c 	.word	0x20006e5c

0800c080 <siscanf>:
 800c080:	b40e      	push	{r1, r2, r3}
 800c082:	b510      	push	{r4, lr}
 800c084:	b09f      	sub	sp, #124	; 0x7c
 800c086:	ac21      	add	r4, sp, #132	; 0x84
 800c088:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c08c:	f854 2b04 	ldr.w	r2, [r4], #4
 800c090:	9201      	str	r2, [sp, #4]
 800c092:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c096:	9004      	str	r0, [sp, #16]
 800c098:	9008      	str	r0, [sp, #32]
 800c09a:	f7f4 f899 	bl	80001d0 <strlen>
 800c09e:	4b0c      	ldr	r3, [pc, #48]	; (800c0d0 <siscanf+0x50>)
 800c0a0:	9005      	str	r0, [sp, #20]
 800c0a2:	9009      	str	r0, [sp, #36]	; 0x24
 800c0a4:	930d      	str	r3, [sp, #52]	; 0x34
 800c0a6:	480b      	ldr	r0, [pc, #44]	; (800c0d4 <siscanf+0x54>)
 800c0a8:	9a01      	ldr	r2, [sp, #4]
 800c0aa:	6800      	ldr	r0, [r0, #0]
 800c0ac:	9403      	str	r4, [sp, #12]
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	9311      	str	r3, [sp, #68]	; 0x44
 800c0b2:	9316      	str	r3, [sp, #88]	; 0x58
 800c0b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c0bc:	a904      	add	r1, sp, #16
 800c0be:	4623      	mov	r3, r4
 800c0c0:	f000 f94a 	bl	800c358 <__ssvfiscanf_r>
 800c0c4:	b01f      	add	sp, #124	; 0x7c
 800c0c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ca:	b003      	add	sp, #12
 800c0cc:	4770      	bx	lr
 800c0ce:	bf00      	nop
 800c0d0:	0800c0d9 	.word	0x0800c0d9
 800c0d4:	20000018 	.word	0x20000018

0800c0d8 <__seofread>:
 800c0d8:	2000      	movs	r0, #0
 800c0da:	4770      	bx	lr

0800c0dc <strcpy>:
 800c0dc:	4603      	mov	r3, r0
 800c0de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0e2:	f803 2b01 	strb.w	r2, [r3], #1
 800c0e6:	2a00      	cmp	r2, #0
 800c0e8:	d1f9      	bne.n	800c0de <strcpy+0x2>
 800c0ea:	4770      	bx	lr

0800c0ec <_strtol_l.constprop.0>:
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0f2:	d001      	beq.n	800c0f8 <_strtol_l.constprop.0+0xc>
 800c0f4:	2b24      	cmp	r3, #36	; 0x24
 800c0f6:	d906      	bls.n	800c106 <_strtol_l.constprop.0+0x1a>
 800c0f8:	f7ff fe04 	bl	800bd04 <__errno>
 800c0fc:	2316      	movs	r3, #22
 800c0fe:	6003      	str	r3, [r0, #0]
 800c100:	2000      	movs	r0, #0
 800c102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c106:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c1ec <_strtol_l.constprop.0+0x100>
 800c10a:	460d      	mov	r5, r1
 800c10c:	462e      	mov	r6, r5
 800c10e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c112:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c116:	f017 0708 	ands.w	r7, r7, #8
 800c11a:	d1f7      	bne.n	800c10c <_strtol_l.constprop.0+0x20>
 800c11c:	2c2d      	cmp	r4, #45	; 0x2d
 800c11e:	d132      	bne.n	800c186 <_strtol_l.constprop.0+0x9a>
 800c120:	782c      	ldrb	r4, [r5, #0]
 800c122:	2701      	movs	r7, #1
 800c124:	1cb5      	adds	r5, r6, #2
 800c126:	2b00      	cmp	r3, #0
 800c128:	d05b      	beq.n	800c1e2 <_strtol_l.constprop.0+0xf6>
 800c12a:	2b10      	cmp	r3, #16
 800c12c:	d109      	bne.n	800c142 <_strtol_l.constprop.0+0x56>
 800c12e:	2c30      	cmp	r4, #48	; 0x30
 800c130:	d107      	bne.n	800c142 <_strtol_l.constprop.0+0x56>
 800c132:	782c      	ldrb	r4, [r5, #0]
 800c134:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c138:	2c58      	cmp	r4, #88	; 0x58
 800c13a:	d14d      	bne.n	800c1d8 <_strtol_l.constprop.0+0xec>
 800c13c:	786c      	ldrb	r4, [r5, #1]
 800c13e:	2310      	movs	r3, #16
 800c140:	3502      	adds	r5, #2
 800c142:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c146:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c14a:	f04f 0c00 	mov.w	ip, #0
 800c14e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c152:	4666      	mov	r6, ip
 800c154:	fb03 8a19 	mls	sl, r3, r9, r8
 800c158:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c15c:	f1be 0f09 	cmp.w	lr, #9
 800c160:	d816      	bhi.n	800c190 <_strtol_l.constprop.0+0xa4>
 800c162:	4674      	mov	r4, lr
 800c164:	42a3      	cmp	r3, r4
 800c166:	dd24      	ble.n	800c1b2 <_strtol_l.constprop.0+0xc6>
 800c168:	f1bc 0f00 	cmp.w	ip, #0
 800c16c:	db1e      	blt.n	800c1ac <_strtol_l.constprop.0+0xc0>
 800c16e:	45b1      	cmp	r9, r6
 800c170:	d31c      	bcc.n	800c1ac <_strtol_l.constprop.0+0xc0>
 800c172:	d101      	bne.n	800c178 <_strtol_l.constprop.0+0x8c>
 800c174:	45a2      	cmp	sl, r4
 800c176:	db19      	blt.n	800c1ac <_strtol_l.constprop.0+0xc0>
 800c178:	fb06 4603 	mla	r6, r6, r3, r4
 800c17c:	f04f 0c01 	mov.w	ip, #1
 800c180:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c184:	e7e8      	b.n	800c158 <_strtol_l.constprop.0+0x6c>
 800c186:	2c2b      	cmp	r4, #43	; 0x2b
 800c188:	bf04      	itt	eq
 800c18a:	782c      	ldrbeq	r4, [r5, #0]
 800c18c:	1cb5      	addeq	r5, r6, #2
 800c18e:	e7ca      	b.n	800c126 <_strtol_l.constprop.0+0x3a>
 800c190:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c194:	f1be 0f19 	cmp.w	lr, #25
 800c198:	d801      	bhi.n	800c19e <_strtol_l.constprop.0+0xb2>
 800c19a:	3c37      	subs	r4, #55	; 0x37
 800c19c:	e7e2      	b.n	800c164 <_strtol_l.constprop.0+0x78>
 800c19e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c1a2:	f1be 0f19 	cmp.w	lr, #25
 800c1a6:	d804      	bhi.n	800c1b2 <_strtol_l.constprop.0+0xc6>
 800c1a8:	3c57      	subs	r4, #87	; 0x57
 800c1aa:	e7db      	b.n	800c164 <_strtol_l.constprop.0+0x78>
 800c1ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c1b0:	e7e6      	b.n	800c180 <_strtol_l.constprop.0+0x94>
 800c1b2:	f1bc 0f00 	cmp.w	ip, #0
 800c1b6:	da05      	bge.n	800c1c4 <_strtol_l.constprop.0+0xd8>
 800c1b8:	2322      	movs	r3, #34	; 0x22
 800c1ba:	6003      	str	r3, [r0, #0]
 800c1bc:	4646      	mov	r6, r8
 800c1be:	b942      	cbnz	r2, 800c1d2 <_strtol_l.constprop.0+0xe6>
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	e79e      	b.n	800c102 <_strtol_l.constprop.0+0x16>
 800c1c4:	b107      	cbz	r7, 800c1c8 <_strtol_l.constprop.0+0xdc>
 800c1c6:	4276      	negs	r6, r6
 800c1c8:	2a00      	cmp	r2, #0
 800c1ca:	d0f9      	beq.n	800c1c0 <_strtol_l.constprop.0+0xd4>
 800c1cc:	f1bc 0f00 	cmp.w	ip, #0
 800c1d0:	d000      	beq.n	800c1d4 <_strtol_l.constprop.0+0xe8>
 800c1d2:	1e69      	subs	r1, r5, #1
 800c1d4:	6011      	str	r1, [r2, #0]
 800c1d6:	e7f3      	b.n	800c1c0 <_strtol_l.constprop.0+0xd4>
 800c1d8:	2430      	movs	r4, #48	; 0x30
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1b1      	bne.n	800c142 <_strtol_l.constprop.0+0x56>
 800c1de:	2308      	movs	r3, #8
 800c1e0:	e7af      	b.n	800c142 <_strtol_l.constprop.0+0x56>
 800c1e2:	2c30      	cmp	r4, #48	; 0x30
 800c1e4:	d0a5      	beq.n	800c132 <_strtol_l.constprop.0+0x46>
 800c1e6:	230a      	movs	r3, #10
 800c1e8:	e7ab      	b.n	800c142 <_strtol_l.constprop.0+0x56>
 800c1ea:	bf00      	nop
 800c1ec:	0800cf06 	.word	0x0800cf06

0800c1f0 <_strtol_r>:
 800c1f0:	f7ff bf7c 	b.w	800c0ec <_strtol_l.constprop.0>

0800c1f4 <strtol>:
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	460a      	mov	r2, r1
 800c1f8:	4601      	mov	r1, r0
 800c1fa:	4802      	ldr	r0, [pc, #8]	; (800c204 <strtol+0x10>)
 800c1fc:	6800      	ldr	r0, [r0, #0]
 800c1fe:	f7ff bf75 	b.w	800c0ec <_strtol_l.constprop.0>
 800c202:	bf00      	nop
 800c204:	20000018 	.word	0x20000018

0800c208 <__utoa>:
 800c208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c20a:	4c1f      	ldr	r4, [pc, #124]	; (800c288 <__utoa+0x80>)
 800c20c:	b08b      	sub	sp, #44	; 0x2c
 800c20e:	4605      	mov	r5, r0
 800c210:	460b      	mov	r3, r1
 800c212:	466e      	mov	r6, sp
 800c214:	f104 0c20 	add.w	ip, r4, #32
 800c218:	6820      	ldr	r0, [r4, #0]
 800c21a:	6861      	ldr	r1, [r4, #4]
 800c21c:	4637      	mov	r7, r6
 800c21e:	c703      	stmia	r7!, {r0, r1}
 800c220:	3408      	adds	r4, #8
 800c222:	4564      	cmp	r4, ip
 800c224:	463e      	mov	r6, r7
 800c226:	d1f7      	bne.n	800c218 <__utoa+0x10>
 800c228:	7921      	ldrb	r1, [r4, #4]
 800c22a:	7139      	strb	r1, [r7, #4]
 800c22c:	1e91      	subs	r1, r2, #2
 800c22e:	6820      	ldr	r0, [r4, #0]
 800c230:	6038      	str	r0, [r7, #0]
 800c232:	2922      	cmp	r1, #34	; 0x22
 800c234:	f04f 0100 	mov.w	r1, #0
 800c238:	d904      	bls.n	800c244 <__utoa+0x3c>
 800c23a:	7019      	strb	r1, [r3, #0]
 800c23c:	460b      	mov	r3, r1
 800c23e:	4618      	mov	r0, r3
 800c240:	b00b      	add	sp, #44	; 0x2c
 800c242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c244:	1e58      	subs	r0, r3, #1
 800c246:	4684      	mov	ip, r0
 800c248:	fbb5 f7f2 	udiv	r7, r5, r2
 800c24c:	fb02 5617 	mls	r6, r2, r7, r5
 800c250:	3628      	adds	r6, #40	; 0x28
 800c252:	446e      	add	r6, sp
 800c254:	460c      	mov	r4, r1
 800c256:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c25a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c25e:	462e      	mov	r6, r5
 800c260:	42b2      	cmp	r2, r6
 800c262:	f101 0101 	add.w	r1, r1, #1
 800c266:	463d      	mov	r5, r7
 800c268:	d9ee      	bls.n	800c248 <__utoa+0x40>
 800c26a:	2200      	movs	r2, #0
 800c26c:	545a      	strb	r2, [r3, r1]
 800c26e:	1919      	adds	r1, r3, r4
 800c270:	1aa5      	subs	r5, r4, r2
 800c272:	42aa      	cmp	r2, r5
 800c274:	dae3      	bge.n	800c23e <__utoa+0x36>
 800c276:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c27a:	780e      	ldrb	r6, [r1, #0]
 800c27c:	7006      	strb	r6, [r0, #0]
 800c27e:	3201      	adds	r2, #1
 800c280:	f801 5901 	strb.w	r5, [r1], #-1
 800c284:	e7f4      	b.n	800c270 <__utoa+0x68>
 800c286:	bf00      	nop
 800c288:	0800cee0 	.word	0x0800cee0

0800c28c <__malloc_lock>:
 800c28c:	4801      	ldr	r0, [pc, #4]	; (800c294 <__malloc_lock+0x8>)
 800c28e:	f7ff bd7d 	b.w	800bd8c <__retarget_lock_acquire_recursive>
 800c292:	bf00      	nop
 800c294:	20006e50 	.word	0x20006e50

0800c298 <__malloc_unlock>:
 800c298:	4801      	ldr	r0, [pc, #4]	; (800c2a0 <__malloc_unlock+0x8>)
 800c29a:	f7ff bd78 	b.w	800bd8e <__retarget_lock_release_recursive>
 800c29e:	bf00      	nop
 800c2a0:	20006e50 	.word	0x20006e50

0800c2a4 <_sungetc_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	1c4b      	adds	r3, r1, #1
 800c2a8:	4614      	mov	r4, r2
 800c2aa:	d103      	bne.n	800c2b4 <_sungetc_r+0x10>
 800c2ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
 800c2b4:	8993      	ldrh	r3, [r2, #12]
 800c2b6:	f023 0320 	bic.w	r3, r3, #32
 800c2ba:	8193      	strh	r3, [r2, #12]
 800c2bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2be:	6852      	ldr	r2, [r2, #4]
 800c2c0:	b2cd      	uxtb	r5, r1
 800c2c2:	b18b      	cbz	r3, 800c2e8 <_sungetc_r+0x44>
 800c2c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	dd08      	ble.n	800c2dc <_sungetc_r+0x38>
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	1e5a      	subs	r2, r3, #1
 800c2ce:	6022      	str	r2, [r4, #0]
 800c2d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c2d4:	6863      	ldr	r3, [r4, #4]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	6063      	str	r3, [r4, #4]
 800c2da:	e7e9      	b.n	800c2b0 <_sungetc_r+0xc>
 800c2dc:	4621      	mov	r1, r4
 800c2de:	f000 fbb1 	bl	800ca44 <__submore>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d0f1      	beq.n	800c2ca <_sungetc_r+0x26>
 800c2e6:	e7e1      	b.n	800c2ac <_sungetc_r+0x8>
 800c2e8:	6921      	ldr	r1, [r4, #16]
 800c2ea:	6823      	ldr	r3, [r4, #0]
 800c2ec:	b151      	cbz	r1, 800c304 <_sungetc_r+0x60>
 800c2ee:	4299      	cmp	r1, r3
 800c2f0:	d208      	bcs.n	800c304 <_sungetc_r+0x60>
 800c2f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c2f6:	42a9      	cmp	r1, r5
 800c2f8:	d104      	bne.n	800c304 <_sungetc_r+0x60>
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	3201      	adds	r2, #1
 800c2fe:	6023      	str	r3, [r4, #0]
 800c300:	6062      	str	r2, [r4, #4]
 800c302:	e7d5      	b.n	800c2b0 <_sungetc_r+0xc>
 800c304:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c30c:	6363      	str	r3, [r4, #52]	; 0x34
 800c30e:	2303      	movs	r3, #3
 800c310:	63a3      	str	r3, [r4, #56]	; 0x38
 800c312:	4623      	mov	r3, r4
 800c314:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c318:	6023      	str	r3, [r4, #0]
 800c31a:	2301      	movs	r3, #1
 800c31c:	e7dc      	b.n	800c2d8 <_sungetc_r+0x34>

0800c31e <__ssrefill_r>:
 800c31e:	b510      	push	{r4, lr}
 800c320:	460c      	mov	r4, r1
 800c322:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c324:	b169      	cbz	r1, 800c342 <__ssrefill_r+0x24>
 800c326:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c32a:	4299      	cmp	r1, r3
 800c32c:	d001      	beq.n	800c332 <__ssrefill_r+0x14>
 800c32e:	f7ff fd4d 	bl	800bdcc <_free_r>
 800c332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c334:	6063      	str	r3, [r4, #4]
 800c336:	2000      	movs	r0, #0
 800c338:	6360      	str	r0, [r4, #52]	; 0x34
 800c33a:	b113      	cbz	r3, 800c342 <__ssrefill_r+0x24>
 800c33c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c33e:	6023      	str	r3, [r4, #0]
 800c340:	bd10      	pop	{r4, pc}
 800c342:	6923      	ldr	r3, [r4, #16]
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	2300      	movs	r3, #0
 800c348:	6063      	str	r3, [r4, #4]
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	f043 0320 	orr.w	r3, r3, #32
 800c350:	81a3      	strh	r3, [r4, #12]
 800c352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c356:	e7f3      	b.n	800c340 <__ssrefill_r+0x22>

0800c358 <__ssvfiscanf_r>:
 800c358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c35c:	460c      	mov	r4, r1
 800c35e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c362:	2100      	movs	r1, #0
 800c364:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c368:	49a6      	ldr	r1, [pc, #664]	; (800c604 <__ssvfiscanf_r+0x2ac>)
 800c36a:	91a0      	str	r1, [sp, #640]	; 0x280
 800c36c:	f10d 0804 	add.w	r8, sp, #4
 800c370:	49a5      	ldr	r1, [pc, #660]	; (800c608 <__ssvfiscanf_r+0x2b0>)
 800c372:	4fa6      	ldr	r7, [pc, #664]	; (800c60c <__ssvfiscanf_r+0x2b4>)
 800c374:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c610 <__ssvfiscanf_r+0x2b8>
 800c378:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c37c:	4606      	mov	r6, r0
 800c37e:	91a1      	str	r1, [sp, #644]	; 0x284
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	7813      	ldrb	r3, [r2, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	f000 815a 	beq.w	800c63e <__ssvfiscanf_r+0x2e6>
 800c38a:	5dd9      	ldrb	r1, [r3, r7]
 800c38c:	f011 0108 	ands.w	r1, r1, #8
 800c390:	f102 0501 	add.w	r5, r2, #1
 800c394:	d019      	beq.n	800c3ca <__ssvfiscanf_r+0x72>
 800c396:	6863      	ldr	r3, [r4, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	dd0f      	ble.n	800c3bc <__ssvfiscanf_r+0x64>
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	781a      	ldrb	r2, [r3, #0]
 800c3a0:	5cba      	ldrb	r2, [r7, r2]
 800c3a2:	0712      	lsls	r2, r2, #28
 800c3a4:	d401      	bmi.n	800c3aa <__ssvfiscanf_r+0x52>
 800c3a6:	462a      	mov	r2, r5
 800c3a8:	e7eb      	b.n	800c382 <__ssvfiscanf_r+0x2a>
 800c3aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c3ac:	3201      	adds	r2, #1
 800c3ae:	9245      	str	r2, [sp, #276]	; 0x114
 800c3b0:	6862      	ldr	r2, [r4, #4]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	3a01      	subs	r2, #1
 800c3b6:	6062      	str	r2, [r4, #4]
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	e7ec      	b.n	800c396 <__ssvfiscanf_r+0x3e>
 800c3bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c3be:	4621      	mov	r1, r4
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	4798      	blx	r3
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d0e9      	beq.n	800c39c <__ssvfiscanf_r+0x44>
 800c3c8:	e7ed      	b.n	800c3a6 <__ssvfiscanf_r+0x4e>
 800c3ca:	2b25      	cmp	r3, #37	; 0x25
 800c3cc:	d012      	beq.n	800c3f4 <__ssvfiscanf_r+0x9c>
 800c3ce:	469a      	mov	sl, r3
 800c3d0:	6863      	ldr	r3, [r4, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f340 8091 	ble.w	800c4fa <__ssvfiscanf_r+0x1a2>
 800c3d8:	6822      	ldr	r2, [r4, #0]
 800c3da:	7813      	ldrb	r3, [r2, #0]
 800c3dc:	4553      	cmp	r3, sl
 800c3de:	f040 812e 	bne.w	800c63e <__ssvfiscanf_r+0x2e6>
 800c3e2:	6863      	ldr	r3, [r4, #4]
 800c3e4:	3b01      	subs	r3, #1
 800c3e6:	6063      	str	r3, [r4, #4]
 800c3e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c3ea:	3201      	adds	r2, #1
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	6022      	str	r2, [r4, #0]
 800c3f0:	9345      	str	r3, [sp, #276]	; 0x114
 800c3f2:	e7d8      	b.n	800c3a6 <__ssvfiscanf_r+0x4e>
 800c3f4:	9141      	str	r1, [sp, #260]	; 0x104
 800c3f6:	9143      	str	r1, [sp, #268]	; 0x10c
 800c3f8:	7853      	ldrb	r3, [r2, #1]
 800c3fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c3fc:	bf02      	ittt	eq
 800c3fe:	2310      	moveq	r3, #16
 800c400:	1c95      	addeq	r5, r2, #2
 800c402:	9341      	streq	r3, [sp, #260]	; 0x104
 800c404:	220a      	movs	r2, #10
 800c406:	46aa      	mov	sl, r5
 800c408:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c40c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c410:	2b09      	cmp	r3, #9
 800c412:	d91d      	bls.n	800c450 <__ssvfiscanf_r+0xf8>
 800c414:	487e      	ldr	r0, [pc, #504]	; (800c610 <__ssvfiscanf_r+0x2b8>)
 800c416:	2203      	movs	r2, #3
 800c418:	f7f3 fee2 	bl	80001e0 <memchr>
 800c41c:	b140      	cbz	r0, 800c430 <__ssvfiscanf_r+0xd8>
 800c41e:	2301      	movs	r3, #1
 800c420:	eba0 0009 	sub.w	r0, r0, r9
 800c424:	fa03 f000 	lsl.w	r0, r3, r0
 800c428:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c42a:	4318      	orrs	r0, r3
 800c42c:	9041      	str	r0, [sp, #260]	; 0x104
 800c42e:	4655      	mov	r5, sl
 800c430:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c434:	2b78      	cmp	r3, #120	; 0x78
 800c436:	d806      	bhi.n	800c446 <__ssvfiscanf_r+0xee>
 800c438:	2b57      	cmp	r3, #87	; 0x57
 800c43a:	d810      	bhi.n	800c45e <__ssvfiscanf_r+0x106>
 800c43c:	2b25      	cmp	r3, #37	; 0x25
 800c43e:	d0c6      	beq.n	800c3ce <__ssvfiscanf_r+0x76>
 800c440:	d856      	bhi.n	800c4f0 <__ssvfiscanf_r+0x198>
 800c442:	2b00      	cmp	r3, #0
 800c444:	d064      	beq.n	800c510 <__ssvfiscanf_r+0x1b8>
 800c446:	2303      	movs	r3, #3
 800c448:	9347      	str	r3, [sp, #284]	; 0x11c
 800c44a:	230a      	movs	r3, #10
 800c44c:	9342      	str	r3, [sp, #264]	; 0x108
 800c44e:	e071      	b.n	800c534 <__ssvfiscanf_r+0x1dc>
 800c450:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c452:	fb02 1103 	mla	r1, r2, r3, r1
 800c456:	3930      	subs	r1, #48	; 0x30
 800c458:	9143      	str	r1, [sp, #268]	; 0x10c
 800c45a:	4655      	mov	r5, sl
 800c45c:	e7d3      	b.n	800c406 <__ssvfiscanf_r+0xae>
 800c45e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c462:	2a20      	cmp	r2, #32
 800c464:	d8ef      	bhi.n	800c446 <__ssvfiscanf_r+0xee>
 800c466:	a101      	add	r1, pc, #4	; (adr r1, 800c46c <__ssvfiscanf_r+0x114>)
 800c468:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c46c:	0800c51f 	.word	0x0800c51f
 800c470:	0800c447 	.word	0x0800c447
 800c474:	0800c447 	.word	0x0800c447
 800c478:	0800c57d 	.word	0x0800c57d
 800c47c:	0800c447 	.word	0x0800c447
 800c480:	0800c447 	.word	0x0800c447
 800c484:	0800c447 	.word	0x0800c447
 800c488:	0800c447 	.word	0x0800c447
 800c48c:	0800c447 	.word	0x0800c447
 800c490:	0800c447 	.word	0x0800c447
 800c494:	0800c447 	.word	0x0800c447
 800c498:	0800c593 	.word	0x0800c593
 800c49c:	0800c569 	.word	0x0800c569
 800c4a0:	0800c4f7 	.word	0x0800c4f7
 800c4a4:	0800c4f7 	.word	0x0800c4f7
 800c4a8:	0800c4f7 	.word	0x0800c4f7
 800c4ac:	0800c447 	.word	0x0800c447
 800c4b0:	0800c56d 	.word	0x0800c56d
 800c4b4:	0800c447 	.word	0x0800c447
 800c4b8:	0800c447 	.word	0x0800c447
 800c4bc:	0800c447 	.word	0x0800c447
 800c4c0:	0800c447 	.word	0x0800c447
 800c4c4:	0800c5a3 	.word	0x0800c5a3
 800c4c8:	0800c575 	.word	0x0800c575
 800c4cc:	0800c517 	.word	0x0800c517
 800c4d0:	0800c447 	.word	0x0800c447
 800c4d4:	0800c447 	.word	0x0800c447
 800c4d8:	0800c59f 	.word	0x0800c59f
 800c4dc:	0800c447 	.word	0x0800c447
 800c4e0:	0800c569 	.word	0x0800c569
 800c4e4:	0800c447 	.word	0x0800c447
 800c4e8:	0800c447 	.word	0x0800c447
 800c4ec:	0800c51f 	.word	0x0800c51f
 800c4f0:	3b45      	subs	r3, #69	; 0x45
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d8a7      	bhi.n	800c446 <__ssvfiscanf_r+0xee>
 800c4f6:	2305      	movs	r3, #5
 800c4f8:	e01b      	b.n	800c532 <__ssvfiscanf_r+0x1da>
 800c4fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	4630      	mov	r0, r6
 800c500:	4798      	blx	r3
 800c502:	2800      	cmp	r0, #0
 800c504:	f43f af68 	beq.w	800c3d8 <__ssvfiscanf_r+0x80>
 800c508:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c50a:	2800      	cmp	r0, #0
 800c50c:	f040 808d 	bne.w	800c62a <__ssvfiscanf_r+0x2d2>
 800c510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c514:	e08f      	b.n	800c636 <__ssvfiscanf_r+0x2de>
 800c516:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c518:	f042 0220 	orr.w	r2, r2, #32
 800c51c:	9241      	str	r2, [sp, #260]	; 0x104
 800c51e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c524:	9241      	str	r2, [sp, #260]	; 0x104
 800c526:	2210      	movs	r2, #16
 800c528:	2b6f      	cmp	r3, #111	; 0x6f
 800c52a:	9242      	str	r2, [sp, #264]	; 0x108
 800c52c:	bf34      	ite	cc
 800c52e:	2303      	movcc	r3, #3
 800c530:	2304      	movcs	r3, #4
 800c532:	9347      	str	r3, [sp, #284]	; 0x11c
 800c534:	6863      	ldr	r3, [r4, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	dd42      	ble.n	800c5c0 <__ssvfiscanf_r+0x268>
 800c53a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c53c:	0659      	lsls	r1, r3, #25
 800c53e:	d404      	bmi.n	800c54a <__ssvfiscanf_r+0x1f2>
 800c540:	6823      	ldr	r3, [r4, #0]
 800c542:	781a      	ldrb	r2, [r3, #0]
 800c544:	5cba      	ldrb	r2, [r7, r2]
 800c546:	0712      	lsls	r2, r2, #28
 800c548:	d441      	bmi.n	800c5ce <__ssvfiscanf_r+0x276>
 800c54a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c54c:	2b02      	cmp	r3, #2
 800c54e:	dc50      	bgt.n	800c5f2 <__ssvfiscanf_r+0x29a>
 800c550:	466b      	mov	r3, sp
 800c552:	4622      	mov	r2, r4
 800c554:	a941      	add	r1, sp, #260	; 0x104
 800c556:	4630      	mov	r0, r6
 800c558:	f000 f876 	bl	800c648 <_scanf_chars>
 800c55c:	2801      	cmp	r0, #1
 800c55e:	d06e      	beq.n	800c63e <__ssvfiscanf_r+0x2e6>
 800c560:	2802      	cmp	r0, #2
 800c562:	f47f af20 	bne.w	800c3a6 <__ssvfiscanf_r+0x4e>
 800c566:	e7cf      	b.n	800c508 <__ssvfiscanf_r+0x1b0>
 800c568:	220a      	movs	r2, #10
 800c56a:	e7dd      	b.n	800c528 <__ssvfiscanf_r+0x1d0>
 800c56c:	2300      	movs	r3, #0
 800c56e:	9342      	str	r3, [sp, #264]	; 0x108
 800c570:	2303      	movs	r3, #3
 800c572:	e7de      	b.n	800c532 <__ssvfiscanf_r+0x1da>
 800c574:	2308      	movs	r3, #8
 800c576:	9342      	str	r3, [sp, #264]	; 0x108
 800c578:	2304      	movs	r3, #4
 800c57a:	e7da      	b.n	800c532 <__ssvfiscanf_r+0x1da>
 800c57c:	4629      	mov	r1, r5
 800c57e:	4640      	mov	r0, r8
 800c580:	f000 f9b4 	bl	800c8ec <__sccl>
 800c584:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c58a:	9341      	str	r3, [sp, #260]	; 0x104
 800c58c:	4605      	mov	r5, r0
 800c58e:	2301      	movs	r3, #1
 800c590:	e7cf      	b.n	800c532 <__ssvfiscanf_r+0x1da>
 800c592:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c598:	9341      	str	r3, [sp, #260]	; 0x104
 800c59a:	2300      	movs	r3, #0
 800c59c:	e7c9      	b.n	800c532 <__ssvfiscanf_r+0x1da>
 800c59e:	2302      	movs	r3, #2
 800c5a0:	e7c7      	b.n	800c532 <__ssvfiscanf_r+0x1da>
 800c5a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c5a4:	06c3      	lsls	r3, r0, #27
 800c5a6:	f53f aefe 	bmi.w	800c3a6 <__ssvfiscanf_r+0x4e>
 800c5aa:	9b00      	ldr	r3, [sp, #0]
 800c5ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c5ae:	1d19      	adds	r1, r3, #4
 800c5b0:	9100      	str	r1, [sp, #0]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f010 0f01 	tst.w	r0, #1
 800c5b8:	bf14      	ite	ne
 800c5ba:	801a      	strhne	r2, [r3, #0]
 800c5bc:	601a      	streq	r2, [r3, #0]
 800c5be:	e6f2      	b.n	800c3a6 <__ssvfiscanf_r+0x4e>
 800c5c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c5c2:	4621      	mov	r1, r4
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	4798      	blx	r3
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d0b6      	beq.n	800c53a <__ssvfiscanf_r+0x1e2>
 800c5cc:	e79c      	b.n	800c508 <__ssvfiscanf_r+0x1b0>
 800c5ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c5d0:	3201      	adds	r2, #1
 800c5d2:	9245      	str	r2, [sp, #276]	; 0x114
 800c5d4:	6862      	ldr	r2, [r4, #4]
 800c5d6:	3a01      	subs	r2, #1
 800c5d8:	2a00      	cmp	r2, #0
 800c5da:	6062      	str	r2, [r4, #4]
 800c5dc:	dd02      	ble.n	800c5e4 <__ssvfiscanf_r+0x28c>
 800c5de:	3301      	adds	r3, #1
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	e7ad      	b.n	800c540 <__ssvfiscanf_r+0x1e8>
 800c5e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	4798      	blx	r3
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d0a7      	beq.n	800c540 <__ssvfiscanf_r+0x1e8>
 800c5f0:	e78a      	b.n	800c508 <__ssvfiscanf_r+0x1b0>
 800c5f2:	2b04      	cmp	r3, #4
 800c5f4:	dc0e      	bgt.n	800c614 <__ssvfiscanf_r+0x2bc>
 800c5f6:	466b      	mov	r3, sp
 800c5f8:	4622      	mov	r2, r4
 800c5fa:	a941      	add	r1, sp, #260	; 0x104
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	f000 f87d 	bl	800c6fc <_scanf_i>
 800c602:	e7ab      	b.n	800c55c <__ssvfiscanf_r+0x204>
 800c604:	0800c2a5 	.word	0x0800c2a5
 800c608:	0800c31f 	.word	0x0800c31f
 800c60c:	0800cf06 	.word	0x0800cf06
 800c610:	0800d006 	.word	0x0800d006
 800c614:	4b0b      	ldr	r3, [pc, #44]	; (800c644 <__ssvfiscanf_r+0x2ec>)
 800c616:	2b00      	cmp	r3, #0
 800c618:	f43f aec5 	beq.w	800c3a6 <__ssvfiscanf_r+0x4e>
 800c61c:	466b      	mov	r3, sp
 800c61e:	4622      	mov	r2, r4
 800c620:	a941      	add	r1, sp, #260	; 0x104
 800c622:	4630      	mov	r0, r6
 800c624:	f3af 8000 	nop.w
 800c628:	e798      	b.n	800c55c <__ssvfiscanf_r+0x204>
 800c62a:	89a3      	ldrh	r3, [r4, #12]
 800c62c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c630:	bf18      	it	ne
 800c632:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800c636:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c63e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c640:	e7f9      	b.n	800c636 <__ssvfiscanf_r+0x2de>
 800c642:	bf00      	nop
 800c644:	00000000 	.word	0x00000000

0800c648 <_scanf_chars>:
 800c648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c64c:	4615      	mov	r5, r2
 800c64e:	688a      	ldr	r2, [r1, #8]
 800c650:	4680      	mov	r8, r0
 800c652:	460c      	mov	r4, r1
 800c654:	b932      	cbnz	r2, 800c664 <_scanf_chars+0x1c>
 800c656:	698a      	ldr	r2, [r1, #24]
 800c658:	2a00      	cmp	r2, #0
 800c65a:	bf0c      	ite	eq
 800c65c:	2201      	moveq	r2, #1
 800c65e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800c662:	608a      	str	r2, [r1, #8]
 800c664:	6822      	ldr	r2, [r4, #0]
 800c666:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c6f8 <_scanf_chars+0xb0>
 800c66a:	06d1      	lsls	r1, r2, #27
 800c66c:	bf5f      	itttt	pl
 800c66e:	681a      	ldrpl	r2, [r3, #0]
 800c670:	1d11      	addpl	r1, r2, #4
 800c672:	6019      	strpl	r1, [r3, #0]
 800c674:	6816      	ldrpl	r6, [r2, #0]
 800c676:	2700      	movs	r7, #0
 800c678:	69a0      	ldr	r0, [r4, #24]
 800c67a:	b188      	cbz	r0, 800c6a0 <_scanf_chars+0x58>
 800c67c:	2801      	cmp	r0, #1
 800c67e:	d107      	bne.n	800c690 <_scanf_chars+0x48>
 800c680:	682a      	ldr	r2, [r5, #0]
 800c682:	7811      	ldrb	r1, [r2, #0]
 800c684:	6962      	ldr	r2, [r4, #20]
 800c686:	5c52      	ldrb	r2, [r2, r1]
 800c688:	b952      	cbnz	r2, 800c6a0 <_scanf_chars+0x58>
 800c68a:	2f00      	cmp	r7, #0
 800c68c:	d031      	beq.n	800c6f2 <_scanf_chars+0xaa>
 800c68e:	e022      	b.n	800c6d6 <_scanf_chars+0x8e>
 800c690:	2802      	cmp	r0, #2
 800c692:	d120      	bne.n	800c6d6 <_scanf_chars+0x8e>
 800c694:	682b      	ldr	r3, [r5, #0]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c69c:	071b      	lsls	r3, r3, #28
 800c69e:	d41a      	bmi.n	800c6d6 <_scanf_chars+0x8e>
 800c6a0:	6823      	ldr	r3, [r4, #0]
 800c6a2:	06da      	lsls	r2, r3, #27
 800c6a4:	bf5e      	ittt	pl
 800c6a6:	682b      	ldrpl	r3, [r5, #0]
 800c6a8:	781b      	ldrbpl	r3, [r3, #0]
 800c6aa:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c6ae:	682a      	ldr	r2, [r5, #0]
 800c6b0:	686b      	ldr	r3, [r5, #4]
 800c6b2:	3201      	adds	r2, #1
 800c6b4:	602a      	str	r2, [r5, #0]
 800c6b6:	68a2      	ldr	r2, [r4, #8]
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	3a01      	subs	r2, #1
 800c6bc:	606b      	str	r3, [r5, #4]
 800c6be:	3701      	adds	r7, #1
 800c6c0:	60a2      	str	r2, [r4, #8]
 800c6c2:	b142      	cbz	r2, 800c6d6 <_scanf_chars+0x8e>
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	dcd7      	bgt.n	800c678 <_scanf_chars+0x30>
 800c6c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c6cc:	4629      	mov	r1, r5
 800c6ce:	4640      	mov	r0, r8
 800c6d0:	4798      	blx	r3
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d0d0      	beq.n	800c678 <_scanf_chars+0x30>
 800c6d6:	6823      	ldr	r3, [r4, #0]
 800c6d8:	f013 0310 	ands.w	r3, r3, #16
 800c6dc:	d105      	bne.n	800c6ea <_scanf_chars+0xa2>
 800c6de:	68e2      	ldr	r2, [r4, #12]
 800c6e0:	3201      	adds	r2, #1
 800c6e2:	60e2      	str	r2, [r4, #12]
 800c6e4:	69a2      	ldr	r2, [r4, #24]
 800c6e6:	b102      	cbz	r2, 800c6ea <_scanf_chars+0xa2>
 800c6e8:	7033      	strb	r3, [r6, #0]
 800c6ea:	6923      	ldr	r3, [r4, #16]
 800c6ec:	443b      	add	r3, r7
 800c6ee:	6123      	str	r3, [r4, #16]
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6f6:	bf00      	nop
 800c6f8:	0800cf06 	.word	0x0800cf06

0800c6fc <_scanf_i>:
 800c6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c700:	4698      	mov	r8, r3
 800c702:	4b76      	ldr	r3, [pc, #472]	; (800c8dc <_scanf_i+0x1e0>)
 800c704:	460c      	mov	r4, r1
 800c706:	4682      	mov	sl, r0
 800c708:	4616      	mov	r6, r2
 800c70a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c70e:	b087      	sub	sp, #28
 800c710:	ab03      	add	r3, sp, #12
 800c712:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c716:	4b72      	ldr	r3, [pc, #456]	; (800c8e0 <_scanf_i+0x1e4>)
 800c718:	69a1      	ldr	r1, [r4, #24]
 800c71a:	4a72      	ldr	r2, [pc, #456]	; (800c8e4 <_scanf_i+0x1e8>)
 800c71c:	2903      	cmp	r1, #3
 800c71e:	bf18      	it	ne
 800c720:	461a      	movne	r2, r3
 800c722:	68a3      	ldr	r3, [r4, #8]
 800c724:	9201      	str	r2, [sp, #4]
 800c726:	1e5a      	subs	r2, r3, #1
 800c728:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c72c:	bf88      	it	hi
 800c72e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c732:	4627      	mov	r7, r4
 800c734:	bf82      	ittt	hi
 800c736:	eb03 0905 	addhi.w	r9, r3, r5
 800c73a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c73e:	60a3      	strhi	r3, [r4, #8]
 800c740:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c744:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c748:	bf98      	it	ls
 800c74a:	f04f 0900 	movls.w	r9, #0
 800c74e:	6023      	str	r3, [r4, #0]
 800c750:	463d      	mov	r5, r7
 800c752:	f04f 0b00 	mov.w	fp, #0
 800c756:	6831      	ldr	r1, [r6, #0]
 800c758:	ab03      	add	r3, sp, #12
 800c75a:	7809      	ldrb	r1, [r1, #0]
 800c75c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c760:	2202      	movs	r2, #2
 800c762:	f7f3 fd3d 	bl	80001e0 <memchr>
 800c766:	b328      	cbz	r0, 800c7b4 <_scanf_i+0xb8>
 800c768:	f1bb 0f01 	cmp.w	fp, #1
 800c76c:	d159      	bne.n	800c822 <_scanf_i+0x126>
 800c76e:	6862      	ldr	r2, [r4, #4]
 800c770:	b92a      	cbnz	r2, 800c77e <_scanf_i+0x82>
 800c772:	6822      	ldr	r2, [r4, #0]
 800c774:	2308      	movs	r3, #8
 800c776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c77a:	6063      	str	r3, [r4, #4]
 800c77c:	6022      	str	r2, [r4, #0]
 800c77e:	6822      	ldr	r2, [r4, #0]
 800c780:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c784:	6022      	str	r2, [r4, #0]
 800c786:	68a2      	ldr	r2, [r4, #8]
 800c788:	1e51      	subs	r1, r2, #1
 800c78a:	60a1      	str	r1, [r4, #8]
 800c78c:	b192      	cbz	r2, 800c7b4 <_scanf_i+0xb8>
 800c78e:	6832      	ldr	r2, [r6, #0]
 800c790:	1c51      	adds	r1, r2, #1
 800c792:	6031      	str	r1, [r6, #0]
 800c794:	7812      	ldrb	r2, [r2, #0]
 800c796:	f805 2b01 	strb.w	r2, [r5], #1
 800c79a:	6872      	ldr	r2, [r6, #4]
 800c79c:	3a01      	subs	r2, #1
 800c79e:	2a00      	cmp	r2, #0
 800c7a0:	6072      	str	r2, [r6, #4]
 800c7a2:	dc07      	bgt.n	800c7b4 <_scanf_i+0xb8>
 800c7a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c7a8:	4631      	mov	r1, r6
 800c7aa:	4650      	mov	r0, sl
 800c7ac:	4790      	blx	r2
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	f040 8085 	bne.w	800c8be <_scanf_i+0x1c2>
 800c7b4:	f10b 0b01 	add.w	fp, fp, #1
 800c7b8:	f1bb 0f03 	cmp.w	fp, #3
 800c7bc:	d1cb      	bne.n	800c756 <_scanf_i+0x5a>
 800c7be:	6863      	ldr	r3, [r4, #4]
 800c7c0:	b90b      	cbnz	r3, 800c7c6 <_scanf_i+0xca>
 800c7c2:	230a      	movs	r3, #10
 800c7c4:	6063      	str	r3, [r4, #4]
 800c7c6:	6863      	ldr	r3, [r4, #4]
 800c7c8:	4947      	ldr	r1, [pc, #284]	; (800c8e8 <_scanf_i+0x1ec>)
 800c7ca:	6960      	ldr	r0, [r4, #20]
 800c7cc:	1ac9      	subs	r1, r1, r3
 800c7ce:	f000 f88d 	bl	800c8ec <__sccl>
 800c7d2:	f04f 0b00 	mov.w	fp, #0
 800c7d6:	68a3      	ldr	r3, [r4, #8]
 800c7d8:	6822      	ldr	r2, [r4, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d03d      	beq.n	800c85a <_scanf_i+0x15e>
 800c7de:	6831      	ldr	r1, [r6, #0]
 800c7e0:	6960      	ldr	r0, [r4, #20]
 800c7e2:	f891 c000 	ldrb.w	ip, [r1]
 800c7e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	d035      	beq.n	800c85a <_scanf_i+0x15e>
 800c7ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c7f2:	d124      	bne.n	800c83e <_scanf_i+0x142>
 800c7f4:	0510      	lsls	r0, r2, #20
 800c7f6:	d522      	bpl.n	800c83e <_scanf_i+0x142>
 800c7f8:	f10b 0b01 	add.w	fp, fp, #1
 800c7fc:	f1b9 0f00 	cmp.w	r9, #0
 800c800:	d003      	beq.n	800c80a <_scanf_i+0x10e>
 800c802:	3301      	adds	r3, #1
 800c804:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c808:	60a3      	str	r3, [r4, #8]
 800c80a:	6873      	ldr	r3, [r6, #4]
 800c80c:	3b01      	subs	r3, #1
 800c80e:	2b00      	cmp	r3, #0
 800c810:	6073      	str	r3, [r6, #4]
 800c812:	dd1b      	ble.n	800c84c <_scanf_i+0x150>
 800c814:	6833      	ldr	r3, [r6, #0]
 800c816:	3301      	adds	r3, #1
 800c818:	6033      	str	r3, [r6, #0]
 800c81a:	68a3      	ldr	r3, [r4, #8]
 800c81c:	3b01      	subs	r3, #1
 800c81e:	60a3      	str	r3, [r4, #8]
 800c820:	e7d9      	b.n	800c7d6 <_scanf_i+0xda>
 800c822:	f1bb 0f02 	cmp.w	fp, #2
 800c826:	d1ae      	bne.n	800c786 <_scanf_i+0x8a>
 800c828:	6822      	ldr	r2, [r4, #0]
 800c82a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c82e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c832:	d1bf      	bne.n	800c7b4 <_scanf_i+0xb8>
 800c834:	2310      	movs	r3, #16
 800c836:	6063      	str	r3, [r4, #4]
 800c838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c83c:	e7a2      	b.n	800c784 <_scanf_i+0x88>
 800c83e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c842:	6022      	str	r2, [r4, #0]
 800c844:	780b      	ldrb	r3, [r1, #0]
 800c846:	f805 3b01 	strb.w	r3, [r5], #1
 800c84a:	e7de      	b.n	800c80a <_scanf_i+0x10e>
 800c84c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c850:	4631      	mov	r1, r6
 800c852:	4650      	mov	r0, sl
 800c854:	4798      	blx	r3
 800c856:	2800      	cmp	r0, #0
 800c858:	d0df      	beq.n	800c81a <_scanf_i+0x11e>
 800c85a:	6823      	ldr	r3, [r4, #0]
 800c85c:	05db      	lsls	r3, r3, #23
 800c85e:	d50d      	bpl.n	800c87c <_scanf_i+0x180>
 800c860:	42bd      	cmp	r5, r7
 800c862:	d909      	bls.n	800c878 <_scanf_i+0x17c>
 800c864:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c868:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c86c:	4632      	mov	r2, r6
 800c86e:	4650      	mov	r0, sl
 800c870:	4798      	blx	r3
 800c872:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c876:	464d      	mov	r5, r9
 800c878:	42bd      	cmp	r5, r7
 800c87a:	d02d      	beq.n	800c8d8 <_scanf_i+0x1dc>
 800c87c:	6822      	ldr	r2, [r4, #0]
 800c87e:	f012 0210 	ands.w	r2, r2, #16
 800c882:	d113      	bne.n	800c8ac <_scanf_i+0x1b0>
 800c884:	702a      	strb	r2, [r5, #0]
 800c886:	6863      	ldr	r3, [r4, #4]
 800c888:	9e01      	ldr	r6, [sp, #4]
 800c88a:	4639      	mov	r1, r7
 800c88c:	4650      	mov	r0, sl
 800c88e:	47b0      	blx	r6
 800c890:	6821      	ldr	r1, [r4, #0]
 800c892:	f8d8 3000 	ldr.w	r3, [r8]
 800c896:	f011 0f20 	tst.w	r1, #32
 800c89a:	d013      	beq.n	800c8c4 <_scanf_i+0x1c8>
 800c89c:	1d1a      	adds	r2, r3, #4
 800c89e:	f8c8 2000 	str.w	r2, [r8]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	6018      	str	r0, [r3, #0]
 800c8a6:	68e3      	ldr	r3, [r4, #12]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	60e3      	str	r3, [r4, #12]
 800c8ac:	1bed      	subs	r5, r5, r7
 800c8ae:	44ab      	add	fp, r5
 800c8b0:	6925      	ldr	r5, [r4, #16]
 800c8b2:	445d      	add	r5, fp
 800c8b4:	6125      	str	r5, [r4, #16]
 800c8b6:	2000      	movs	r0, #0
 800c8b8:	b007      	add	sp, #28
 800c8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8be:	f04f 0b00 	mov.w	fp, #0
 800c8c2:	e7ca      	b.n	800c85a <_scanf_i+0x15e>
 800c8c4:	1d1a      	adds	r2, r3, #4
 800c8c6:	f8c8 2000 	str.w	r2, [r8]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f011 0f01 	tst.w	r1, #1
 800c8d0:	bf14      	ite	ne
 800c8d2:	8018      	strhne	r0, [r3, #0]
 800c8d4:	6018      	streq	r0, [r3, #0]
 800c8d6:	e7e6      	b.n	800c8a6 <_scanf_i+0x1aa>
 800c8d8:	2001      	movs	r0, #1
 800c8da:	e7ed      	b.n	800c8b8 <_scanf_i+0x1bc>
 800c8dc:	0800ccac 	.word	0x0800ccac
 800c8e0:	0800ca41 	.word	0x0800ca41
 800c8e4:	0800c1f1 	.word	0x0800c1f1
 800c8e8:	0800d023 	.word	0x0800d023

0800c8ec <__sccl>:
 800c8ec:	b570      	push	{r4, r5, r6, lr}
 800c8ee:	780b      	ldrb	r3, [r1, #0]
 800c8f0:	4604      	mov	r4, r0
 800c8f2:	2b5e      	cmp	r3, #94	; 0x5e
 800c8f4:	bf0b      	itete	eq
 800c8f6:	784b      	ldrbeq	r3, [r1, #1]
 800c8f8:	1c48      	addne	r0, r1, #1
 800c8fa:	1c88      	addeq	r0, r1, #2
 800c8fc:	2200      	movne	r2, #0
 800c8fe:	bf08      	it	eq
 800c900:	2201      	moveq	r2, #1
 800c902:	1e61      	subs	r1, r4, #1
 800c904:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c908:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c90c:	42a9      	cmp	r1, r5
 800c90e:	d1fb      	bne.n	800c908 <__sccl+0x1c>
 800c910:	b90b      	cbnz	r3, 800c916 <__sccl+0x2a>
 800c912:	3801      	subs	r0, #1
 800c914:	bd70      	pop	{r4, r5, r6, pc}
 800c916:	f082 0201 	eor.w	r2, r2, #1
 800c91a:	54e2      	strb	r2, [r4, r3]
 800c91c:	4605      	mov	r5, r0
 800c91e:	4628      	mov	r0, r5
 800c920:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c924:	292d      	cmp	r1, #45	; 0x2d
 800c926:	d006      	beq.n	800c936 <__sccl+0x4a>
 800c928:	295d      	cmp	r1, #93	; 0x5d
 800c92a:	d0f3      	beq.n	800c914 <__sccl+0x28>
 800c92c:	b909      	cbnz	r1, 800c932 <__sccl+0x46>
 800c92e:	4628      	mov	r0, r5
 800c930:	e7f0      	b.n	800c914 <__sccl+0x28>
 800c932:	460b      	mov	r3, r1
 800c934:	e7f1      	b.n	800c91a <__sccl+0x2e>
 800c936:	786e      	ldrb	r6, [r5, #1]
 800c938:	2e5d      	cmp	r6, #93	; 0x5d
 800c93a:	d0fa      	beq.n	800c932 <__sccl+0x46>
 800c93c:	42b3      	cmp	r3, r6
 800c93e:	dcf8      	bgt.n	800c932 <__sccl+0x46>
 800c940:	3502      	adds	r5, #2
 800c942:	4619      	mov	r1, r3
 800c944:	3101      	adds	r1, #1
 800c946:	428e      	cmp	r6, r1
 800c948:	5462      	strb	r2, [r4, r1]
 800c94a:	dcfb      	bgt.n	800c944 <__sccl+0x58>
 800c94c:	1af1      	subs	r1, r6, r3
 800c94e:	3901      	subs	r1, #1
 800c950:	1c58      	adds	r0, r3, #1
 800c952:	42b3      	cmp	r3, r6
 800c954:	bfa8      	it	ge
 800c956:	2100      	movge	r1, #0
 800c958:	1843      	adds	r3, r0, r1
 800c95a:	e7e0      	b.n	800c91e <__sccl+0x32>

0800c95c <_strtoul_l.constprop.0>:
 800c95c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c960:	4f36      	ldr	r7, [pc, #216]	; (800ca3c <_strtoul_l.constprop.0+0xe0>)
 800c962:	4686      	mov	lr, r0
 800c964:	460d      	mov	r5, r1
 800c966:	4628      	mov	r0, r5
 800c968:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c96c:	5de6      	ldrb	r6, [r4, r7]
 800c96e:	f016 0608 	ands.w	r6, r6, #8
 800c972:	d1f8      	bne.n	800c966 <_strtoul_l.constprop.0+0xa>
 800c974:	2c2d      	cmp	r4, #45	; 0x2d
 800c976:	d12f      	bne.n	800c9d8 <_strtoul_l.constprop.0+0x7c>
 800c978:	782c      	ldrb	r4, [r5, #0]
 800c97a:	2601      	movs	r6, #1
 800c97c:	1c85      	adds	r5, r0, #2
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d057      	beq.n	800ca32 <_strtoul_l.constprop.0+0xd6>
 800c982:	2b10      	cmp	r3, #16
 800c984:	d109      	bne.n	800c99a <_strtoul_l.constprop.0+0x3e>
 800c986:	2c30      	cmp	r4, #48	; 0x30
 800c988:	d107      	bne.n	800c99a <_strtoul_l.constprop.0+0x3e>
 800c98a:	7828      	ldrb	r0, [r5, #0]
 800c98c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c990:	2858      	cmp	r0, #88	; 0x58
 800c992:	d149      	bne.n	800ca28 <_strtoul_l.constprop.0+0xcc>
 800c994:	786c      	ldrb	r4, [r5, #1]
 800c996:	2310      	movs	r3, #16
 800c998:	3502      	adds	r5, #2
 800c99a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c99e:	2700      	movs	r7, #0
 800c9a0:	fbb8 f8f3 	udiv	r8, r8, r3
 800c9a4:	fb03 f908 	mul.w	r9, r3, r8
 800c9a8:	ea6f 0909 	mvn.w	r9, r9
 800c9ac:	4638      	mov	r0, r7
 800c9ae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c9b2:	f1bc 0f09 	cmp.w	ip, #9
 800c9b6:	d814      	bhi.n	800c9e2 <_strtoul_l.constprop.0+0x86>
 800c9b8:	4664      	mov	r4, ip
 800c9ba:	42a3      	cmp	r3, r4
 800c9bc:	dd22      	ble.n	800ca04 <_strtoul_l.constprop.0+0xa8>
 800c9be:	2f00      	cmp	r7, #0
 800c9c0:	db1d      	blt.n	800c9fe <_strtoul_l.constprop.0+0xa2>
 800c9c2:	4580      	cmp	r8, r0
 800c9c4:	d31b      	bcc.n	800c9fe <_strtoul_l.constprop.0+0xa2>
 800c9c6:	d101      	bne.n	800c9cc <_strtoul_l.constprop.0+0x70>
 800c9c8:	45a1      	cmp	r9, r4
 800c9ca:	db18      	blt.n	800c9fe <_strtoul_l.constprop.0+0xa2>
 800c9cc:	fb00 4003 	mla	r0, r0, r3, r4
 800c9d0:	2701      	movs	r7, #1
 800c9d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9d6:	e7ea      	b.n	800c9ae <_strtoul_l.constprop.0+0x52>
 800c9d8:	2c2b      	cmp	r4, #43	; 0x2b
 800c9da:	bf04      	itt	eq
 800c9dc:	782c      	ldrbeq	r4, [r5, #0]
 800c9de:	1c85      	addeq	r5, r0, #2
 800c9e0:	e7cd      	b.n	800c97e <_strtoul_l.constprop.0+0x22>
 800c9e2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c9e6:	f1bc 0f19 	cmp.w	ip, #25
 800c9ea:	d801      	bhi.n	800c9f0 <_strtoul_l.constprop.0+0x94>
 800c9ec:	3c37      	subs	r4, #55	; 0x37
 800c9ee:	e7e4      	b.n	800c9ba <_strtoul_l.constprop.0+0x5e>
 800c9f0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c9f4:	f1bc 0f19 	cmp.w	ip, #25
 800c9f8:	d804      	bhi.n	800ca04 <_strtoul_l.constprop.0+0xa8>
 800c9fa:	3c57      	subs	r4, #87	; 0x57
 800c9fc:	e7dd      	b.n	800c9ba <_strtoul_l.constprop.0+0x5e>
 800c9fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ca02:	e7e6      	b.n	800c9d2 <_strtoul_l.constprop.0+0x76>
 800ca04:	2f00      	cmp	r7, #0
 800ca06:	da07      	bge.n	800ca18 <_strtoul_l.constprop.0+0xbc>
 800ca08:	2322      	movs	r3, #34	; 0x22
 800ca0a:	f8ce 3000 	str.w	r3, [lr]
 800ca0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca12:	b932      	cbnz	r2, 800ca22 <_strtoul_l.constprop.0+0xc6>
 800ca14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca18:	b106      	cbz	r6, 800ca1c <_strtoul_l.constprop.0+0xc0>
 800ca1a:	4240      	negs	r0, r0
 800ca1c:	2a00      	cmp	r2, #0
 800ca1e:	d0f9      	beq.n	800ca14 <_strtoul_l.constprop.0+0xb8>
 800ca20:	b107      	cbz	r7, 800ca24 <_strtoul_l.constprop.0+0xc8>
 800ca22:	1e69      	subs	r1, r5, #1
 800ca24:	6011      	str	r1, [r2, #0]
 800ca26:	e7f5      	b.n	800ca14 <_strtoul_l.constprop.0+0xb8>
 800ca28:	2430      	movs	r4, #48	; 0x30
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1b5      	bne.n	800c99a <_strtoul_l.constprop.0+0x3e>
 800ca2e:	2308      	movs	r3, #8
 800ca30:	e7b3      	b.n	800c99a <_strtoul_l.constprop.0+0x3e>
 800ca32:	2c30      	cmp	r4, #48	; 0x30
 800ca34:	d0a9      	beq.n	800c98a <_strtoul_l.constprop.0+0x2e>
 800ca36:	230a      	movs	r3, #10
 800ca38:	e7af      	b.n	800c99a <_strtoul_l.constprop.0+0x3e>
 800ca3a:	bf00      	nop
 800ca3c:	0800cf06 	.word	0x0800cf06

0800ca40 <_strtoul_r>:
 800ca40:	f7ff bf8c 	b.w	800c95c <_strtoul_l.constprop.0>

0800ca44 <__submore>:
 800ca44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca48:	460c      	mov	r4, r1
 800ca4a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ca4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca50:	4299      	cmp	r1, r3
 800ca52:	d11d      	bne.n	800ca90 <__submore+0x4c>
 800ca54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ca58:	f7ff fa24 	bl	800bea4 <_malloc_r>
 800ca5c:	b918      	cbnz	r0, 800ca66 <__submore+0x22>
 800ca5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca6a:	63a3      	str	r3, [r4, #56]	; 0x38
 800ca6c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ca70:	6360      	str	r0, [r4, #52]	; 0x34
 800ca72:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ca76:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ca7a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ca7e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ca82:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ca86:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ca8a:	6020      	str	r0, [r4, #0]
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	e7e8      	b.n	800ca62 <__submore+0x1e>
 800ca90:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ca92:	0077      	lsls	r7, r6, #1
 800ca94:	463a      	mov	r2, r7
 800ca96:	f000 f80f 	bl	800cab8 <_realloc_r>
 800ca9a:	4605      	mov	r5, r0
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d0de      	beq.n	800ca5e <__submore+0x1a>
 800caa0:	eb00 0806 	add.w	r8, r0, r6
 800caa4:	4601      	mov	r1, r0
 800caa6:	4632      	mov	r2, r6
 800caa8:	4640      	mov	r0, r8
 800caaa:	f7ff f979 	bl	800bda0 <memcpy>
 800caae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cab2:	f8c4 8000 	str.w	r8, [r4]
 800cab6:	e7e9      	b.n	800ca8c <__submore+0x48>

0800cab8 <_realloc_r>:
 800cab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cabc:	4680      	mov	r8, r0
 800cabe:	4614      	mov	r4, r2
 800cac0:	460e      	mov	r6, r1
 800cac2:	b921      	cbnz	r1, 800cace <_realloc_r+0x16>
 800cac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cac8:	4611      	mov	r1, r2
 800caca:	f7ff b9eb 	b.w	800bea4 <_malloc_r>
 800cace:	b92a      	cbnz	r2, 800cadc <_realloc_r+0x24>
 800cad0:	f7ff f97c 	bl	800bdcc <_free_r>
 800cad4:	4625      	mov	r5, r4
 800cad6:	4628      	mov	r0, r5
 800cad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cadc:	f000 f81b 	bl	800cb16 <_malloc_usable_size_r>
 800cae0:	4284      	cmp	r4, r0
 800cae2:	4607      	mov	r7, r0
 800cae4:	d802      	bhi.n	800caec <_realloc_r+0x34>
 800cae6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800caea:	d812      	bhi.n	800cb12 <_realloc_r+0x5a>
 800caec:	4621      	mov	r1, r4
 800caee:	4640      	mov	r0, r8
 800caf0:	f7ff f9d8 	bl	800bea4 <_malloc_r>
 800caf4:	4605      	mov	r5, r0
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d0ed      	beq.n	800cad6 <_realloc_r+0x1e>
 800cafa:	42bc      	cmp	r4, r7
 800cafc:	4622      	mov	r2, r4
 800cafe:	4631      	mov	r1, r6
 800cb00:	bf28      	it	cs
 800cb02:	463a      	movcs	r2, r7
 800cb04:	f7ff f94c 	bl	800bda0 <memcpy>
 800cb08:	4631      	mov	r1, r6
 800cb0a:	4640      	mov	r0, r8
 800cb0c:	f7ff f95e 	bl	800bdcc <_free_r>
 800cb10:	e7e1      	b.n	800cad6 <_realloc_r+0x1e>
 800cb12:	4635      	mov	r5, r6
 800cb14:	e7df      	b.n	800cad6 <_realloc_r+0x1e>

0800cb16 <_malloc_usable_size_r>:
 800cb16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb1a:	1f18      	subs	r0, r3, #4
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	bfbc      	itt	lt
 800cb20:	580b      	ldrlt	r3, [r1, r0]
 800cb22:	18c0      	addlt	r0, r0, r3
 800cb24:	4770      	bx	lr
	...

0800cb28 <round>:
 800cb28:	ec51 0b10 	vmov	r0, r1, d0
 800cb2c:	b570      	push	{r4, r5, r6, lr}
 800cb2e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800cb32:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800cb36:	2c13      	cmp	r4, #19
 800cb38:	ee10 2a10 	vmov	r2, s0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	dc19      	bgt.n	800cb74 <round+0x4c>
 800cb40:	2c00      	cmp	r4, #0
 800cb42:	da09      	bge.n	800cb58 <round+0x30>
 800cb44:	3401      	adds	r4, #1
 800cb46:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800cb4a:	d103      	bne.n	800cb54 <round+0x2c>
 800cb4c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cb50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cb54:	2200      	movs	r2, #0
 800cb56:	e028      	b.n	800cbaa <round+0x82>
 800cb58:	4d15      	ldr	r5, [pc, #84]	; (800cbb0 <round+0x88>)
 800cb5a:	4125      	asrs	r5, r4
 800cb5c:	ea01 0605 	and.w	r6, r1, r5
 800cb60:	4332      	orrs	r2, r6
 800cb62:	d00e      	beq.n	800cb82 <round+0x5a>
 800cb64:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800cb68:	fa42 f404 	asr.w	r4, r2, r4
 800cb6c:	4423      	add	r3, r4
 800cb6e:	ea23 0305 	bic.w	r3, r3, r5
 800cb72:	e7ef      	b.n	800cb54 <round+0x2c>
 800cb74:	2c33      	cmp	r4, #51	; 0x33
 800cb76:	dd07      	ble.n	800cb88 <round+0x60>
 800cb78:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800cb7c:	d101      	bne.n	800cb82 <round+0x5a>
 800cb7e:	f7f3 fb85 	bl	800028c <__adddf3>
 800cb82:	ec41 0b10 	vmov	d0, r0, r1
 800cb86:	bd70      	pop	{r4, r5, r6, pc}
 800cb88:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800cb8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cb90:	40f5      	lsrs	r5, r6
 800cb92:	4228      	tst	r0, r5
 800cb94:	d0f5      	beq.n	800cb82 <round+0x5a>
 800cb96:	2101      	movs	r1, #1
 800cb98:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800cb9c:	fa01 f404 	lsl.w	r4, r1, r4
 800cba0:	1912      	adds	r2, r2, r4
 800cba2:	bf28      	it	cs
 800cba4:	185b      	addcs	r3, r3, r1
 800cba6:	ea22 0205 	bic.w	r2, r2, r5
 800cbaa:	4619      	mov	r1, r3
 800cbac:	4610      	mov	r0, r2
 800cbae:	e7e8      	b.n	800cb82 <round+0x5a>
 800cbb0:	000fffff 	.word	0x000fffff

0800cbb4 <_init>:
 800cbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb6:	bf00      	nop
 800cbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbba:	bc08      	pop	{r3}
 800cbbc:	469e      	mov	lr, r3
 800cbbe:	4770      	bx	lr

0800cbc0 <_fini>:
 800cbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc2:	bf00      	nop
 800cbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbc6:	bc08      	pop	{r3}
 800cbc8:	469e      	mov	lr, r3
 800cbca:	4770      	bx	lr
