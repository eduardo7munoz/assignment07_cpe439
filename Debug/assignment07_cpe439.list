
assignment07_cpe439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c710  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800c8a0  0800c8a0  0001c8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccc4  0800ccc4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccc4  0800ccc4  0001ccc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cccc  0800cccc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cccc  0800cccc  0001cccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccd0  0800ccd0  0001ccd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800ccd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e38  2000007c  0800cd50  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20005eb4  0800cd50  00025eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000293bf  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005cb8  00000000  00000000  0004946b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023a8  00000000  00000000  0004f128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002120  00000000  00000000  000514d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f640  00000000  00000000  000535f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a781  00000000  00000000  00082c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110fd1  00000000  00000000  000ad3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001be382  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bf0  00000000  00000000  001be3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c888 	.word	0x0800c888

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800c888 	.word	0x0800c888

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <TX_task>:

Packets packetdata;
Packets gmpacket;

void TX_task(void *argument)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	packetdata.message[0] = 2;
 8000d68:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <TX_task+0xd8>)
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	701a      	strb	r2, [r3, #0]


	size_t xBytesSent;
	UART_escapes("[2J");
 8000d6e:	4833      	ldr	r0, [pc, #204]	; (8000e3c <TX_task+0xdc>)
 8000d70:	f000 fef6 	bl	8001b60 <UART_escapes>
	uint8_t curraddress;
	xTXsem = xSemaphoreCreateBinary();
 8000d74:	2203      	movs	r2, #3
 8000d76:	2100      	movs	r1, #0
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f007 fb6f 	bl	800845c <xQueueGenericCreate>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <TX_task+0xe0>)
 8000d82:	6013      	str	r3, [r2, #0]
	xTXorRXmutex = xSemaphoreCreateMutex();
 8000d84:	2001      	movs	r0, #1
 8000d86:	f007 fbe0 	bl	800854a <xQueueCreateMutex>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a2d      	ldr	r2, [pc, #180]	; (8000e44 <TX_task+0xe4>)
 8000d8e:	6013      	str	r3, [r2, #0]
	xTXorRX = xSemaphoreCreateBinary();
 8000d90:	2203      	movs	r2, #3
 8000d92:	2100      	movs	r1, #0
 8000d94:	2001      	movs	r0, #1
 8000d96:	f007 fb61 	bl	800845c <xQueueGenericCreate>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a2a      	ldr	r2, [pc, #168]	; (8000e48 <TX_task+0xe8>)
 8000d9e:	6013      	str	r3, [r2, #0]

    if( xTXsem != NULL && xTXorRXmutex != NULL)
 8000da0:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <TX_task+0xe0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d043      	beq.n	8000e30 <TX_task+0xd0>
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <TX_task+0xe4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d03f      	beq.n	8000e30 <TX_task+0xd0>
    {
		for(;;)
		{
			if(DMorGM==2)
 8000db0:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <TX_task+0xec>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d108      	bne.n	8000dca <TX_task+0x6a>
			{
				UART_print("DM to: 0x");
 8000db8:	4825      	ldr	r0, [pc, #148]	; (8000e50 <TX_task+0xf0>)
 8000dba:	f000 fe0d 	bl	80019d8 <UART_print>
				UART_print(packetdata.address);
 8000dbe:	4825      	ldr	r0, [pc, #148]	; (8000e54 <TX_task+0xf4>)
 8000dc0:	f000 fe0a 	bl	80019d8 <UART_print>
				DMorGM=0;
 8000dc4:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <TX_task+0xec>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]

			}

			if(xSemaphoreTake( xTXsem, ( TickType_t ) 100 ) == pdTRUE )
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <TX_task+0xe0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2164      	movs	r1, #100	; 0x64
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f007 fed9 	bl	8008b88 <xQueueSemaphoreTake>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d1e9      	bne.n	8000db0 <TX_task+0x50>
			{



				while(!xRxDoneFlag);
 8000ddc:	bf00      	nop
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <TX_task+0xf8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0fb      	beq.n	8000dde <TX_task+0x7e>
				sscanf(packetdata.address, "%x", &curraddress);
 8000de6:	f107 030f 	add.w	r3, r7, #15
 8000dea:	461a      	mov	r2, r3
 8000dec:	491b      	ldr	r1, [pc, #108]	; (8000e5c <TX_task+0xfc>)
 8000dee:	4819      	ldr	r0, [pc, #100]	; (8000e54 <TX_task+0xf4>)
 8000df0:	f00a ff76 	bl	800bce0 <siscanf>
			    SpiritPktCommonSetDestinationAddress(curraddress);
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 fbb2 	bl	8002560 <SpiritPktCommonSetDestinationAddress>

				xTxDoneFlag = S_RESET;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <TX_task+0x100>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]

				// Send the payload
				SPSGRF_StartTx(packetdata.message, strlen(packetdata.message));
 8000e02:	480d      	ldr	r0, [pc, #52]	; (8000e38 <TX_task+0xd8>)
 8000e04:	f7ff f9e4 	bl	80001d0 <strlen>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480a      	ldr	r0, [pc, #40]	; (8000e38 <TX_task+0xd8>)
 8000e10:	f000 fbec 	bl	80015ec <SPSGRF_StartTx>
				while(!xTxDoneFlag);
 8000e14:	bf00      	nop
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <TX_task+0x100>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0fb      	beq.n	8000e16 <TX_task+0xb6>
				UART_print("Message Sent\n\r");
 8000e1e:	4811      	ldr	r0, [pc, #68]	; (8000e64 <TX_task+0x104>)
 8000e20:	f000 fdda 	bl	80019d8 <UART_print>
				memset(&packetdata.message[1], '\0', PAYLOAD_SIZE-1);
 8000e24:	2263      	movs	r2, #99	; 0x63
 8000e26:	2100      	movs	r1, #0
 8000e28:	480f      	ldr	r0, [pc, #60]	; (8000e68 <TX_task+0x108>)
 8000e2a:	f00a fe43 	bl	800bab4 <memset>
			if(DMorGM==2)
 8000e2e:	e7bf      	b.n	8000db0 <TX_task+0x50>
			}

		}

    }
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200000a8 	.word	0x200000a8
 8000e3c:	0800c8a0 	.word	0x0800c8a0
 8000e40:	2000009c 	.word	0x2000009c
 8000e44:	200000a0 	.word	0x200000a0
 8000e48:	200000a4 	.word	0x200000a4
 8000e4c:	20000120 	.word	0x20000120
 8000e50:	0800c8a4 	.word	0x0800c8a4
 8000e54:	2000010c 	.word	0x2000010c
 8000e58:	20000124 	.word	0x20000124
 8000e5c:	0800c8b0 	.word	0x0800c8b0
 8000e60:	20000121 	.word	0x20000121
 8000e64:	0800c8b4 	.word	0x0800c8b4
 8000e68:	200000a9 	.word	0x200000a9

08000e6c <RX_task>:

void RX_task(void *argument)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b09d      	sub	sp, #116	; 0x74
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	xpayLoad = xMessageBufferCreate(PAYLOAD_SIZE);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2100      	movs	r1, #0
 8000e78:	2064      	movs	r0, #100	; 0x64
 8000e7a:	f008 f917 	bl	80090ac <xStreamBufferGenericCreate>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <RX_task+0x88>)
 8000e82:	6013      	str	r3, [r2, #0]
//	if(xpayLoad!=NULL)
//	{
		size_t xBytesSent;
		volatile char payloadl[PAYLOAD_SIZE] = "";
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2260      	movs	r2, #96	; 0x60
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f00a fe0f 	bl	800bab4 <memset>
//		UART_escapes("[1B");
//		UART_escapes("[s");
		for(;;)
		{

				xRxDoneFlag = S_RESET;
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <RX_task+0x8c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]

					SPSGRF_StartRx();
 8000e9c:	f000 fbc7 	bl	800162e <SPSGRF_StartRx>

					while (!xRxDoneFlag);
 8000ea0:	bf00      	nop
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <RX_task+0x8c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0fb      	beq.n	8000ea2 <RX_task+0x36>

					if(xRxDoneFlag == RX_DATA_READY)
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <RX_task+0x8c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d1f1      	bne.n	8000e96 <RX_task+0x2a>
					{
					SPSGRF_GetRxData(payloadl);
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fbc2 	bl	8001640 <SPSGRF_GetRxData>


					xBytesSent = xMessageBufferSend( xpayLoad,
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <RX_task+0x88>)
 8000ebe:	681c      	ldr	r4, [r3, #0]
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff f983 	bl	80001d0 <strlen>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	f107 0108 	add.w	r1, r7, #8
 8000ed0:	2364      	movs	r3, #100	; 0x64
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f008 f978 	bl	80091c8 <xStreamBufferSend>
 8000ed8:	66f8      	str	r0, [r7, #108]	; 0x6c
							( void * ) payloadl,
							strlen( payloadl), 100);

					if( xBytesSent != strlen( payloadl) )
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff f976 	bl	80001d0 <strlen>
					{
						/* The string could not be added to the message buffer because there was
		        not enough free space in the buffer. */
					}
					memset(payloadl, '\0', PAYLOAD_SIZE);
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	2264      	movs	r2, #100	; 0x64
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00a fde1 	bl	800bab4 <memset>
				xRxDoneFlag = S_RESET;
 8000ef2:	e7d0      	b.n	8000e96 <RX_task+0x2a>
 8000ef4:	20000098 	.word	0x20000098
 8000ef8:	20000124 	.word	0x20000124

08000efc <print_task>:
//	}

}

void print_task(void *argument)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b0a0      	sub	sp, #128	; 0x80
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	size_t xBytesReceived;
	char ucRxData[PAYLOAD_SIZE]={'\0'};
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2260      	movs	r2, #96	; 0x60
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00a fdcf 	bl	800bab4 <memset>
	size_t xReceivedBytes;
	const TickType_t xBlockTime = pdMS_TO_TICKS( 20 );
 8000f16:	2314      	movs	r3, #20
 8000f18:	67fb      	str	r3, [r7, #124]	; 0x7c

	for(;;)
	{

		memset(ucRxData, '\0', PAYLOAD_SIZE);
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	2264      	movs	r2, #100	; 0x64
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00a fdc6 	bl	800bab4 <memset>
		xReceivedBytes = xMessageBufferReceive( xpayLoad,
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <print_task+0xac>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	f107 0110 	add.w	r1, r7, #16
 8000f30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f32:	2264      	movs	r2, #100	; 0x64
 8000f34:	f008 fa3a 	bl	80093ac <xStreamBufferReceive>
 8000f38:	67b8      	str	r0, [r7, #120]	; 0x78
		                                            ( void * ) ucRxData,
		                                            sizeof( ucRxData ),
		                                            xBlockTime );

		    if( xReceivedBytes > 0 && (ucRxData[0]==2 || ucRxData[0]==6))
 8000f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0ec      	beq.n	8000f1a <print_task+0x1e>
 8000f40:	7c3b      	ldrb	r3, [r7, #16]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d002      	beq.n	8000f4c <print_task+0x50>
 8000f46:	7c3b      	ldrb	r3, [r7, #16]
 8000f48:	2b06      	cmp	r3, #6
 8000f4a:	d1e6      	bne.n	8000f1a <print_task+0x1e>
		    {
		    	if(ucRxData[0]==2) UART_print("DM from ");
 8000f4c:	7c3b      	ldrb	r3, [r7, #16]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d102      	bne.n	8000f58 <print_task+0x5c>
 8000f52:	4816      	ldr	r0, [pc, #88]	; (8000fac <print_task+0xb0>)
 8000f54:	f000 fd40 	bl	80019d8 <UART_print>
		    	if(ucRxData[0]==6) UART_print("GM from ");
 8000f58:	7c3b      	ldrb	r3, [r7, #16]
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d102      	bne.n	8000f64 <print_task+0x68>
 8000f5e:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <print_task+0xb4>)
 8000f60:	f000 fd3a 	bl	80019d8 <UART_print>
		    	uint8_t sAddress = SpiritPktCommonGetReceivedSourceAddress();
 8000f64:	f001 fb16 	bl	8002594 <SpiritPktCommonGetReceivedSourceAddress>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		    	char sAddString[2];
		    	itoa(sAddress, sAddString, 16);
 8000f6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000f72:	f107 010c 	add.w	r1, r7, #12
 8000f76:	2210      	movs	r2, #16
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f00a fd89 	bl	800ba90 <itoa>
		    	UART_print("0x");
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <print_task+0xb8>)
 8000f80:	f000 fd2a 	bl	80019d8 <UART_print>
		    	UART_print(sAddString);
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fd25 	bl	80019d8 <UART_print>
		    	UART_print(":");
 8000f8e:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <print_task+0xbc>)
 8000f90:	f000 fd22 	bl	80019d8 <UART_print>

		    	UART_print(&ucRxData[1]);
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	3301      	adds	r3, #1
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1c 	bl	80019d8 <UART_print>
		    	UART_print("\n");
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <print_task+0xc0>)
 8000fa2:	f000 fd19 	bl	80019d8 <UART_print>
	{
 8000fa6:	e7b8      	b.n	8000f1a <print_task+0x1e>
 8000fa8:	20000098 	.word	0x20000098
 8000fac:	0800c8c4 	.word	0x0800c8c4
 8000fb0:	0800c8d0 	.word	0x0800c8d0
 8000fb4:	0800c8dc 	.word	0x0800c8dc
 8000fb8:	0800c8e0 	.word	0x0800c8e0
 8000fbc:	0800c8e4 	.word	0x0800c8e4

08000fc0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <MX_FREERTOS_Init+0x18>)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <MX_FREERTOS_Init+0x1c>)
 8000fca:	f006 ffd1 	bl	8007f70 <osThreadNew>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4a03      	ldr	r2, [pc, #12]	; (8000fe0 <MX_FREERTOS_Init+0x20>)
 8000fd2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	0800c954 	.word	0x0800c954
 8000fdc:	08000fe5 	.word	0x08000fe5
 8000fe0:	20000110 	.word	0x20000110

08000fe4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f007 f851 	bl	8008094 <osDelay>
 8000ff2:	e7fb      	b.n	8000fec <StartDefaultTask+0x8>

08000ff4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	4b44      	ldr	r3, [pc, #272]	; (800111c <MX_GPIO_Init+0x128>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a43      	ldr	r2, [pc, #268]	; (800111c <MX_GPIO_Init+0x128>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b41      	ldr	r3, [pc, #260]	; (800111c <MX_GPIO_Init+0x128>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001022:	4b3e      	ldr	r3, [pc, #248]	; (800111c <MX_GPIO_Init+0x128>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4a3d      	ldr	r2, [pc, #244]	; (800111c <MX_GPIO_Init+0x128>)
 8001028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4b3b      	ldr	r3, [pc, #236]	; (800111c <MX_GPIO_Init+0x128>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <MX_GPIO_Init+0x128>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a37      	ldr	r2, [pc, #220]	; (800111c <MX_GPIO_Init+0x128>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b35      	ldr	r3, [pc, #212]	; (800111c <MX_GPIO_Init+0x128>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	4b32      	ldr	r3, [pc, #200]	; (800111c <MX_GPIO_Init+0x128>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4a31      	ldr	r2, [pc, #196]	; (800111c <MX_GPIO_Init+0x128>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4b2f      	ldr	r3, [pc, #188]	; (800111c <MX_GPIO_Init+0x128>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SDN_GPIO_Port, SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f003 fcd4 	bl	8004a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2140      	movs	r1, #64	; 0x40
 800107c:	4828      	ldr	r0, [pc, #160]	; (8001120 <MX_GPIO_Init+0x12c>)
 800107e:	f003 fccf 	bl	8004a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001088:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4822      	ldr	r0, [pc, #136]	; (8001124 <MX_GPIO_Init+0x130>)
 800109a:	f003 fb17 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	481c      	ldr	r0, [pc, #112]	; (8001124 <MX_GPIO_Init+0x130>)
 80010b4:	f003 fb0a 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin;
 80010b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPIRIT1_SDN_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f003 fafa 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 80010d8:	2340      	movs	r3, #64	; 0x40
 80010da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	480c      	ldr	r0, [pc, #48]	; (8001120 <MX_GPIO_Init+0x12c>)
 80010f0:	f003 faec 	bl	80046cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2105      	movs	r1, #5
 80010f8:	2017      	movs	r0, #23
 80010fa:	f003 faaf 	bl	800465c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010fe:	2017      	movs	r0, #23
 8001100:	f003 fac8 	bl	8004694 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2105      	movs	r1, #5
 8001108:	2028      	movs	r0, #40	; 0x28
 800110a:	f003 faa7 	bl	800465c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800110e:	2028      	movs	r0, #40	; 0x28
 8001110:	f003 fac0 	bl	8004694 <HAL_NVIC_EnableIRQ>

}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	48000400 	.word	0x48000400
 8001124:	48000800 	.word	0x48000800

08001128 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b09c      	sub	sp, #112	; 0x70
 800112c:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */

	char payloadRX[PAYLOAD_SIZE] = "";
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2260      	movs	r2, #96	; 0x60
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f00a fcbb 	bl	800bab4 <memset>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800113e:	f003 f94d 	bl	80043dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001142:	f000 f85b 	bl	80011fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001146:	f7ff ff55 	bl	8000ff4 <MX_GPIO_Init>
	MX_SPI1_Init();
 800114a:	f000 f8ff 	bl	800134c <MX_SPI1_Init>
	MX_USART2_UART_Init();
 800114e:	f000 fba3 	bl	8001898 <MX_USART2_UART_Init>
	UART_escapes("[H");
 8001152:	4821      	ldr	r0, [pc, #132]	; (80011d8 <main+0xb0>)
 8001154:	f000 fd04 	bl	8001b60 <UART_escapes>
	/* USER CODE BEGIN 2 */

	SPSGRF_Init();
 8001158:	f000 f996 	bl	8001488 <SPSGRF_Init>
    SpiritPktCommonSetDestinationAddress(0xFF);
 800115c:	20ff      	movs	r0, #255	; 0xff
 800115e:	f001 f9ff 	bl	8002560 <SpiritPktCommonSetDestinationAddress>
	SpiritPktStackSetPayloadLength(PAYLOAD_SIZE);
 8001162:	2064      	movs	r0, #100	; 0x64
 8001164:	f001 fb6c 	bl	8002840 <SpiritPktStackSetPayloadLength>
	//    SpiritPktBasicSetDestinationAddress(0x44);

	retVal = xTaskCreate(TX_task, "TX task", 5*configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+5, &TXmessage_Handler);
 8001168:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <main+0xb4>)
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	2305      	movs	r3, #5
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2300      	movs	r3, #0
 8001172:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001176:	491a      	ldr	r1, [pc, #104]	; (80011e0 <main+0xb8>)
 8001178:	481a      	ldr	r0, [pc, #104]	; (80011e4 <main+0xbc>)
 800117a:	f008 fb7a 	bl	8009872 <xTaskCreate>
 800117e:	6678      	str	r0, [r7, #100]	; 0x64
	if(retVal!=pdPASS){while(1);}//task creation failed
 8001180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001182:	2b01      	cmp	r3, #1
 8001184:	d000      	beq.n	8001188 <main+0x60>
 8001186:	e7fe      	b.n	8001186 <main+0x5e>

	retVal = xTaskCreate(RX_task, "RX task", 2*configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+4, &RXmessage_Handler);
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <main+0xc0>)
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	2304      	movs	r3, #4
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2300      	movs	r3, #0
 8001192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001196:	4915      	ldr	r1, [pc, #84]	; (80011ec <main+0xc4>)
 8001198:	4815      	ldr	r0, [pc, #84]	; (80011f0 <main+0xc8>)
 800119a:	f008 fb6a 	bl	8009872 <xTaskCreate>
 800119e:	6678      	str	r0, [r7, #100]	; 0x64
	if(retVal!=pdPASS){while(1);}//task creation failed
 80011a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d000      	beq.n	80011a8 <main+0x80>
 80011a6:	e7fe      	b.n	80011a6 <main+0x7e>


	retVal = xTaskCreate(print_task, "TX task", 2*configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, &printmessage_Handler);
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <main+0xcc>)
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	2301      	movs	r3, #1
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2300      	movs	r3, #0
 80011b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b6:	490a      	ldr	r1, [pc, #40]	; (80011e0 <main+0xb8>)
 80011b8:	480f      	ldr	r0, [pc, #60]	; (80011f8 <main+0xd0>)
 80011ba:	f008 fb5a 	bl	8009872 <xTaskCreate>
 80011be:	6678      	str	r0, [r7, #100]	; 0x64
	if(retVal!=pdPASS){while(1);}//task creation failed
 80011c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d000      	beq.n	80011c8 <main+0xa0>
 80011c6:	e7fe      	b.n	80011c6 <main+0x9e>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80011c8:	f006 fe88 	bl	8007edc <osKernelInitialize>
	MX_FREERTOS_Init();
 80011cc:	f7ff fef8 	bl	8000fc0 <MX_FREERTOS_Init>


	/* Start scheduler */
	osKernelStart();
 80011d0:	f006 fea8 	bl	8007f24 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	while (1)
 80011d4:	e7fe      	b.n	80011d4 <main+0xac>
 80011d6:	bf00      	nop
 80011d8:	0800c8f4 	.word	0x0800c8f4
 80011dc:	20000114 	.word	0x20000114
 80011e0:	0800c8f8 	.word	0x0800c8f8
 80011e4:	08000d61 	.word	0x08000d61
 80011e8:	20000118 	.word	0x20000118
 80011ec:	0800c900 	.word	0x0800c900
 80011f0:	08000e6d 	.word	0x08000e6d
 80011f4:	2000011c 	.word	0x2000011c
 80011f8:	08000efd 	.word	0x08000efd

080011fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b096      	sub	sp, #88	; 0x58
 8001200:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	2244      	movs	r2, #68	; 0x44
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f00a fc52 	bl	800bab4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800121e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001222:	f003 fc3b 	bl	8004a9c <HAL_PWREx_ControlVoltageScaling>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x34>
	{
		Error_Handler();
 800122c:	f000 f888 	bl	8001340 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001230:	2302      	movs	r3, #2
 8001232:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001238:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123a:	2310      	movs	r3, #16
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001242:	2302      	movs	r3, #2
 8001244:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001246:	2301      	movs	r3, #1
 8001248:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800124a:	230a      	movs	r3, #10
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800124e:	2307      	movs	r3, #7
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fc72 	bl	8004b48 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x72>
	{
		Error_Handler();
 800126a:	f000 f869 	bl	8001340 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2303      	movs	r3, #3
 8001274:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	2104      	movs	r1, #4
 8001286:	4618      	mov	r0, r3
 8001288:	f004 f83a 	bl	8005300 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8001292:	f000 f855 	bl	8001340 <Error_Handler>
	}
}
 8001296:	bf00      	nop
 8001298:	3758      	adds	r7, #88	; 0x58
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_GPIO_EXTI_Callback>:

///* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
	SpiritIrqs xIrqStatus;

	if (GPIO_Pin != SPIRIT1_GPIO3_Pin)
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	2b80      	cmp	r3, #128	; 0x80
 80012ae:	d12c      	bne.n	800130a <HAL_GPIO_EXTI_Callback+0x6a>
	{
		return;
	}

	SpiritIrqGetStatus(&xIrqStatus);
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fe49 	bl	8001f4c <SpiritIrqGetStatus>
	if (xIrqStatus.IRQ_TX_DATA_SENT)
 80012ba:	7b3b      	ldrb	r3, [r7, #12]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <HAL_GPIO_EXTI_Callback+0x2c>
	{
		xTxDoneFlag = S_SET;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_GPIO_EXTI_Callback+0x74>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_READY)
 80012cc:	7b3b      	ldrb	r3, [r7, #12]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <HAL_GPIO_EXTI_Callback+0x3e>
	{
		xRxDoneFlag = RX_DATA_READY;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_GPIO_EXTI_Callback+0x78>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_DISC)
 80012de:	7b3b      	ldrb	r3, [r7, #12]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d004      	beq.n	80012f4 <HAL_GPIO_EXTI_Callback+0x54>
	{
		SpiritCmdStrobeRx();
 80012ea:	f001 f88f 	bl	800240c <SpiritManagementWaCmdStrobeRx>
 80012ee:	2061      	movs	r0, #97	; 0x61
 80012f0:	f000 fd5e 	bl	8001db0 <SpiritCmdStrobeCommand>

	}
	if (xIrqStatus.IRQ_RX_TIMEOUT)
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	f003 0320 	and.w	r3, r3, #32
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_GPIO_EXTI_Callback+0x6c>
		{
		xRxDoneFlag = RX_TIMEOUT;
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_GPIO_EXTI_Callback+0x78>)
 8001302:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	e000      	b.n	800130c <HAL_GPIO_EXTI_Callback+0x6c>
		return;
 800130a:	bf00      	nop

		}

}
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000121 	.word	0x20000121
 8001318:	20000124 	.word	0x20000124

0800131c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800132e:	f003 f875 	bl	800441c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40001000 	.word	0x40001000

08001340 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001348:	e7fe      	b.n	8001348 <Error_Handler+0x8>
	...

0800134c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001352:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <MX_SPI1_Init+0x78>)
 8001354:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001358:	f44f 7282 	mov.w	r2, #260	; 0x104
 800135c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001366:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800136a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <MX_SPI1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_SPI1_Init+0x74>)
 800137a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001382:	2208      	movs	r2, #8
 8001384:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_SPI1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_SPI1_Init+0x74>)
 800139a:	2207      	movs	r2, #7
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <MX_SPI1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_SPI1_Init+0x74>)
 80013a6:	2208      	movs	r2, #8
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_SPI1_Init+0x74>)
 80013ac:	f004 feba 	bl	8006124 <HAL_SPI_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f7ff ffc3 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000128 	.word	0x20000128
 80013c4:	40013000 	.word	0x40013000

080013c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a25      	ldr	r2, [pc, #148]	; (800147c <HAL_SPI_MspInit+0xb4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d144      	bne.n	8001474 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <HAL_SPI_MspInit+0xb8>)
 80013ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ee:	4a24      	ldr	r2, [pc, #144]	; (8001480 <HAL_SPI_MspInit+0xb8>)
 80013f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013f4:	6613      	str	r3, [r2, #96]	; 0x60
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <HAL_SPI_MspInit+0xb8>)
 80013f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <HAL_SPI_MspInit+0xb8>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <HAL_SPI_MspInit+0xb8>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_SPI_MspInit+0xb8>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_SPI_MspInit+0xb8>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_SPI_MspInit+0xb8>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_SPI_MspInit+0xb8>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001432:	23c0      	movs	r3, #192	; 0xc0
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001442:	2305      	movs	r3, #5
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001450:	f003 f93c 	bl	80046cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001454:	2308      	movs	r3, #8
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001464:	2305      	movs	r3, #5
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <HAL_SPI_MspInit+0xbc>)
 8001470:	f003 f92c 	bl	80046cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40013000 	.word	0x40013000
 8001480:	40021000 	.word	0x40021000
 8001484:	48000400 	.word	0x48000400

08001488 <SPSGRF_Init>:




void SPSGRF_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b090      	sub	sp, #64	; 0x40
 800148c:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktStackInit xStackInit;
  PktStackAddressesInit xStackAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 800148e:	f002 fe13 	bl	80040b8 <RadioSpiInit>

  // restart the radio
  SpiritEnterShutdown();
 8001492:	f002 ff89 	bl	80043a8 <RadioEnterShutdown>
  SpiritExitShutdown();
 8001496:	f002 ff92 	bl	80043be <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 800149a:	f000 ffe7 	bl	800246c <SpiritManagementWaExtraCurrent>

  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 800149e:	2300      	movs	r3, #0
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	e004      	b.n	80014ae <SPSGRF_Init+0x26>
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	3301      	adds	r3, #1
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	71fb      	strb	r3, [r7, #7]
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2bff      	cmp	r3, #255	; 0xff
 80014b4:	d1f6      	bne.n	80014a4 <SPSGRF_Init+0x1c>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 80014b6:	f002 fddd 	bl	8004074 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 80014ba:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <SPSGRF_Init+0x14c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d1ea      	bne.n	800149e <SPSGRF_Init+0x16>

  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 80014c8:	2300      	movs	r3, #0
 80014ca:	84bb      	strh	r3, [r7, #36]	; 0x24
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 80014cc:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <SPSGRF_Init+0x150>)
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 80014d0:	4b42      	ldr	r3, [pc, #264]	; (80015dc <SPSGRF_Init+0x154>)
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  xRadioInit.lDatarate = DATARATE;
 80014e0:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 80014e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014ea:	63bb      	str	r3, [r7, #56]	; 0x38
  xRadioInit.lBandwidth = BANDWIDTH;
 80014ec:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <SPSGRF_Init+0x154>)
 80014ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 80014f0:	483b      	ldr	r0, [pc, #236]	; (80015e0 <SPSGRF_Init+0x158>)
 80014f2:	f002 fc0d 	bl	8003d10 <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 80014f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 fa5a 	bl	80029b4 <SpiritRadioInit>

  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 8001500:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80015e4 <SPSGRF_Init+0x15c>
 8001504:	2007      	movs	r0, #7
 8001506:	f002 fa9f 	bl	8003a48 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 800150a:	2007      	movs	r0, #7
 800150c:	f002 faf2 	bl	8003af4 <SpiritRadioSetPALevelMaxIndex>

  // Configure packet handler to use the Basic packet format
  xStackInit.xPreambleLength = PREAMBLE_LENGTH;
 8001510:	2318      	movs	r3, #24
 8001512:	753b      	strb	r3, [r7, #20]
  xStackInit.xSyncLength = SYNC_LENGTH;
 8001514:	2306      	movs	r3, #6
 8001516:	757b      	strb	r3, [r7, #21]
  xStackInit.lSyncWords = SYNC_WORD;
 8001518:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 800151c:	61bb      	str	r3, [r7, #24]
  xStackInit.xFixVarLength = LENGTH_TYPE;
 800151e:	2301      	movs	r3, #1
 8001520:	773b      	strb	r3, [r7, #28]
  xStackInit.cPktLengthWidth = LENGTH_WIDTH;
 8001522:	2307      	movs	r3, #7
 8001524:	777b      	strb	r3, [r7, #29]
  xStackInit.xCrcMode = CRC_MODE;
 8001526:	2320      	movs	r3, #32
 8001528:	77bb      	strb	r3, [r7, #30]
  xStackInit.xControlLength = CONTROL_LENGTH;
 800152a:	2300      	movs	r3, #0
 800152c:	77fb      	strb	r3, [r7, #31]
  xStackInit.xFec = EN_FEC;
 800152e:	2300      	movs	r3, #0
 8001530:	f887 3020 	strb.w	r3, [r7, #32]
  xStackInit.xDataWhitening = EN_WHITENING;
 8001534:	2301      	movs	r3, #1
 8001536:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  SpiritPktStackInit(&xStackInit);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4618      	mov	r0, r3
 8001540:	f001 f840 	bl	80025c4 <SpiritPktStackInit>

  // Configure destination address criteria for automatic packet filtering
  xStackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8001544:	2301      	movs	r3, #1
 8001546:	733b      	strb	r3, [r7, #12]
  xStackAddress.cMyAddress = MY_ADDRESS;
 8001548:	23ed      	movs	r3, #237	; 0xed
 800154a:	737b      	strb	r3, [r7, #13]
  xStackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 800154c:	2301      	movs	r3, #1
 800154e:	73bb      	strb	r3, [r7, #14]
  xStackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8001550:	23ee      	movs	r3, #238	; 0xee
 8001552:	73fb      	strb	r3, [r7, #15]
  xStackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 8001554:	2301      	movs	r3, #1
 8001556:	743b      	strb	r3, [r7, #16]
  xStackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8001558:	23ff      	movs	r3, #255	; 0xff
 800155a:	747b      	strb	r3, [r7, #17]
  SpiritPktStackAddressesInit(&xStackAddress);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4618      	mov	r0, r3
 8001562:	f001 f8ff 	bl	8002764 <SpiritPktStackAddressesInit>

  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 8001566:	2302      	movs	r3, #2
 8001568:	723b      	strb	r3, [r7, #8]
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 800156a:	2302      	movs	r3, #2
 800156c:	727b      	strb	r3, [r7, #9]
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 800156e:	2300      	movs	r3, #0
 8001570:	72bb      	strb	r3, [r7, #10]
  SpiritGpioInit(&xGpioInit);
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fc32 	bl	8001de0 <SpiritGpioInit>

  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 800157c:	2000      	movs	r0, #0
 800157e:	f000 fc53 	bl	8001e28 <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 8001582:	2101      	movs	r1, #1
 8001584:	2004      	movs	r0, #4
 8001586:	f000 fc7b 	bl	8001e80 <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 800158a:	2101      	movs	r1, #1
 800158c:	2001      	movs	r0, #1
 800158e:	f000 fc77 	bl	8001e80 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 8001592:	2101      	movs	r1, #1
 8001594:	2002      	movs	r0, #2
 8001596:	f000 fc73 	bl	8001e80 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 800159a:	2101      	movs	r1, #1
 800159c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80015a0:	f000 fc6e 	bl	8001e80 <SpiritIrq>
  SpiritIrqClearStatus();
 80015a4:	f000 fd04 	bl	8001fb0 <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f001 f9af 	bl	800290c <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f001 f974 	bl	800289c <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 80015b4:	f06f 0077 	mvn.w	r0, #119	; 0x77
 80015b8:	f001 f9dc 	bl	8002974 <SpiritQiSetRssiThresholddBm>

  // Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
  SpiritTimerSetRxTimeoutMs(RECEIVE_TIMEOUT);
 80015bc:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80015e8 <SPSGRF_Init+0x160>
 80015c0:	f002 fbb6 	bl	8003d30 <SpiritTimerSetRxTimeoutMs>
#else
  SET_INFINITE_RX_TIMEOUT();
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 80015c4:	2002      	movs	r0, #2
 80015c6:	f002 fd0d 	bl	8003fe4 <SpiritTimerSetRxTimeoutStopCondition>
}
 80015ca:	bf00      	nop
 80015cc:	3740      	adds	r7, #64	; 0x40
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000026c 	.word	0x2000026c
 80015d8:	3689cac0 	.word	0x3689cac0
 80015dc:	000186a0 	.word	0x000186a0
 80015e0:	02faf080 	.word	0x02faf080
 80015e4:	4139999a 	.word	0x4139999a
 80015e8:	42c80000 	.word	0x42c80000

080015ec <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 80015f8:	2072      	movs	r0, #114	; 0x72
 80015fa:	f000 fbd9 	bl	8001db0 <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	2b60      	cmp	r3, #96	; 0x60
 8001602:	bf28      	it	cs
 8001604:	2360      	movcs	r3, #96	; 0x60
 8001606:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fe3b 	bl	8004288 <RadioSpiWriteFifo>
  SpiritPktStackSetPayloadLength(txLen);
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	b29b      	uxth	r3, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f001 f912 	bl	8002840 <SpiritPktStackSetPayloadLength>
  SpiritCmdStrobeTx();
 800161c:	f000 febe 	bl	800239c <SpiritManagementWaCmdStrobeTx>
 8001620:	2060      	movs	r0, #96	; 0x60
 8001622:	f000 fbc5 	bl	8001db0 <SpiritCmdStrobeCommand>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 8001632:	f000 feeb 	bl	800240c <SpiritManagementWaCmdStrobeRx>
 8001636:	2061      	movs	r0, #97	; 0x61
 8001638:	f000 fbba 	bl	8001db0 <SpiritCmdStrobeCommand>
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 8001648:	f000 fcca 	bl	8001fe0 <SpiritLinearFifoReadNumElementsRxFifo>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4618      	mov	r0, r3
 8001656:	f002 fe5f 	bl	8004318 <RadioSpiReadFifo>

  return len;
 800165a:	7bfb      	ldrb	r3, [r7, #15]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_MspInit+0x4c>)
 800166c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166e:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <HAL_MspInit+0x4c>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6613      	str	r3, [r2, #96]	; 0x60
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_MspInit+0x4c>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_MspInit+0x4c>)
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_MspInit+0x4c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6593      	str	r3, [r2, #88]	; 0x58
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_MspInit+0x4c>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	210f      	movs	r1, #15
 800169e:	f06f 0001 	mvn.w	r0, #1
 80016a2:	f002 ffdb 	bl	800465c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000

080016b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08e      	sub	sp, #56	; 0x38
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016c2:	4b34      	ldr	r3, [pc, #208]	; (8001794 <HAL_InitTick+0xe0>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	4a33      	ldr	r2, [pc, #204]	; (8001794 <HAL_InitTick+0xe0>)
 80016c8:	f043 0310 	orr.w	r3, r3, #16
 80016cc:	6593      	str	r3, [r2, #88]	; 0x58
 80016ce:	4b31      	ldr	r3, [pc, #196]	; (8001794 <HAL_InitTick+0xe0>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016da:	f107 0210 	add.w	r2, r7, #16
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 ffcf 	bl	8005688 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d103      	bne.n	80016fc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016f4:	f003 ff9c 	bl	8005630 <HAL_RCC_GetPCLK1Freq>
 80016f8:	6378      	str	r0, [r7, #52]	; 0x34
 80016fa:	e004      	b.n	8001706 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016fc:	f003 ff98 	bl	8005630 <HAL_RCC_GetPCLK1Freq>
 8001700:	4603      	mov	r3, r0
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001708:	4a23      	ldr	r2, [pc, #140]	; (8001798 <HAL_InitTick+0xe4>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	0c9b      	lsrs	r3, r3, #18
 8001710:	3b01      	subs	r3, #1
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001714:	4b21      	ldr	r3, [pc, #132]	; (800179c <HAL_InitTick+0xe8>)
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <HAL_InitTick+0xec>)
 8001718:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_InitTick+0xe8>)
 800171c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001720:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001722:	4a1e      	ldr	r2, [pc, #120]	; (800179c <HAL_InitTick+0xe8>)
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001726:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_InitTick+0xe8>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_InitTick+0xe8>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_InitTick+0xe8>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800173a:	4818      	ldr	r0, [pc, #96]	; (800179c <HAL_InitTick+0xe8>)
 800173c:	f005 fc02 	bl	8006f44 <HAL_TIM_Base_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001746:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800174a:	2b00      	cmp	r3, #0
 800174c:	d11b      	bne.n	8001786 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800174e:	4813      	ldr	r0, [pc, #76]	; (800179c <HAL_InitTick+0xe8>)
 8001750:	f005 fc5a 	bl	8007008 <HAL_TIM_Base_Start_IT>
 8001754:	4603      	mov	r3, r0
 8001756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800175a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800175e:	2b00      	cmp	r3, #0
 8001760:	d111      	bne.n	8001786 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001762:	2036      	movs	r0, #54	; 0x36
 8001764:	f002 ff96 	bl	8004694 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b0f      	cmp	r3, #15
 800176c:	d808      	bhi.n	8001780 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800176e:	2200      	movs	r2, #0
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	2036      	movs	r0, #54	; 0x36
 8001774:	f002 ff72 	bl	800465c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001778:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <HAL_InitTick+0xf0>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e002      	b.n	8001786 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001786:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800178a:	4618      	mov	r0, r3
 800178c:	3738      	adds	r7, #56	; 0x38
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	431bde83 	.word	0x431bde83
 800179c:	2000018c 	.word	0x2000018c
 80017a0:	40001000 	.word	0x40001000
 80017a4:	2000000c 	.word	0x2000000c

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x4>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 80017d8:	2080      	movs	r0, #128	; 0x80
 80017da:	f003 f939 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017e6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017ea:	f003 f931 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <TIM6_DAC_IRQHandler+0x10>)
 80017fa:	f005 fc75 	bl	80070e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000018c 	.word	0x2000018c

08001808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <_sbrk+0x5c>)
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <_sbrk+0x60>)
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <_sbrk+0x64>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <_sbrk+0x68>)
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001838:	f00a f8e8 	bl	800ba0c <__errno>
 800183c:	4603      	mov	r3, r0
 800183e:	220c      	movs	r2, #12
 8001840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001846:	e009      	b.n	800185c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <_sbrk+0x64>)
 8001858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20018000 	.word	0x20018000
 8001868:	00000400 	.word	0x00000400
 800186c:	200001d8 	.word	0x200001d8
 8001870:	20005eb8 	.word	0x20005eb8

08001874 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <SystemInit+0x20>)
 800187a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <SystemInit+0x20>)
 8001880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <MX_USART2_UART_Init>:
uint8_t newaddresscount;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
	  huart2.Instance = USART2;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <MX_USART2_UART_Init+0x5c>)
 800189e:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <MX_USART2_UART_Init+0x60>)
 80018a0:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_USART2_UART_Init+0x5c>)
 80018a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a8:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_USART2_UART_Init+0x5c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <MX_USART2_UART_Init+0x5c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_USART2_UART_Init+0x5c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <MX_USART2_UART_Init+0x5c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_USART2_UART_Init+0x5c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <MX_USART2_UART_Init+0x5c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_USART2_UART_Init+0x5c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <MX_USART2_UART_Init+0x5c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 80018da:	b662      	cpsie	i
}
 80018dc:	bf00      	nop
	  __enable_irq();

  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_USART2_UART_Init+0x5c>)
 80018e0:	f005 fe02 	bl	80074e8 <HAL_UART_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80018ea:	f7ff fd29 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200001dc 	.word	0x200001dc
 80018f8:	40004400 	.word	0x40004400

080018fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b0ac      	sub	sp, #176	; 0xb0
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2288      	movs	r2, #136	; 0x88
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f00a f8c9 	bl	800bab4 <memset>
  if(uartHandle->Instance==USART2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a29      	ldr	r2, [pc, #164]	; (80019cc <HAL_UART_MspInit+0xd0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d14b      	bne.n	80019c4 <HAL_UART_MspInit+0xc8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800192c:	2302      	movs	r3, #2
 800192e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001930:	2300      	movs	r3, #0
 8001932:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4618      	mov	r0, r3
 800193a:	f003 ff37 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001944:	f7ff fcfc 	bl	8001340 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001948:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_UART_MspInit+0xd4>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <HAL_UART_MspInit+0xd4>)
 800194e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001952:	6593      	str	r3, [r2, #88]	; 0x58
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <HAL_UART_MspInit+0xd4>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_UART_MspInit+0xd4>)
 8001962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001964:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <HAL_UART_MspInit+0xd4>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_UART_MspInit+0xd4>)
 800196e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001978:	230c      	movs	r3, #12
 800197a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198a:	2303      	movs	r3, #3
 800198c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001990:	2307      	movs	r3, #7
 8001992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a0:	f002 fe94 	bl	80046cc <HAL_GPIO_Init>
    __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_UART_MspInit+0xd8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_UART_MspInit+0xd8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0220 	orr.w	r2, r2, #32
 80019b2:	601a      	str	r2, [r3, #0]
    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2105      	movs	r1, #5
 80019b8:	2026      	movs	r0, #38	; 0x26
 80019ba:	f002 fe4f 	bl	800465c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019be:	2026      	movs	r0, #38	; 0x26
 80019c0:	f002 fe68 	bl	8004694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019c4:	bf00      	nop
 80019c6:	37b0      	adds	r7, #176	; 0xb0
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40004400 	.word	0x40004400
 80019d0:	40021000 	.word	0x40021000
 80019d4:	200001dc 	.word	0x200001dc

080019d8 <UART_print>:
}

/* USER CODE BEGIN 1 */

void UART_print(char *outputstring)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	81fb      	strh	r3, [r7, #14]
 80019e4:	e010      	b.n	8001a08 <UART_print+0x30>
	{
		while(!(USART2->ISR & USART_ISR_TXE)); //Transmit data register empty, using negation since value of 0 means data has not been transferred
 80019e6:	bf00      	nop
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <UART_print+0x48>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f9      	beq.n	80019e8 <UART_print+0x10>

		USART2->TDR = outputstring[currchar];
 80019f4:	89fb      	ldrh	r3, [r7, #14]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <UART_print+0x48>)
 80019fe:	b292      	uxth	r2, r2
 8001a00:	851a      	strh	r2, [r3, #40]	; 0x28
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 8001a02:	89fb      	ldrh	r3, [r7, #14]
 8001a04:	3301      	adds	r3, #1
 8001a06:	81fb      	strh	r3, [r7, #14]
 8001a08:	89fc      	ldrh	r4, [r7, #14]
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7fe fbe0 	bl	80001d0 <strlen>
 8001a10:	4603      	mov	r3, r0
 8001a12:	429c      	cmp	r4, r3
 8001a14:	d3e7      	bcc.n	80019e6 <UART_print+0xe>
	}

}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd90      	pop	{r4, r7, pc}
 8001a20:	40004400 	.word	0x40004400

08001a24 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]


	uint8_t RX = USART2->RDR;
 8001a2e:	4b42      	ldr	r3, [pc, #264]	; (8001b38 <USART2_IRQHandler+0x114>)
 8001a30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	73fb      	strb	r3, [r7, #15]
	char tempstr[6]={'\0'};
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	80bb      	strh	r3, [r7, #4]
	switch(RX)
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	2b4a      	cmp	r3, #74	; 0x4a
 8001a42:	d00a      	beq.n	8001a5a <USART2_IRQHandler+0x36>
 8001a44:	2b4a      	cmp	r3, #74	; 0x4a
 8001a46:	dc28      	bgt.n	8001a9a <USART2_IRQHandler+0x76>
 8001a48:	2b47      	cmp	r3, #71	; 0x47
 8001a4a:	d01a      	beq.n	8001a82 <USART2_IRQHandler+0x5e>
 8001a4c:	2b47      	cmp	r3, #71	; 0x47
 8001a4e:	dc24      	bgt.n	8001a9a <USART2_IRQHandler+0x76>
 8001a50:	2b24      	cmp	r3, #36	; 0x24
 8001a52:	d00f      	beq.n	8001a74 <USART2_IRQHandler+0x50>
 8001a54:	2b44      	cmp	r3, #68	; 0x44
 8001a56:	d004      	beq.n	8001a62 <USART2_IRQHandler+0x3e>
 8001a58:	e01f      	b.n	8001a9a <USART2_IRQHandler+0x76>
	{

			break;
		case 'J':
			UART_escapes("[2J"); //clear everything
 8001a5a:	4838      	ldr	r0, [pc, #224]	; (8001b3c <USART2_IRQHandler+0x118>)
 8001a5c:	f000 f880 	bl	8001b60 <UART_escapes>
			break;
 8001a60:	e066      	b.n	8001b30 <USART2_IRQHandler+0x10c>


		case 'D':
			packetdata.message[0] = 2;
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <USART2_IRQHandler+0x11c>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	701a      	strb	r2, [r3, #0]
			DMorGM =1;
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <USART2_IRQHandler+0x120>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
			UART_escapes("[s");
 8001a6e:	4836      	ldr	r0, [pc, #216]	; (8001b48 <USART2_IRQHandler+0x124>)
 8001a70:	f000 f876 	bl	8001b60 <UART_escapes>
		case '$':
			newaddressflag = 1;
 8001a74:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <USART2_IRQHandler+0x128>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
			UART_print("Enter Address");
 8001a7a:	4835      	ldr	r0, [pc, #212]	; (8001b50 <USART2_IRQHandler+0x12c>)
 8001a7c:	f7ff ffac 	bl	80019d8 <UART_print>
			break;
 8001a80:	e056      	b.n	8001b30 <USART2_IRQHandler+0x10c>
		case 'G':
				packetdata.message[0] = 6;
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <USART2_IRQHandler+0x11c>)
 8001a84:	2206      	movs	r2, #6
 8001a86:	701a      	strb	r2, [r3, #0]
				packetdata.address[0] = 'F';//hardcoding broadcast address
 8001a88:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <USART2_IRQHandler+0x11c>)
 8001a8a:	2246      	movs	r2, #70	; 0x46
 8001a8c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				packetdata.address[1] = 'F';
 8001a90:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <USART2_IRQHandler+0x11c>)
 8001a92:	2246      	movs	r2, #70	; 0x46
 8001a94:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			break;
 8001a98:	e04a      	b.n	8001b30 <USART2_IRQHandler+0x10c>
		default:


			if(newaddressflag)
 8001a9a:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <USART2_IRQHandler+0x128>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01f      	beq.n	8001ae2 <USART2_IRQHandler+0xbe>
			{

				packetdata.address[newaddresscount] = RX;
 8001aa2:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <USART2_IRQHandler+0x130>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <USART2_IRQHandler+0x11c>)
 8001aaa:	4413      	add	r3, r2
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				++newaddresscount;
 8001ab2:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <USART2_IRQHandler+0x130>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <USART2_IRQHandler+0x130>)
 8001abc:	701a      	strb	r2, [r3, #0]
				USART2->TDR=RX;
 8001abe:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <USART2_IRQHandler+0x114>)
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	851a      	strh	r2, [r3, #40]	; 0x28
				if(newaddresscount == 2)
 8001ac6:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <USART2_IRQHandler+0x130>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d12f      	bne.n	8001b2e <USART2_IRQHandler+0x10a>
				{

					DMorGM=2;
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <USART2_IRQHandler+0x120>)
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	701a      	strb	r2, [r3, #0]
					newaddressflag = 0;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <USART2_IRQHandler+0x128>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
					newaddresscount = 0;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <USART2_IRQHandler+0x130>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]



				}
			}
				break;
 8001ae0:	e025      	b.n	8001b2e <USART2_IRQHandler+0x10a>
				packetdata.message[count] = RX;
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <USART2_IRQHandler+0x134>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4a15      	ldr	r2, [pc, #84]	; (8001b40 <USART2_IRQHandler+0x11c>)
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	5453      	strb	r3, [r2, r1]
				++count;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <USART2_IRQHandler+0x134>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	3301      	adds	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <USART2_IRQHandler+0x134>)
 8001af8:	801a      	strh	r2, [r3, #0]
				while(!(USART2->ISR & USART_ISR_TXE));
 8001afa:	bf00      	nop
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <USART2_IRQHandler+0x114>)
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f9      	beq.n	8001afc <USART2_IRQHandler+0xd8>
				USART2->TDR=RX;
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <USART2_IRQHandler+0x114>)
 8001b0a:	7bfa      	ldrb	r2, [r7, #15]
 8001b0c:	b292      	uxth	r2, r2
 8001b0e:	851a      	strh	r2, [r3, #40]	; 0x28
				if(RX == '\r') {
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b0d      	cmp	r3, #13
 8001b14:	d10b      	bne.n	8001b2e <USART2_IRQHandler+0x10a>
					count = 1;
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <USART2_IRQHandler+0x134>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	801a      	strh	r2, [r3, #0]
					xSemaphoreGiveFromISR( xTXsem, &xHigherPriorityTaskWoken );
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <USART2_IRQHandler+0x138>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	4619      	mov	r1, r3
 8001b28:	4610      	mov	r0, r2
 8001b2a:	f006 fec0 	bl	80088ae <xQueueGiveFromISR>
				break;
 8001b2e:	bf00      	nop
	}
}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40004400 	.word	0x40004400
 8001b3c:	0800c908 	.word	0x0800c908
 8001b40:	200000a8 	.word	0x200000a8
 8001b44:	20000120 	.word	0x20000120
 8001b48:	0800c90c 	.word	0x0800c90c
 8001b4c:	20000260 	.word	0x20000260
 8001b50:	0800c910 	.word	0x0800c910
 8001b54:	20000261 	.word	0x20000261
 8001b58:	20000004 	.word	0x20000004
 8001b5c:	2000009c 	.word	0x2000009c

08001b60 <UART_escapes>:

void UART_escapes(char *escstring)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & USART_ISR_TXE));//do not advance until receiving transmit flag
 8001b68:	bf00      	nop
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <UART_escapes+0x2c>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f9      	beq.n	8001b6a <UART_escapes+0xa>
	USART2->TDR = (0x1B);  // ESC
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <UART_escapes+0x2c>)
 8001b78:	221b      	movs	r2, #27
 8001b7a:	851a      	strh	r2, [r3, #40]	; 0x28
	UART_print(escstring);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff2b 	bl	80019d8 <UART_print>

}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40004400 	.word	0x40004400

08001b90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b94:	f7ff fe6e 	bl	8001874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001b9a:	490d      	ldr	r1, [pc, #52]	; (8001bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <LoopForever+0xe>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	; (8001bdc <LoopForever+0x16>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f009 ff2b 	bl	800ba18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bc2:	f7ff fab1 	bl	8001128 <main>

08001bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bc6:	e7fe      	b.n	8001bc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001bd4:	0800ccd4 	.word	0x0800ccd4
  ldr r2, =_sbss
 8001bd8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001bdc:	20005eb4 	.word	0x20005eb4

08001be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC1_2_IRQHandler>
	...

08001be4 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001bee:	f107 030f 	add.w	r3, r7, #15
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	2050      	movs	r0, #80	; 0x50
 8001bf8:	f002 faba 	bl	8004170 <RadioSpiReadRegisters>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <SpiritCalibrationVco+0x6c>)
 8001c00:	b212      	sxth	r2, r2
 8001c02:	4611      	mov	r1, r2
 8001c04:	7019      	strb	r1, [r3, #0]
 8001c06:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c0a:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d105      	bne.n	8001c1e <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e004      	b.n	8001c28 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	f023 0302 	bic.w	r3, r3, #2
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001c28:	f107 030f 	add.w	r3, r7, #15
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	2101      	movs	r1, #1
 8001c30:	2050      	movs	r0, #80	; 0x50
 8001c32:	f002 fa51 	bl	80040d8 <RadioSpiWriteRegisters>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <SpiritCalibrationVco+0x6c>)
 8001c3a:	b212      	sxth	r2, r2
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	7019      	strb	r1, [r3, #0]
 8001c40:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c44:	705a      	strb	r2, [r3, #1]

}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000026c 	.word	0x2000026c

08001c54 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001c5a:	1dfb      	adds	r3, r7, #7
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2101      	movs	r1, #1
 8001c60:	20e5      	movs	r0, #229	; 0xe5
 8001c62:	f002 fa85 	bl	8004170 <RadioSpiReadRegisters>
 8001c66:	4602      	mov	r2, r0
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <SpiritCalibrationGetVcoCalData+0x34>)
 8001c6a:	b212      	sxth	r2, r2
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	7019      	strb	r1, [r3, #0]
 8001c70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c74:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c7c:	b2db      	uxtb	r3, r3

}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000026c 	.word	0x2000026c

08001c8c <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001c96:	f107 030f 	add.w	r3, r7, #15
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	206e      	movs	r0, #110	; 0x6e
 8001ca0:	f002 fa66 	bl	8004170 <RadioSpiReadRegisters>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001ca8:	b212      	sxth	r2, r2
 8001caa:	4611      	mov	r1, r2
 8001cac:	7019      	strb	r1, [r3, #0]
 8001cae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cb2:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001cc8:	f107 030f 	add.w	r3, r7, #15
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2101      	movs	r1, #1
 8001cd0:	206e      	movs	r0, #110	; 0x6e
 8001cd2:	f002 fa01 	bl	80040d8 <RadioSpiWriteRegisters>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001cda:	b212      	sxth	r2, r2
 8001cdc:	4611      	mov	r1, r2
 8001cde:	7019      	strb	r1, [r3, #0]
 8001ce0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ce4:	705a      	strb	r2, [r3, #1]

}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000026c 	.word	0x2000026c

08001cf4 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001cfe:	f107 030f 	add.w	r3, r7, #15
 8001d02:	461a      	mov	r2, r3
 8001d04:	2101      	movs	r1, #1
 8001d06:	206f      	movs	r0, #111	; 0x6f
 8001d08:	f002 fa32 	bl	8004170 <RadioSpiReadRegisters>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001d10:	b212      	sxth	r2, r2
 8001d12:	4611      	mov	r1, r2
 8001d14:	7019      	strb	r1, [r3, #0]
 8001d16:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d1a:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001d30:	f107 030f 	add.w	r3, r7, #15
 8001d34:	461a      	mov	r2, r3
 8001d36:	2101      	movs	r1, #1
 8001d38:	206f      	movs	r0, #111	; 0x6f
 8001d3a:	f002 f9cd 	bl	80040d8 <RadioSpiWriteRegisters>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001d42:	b212      	sxth	r2, r2
 8001d44:	4611      	mov	r1, r2
 8001d46:	7019      	strb	r1, [r3, #0]
 8001d48:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d4c:	705a      	strb	r2, [r3, #1]

}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2000026c 	.word	0x2000026c

08001d5c <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001d66:	f107 030f 	add.w	r3, r7, #15
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	209e      	movs	r0, #158	; 0x9e
 8001d70:	f002 f9fe 	bl	8004170 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	f023 0306 	bic.w	r3, r3, #6
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d105      	bne.n	8001d90 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	e004      	b.n	8001d9a <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001d9a:	f107 030f 	add.w	r3, r7, #15
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2101      	movs	r1, #1
 8001da2:	209e      	movs	r0, #158	; 0x9e
 8001da4:	f002 f998 	bl	80040d8 <RadioSpiWriteRegisters>
  
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f002 fa23 	bl	8004208 <RadioSpiCommandStrobes>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SpiritCmdStrobeCommand+0x2c>)
 8001dc6:	b212      	sxth	r2, r2
 8001dc8:	4611      	mov	r1, r2
 8001dca:	7019      	strb	r1, [r3, #0]
 8001dcc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001dd0:	705a      	strb	r2, [r3, #1]
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000026c 	.word	0x2000026c

08001de0 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8001de8:	2300      	movs	r3, #0
 8001dea:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	785a      	ldrb	r2, [r3, #1]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	789b      	ldrb	r3, [r3, #2]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	f107 020f 	add.w	r2, r7, #15
 8001e02:	2101      	movs	r1, #1
 8001e04:	4618      	mov	r0, r3
 8001e06:	f002 f967 	bl	80040d8 <RadioSpiWriteRegisters>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <SpiritGpioInit+0x44>)
 8001e0e:	b212      	sxth	r2, r2
 8001e10:	4611      	mov	r1, r2
 8001e12:	7019      	strb	r1, [r3, #0]
 8001e14:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e18:	705a      	strb	r2, [r3, #1]

}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2000026c 	.word	0x2000026c

08001e28 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00c      	beq.n	8001e54 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8001e3a:	f107 0308 	add.w	r3, r7, #8
 8001e3e:	2204      	movs	r2, #4
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f009 fe36 	bl	800bab4 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	2090      	movs	r0, #144	; 0x90
 8001e5e:	f002 f93b 	bl	80040d8 <RadioSpiWriteRegisters>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SpiritIrqDeInit+0x54>)
 8001e66:	b212      	sxth	r2, r2
 8001e68:	4611      	mov	r1, r2
 8001e6a:	7019      	strb	r1, [r3, #0]
 8001e6c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e70:	705a      	strb	r2, [r3, #1]
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000026c 	.word	0x2000026c

08001e80 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	461a      	mov	r2, r3
 8001e96:	2104      	movs	r1, #4
 8001e98:	2090      	movs	r0, #144	; 0x90
 8001e9a:	f002 f969 	bl	8004170 <RadioSpiReadRegisters>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <SpiritIrq+0xc8>)
 8001ea2:	b212      	sxth	r2, r2
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	7019      	strb	r1, [r3, #0]
 8001ea8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001eac:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	74fb      	strb	r3, [r7, #19]
 8001eb2:	e011      	b.n	8001ed8 <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8001eb4:	7cfb      	ldrb	r3, [r7, #19]
 8001eb6:	3318      	adds	r3, #24
 8001eb8:	443b      	add	r3, r7
 8001eba:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	7cfb      	ldrb	r3, [r7, #19]
 8001ec2:	f1c3 0303 	rsb	r3, r3, #3
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	4413      	add	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001ed2:	7cfb      	ldrb	r3, [r7, #19]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	74fb      	strb	r3, [r7, #19]
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d9ea      	bls.n	8001eb4 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4013      	ands	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	e003      	b.n	8001ef8 <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	74bb      	strb	r3, [r7, #18]
 8001efc:	e00e      	b.n	8001f1c <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8001efe:	7cbb      	ldrb	r3, [r7, #18]
 8001f00:	f1c3 0303 	rsb	r3, r3, #3
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	40da      	lsrs	r2, r3
 8001f0a:	7cbb      	ldrb	r3, [r7, #18]
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	3318      	adds	r3, #24
 8001f10:	443b      	add	r3, r7
 8001f12:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8001f16:	7cbb      	ldrb	r3, [r7, #18]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	74bb      	strb	r3, [r7, #18]
 8001f1c:	7cbb      	ldrb	r3, [r7, #18]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d9ed      	bls.n	8001efe <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	461a      	mov	r2, r3
 8001f28:	2104      	movs	r1, #4
 8001f2a:	2090      	movs	r0, #144	; 0x90
 8001f2c:	f002 f8d4 	bl	80040d8 <RadioSpiWriteRegisters>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <SpiritIrq+0xc8>)
 8001f34:	b212      	sxth	r2, r2
 8001f36:	4611      	mov	r1, r2
 8001f38:	7019      	strb	r1, [r3, #0]
 8001f3a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f3e:	705a      	strb	r2, [r3, #1]

}
 8001f40:	bf00      	nop
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	2000026c 	.word	0x2000026c

08001f4c <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2104      	movs	r1, #4
 8001f60:	20fa      	movs	r0, #250	; 0xfa
 8001f62:	f002 f905 	bl	8004170 <RadioSpiReadRegisters>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <SpiritIrqGetStatus+0x60>)
 8001f6a:	b212      	sxth	r2, r2
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	7019      	strb	r1, [r3, #0]
 8001f70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f74:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	74fb      	strb	r3, [r7, #19]
 8001f7a:	e00e      	b.n	8001f9a <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	f1c3 0303 	rsb	r3, r3, #3
 8001f82:	3318      	adds	r3, #24
 8001f84:	443b      	add	r3, r7
 8001f86:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	3301      	adds	r3, #1
 8001f98:	74fb      	strb	r3, [r7, #19]
 8001f9a:	7cfb      	ldrb	r3, [r7, #19]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d9ed      	bls.n	8001f7c <SpiritIrqGetStatus+0x30>
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000026c 	.word	0x2000026c

08001fb0 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2104      	movs	r1, #4
 8001fbc:	20fa      	movs	r0, #250	; 0xfa
 8001fbe:	f002 f8d7 	bl	8004170 <RadioSpiReadRegisters>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <SpiritIrqClearStatus+0x2c>)
 8001fc6:	b212      	sxth	r2, r2
 8001fc8:	4611      	mov	r1, r2
 8001fca:	7019      	strb	r1, [r3, #0]
 8001fcc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fd0:	705a      	strb	r2, [r3, #1]

}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000026c 	.word	0x2000026c

08001fe0 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 8001fe6:	1dfb      	adds	r3, r7, #7
 8001fe8:	461a      	mov	r2, r3
 8001fea:	2101      	movs	r1, #1
 8001fec:	20e7      	movs	r0, #231	; 0xe7
 8001fee:	f002 f8bf 	bl	8004170 <RadioSpiReadRegisters>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 8001ff6:	b212      	sxth	r2, r2
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	7019      	strb	r1, [r3, #0]
 8001ffc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002000:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002008:	b2db      	uxtb	r3, r3

}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2000026c 	.word	0x2000026c

08002018 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8002018:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800201c:	b08a      	sub	sp, #40	; 0x28
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a70      	ldr	r2, [pc, #448]	; (80021e8 <SpiritManagementSetFrequencyBase+0x1d0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d307      	bcc.n	800203a <SpiritManagementSetFrequencyBase+0x22>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a6f      	ldr	r2, [pc, #444]	; (80021ec <SpiritManagementSetFrequencyBase+0x1d4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d803      	bhi.n	800203a <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002038:	e01a      	b.n	8002070 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a6c      	ldr	r2, [pc, #432]	; (80021f0 <SpiritManagementSetFrequencyBase+0x1d8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d907      	bls.n	8002052 <SpiritManagementSetFrequencyBase+0x3a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a6b      	ldr	r2, [pc, #428]	; (80021f4 <SpiritManagementSetFrequencyBase+0x1dc>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d803      	bhi.n	8002052 <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 800204a:	2301      	movs	r3, #1
 800204c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002050:	e00e      	b.n	8002070 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a68      	ldr	r2, [pc, #416]	; (80021f8 <SpiritManagementSetFrequencyBase+0x1e0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d907      	bls.n	800206a <SpiritManagementSetFrequencyBase+0x52>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a67      	ldr	r2, [pc, #412]	; (80021fc <SpiritManagementSetFrequencyBase+0x1e4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d803      	bhi.n	800206a <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8002062:	2302      	movs	r3, #2
 8002064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002068:	e002      	b.n	8002070 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 800206a:	2303      	movs	r3, #3
 800206c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002070:	f000 ffde 	bl	8003030 <SpiritRadioGetFrequencyOffset>
 8002074:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002076:	f000 ffbb 	bl	8002ff0 <SpiritRadioGetChannelSpace>
 800207a:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800207c:	f000 ffa0 	bl	8002fc0 <SpiritRadioGetChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002084:	6a3a      	ldr	r2, [r7, #32]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	441a      	add	r2, r3
 800208a:	7efb      	ldrb	r3, [r7, #27]
 800208c:	69f9      	ldr	r1, [r7, #28]
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8002096:	f001 fdbb 	bl	8003c10 <SpiritRadioGetRefDiv>
 800209a:	4603      	mov	r3, r0
 800209c:	3301      	adds	r3, #1
 800209e:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 80020a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d83a      	bhi.n	800211e <SpiritManagementSetFrequencyBase+0x106>
 80020a8:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <SpiritManagementSetFrequencyBase+0x98>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	08002109 	.word	0x08002109
 80020b4:	080020f1 	.word	0x080020f1
 80020b8:	080020d9 	.word	0x080020d9
 80020bc:	080020c1 	.word	0x080020c1
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	4a4f      	ldr	r2, [pc, #316]	; (8002200 <SpiritManagementSetFrequencyBase+0x1e8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d803      	bhi.n	80020d0 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7ff fe47 	bl	8001d5c <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80020ce:	e026      	b.n	800211e <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80020d0:	2001      	movs	r0, #1
 80020d2:	f7ff fe43 	bl	8001d5c <SpiritCalibrationSelectVco>
    break;
 80020d6:	e022      	b.n	800211e <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	4a4a      	ldr	r2, [pc, #296]	; (8002204 <SpiritManagementSetFrequencyBase+0x1ec>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d803      	bhi.n	80020e8 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7ff fe3b 	bl	8001d5c <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80020e6:	e01a      	b.n	800211e <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80020e8:	2001      	movs	r0, #1
 80020ea:	f7ff fe37 	bl	8001d5c <SpiritCalibrationSelectVco>
    break;
 80020ee:	e016      	b.n	800211e <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	4a45      	ldr	r2, [pc, #276]	; (8002208 <SpiritManagementSetFrequencyBase+0x1f0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d803      	bhi.n	8002100 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80020f8:	2000      	movs	r0, #0
 80020fa:	f7ff fe2f 	bl	8001d5c <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80020fe:	e00e      	b.n	800211e <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002100:	2001      	movs	r0, #1
 8002102:	f7ff fe2b 	bl	8001d5c <SpiritCalibrationSelectVco>
    break;
 8002106:	e00a      	b.n	800211e <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	4a40      	ldr	r2, [pc, #256]	; (800220c <SpiritManagementSetFrequencyBase+0x1f4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d803      	bhi.n	8002118 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff fe23 	bl	8001d5c <SpiritCalibrationSelectVco>
 8002116:	e002      	b.n	800211e <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002118:	2001      	movs	r0, #1
 800211a:	f7ff fe1f 	bl	8001d5c <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800211e:	6978      	ldr	r0, [r7, #20]
 8002120:	f000 fe66 	bl	8002df0 <SpiritRadioSearchWCP>
 8002124:	4603      	mov	r3, r0
 8002126:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7fe f9eb 	bl	8000504 <__aeabi_ui2d>
 800212e:	4604      	mov	r4, r0
 8002130:	460d      	mov	r5, r1
 8002132:	7cfb      	ldrb	r3, [r7, #19]
 8002134:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002138:	4935      	ldr	r1, [pc, #212]	; (8002210 <SpiritManagementSetFrequencyBase+0x1f8>)
 800213a:	5c8a      	ldrb	r2, [r1, r2]
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	049b      	lsls	r3, r3, #18
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe f9ee 	bl	8000524 <__aeabi_i2d>
 8002148:	4680      	mov	r8, r0
 800214a:	4689      	mov	r9, r1
 800214c:	f001 fdd4 	bl	8003cf8 <SpiritRadioGetXtalFrequency>
 8002150:	4603      	mov	r3, r0
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f9d6 	bl	8000504 <__aeabi_ui2d>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4640      	mov	r0, r8
 800215e:	4649      	mov	r1, r9
 8002160:	f7fe fb74 	bl	800084c <__aeabi_ddiv>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4620      	mov	r0, r4
 800216a:	4629      	mov	r1, r5
 800216c:	f7fe fa44 	bl	80005f8 <__aeabi_dmul>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f7fe fc50 	bl	8000a1c <__aeabi_d2uiz>
 800217c:	4603      	mov	r3, r0
 800217e:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	0d5b      	lsrs	r3, r3, #21
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	b2da      	uxtb	r2, r3
 800218c:	7cbb      	ldrb	r3, [r7, #18]
 800218e:	015b      	lsls	r3, r3, #5
 8002190:	b2db      	uxtb	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b2db      	uxtb	r3, r3
 8002196:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	0b5b      	lsrs	r3, r3, #13
 800219c:	b2db      	uxtb	r3, r3
 800219e:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021b4:	4917      	ldr	r1, [pc, #92]	; (8002214 <SpiritManagementSetFrequencyBase+0x1fc>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80021be:	f107 0308 	add.w	r3, r7, #8
 80021c2:	461a      	mov	r2, r3
 80021c4:	2104      	movs	r1, #4
 80021c6:	2008      	movs	r0, #8
 80021c8:	f001 ff86 	bl	80040d8 <RadioSpiWriteRegisters>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b12      	ldr	r3, [pc, #72]	; (8002218 <SpiritManagementSetFrequencyBase+0x200>)
 80021d0:	b212      	sxth	r2, r2
 80021d2:	4611      	mov	r1, r2
 80021d4:	7019      	strb	r1, [r3, #0]
 80021d6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021da:	705a      	strb	r2, [r3, #1]
}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	; 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021e6:	bf00      	nop
 80021e8:	2e5f5680 	.word	0x2e5f5680
 80021ec:	390c2fe0 	.word	0x390c2fe0
 80021f0:	1701e47f 	.word	0x1701e47f
 80021f4:	1c146a60 	.word	0x1c146a60
 80021f8:	11d260bf 	.word	0x11d260bf
 80021fc:	14ced7e0 	.word	0x14ced7e0
 8002200:	099cf4e1 	.word	0x099cf4e1
 8002204:	1339e9c3 	.word	0x1339e9c3
 8002208:	19a28d05 	.word	0x19a28d05
 800220c:	33451a0a 	.word	0x33451a0a
 8002210:	0800c9c4 	.word	0x0800c9c4
 8002214:	0800c9c0 	.word	0x0800c9c0
 8002218:	2000026c 	.word	0x2000026c

0800221c <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 800222a:	f001 fd65 	bl	8003cf8 <SpiritRadioGetXtalFrequency>
 800222e:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8002230:	2300      	movs	r3, #0
 8002232:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4a57      	ldr	r2, [pc, #348]	; (8002394 <SpiritManagementWaVcoCalibration+0x178>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d90f      	bls.n	800225c <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 800223c:	f001 fce8 	bl	8003c10 <SpiritRadioGetRefDiv>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10a      	bne.n	800225c <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 800224a:	f001 f853 	bl	80032f4 <SpiritRadioGetFrequencyBase>
 800224e:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8002250:	2001      	movs	r0, #1
 8002252:	f001 fcad 	bl	8003bb0 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff fede 	bl	8002018 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 800225c:	f001 f84a 	bl	80032f4 <SpiritRadioGetFrequencyBase>
 8002260:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 8002262:	2325      	movs	r3, #37	; 0x25
 8002264:	707b      	strb	r3, [r7, #1]
 8002266:	1c7b      	adds	r3, r7, #1
 8002268:	461a      	mov	r2, r3
 800226a:	2101      	movs	r1, #1
 800226c:	20a1      	movs	r0, #161	; 0xa1
 800226e:	f001 ff33 	bl	80040d8 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8002272:	2001      	movs	r0, #1
 8002274:	f7ff fcb6 	bl	8001be4 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8002278:	f001 fefc 	bl	8004074 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <SpiritManagementWaVcoCalibration+0x17c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b40      	cmp	r3, #64	; 0x40
 8002288:	d10d      	bne.n	80022a6 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 800228a:	2301      	movs	r3, #1
 800228c:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 800228e:	2062      	movs	r0, #98	; 0x62
 8002290:	f7ff fd8e 	bl	8001db0 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8002294:	f001 feee 	bl	8004074 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002298:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <SpiritManagementWaVcoCalibration+0x17c>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d1f6      	bne.n	8002294 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80022a6:	2066      	movs	r0, #102	; 0x66
 80022a8:	f7ff fd82 	bl	8001db0 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80022b0:	f001 fee0 	bl	8004074 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80022b4:	4b38      	ldr	r3, [pc, #224]	; (8002398 <SpiritManagementWaVcoCalibration+0x17c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b13      	cmp	r3, #19
 80022c0:	d106      	bne.n	80022d0 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 80022c2:	7b7b      	ldrb	r3, [r7, #13]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	737a      	strb	r2, [r7, #13]
 80022c8:	2b05      	cmp	r3, #5
 80022ca:	d101      	bne.n	80022d0 <SpiritManagementWaVcoCalibration+0xb4>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e05d      	b.n	800238c <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80022d0:	4b31      	ldr	r3, [pc, #196]	; (8002398 <SpiritManagementWaVcoCalibration+0x17c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b0f      	cmp	r3, #15
 80022dc:	d1e8      	bne.n	80022b0 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80022de:	f7ff fcb9 	bl	8001c54 <SpiritCalibrationGetVcoCalData>
 80022e2:	4603      	mov	r3, r0
 80022e4:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 80022e6:	2062      	movs	r0, #98	; 0x62
 80022e8:	f7ff fd62 	bl	8001db0 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80022ec:	f001 fec2 	bl	8004074 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80022f0:	4b29      	ldr	r3, [pc, #164]	; (8002398 <SpiritManagementWaVcoCalibration+0x17c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d1f6      	bne.n	80022ec <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 80022fe:	2065      	movs	r0, #101	; 0x65
 8002300:	f7ff fd56 	bl	8001db0 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002304:	2300      	movs	r3, #0
 8002306:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002308:	f001 feb4 	bl	8004074 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 800230c:	4b22      	ldr	r3, [pc, #136]	; (8002398 <SpiritManagementWaVcoCalibration+0x17c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b13      	cmp	r3, #19
 8002318:	d106      	bne.n	8002328 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 800231a:	7b7b      	ldrb	r3, [r7, #13]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	737a      	strb	r2, [r7, #13]
 8002320:	2b05      	cmp	r3, #5
 8002322:	d101      	bne.n	8002328 <SpiritManagementWaVcoCalibration+0x10c>
 8002324:	2301      	movs	r3, #1
 8002326:	e031      	b.n	800238c <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <SpiritManagementWaVcoCalibration+0x17c>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b0f      	cmp	r3, #15
 8002334:	d1e8      	bne.n	8002308 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8002336:	f7ff fc8d 	bl	8001c54 <SpiritCalibrationGetVcoCalData>
 800233a:	4603      	mov	r3, r0
 800233c:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 800233e:	2062      	movs	r0, #98	; 0x62
 8002340:	f7ff fd36 	bl	8001db0 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002344:	f001 fe96 	bl	8004074 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <SpiritManagementWaVcoCalibration+0x17c>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b03      	cmp	r3, #3
 8002354:	d1f6      	bne.n	8002344 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8002356:	7bbb      	ldrb	r3, [r7, #14]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d102      	bne.n	8002362 <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 800235c:	2063      	movs	r0, #99	; 0x63
 800235e:	f7ff fd27 	bl	8001db0 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8002362:	2000      	movs	r0, #0
 8002364:	f7ff fc3e 	bl	8001be4 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 800236e:	2000      	movs	r0, #0
 8002370:	f001 fc1e 	bl	8003bb0 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff fe4f 	bl	8002018 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fc85 	bl	8001c8c <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 8002382:	78bb      	ldrb	r3, [r7, #2]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fcb5 	bl	8001cf4 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	01c9c380 	.word	0x01c9c380
 8002398:	2000026c 	.word	0x2000026c

0800239c <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <SpiritManagementWaCmdStrobeTx+0x60>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d023      	beq.n	80023f4 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <SpiritManagementWaCmdStrobeTx+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <SpiritManagementWaCmdStrobeTx+0x68>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d908      	bls.n	80023c8 <SpiritManagementWaCmdStrobeTx+0x2c>
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <SpiritManagementWaCmdStrobeTx+0x64>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a13      	ldr	r2, [pc, #76]	; (8002408 <SpiritManagementWaCmdStrobeTx+0x6c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d803      	bhi.n	80023c8 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 80023c0:	20c0      	movs	r0, #192	; 0xc0
 80023c2:	f001 fb6b 	bl	8003a9c <SpiritRadioSetPACwc>
 80023c6:	e002      	b.n	80023ce <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80023c8:	2000      	movs	r0, #0
 80023ca:	f001 fb67 	bl	8003a9c <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80023ce:	2311      	movs	r3, #17
 80023d0:	71fb      	strb	r3, [r7, #7]
 80023d2:	1dfb      	adds	r3, r7, #7
 80023d4:	461a      	mov	r2, r3
 80023d6:	2101      	movs	r1, #1
 80023d8:	20a9      	movs	r0, #169	; 0xa9
 80023da:	f001 fe7d 	bl	80040d8 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 80023de:	2320      	movs	r3, #32
 80023e0:	71fb      	strb	r3, [r7, #7]
 80023e2:	1dfb      	adds	r3, r7, #7
 80023e4:	461a      	mov	r2, r3
 80023e6:	2101      	movs	r1, #1
 80023e8:	20a5      	movs	r0, #165	; 0xa5
 80023ea:	f001 fe75 	bl	80040d8 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 80023ee:	4b03      	ldr	r3, [pc, #12]	; (80023fc <SpiritManagementWaCmdStrobeTx+0x60>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
  }
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000006 	.word	0x20000006
 8002400:	20000264 	.word	0x20000264
 8002404:	08f0d17f 	.word	0x08f0d17f
 8002408:	1c03a180 	.word	0x1c03a180

0800240c <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d00d      	beq.n	8002438 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 800241c:	2398      	movs	r3, #152	; 0x98
 800241e:	71fb      	strb	r3, [r7, #7]
 8002420:	1dfb      	adds	r3, r7, #7
 8002422:	461a      	mov	r2, r3
 8002424:	2101      	movs	r1, #1
 8002426:	20a5      	movs	r0, #165	; 0xa5
 8002428:	f001 fe56 	bl	80040d8 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 800242c:	2000      	movs	r0, #0
 800242e:	f001 fb35 	bl	8003a9c <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8002432:	4b03      	ldr	r3, [pc, #12]	; (8002440 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
  }
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000006 	.word	0x20000006

08002444 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <SpiritManagementWaTRxFcMem+0x20>)
 800244e:	2202      	movs	r2, #2
 8002450:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <SpiritManagementWaTRxFcMem+0x24>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	20000006 	.word	0x20000006
 8002468:	20000264 	.word	0x20000264

0800246c <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 8002472:	23ca      	movs	r3, #202	; 0xca
 8002474:	71fb      	strb	r3, [r7, #7]
 8002476:	1dfb      	adds	r3, r7, #7
 8002478:	461a      	mov	r2, r3
 800247a:	2101      	movs	r1, #1
 800247c:	20b2      	movs	r0, #178	; 0xb2
 800247e:	f001 fe2b 	bl	80040d8 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002482:	2304      	movs	r3, #4
 8002484:	71fb      	strb	r3, [r7, #7]
 8002486:	1dfb      	adds	r3, r7, #7
 8002488:	461a      	mov	r2, r3
 800248a:	2101      	movs	r1, #1
 800248c:	20a8      	movs	r0, #168	; 0xa8
 800248e:	f001 fe23 	bl	80040d8 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	461a      	mov	r2, r3
 8002496:	2101      	movs	r1, #1
 8002498:	20a8      	movs	r0, #168	; 0xa8
 800249a:	f001 fe69 	bl	8004170 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 800249e:	2300      	movs	r3, #0
 80024a0:	71fb      	strb	r3, [r7, #7]
 80024a2:	1dfb      	adds	r3, r7, #7
 80024a4:	461a      	mov	r2, r3
 80024a6:	2101      	movs	r1, #1
 80024a8:	20a8      	movs	r0, #168	; 0xa8
 80024aa:	f001 fe15 	bl	80040d8 <RadioSpiWriteRegisters>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 80024be:	1dfb      	adds	r3, r7, #7
 80024c0:	461a      	mov	r2, r3
 80024c2:	2101      	movs	r1, #1
 80024c4:	2030      	movs	r0, #48	; 0x30
 80024c6:	f001 fe53 	bl	8004170 <RadioSpiReadRegisters>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <SpiritPktCommonGetControlLength+0x34>)
 80024ce:	b212      	sxth	r2, r2
 80024d0:	4611      	mov	r1, r2
 80024d2:	7019      	strb	r1, [r3, #0]
 80024d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024d8:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	b2db      	uxtb	r3, r3

}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	2000026c 	.word	0x2000026c

080024f0 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80024fa:	f107 030f 	add.w	r3, r7, #15
 80024fe:	461a      	mov	r2, r3
 8002500:	2101      	movs	r1, #1
 8002502:	204f      	movs	r0, #79	; 0x4f
 8002504:	f001 fe34 	bl	8004170 <RadioSpiReadRegisters>
 8002508:	4602      	mov	r2, r0
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <SpiritPktCommonFilterOnCrc+0x6c>)
 800250c:	b212      	sxth	r2, r2
 800250e:	4611      	mov	r1, r2
 8002510:	7019      	strb	r1, [r3, #0]
 8002512:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002516:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d105      	bne.n	800252a <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e004      	b.n	8002534 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002534:	f107 030f 	add.w	r3, r7, #15
 8002538:	461a      	mov	r2, r3
 800253a:	2101      	movs	r1, #1
 800253c:	204f      	movs	r0, #79	; 0x4f
 800253e:	f001 fdcb 	bl	80040d8 <RadioSpiWriteRegisters>
 8002542:	4602      	mov	r2, r0
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <SpiritPktCommonFilterOnCrc+0x6c>)
 8002546:	b212      	sxth	r2, r2
 8002548:	4611      	mov	r1, r2
 800254a:	7019      	strb	r1, [r3, #0]
 800254c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002550:	705a      	strb	r2, [r3, #1]

}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	2000026c 	.word	0x2000026c

08002560 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 800256a:	1dfb      	adds	r3, r7, #7
 800256c:	461a      	mov	r2, r3
 800256e:	2101      	movs	r1, #1
 8002570:	204b      	movs	r0, #75	; 0x4b
 8002572:	f001 fdb1 	bl	80040d8 <RadioSpiWriteRegisters>
 8002576:	4602      	mov	r2, r0
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <SpiritPktCommonSetDestinationAddress+0x30>)
 800257a:	b212      	sxth	r2, r2
 800257c:	4611      	mov	r1, r2
 800257e:	7019      	strb	r1, [r3, #0]
 8002580:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002584:	705a      	strb	r2, [r3, #1]

}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000026c 	.word	0x2000026c

08002594 <SpiritPktCommonGetReceivedSourceAddress>:
 * @brief  Returns the source address of the received packet.
 * @param  None.
 * @retval uint8_t Source address of the received packet.
 */
uint8_t SpiritPktCommonGetReceivedSourceAddress(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD1 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD1_BASE, 1, &tempRegValue);
 800259a:	1dfb      	adds	r3, r7, #7
 800259c:	461a      	mov	r2, r3
 800259e:	2101      	movs	r1, #1
 80025a0:	20d2      	movs	r0, #210	; 0xd2
 80025a2:	f001 fde5 	bl	8004170 <RadioSpiReadRegisters>
 80025a6:	4602      	mov	r2, r0
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <SpiritPktCommonGetReceivedSourceAddress+0x2c>)
 80025aa:	b212      	sxth	r2, r2
 80025ac:	4611      	mov	r1, r2
 80025ae:	7019      	strb	r1, [r3, #0]
 80025b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025b4:	705a      	strb	r2, [r3, #1]

  /* Returns value */
  return tempRegValue;
 80025b6:	79fb      	ldrb	r3, [r7, #7]

}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	2000026c 	.word	0x2000026c

080025c4 <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80025cc:	f107 0308 	add.w	r3, r7, #8
 80025d0:	461a      	mov	r2, r3
 80025d2:	2101      	movs	r1, #1
 80025d4:	2051      	movs	r0, #81	; 0x51
 80025d6:	f001 fdcb 	bl	8004170 <RadioSpiReadRegisters>
 80025da:	4602      	mov	r2, r0
 80025dc:	4b60      	ldr	r3, [pc, #384]	; (8002760 <SpiritPktStackInit+0x19c>)
 80025de:	b212      	sxth	r2, r2
 80025e0:	4611      	mov	r1, r2
 80025e2:	7019      	strb	r1, [r3, #0]
 80025e4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025e8:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 80025ea:	7a3b      	ldrb	r3, [r7, #8]
 80025ec:	f023 0320 	bic.w	r3, r3, #32
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 80025f4:	7a3b      	ldrb	r3, [r7, #8]
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80025fe:	f107 0308 	add.w	r3, r7, #8
 8002602:	461a      	mov	r2, r3
 8002604:	2101      	movs	r1, #1
 8002606:	2051      	movs	r0, #81	; 0x51
 8002608:	f001 fd66 	bl	80040d8 <RadioSpiWriteRegisters>
 800260c:	4602      	mov	r2, r0
 800260e:	4b54      	ldr	r3, [pc, #336]	; (8002760 <SpiritPktStackInit+0x19c>)
 8002610:	b212      	sxth	r2, r2
 8002612:	4611      	mov	r1, r2
 8002614:	7019      	strb	r1, [r3, #0]
 8002616:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800261a:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800261c:	f107 0308 	add.w	r3, r7, #8
 8002620:	461a      	mov	r2, r3
 8002622:	2101      	movs	r1, #1
 8002624:	204f      	movs	r0, #79	; 0x4f
 8002626:	f001 fda3 	bl	8004170 <RadioSpiReadRegisters>
 800262a:	4602      	mov	r2, r0
 800262c:	4b4c      	ldr	r3, [pc, #304]	; (8002760 <SpiritPktStackInit+0x19c>)
 800262e:	b212      	sxth	r2, r2
 8002630:	4611      	mov	r1, r2
 8002632:	7019      	strb	r1, [r3, #0]
 8002634:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002638:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 800263a:	7a3b      	ldrb	r3, [r7, #8]
 800263c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002640:	b2db      	uxtb	r3, r3
 8002642:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002644:	f107 0308 	add.w	r3, r7, #8
 8002648:	461a      	mov	r2, r3
 800264a:	2101      	movs	r1, #1
 800264c:	204f      	movs	r0, #79	; 0x4f
 800264e:	f001 fd43 	bl	80040d8 <RadioSpiWriteRegisters>
 8002652:	4602      	mov	r2, r0
 8002654:	4b42      	ldr	r3, [pc, #264]	; (8002760 <SpiritPktStackInit+0x19c>)
 8002656:	b212      	sxth	r2, r2
 8002658:	4611      	mov	r1, r2
 800265a:	7019      	strb	r1, [r3, #0]
 800265c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002660:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7adb      	ldrb	r3, [r3, #11]
 8002666:	f043 0310 	orr.w	r3, r3, #16
 800266a:	b2db      	uxtb	r3, r3
 800266c:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7a5b      	ldrb	r3, [r3, #9]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <SpiritPktStackInit+0xb8>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7a5b      	ldrb	r3, [r3, #9]
 8002680:	3b01      	subs	r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002688:	b2db      	uxtb	r3, r3
 800268a:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	781a      	ldrb	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	785b      	ldrb	r3, [r3, #1]
 8002694:	4313      	orrs	r3, r2
 8002696:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 800269c:	4313      	orrs	r3, r2
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	7a9b      	ldrb	r3, [r3, #10]
 80026a6:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7b5b      	ldrb	r3, [r3, #13]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d104      	bne.n	80026ba <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 80026b0:	7afb      	ldrb	r3, [r7, #11]
 80026b2:	f043 0310 	orr.w	r3, r3, #16
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7b1b      	ldrb	r3, [r3, #12]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d104      	bne.n	80026cc <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 80026c2:	7afb      	ldrb	r3, [r7, #11]
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	461a      	mov	r2, r3
 80026d2:	2104      	movs	r1, #4
 80026d4:	2030      	movs	r0, #48	; 0x30
 80026d6:	f001 fcff 	bl	80040d8 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	e01d      	b.n	800271c <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	785b      	ldrb	r3, [r3, #1]
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f1c3 0303 	rsb	r3, r3, #3
 80026ee:	429a      	cmp	r2, r3
 80026f0:	da06      	bge.n	8002700 <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	3310      	adds	r3, #16
 80026f6:	443b      	add	r3, r7
 80026f8:	2200      	movs	r2, #0
 80026fa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80026fe:	e00a      	b.n	8002716 <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	40da      	lsrs	r2, r3
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	3310      	adds	r3, #16
 8002710:	443b      	add	r3, r7
 8002712:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	3301      	adds	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d9de      	bls.n	80026e0 <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7a9b      	ldrb	r3, [r3, #10]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 800272a:	2000      	movs	r0, #0
 800272c:	f7ff fee0 	bl	80024f0 <SpiritPktCommonFilterOnCrc>
 8002730:	e002      	b.n	8002738 <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 8002732:	2001      	movs	r0, #1
 8002734:	f7ff fedc 	bl	80024f0 <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002738:	f107 0308 	add.w	r3, r7, #8
 800273c:	461a      	mov	r2, r3
 800273e:	2104      	movs	r1, #4
 8002740:	2036      	movs	r0, #54	; 0x36
 8002742:	f001 fcc9 	bl	80040d8 <RadioSpiWriteRegisters>
 8002746:	4602      	mov	r2, r0
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <SpiritPktStackInit+0x19c>)
 800274a:	b212      	sxth	r2, r2
 800274c:	4611      	mov	r1, r2
 800274e:	7019      	strb	r1, [r3, #0]
 8002750:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002754:	705a      	strb	r2, [r3, #1]

}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2000026c 	.word	0x2000026c

08002764 <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800276c:	f107 030c 	add.w	r3, r7, #12
 8002770:	461a      	mov	r2, r3
 8002772:	2101      	movs	r1, #1
 8002774:	204f      	movs	r0, #79	; 0x4f
 8002776:	f001 fcfb 	bl	8004170 <RadioSpiReadRegisters>
 800277a:	4602      	mov	r2, r0
 800277c:	4b2f      	ldr	r3, [pc, #188]	; (800283c <SpiritPktStackAddressesInit+0xd8>)
 800277e:	b212      	sxth	r2, r2
 8002780:	4611      	mov	r1, r2
 8002782:	7019      	strb	r1, [r3, #0]
 8002784:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002788:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d105      	bne.n	800279e <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002792:	7b3b      	ldrb	r3, [r7, #12]
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	b2db      	uxtb	r3, r3
 800279a:	733b      	strb	r3, [r7, #12]
 800279c:	e004      	b.n	80027a8 <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 800279e:	7b3b      	ldrb	r3, [r7, #12]
 80027a0:	f023 0308 	bic.w	r3, r3, #8
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	789b      	ldrb	r3, [r3, #2]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80027b0:	7b3b      	ldrb	r3, [r7, #12]
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	733b      	strb	r3, [r7, #12]
 80027ba:	e004      	b.n	80027c6 <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80027bc:	7b3b      	ldrb	r3, [r7, #12]
 80027be:	f023 0304 	bic.w	r3, r3, #4
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	791b      	ldrb	r3, [r3, #4]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d105      	bne.n	80027da <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 80027ce:	7b3b      	ldrb	r3, [r7, #12]
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	733b      	strb	r3, [r7, #12]
 80027d8:	e004      	b.n	80027e4 <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 80027da:	7b3b      	ldrb	r3, [r7, #12]
 80027dc:	f023 0302 	bic.w	r3, r3, #2
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80027e4:	f107 030c 	add.w	r3, r7, #12
 80027e8:	461a      	mov	r2, r3
 80027ea:	2101      	movs	r1, #1
 80027ec:	204f      	movs	r0, #79	; 0x4f
 80027ee:	f001 fc73 	bl	80040d8 <RadioSpiWriteRegisters>
 80027f2:	4602      	mov	r2, r0
 80027f4:	4b11      	ldr	r3, [pc, #68]	; (800283c <SpiritPktStackAddressesInit+0xd8>)
 80027f6:	b212      	sxth	r2, r2
 80027f8:	4611      	mov	r1, r2
 80027fa:	7019      	strb	r1, [r3, #0]
 80027fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002800:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	795b      	ldrb	r3, [r3, #5]
 8002806:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	78db      	ldrb	r3, [r3, #3]
 800280c:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002814:	f107 030c 	add.w	r3, r7, #12
 8002818:	461a      	mov	r2, r3
 800281a:	2103      	movs	r1, #3
 800281c:	204c      	movs	r0, #76	; 0x4c
 800281e:	f001 fc5b 	bl	80040d8 <RadioSpiWriteRegisters>
 8002822:	4602      	mov	r2, r0
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <SpiritPktStackAddressesInit+0xd8>)
 8002826:	b212      	sxth	r2, r2
 8002828:	4611      	mov	r1, r2
 800282a:	7019      	strb	r1, [r3, #0]
 800282c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002830:	705a      	strb	r2, [r3, #1]
  
}
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2000026c 	.word	0x2000026c

08002840 <SpiritPktStackSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter can be any value of uint16_t.
 * @retval None.
 */
void SpiritPktStackSetPayloadLength(uint16_t nPayloadLength)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];

  /* Computes the oversize (address + control) size */
  uint16_t overSize = 2 + (uint16_t) SpiritPktStackGetControlLength();
 800284a:	f7ff fe35 	bl	80024b8 <SpiritPktCommonGetControlLength>
 800284e:	4603      	mov	r3, r0
 8002850:	b29b      	uxth	r3, r3
 8002852:	3302      	adds	r3, #2
 8002854:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from lPayloadLength */
  tempRegValue[1]=STACK_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	89fb      	ldrh	r3, [r7, #14]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4413      	add	r3, r2
 8002860:	b2db      	uxtb	r3, r3
 8002862:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from lPayloadLength */
  tempRegValue[0]=STACK_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8002864:	88fa      	ldrh	r2, [r7, #6]
 8002866:	89fb      	ldrh	r3, [r7, #14]
 8002868:	4413      	add	r3, r2
 800286a:	121b      	asrs	r3, r3, #8
 800286c:	b2db      	uxtb	r3, r3
 800286e:	733b      	strb	r3, [r7, #12]

  /* Writes the value on the PCKTLENx registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	461a      	mov	r2, r3
 8002876:	2102      	movs	r1, #2
 8002878:	2034      	movs	r0, #52	; 0x34
 800287a:	f001 fc2d 	bl	80040d8 <RadioSpiWriteRegisters>
 800287e:	4602      	mov	r2, r0
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <SpiritPktStackSetPayloadLength+0x58>)
 8002882:	b212      	sxth	r2, r2
 8002884:	4611      	mov	r1, r2
 8002886:	7019      	strb	r1, [r3, #0]
 8002888:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800288c:	705a      	strb	r2, [r3, #1]

}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2000026c 	.word	0x2000026c

0800289c <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 80028a6:	f107 030f 	add.w	r3, r7, #15
 80028aa:	461a      	mov	r2, r3
 80028ac:	2101      	movs	r1, #1
 80028ae:	203a      	movs	r0, #58	; 0x3a
 80028b0:	f001 fc5e 	bl	8004170 <RadioSpiReadRegisters>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <SpiritQiSqiCheck+0x6c>)
 80028b8:	b212      	sxth	r2, r2
 80028ba:	4611      	mov	r1, r2
 80028bc:	7019      	strb	r1, [r3, #0]
 80028be:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028c2:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d105      	bne.n	80028d6 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	73fb      	strb	r3, [r7, #15]
 80028d4:	e004      	b.n	80028e0 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	f023 0302 	bic.w	r3, r3, #2
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 80028e0:	f107 030f 	add.w	r3, r7, #15
 80028e4:	461a      	mov	r2, r3
 80028e6:	2101      	movs	r1, #1
 80028e8:	203a      	movs	r0, #58	; 0x3a
 80028ea:	f001 fbf5 	bl	80040d8 <RadioSpiWriteRegisters>
 80028ee:	4602      	mov	r2, r0
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <SpiritQiSqiCheck+0x6c>)
 80028f2:	b212      	sxth	r2, r2
 80028f4:	4611      	mov	r1, r2
 80028f6:	7019      	strb	r1, [r3, #0]
 80028f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028fc:	705a      	strb	r2, [r3, #1]

}
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	2000026c 	.word	0x2000026c

0800290c <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002916:	f107 030f 	add.w	r3, r7, #15
 800291a:	461a      	mov	r2, r3
 800291c:	2101      	movs	r1, #1
 800291e:	203a      	movs	r0, #58	; 0x3a
 8002920:	f001 fc26 	bl	8004170 <RadioSpiReadRegisters>
 8002924:	4602      	mov	r2, r0
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <SpiritQiSetSqiThreshold+0x64>)
 8002928:	b212      	sxth	r2, r2
 800292a:	4611      	mov	r1, r2
 800292c:	7019      	strb	r1, [r3, #0]
 800292e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002932:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800293a:	b2db      	uxtb	r3, r3
 800293c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	4313      	orrs	r3, r2
 8002944:	b2db      	uxtb	r3, r3
 8002946:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002948:	f107 030f 	add.w	r3, r7, #15
 800294c:	461a      	mov	r2, r3
 800294e:	2101      	movs	r1, #1
 8002950:	203a      	movs	r0, #58	; 0x3a
 8002952:	f001 fbc1 	bl	80040d8 <RadioSpiWriteRegisters>
 8002956:	4602      	mov	r2, r0
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <SpiritQiSetSqiThreshold+0x64>)
 800295a:	b212      	sxth	r2, r2
 800295c:	4611      	mov	r1, r2
 800295e:	7019      	strb	r1, [r3, #0]
 8002960:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002964:	705a      	strb	r2, [r3, #1]

}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	2000026c 	.word	0x2000026c

08002974 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3382      	adds	r3, #130	; 0x82
 8002980:	b2db      	uxtb	r3, r3
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	b2db      	uxtb	r3, r3
 8002986:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002988:	f107 030f 	add.w	r3, r7, #15
 800298c:	461a      	mov	r2, r3
 800298e:	2101      	movs	r1, #1
 8002990:	2022      	movs	r0, #34	; 0x22
 8002992:	f001 fba1 	bl	80040d8 <RadioSpiWriteRegisters>
 8002996:	4602      	mov	r2, r0
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SpiritQiSetRssiThresholddBm+0x3c>)
 800299a:	b212      	sxth	r2, r2
 800299c:	4611      	mov	r1, r2
 800299e:	7019      	strb	r1, [r3, #0]
 80029a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029a4:	705a      	strb	r2, [r3, #1]

}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2000026c 	.word	0x2000026c

080029b4 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08c      	sub	sp, #48	; 0x30
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 80029bc:	23a0      	movs	r3, #160	; 0xa0
 80029be:	747b      	strb	r3, [r7, #17]
 80029c0:	f107 0311 	add.w	r3, r7, #17
 80029c4:	461a      	mov	r2, r3
 80029c6:	2101      	movs	r1, #1
 80029c8:	209f      	movs	r0, #159	; 0x9f
 80029ca:	f001 fb85 	bl	80040d8 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d4:	ee07 3a90 	vmov	s15, r3
 80029d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	ee07 3a90 	vmov	s15, r3
 80029e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ec:	eddf 6aae 	vldr	s13, [pc, #696]	; 8002ca8 <SpiritRadioInit+0x2f4>
 80029f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029f8:	ee17 3a90 	vmov	r3, s15
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 80029fe:	2063      	movs	r0, #99	; 0x63
 8002a00:	f001 fc02 	bl	8004208 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002a04:	2300      	movs	r3, #0
 8002a06:	73bb      	strb	r3, [r7, #14]
 8002a08:	e004      	b.n	8002a14 <SpiritRadioInit+0x60>
 8002a0a:	7bbb      	ldrb	r3, [r7, #14]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	3301      	adds	r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	73bb      	strb	r3, [r7, #14]
 8002a14:	7bbb      	ldrb	r3, [r7, #14]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2bff      	cmp	r3, #255	; 0xff
 8002a1a:	d1f6      	bne.n	8002a0a <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002a1c:	f001 fb2a 	bl	8004074 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002a20:	4ba2      	ldr	r3, [pc, #648]	; (8002cac <SpiritRadioInit+0x2f8>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b40      	cmp	r3, #64	; 0x40
 8002a2c:	d1ea      	bne.n	8002a04 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002a2e:	4ba0      	ldr	r3, [pc, #640]	; (8002cb0 <SpiritRadioInit+0x2fc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4aa0      	ldr	r2, [pc, #640]	; (8002cb4 <SpiritRadioInit+0x300>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d803      	bhi.n	8002a40 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f001 f90b 	bl	8003c54 <SpiritRadioSetDigDiv>
 8002a3e:	e002      	b.n	8002a46 <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002a40:	2001      	movs	r0, #1
 8002a42:	f001 f907 	bl	8003c54 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002a46:	2062      	movs	r0, #98	; 0x62
 8002a48:	f001 fbde 	bl	8004208 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	737b      	strb	r3, [r7, #13]
 8002a50:	e004      	b.n	8002a5c <SpiritRadioInit+0xa8>
 8002a52:	7b7b      	ldrb	r3, [r7, #13]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	737b      	strb	r3, [r7, #13]
 8002a5c:	7b7b      	ldrb	r3, [r7, #13]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2bff      	cmp	r3, #255	; 0xff
 8002a62:	d1f6      	bne.n	8002a52 <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002a64:	f001 fb06 	bl	8004074 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002a68:	4b90      	ldr	r3, [pc, #576]	; (8002cac <SpiritRadioInit+0x2f8>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d1ea      	bne.n	8002a4c <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a78:	ee07 3a90 	vmov	s15, r3
 8002a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a80:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8002cb8 <SpiritRadioInit+0x304>
 8002a84:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002a88:	4b89      	ldr	r3, [pc, #548]	; (8002cb0 <SpiritRadioInit+0x2fc>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	ee07 3a90 	vmov	s15, r3
 8002a90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a9c:	ee17 3a90 	vmov	r3, s15
 8002aa0:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002aa2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002ab2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	025a      	lsls	r2, r3, #9
 8002abe:	4b7c      	ldr	r3, [pc, #496]	; (8002cb0 <SpiritRadioInit+0x2fc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	099b      	lsrs	r3, r3, #6
 8002ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	3301      	adds	r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fcb5 	bl	8002444 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002ada:	f107 0310 	add.w	r3, r7, #16
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	20a3      	movs	r0, #163	; 0xa3
 8002ae4:	f001 fb44 	bl	8004170 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002ae8:	7c3b      	ldrb	r3, [r7, #16]
 8002aea:	f023 0302 	bic.w	r3, r3, #2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	743b      	strb	r3, [r7, #16]
 8002af2:	f107 0310 	add.w	r3, r7, #16
 8002af6:	461a      	mov	r2, r3
 8002af8:	2101      	movs	r1, #1
 8002afa:	20a3      	movs	r0, #163	; 0xa3
 8002afc:	f001 faec 	bl	80040d8 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f107 0216 	add.w	r2, r7, #22
 8002b08:	f107 0117 	add.w	r1, r7, #23
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fc3d 	bl	800338c <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
 8002b14:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	7b5a      	ldrb	r2, [r3, #13]
 8002b1a:	7dbb      	ldrb	r3, [r7, #22]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002b22:	f107 0310 	add.w	r3, r7, #16
 8002b26:	461a      	mov	r2, r3
 8002b28:	2101      	movs	r1, #1
 8002b2a:	201c      	movs	r0, #28
 8002b2c:	f001 fb20 	bl	8004170 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f107 0214 	add.w	r2, r7, #20
 8002b38:	f107 0115 	add.w	r1, r7, #21
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fdbd 	bl	80036bc <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002b42:	7d3b      	ldrb	r3, [r7, #20]
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	b25a      	sxtb	r2, r3
 8002b48:	7c3b      	ldrb	r3, [r7, #16]
 8002b4a:	b25b      	sxtb	r3, r3
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	4313      	orrs	r3, r2
 8002b54:	b25a      	sxtb	r2, r3
 8002b56:	7d7b      	ldrb	r3, [r7, #21]
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f107 0212 	add.w	r2, r7, #18
 8002b6a:	f107 0113 	add.w	r1, r7, #19
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fcbe 	bl	80034f0 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	b25a      	sxtb	r2, r3
 8002b7a:	7cbb      	ldrb	r3, [r7, #18]
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	b25b      	sxtb	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002b86:	4b4a      	ldr	r3, [pc, #296]	; (8002cb0 <SpiritRadioInit+0x2fc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	0b1b      	lsrs	r3, r3, #12
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b94:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002cbc <SpiritRadioInit+0x308>
 8002b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b9c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002cc0 <SpiritRadioInit+0x30c>
 8002ba0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ba4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002ba8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bbc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc8:	dd09      	ble.n	8002bde <SpiritRadioInit+0x22a>
 8002bca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd2:	edc7 7a00 	vstr	s15, [r7]
 8002bd6:	783b      	ldrb	r3, [r7, #0]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	e006      	b.n	8002bec <SpiritRadioInit+0x238>
 8002bde:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be6:	edc7 7a00 	vstr	s15, [r7]
 8002bea:	783b      	ldrb	r3, [r7, #0]
 8002bec:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002bee:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <SpiritRadioInit+0x2fc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a30      	ldr	r2, [pc, #192]	; (8002cb4 <SpiritRadioInit+0x300>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d802      	bhi.n	8002bfe <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	777b      	strb	r3, [r7, #29]
 8002bfc:	e033      	b.n	8002c66 <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <SpiritRadioInit+0x2fc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	0b5b      	lsrs	r3, r3, #13
 8002c04:	ee07 3a90 	vmov	s15, r3
 8002c08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c0c:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002cbc <SpiritRadioInit+0x308>
 8002c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c14:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002cc0 <SpiritRadioInit+0x30c>
 8002c18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c1c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002c20:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c40:	dd09      	ble.n	8002c56 <SpiritRadioInit+0x2a2>
 8002c42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c4a:	edc7 7a00 	vstr	s15, [r7]
 8002c4e:	783b      	ldrb	r3, [r7, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	e006      	b.n	8002c64 <SpiritRadioInit+0x2b0>
 8002c56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c5e:	edc7 7a00 	vstr	s15, [r7]
 8002c62:	783b      	ldrb	r3, [r7, #0]
 8002c64:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002c66:	f107 030f 	add.w	r3, r7, #15
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	2007      	movs	r0, #7
 8002c70:	f001 fa32 	bl	80040d8 <RadioSpiWriteRegisters>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <SpiritRadioInit+0x2f8>)
 8002c78:	b212      	sxth	r2, r2
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	7019      	strb	r1, [r3, #0]
 8002c7e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c82:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <SpiritRadioInit+0x2fc>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0e      	ldr	r2, [pc, #56]	; (8002cc4 <SpiritRadioInit+0x310>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d91e      	bls.n	8002ccc <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <SpiritRadioInit+0x2fc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <SpiritRadioInit+0x314>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	bf8c      	ite	hi
 8002c98:	2301      	movhi	r3, #1
 8002c9a:	2300      	movls	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f86c 	bl	8002d7c <SpiritRadioSetXtalFlag>
 8002ca4:	e01d      	b.n	8002ce2 <SpiritRadioInit+0x32e>
 8002ca6:	bf00      	nop
 8002ca8:	49742400 	.word	0x49742400
 8002cac:	2000026c 	.word	0x2000026c
 8002cb0:	20000268 	.word	0x20000268
 8002cb4:	01c9c37f 	.word	0x01c9c37f
 8002cb8:	48800000 	.word	0x48800000
 8002cbc:	49afd520 	.word	0x49afd520
 8002cc0:	42800000 	.word	0x42800000
 8002cc4:	01c9c380 	.word	0x01c9c380
 8002cc8:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002ccc:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <SpiritRadioInit+0x3bc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a28      	ldr	r2, [pc, #160]	; (8002d74 <SpiritRadioInit+0x3c0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	bf8c      	ite	hi
 8002cd6:	2301      	movhi	r3, #1
 8002cd8:	2300      	movls	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 f84d 	bl	8002d7c <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	2101      	movs	r1, #1
 8002cea:	206c      	movs	r0, #108	; 0x6c
 8002cec:	f001 f9f4 	bl	80040d8 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002cf0:	f107 031c 	add.w	r3, r7, #28
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	200c      	movs	r0, #12
 8002cfa:	f001 f9ed 	bl	80040d8 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002cfe:	f107 0318 	add.w	r3, r7, #24
 8002d02:	461a      	mov	r2, r3
 8002d04:	2104      	movs	r1, #4
 8002d06:	201a      	movs	r0, #26
 8002d08:	f001 f9e6 	bl	80040d8 <RadioSpiWriteRegisters>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <SpiritRadioInit+0x3c4>)
 8002d10:	b212      	sxth	r2, r2
 8002d12:	4611      	mov	r1, r2
 8002d14:	7019      	strb	r1, [r3, #0]
 8002d16:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d1a:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f000 ff15 	bl	8003b4c <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002d26:	23e3      	movs	r3, #227	; 0xe3
 8002d28:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002d2a:	f107 031c 	add.w	r3, r7, #28
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2102      	movs	r1, #2
 8002d32:	2099      	movs	r0, #153	; 0x99
 8002d34:	f001 f9d0 	bl	80040d8 <RadioSpiWriteRegisters>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <SpiritRadioInit+0x3c4>)
 8002d3c:	b212      	sxth	r2, r2
 8002d3e:	4611      	mov	r1, r2
 8002d40:	7019      	strb	r1, [r3, #0]
 8002d42:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d46:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002d48:	2322      	movs	r3, #34	; 0x22
 8002d4a:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002d4c:	f107 031c 	add.w	r3, r7, #28
 8002d50:	461a      	mov	r2, r3
 8002d52:	2101      	movs	r1, #1
 8002d54:	20bc      	movs	r0, #188	; 0xbc
 8002d56:	f001 f9bf 	bl	80040d8 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f9aa 	bl	80030b8 <SpiritRadioSetFrequencyBase>
 8002d64:	4603      	mov	r3, r0
  
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3730      	adds	r7, #48	; 0x30
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000268 	.word	0x20000268
 8002d74:	017d783f 	.word	0x017d783f
 8002d78:	2000026c 	.word	0x2000026c

08002d7c <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002d8a:	f107 030f 	add.w	r3, r7, #15
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2101      	movs	r1, #1
 8002d92:	2001      	movs	r0, #1
 8002d94:	f001 f9ec 	bl	8004170 <RadioSpiReadRegisters>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b14      	ldr	r3, [pc, #80]	; (8002dec <SpiritRadioSetXtalFlag+0x70>)
 8002d9c:	b212      	sxth	r2, r2
 8002d9e:	4611      	mov	r1, r2
 8002da0:	7019      	strb	r1, [r3, #0]
 8002da2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002da6:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d105      	bne.n	8002dba <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e004      	b.n	8002dc4 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002dc4:	f107 030f 	add.w	r3, r7, #15
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2101      	movs	r1, #1
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f001 f983 	bl	80040d8 <RadioSpiWriteRegisters>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <SpiritRadioSetXtalFlag+0x70>)
 8002dd6:	b212      	sxth	r2, r2
 8002dd8:	4611      	mov	r1, r2
 8002dda:	7019      	strb	r1, [r3, #0]
 8002ddc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002de0:	705a      	strb	r2, [r3, #1]
  
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2000026c 	.word	0x2000026c

08002df0 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a3a      	ldr	r2, [pc, #232]	; (8002ef0 <SpiritRadioSearchWCP+0x100>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d306      	bcc.n	8002e1a <SpiritRadioSearchWCP+0x2a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a39      	ldr	r2, [pc, #228]	; (8002ef4 <SpiritRadioSearchWCP+0x104>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d802      	bhi.n	8002e1a <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002e14:	2306      	movs	r3, #6
 8002e16:	73bb      	strb	r3, [r7, #14]
 8002e18:	e01f      	b.n	8002e5a <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a36      	ldr	r2, [pc, #216]	; (8002ef8 <SpiritRadioSearchWCP+0x108>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d906      	bls.n	8002e30 <SpiritRadioSearchWCP+0x40>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a35      	ldr	r2, [pc, #212]	; (8002efc <SpiritRadioSearchWCP+0x10c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d802      	bhi.n	8002e30 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	73bb      	strb	r3, [r7, #14]
 8002e2e:	e014      	b.n	8002e5a <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a33      	ldr	r2, [pc, #204]	; (8002f00 <SpiritRadioSearchWCP+0x110>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d906      	bls.n	8002e46 <SpiritRadioSearchWCP+0x56>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a32      	ldr	r2, [pc, #200]	; (8002f04 <SpiritRadioSearchWCP+0x114>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d802      	bhi.n	8002e46 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8002e40:	2310      	movs	r3, #16
 8002e42:	73bb      	strb	r3, [r7, #14]
 8002e44:	e009      	b.n	8002e5a <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <SpiritRadioSearchWCP+0x118>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d905      	bls.n	8002e5a <SpiritRadioSearchWCP+0x6a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a2e      	ldr	r2, [pc, #184]	; (8002f0c <SpiritRadioSearchWCP+0x11c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d801      	bhi.n	8002e5a <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8002e56:	2320      	movs	r3, #32
 8002e58:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a2c      	ldr	r2, [pc, #176]	; (8002f10 <SpiritRadioSearchWCP+0x120>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	7bba      	ldrb	r2, [r7, #14]
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8002e6c:	f241 631f 	movw	r3, #5663	; 0x161f
 8002e70:	461a      	mov	r2, r3
 8002e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d302      	bcc.n	8002e86 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8002e80:	230f      	movs	r3, #15
 8002e82:	73fb      	strb	r3, [r7, #15]
 8002e84:	e023      	b.n	8002ece <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 8002e86:	2300      	movs	r3, #0
 8002e88:	73fb      	strb	r3, [r7, #15]
 8002e8a:	e005      	b.n	8002e98 <SpiritRadioSearchWCP+0xa8>
 8002e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	73fb      	strb	r3, [r7, #15]
 8002e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9c:	2b0e      	cmp	r3, #14
 8002e9e:	dc0c      	bgt.n	8002eba <SpiritRadioSearchWCP+0xca>
 8002ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea4:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <SpiritRadioSearchWCP+0x124>)
 8002ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb0:	fb02 f303 	mul.w	r3, r2, r3
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d8e8      	bhi.n	8002e8c <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8002eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <SpiritRadioSearchWCP+0xde>
      i--;
 8002ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8002ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed2:	425a      	negs	r2, r3
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	f002 0207 	and.w	r2, r2, #7
 8002edc:	bf58      	it	pl
 8002ede:	4253      	negpl	r3, r2
 8002ee0:	b25b      	sxtb	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
  
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	2e5f5680 	.word	0x2e5f5680
 8002ef4:	390c2fe0 	.word	0x390c2fe0
 8002ef8:	1701e47f 	.word	0x1701e47f
 8002efc:	1c146a60 	.word	0x1c146a60
 8002f00:	11d260bf 	.word	0x11d260bf
 8002f04:	14ced7e0 	.word	0x14ced7e0
 8002f08:	08e18f3f 	.word	0x08e18f3f
 8002f0c:	0a6fd060 	.word	0x0a6fd060
 8002f10:	10624dd3 	.word	0x10624dd3
 8002f14:	0800ca84 	.word	0x0800ca84

08002f18 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	461a      	mov	r2, r3
 8002f22:	2104      	movs	r1, #4
 8002f24:	2008      	movs	r0, #8
 8002f26:	f001 f923 	bl	8004170 <RadioSpiReadRegisters>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <SpiritRadioGetSynthWord+0x48>)
 8002f2e:	b212      	sxth	r2, r2
 8002f30:	4611      	mov	r1, r2
 8002f32:	7019      	strb	r1, [r3, #0]
 8002f34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f38:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002f3a:	793b      	ldrb	r3, [r7, #4]
 8002f3c:	055b      	lsls	r3, r3, #21
 8002f3e:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 8002f42:	797b      	ldrb	r3, [r7, #5]
 8002f44:	035b      	lsls	r3, r3, #13
 8002f46:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002f48:	79bb      	ldrb	r3, [r7, #6]
 8002f4a:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002f4c:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002f4e:	79fa      	ldrb	r2, [r7, #7]
 8002f50:	08d2      	lsrs	r2, r2, #3
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	4413      	add	r3, r2
  
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	2000026c 	.word	0x2000026c

08002f64 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8002f6a:	1dfb      	adds	r3, r7, #7
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2101      	movs	r1, #1
 8002f70:	200b      	movs	r0, #11
 8002f72:	f001 f8fd 	bl	8004170 <RadioSpiReadRegisters>
 8002f76:	4602      	mov	r2, r0
 8002f78:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <SpiritRadioGetBand+0x58>)
 8002f7a:	b212      	sxth	r2, r2
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	7019      	strb	r1, [r3, #0]
 8002f80:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f84:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e00e      	b.n	8002fb2 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d101      	bne.n	8002fa2 <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e007      	b.n	8002fb2 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d101      	bne.n	8002fb0 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8002fac:	2302      	movs	r3, #2
 8002fae:	e000      	b.n	8002fb2 <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8002fb0:	2303      	movs	r3, #3
  }
  
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	2000026c 	.word	0x2000026c

08002fc0 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2101      	movs	r1, #1
 8002fcc:	206c      	movs	r0, #108	; 0x6c
 8002fce:	f001 f8cf 	bl	8004170 <RadioSpiReadRegisters>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <SpiritRadioGetChannel+0x2c>)
 8002fd6:	b212      	sxth	r2, r2
 8002fd8:	4611      	mov	r1, r2
 8002fda:	7019      	strb	r1, [r3, #0]
 8002fdc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fe0:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
  
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	2000026c 	.word	0x2000026c

08002ff0 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8002ff6:	1dfb      	adds	r3, r7, #7
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	200c      	movs	r0, #12
 8002ffe:	f001 f8b7 	bl	8004170 <RadioSpiReadRegisters>
 8003002:	4602      	mov	r2, r0
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <SpiritRadioGetChannelSpace+0x38>)
 8003006:	b212      	sxth	r2, r2
 8003008:	4611      	mov	r1, r2
 800300a:	7019      	strb	r1, [r3, #0]
 800300c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003010:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	461a      	mov	r2, r3
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <SpiritRadioGetChannelSpace+0x3c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	0bdb      	lsrs	r3, r3, #15
  
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	2000026c 	.word	0x2000026c
 800302c:	20000268 	.word	0x20000268

08003030 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	461a      	mov	r2, r3
 800303a:	2102      	movs	r1, #2
 800303c:	200e      	movs	r0, #14
 800303e:	f001 f897 	bl	8004170 <RadioSpiReadRegisters>
 8003042:	4602      	mov	r2, r0
 8003044:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <SpiritRadioGetFrequencyOffset+0x80>)
 8003046:	b212      	sxth	r2, r2
 8003048:	4611      	mov	r1, r2
 800304a:	7019      	strb	r1, [r3, #0]
 800304c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003050:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 8003052:	793b      	ldrb	r3, [r7, #4]
 8003054:	b29b      	uxth	r3, r3
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	b29a      	uxth	r2, r3
 800305a:	797b      	ldrb	r3, [r7, #5]
 800305c:	b29b      	uxth	r3, r3
 800305e:	4413      	add	r3, r2
 8003060:	b29b      	uxth	r3, r3
 8003062:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 8003064:	887b      	ldrh	r3, [r7, #2]
 8003066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800306a:	2b00      	cmp	r3, #0
 800306c:	d007      	beq.n	800307e <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8003074:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8003078:	b29b      	uxth	r3, r3
 800307a:	807b      	strh	r3, [r7, #2]
 800307c:	e004      	b.n	8003088 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 800307e:	887b      	ldrh	r3, [r7, #2]
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	b29b      	uxth	r3, r3
 8003086:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8003088:	1cbb      	adds	r3, r7, #2
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 800308e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003092:	4a08      	ldr	r2, [pc, #32]	; (80030b4 <SpiritRadioGetFrequencyOffset+0x84>)
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	da03      	bge.n	80030a6 <SpiritRadioGetFrequencyOffset+0x76>
 800309e:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 80030a2:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80030a6:	149b      	asrs	r3, r3, #18
  
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	2000026c 	.word	0x2000026c
 80030b4:	20000268 	.word	0x20000268

080030b8 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 80030b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030bc:	b08a      	sub	sp, #40	; 0x28
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a79      	ldr	r2, [pc, #484]	; (80032b0 <SpiritRadioSetFrequencyBase+0x1f8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d307      	bcc.n	80030e0 <SpiritRadioSetFrequencyBase+0x28>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a78      	ldr	r2, [pc, #480]	; (80032b4 <SpiritRadioSetFrequencyBase+0x1fc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d803      	bhi.n	80030e0 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030de:	e022      	b.n	8003126 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a75      	ldr	r2, [pc, #468]	; (80032b8 <SpiritRadioSetFrequencyBase+0x200>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d907      	bls.n	80030f8 <SpiritRadioSetFrequencyBase+0x40>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a74      	ldr	r2, [pc, #464]	; (80032bc <SpiritRadioSetFrequencyBase+0x204>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d803      	bhi.n	80030f8 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030f6:	e016      	b.n	8003126 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a71      	ldr	r2, [pc, #452]	; (80032c0 <SpiritRadioSetFrequencyBase+0x208>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d907      	bls.n	8003110 <SpiritRadioSetFrequencyBase+0x58>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a70      	ldr	r2, [pc, #448]	; (80032c4 <SpiritRadioSetFrequencyBase+0x20c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d803      	bhi.n	8003110 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8003108:	2302      	movs	r3, #2
 800310a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800310e:	e00a      	b.n	8003126 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a6d      	ldr	r2, [pc, #436]	; (80032c8 <SpiritRadioSetFrequencyBase+0x210>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d906      	bls.n	8003126 <SpiritRadioSetFrequencyBase+0x6e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a6c      	ldr	r2, [pc, #432]	; (80032cc <SpiritRadioSetFrequencyBase+0x214>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d802      	bhi.n	8003126 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 8003120:	2303      	movs	r3, #3
 8003122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8003126:	f7ff ff83 	bl	8003030 <SpiritRadioGetFrequencyOffset>
 800312a:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 800312c:	f7ff ff60 	bl	8002ff0 <SpiritRadioGetChannelSpace>
 8003130:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8003132:	f7ff ff45 	bl	8002fc0 <SpiritRadioGetChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 800313a:	6a3a      	ldr	r2, [r7, #32]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	441a      	add	r2, r3
 8003140:	7efb      	ldrb	r3, [r7, #27]
 8003142:	69f9      	ldr	r1, [r7, #28]
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 800314c:	f000 fd60 	bl	8003c10 <SpiritRadioGetRefDiv>
 8003150:	4603      	mov	r3, r0
 8003152:	3301      	adds	r3, #1
 8003154:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 8003156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800315a:	2b03      	cmp	r3, #3
 800315c:	d839      	bhi.n	80031d2 <SpiritRadioSetFrequencyBase+0x11a>
 800315e:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <SpiritRadioSetFrequencyBase+0xac>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	080031bd 	.word	0x080031bd
 8003168:	080031a5 	.word	0x080031a5
 800316c:	0800318d 	.word	0x0800318d
 8003170:	08003175 	.word	0x08003175
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	4a56      	ldr	r2, [pc, #344]	; (80032d0 <SpiritRadioSetFrequencyBase+0x218>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d803      	bhi.n	8003184 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800317c:	2000      	movs	r0, #0
 800317e:	f7fe fded 	bl	8001d5c <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003182:	e026      	b.n	80031d2 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003184:	2001      	movs	r0, #1
 8003186:	f7fe fde9 	bl	8001d5c <SpiritCalibrationSelectVco>
    break;
 800318a:	e022      	b.n	80031d2 <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	4a51      	ldr	r2, [pc, #324]	; (80032d4 <SpiritRadioSetFrequencyBase+0x21c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d803      	bhi.n	800319c <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003194:	2000      	movs	r0, #0
 8003196:	f7fe fde1 	bl	8001d5c <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800319a:	e01a      	b.n	80031d2 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 800319c:	2001      	movs	r0, #1
 800319e:	f7fe fddd 	bl	8001d5c <SpiritCalibrationSelectVco>
    break;
 80031a2:	e016      	b.n	80031d2 <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	4a4c      	ldr	r2, [pc, #304]	; (80032d8 <SpiritRadioSetFrequencyBase+0x220>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d803      	bhi.n	80031b4 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80031ac:	2000      	movs	r0, #0
 80031ae:	f7fe fdd5 	bl	8001d5c <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80031b2:	e00e      	b.n	80031d2 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80031b4:	2001      	movs	r0, #1
 80031b6:	f7fe fdd1 	bl	8001d5c <SpiritCalibrationSelectVco>
    break;
 80031ba:	e00a      	b.n	80031d2 <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	4a47      	ldr	r2, [pc, #284]	; (80032dc <SpiritRadioSetFrequencyBase+0x224>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d803      	bhi.n	80031cc <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80031c4:	2000      	movs	r0, #0
 80031c6:	f7fe fdc9 	bl	8001d5c <SpiritCalibrationSelectVco>
 80031ca:	e002      	b.n	80031d2 <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80031cc:	2001      	movs	r0, #1
 80031ce:	f7fe fdc5 	bl	8001d5c <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80031d2:	6978      	ldr	r0, [r7, #20]
 80031d4:	f7ff fe0c 	bl	8002df0 <SpiritRadioSearchWCP>
 80031d8:	4603      	mov	r3, r0
 80031da:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 80031dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031e0:	4a3f      	ldr	r2, [pc, #252]	; (80032e0 <SpiritRadioSetFrequencyBase+0x228>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	461a      	mov	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	fb02 f303 	mul.w	r3, r2, r3
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd f989 	bl	8000504 <__aeabi_ui2d>
 80031f2:	4604      	mov	r4, r0
 80031f4:	460d      	mov	r5, r1
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	049b      	lsls	r3, r3, #18
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd f992 	bl	8000524 <__aeabi_i2d>
 8003200:	4680      	mov	r8, r0
 8003202:	4689      	mov	r9, r1
 8003204:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <SpiritRadioSetFrequencyBase+0x22c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fd f97b 	bl	8000504 <__aeabi_ui2d>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4640      	mov	r0, r8
 8003214:	4649      	mov	r1, r9
 8003216:	f7fd fb19 	bl	800084c <__aeabi_ddiv>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4620      	mov	r0, r4
 8003220:	4629      	mov	r1, r5
 8003222:	f7fd f9e9 	bl	80005f8 <__aeabi_dmul>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	f7fd fbf5 	bl	8000a1c <__aeabi_d2uiz>
 8003232:	4603      	mov	r3, r0
 8003234:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	0d5b      	lsrs	r3, r3, #21
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	b2da      	uxtb	r2, r3
 8003242:	7cbb      	ldrb	r3, [r7, #18]
 8003244:	015b      	lsls	r3, r3, #5
 8003246:	b2db      	uxtb	r3, r3
 8003248:	4313      	orrs	r3, r2
 800324a:	b2db      	uxtb	r3, r3
 800324c:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	0b5b      	lsrs	r3, r3, #13
 8003252:	b2db      	uxtb	r3, r3
 8003254:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	b2db      	uxtb	r3, r3
 800325c:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	b2da      	uxtb	r2, r3
 8003266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800326a:	491f      	ldr	r1, [pc, #124]	; (80032e8 <SpiritRadioSetFrequencyBase+0x230>)
 800326c:	5ccb      	ldrb	r3, [r1, r3]
 800326e:	4313      	orrs	r3, r2
 8003270:	b2db      	uxtb	r3, r3
 8003272:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8003274:	f107 0308 	add.w	r3, r7, #8
 8003278:	461a      	mov	r2, r3
 800327a:	2104      	movs	r1, #4
 800327c:	2008      	movs	r0, #8
 800327e:	f000 ff2b 	bl	80040d8 <RadioSpiWriteRegisters>
 8003282:	4602      	mov	r2, r0
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <SpiritRadioSetFrequencyBase+0x234>)
 8003286:	b212      	sxth	r2, r2
 8003288:	4611      	mov	r1, r2
 800328a:	7019      	strb	r1, [r3, #0]
 800328c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003290:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 8003292:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <SpiritRadioSetFrequencyBase+0x238>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d103      	bne.n	80032a2 <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 800329a:	f7fe ffbf 	bl	800221c <SpiritManagementWaVcoCalibration>
 800329e:	4603      	mov	r3, r0
 80032a0:	e000      	b.n	80032a4 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3728      	adds	r7, #40	; 0x28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032ae:	bf00      	nop
 80032b0:	2e5f5680 	.word	0x2e5f5680
 80032b4:	390c2fe0 	.word	0x390c2fe0
 80032b8:	1701e47f 	.word	0x1701e47f
 80032bc:	1c146a60 	.word	0x1c146a60
 80032c0:	11d260bf 	.word	0x11d260bf
 80032c4:	14ced7e0 	.word	0x14ced7e0
 80032c8:	08e18f3f 	.word	0x08e18f3f
 80032cc:	0a6fd060 	.word	0x0a6fd060
 80032d0:	099cf4e1 	.word	0x099cf4e1
 80032d4:	1339e9c3 	.word	0x1339e9c3
 80032d8:	19a28d05 	.word	0x19a28d05
 80032dc:	33451a0a 	.word	0x33451a0a
 80032e0:	0800c9c8 	.word	0x0800c9c8
 80032e4:	20000268 	.word	0x20000268
 80032e8:	0800c9cc 	.word	0x0800c9cc
 80032ec:	2000026c 	.word	0x2000026c
 80032f0:	20000007 	.word	0x20000007

080032f4 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 80032f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 80032fc:	f7ff fe0c 	bl	8002f18 <SpiritRadioGetSynthWord>
 8003300:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 8003302:	f7ff fe2f 	bl	8002f64 <SpiritRadioGetBand>
 8003306:	4603      	mov	r3, r0
 8003308:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 800330a:	f000 fc81 	bl	8003c10 <SpiritRadioGetRefDiv>
 800330e:	4603      	mov	r3, r0
 8003310:	3301      	adds	r3, #1
 8003312:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7fd f8f5 	bl	8000504 <__aeabi_ui2d>
 800331a:	4604      	mov	r4, r0
 800331c:	460d      	mov	r5, r1
 800331e:	4b19      	ldr	r3, [pc, #100]	; (8003384 <SpiritRadioGetFrequencyBase+0x90>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd f8ee 	bl	8000504 <__aeabi_ui2d>
 8003328:	4680      	mov	r8, r0
 800332a:	4689      	mov	r9, r1
 800332c:	78bb      	ldrb	r3, [r7, #2]
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	4915      	ldr	r1, [pc, #84]	; (8003388 <SpiritRadioGetFrequencyBase+0x94>)
 8003332:	5c8a      	ldrb	r2, [r1, r2]
 8003334:	fb02 f303 	mul.w	r3, r2, r3
 8003338:	049b      	lsls	r3, r3, #18
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd f8f2 	bl	8000524 <__aeabi_i2d>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4640      	mov	r0, r8
 8003346:	4649      	mov	r1, r9
 8003348:	f7fd fa80 	bl	800084c <__aeabi_ddiv>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4620      	mov	r0, r4
 8003352:	4629      	mov	r1, r5
 8003354:	f7fd f950 	bl	80005f8 <__aeabi_dmul>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	ec43 2b17 	vmov	d7, r2, r3
 8003360:	eeb0 0a47 	vmov.f32	s0, s14
 8003364:	eef0 0a67 	vmov.f32	s1, s15
 8003368:	f009 fa48 	bl	800c7fc <round>
 800336c:	ec53 2b10 	vmov	r2, r3, d0
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	f7fd fb52 	bl	8000a1c <__aeabi_d2uiz>
 8003378:	4603      	mov	r3, r0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003384:	20000268 	.word	0x20000268
 8003388:	0800c9c8 	.word	0x0800c9c8

0800338c <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8003398:	2300      	movs	r3, #0
 800339a:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 800339c:	230f      	movs	r3, #15
 800339e:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 80033a4:	f000 fc86 	bl	8003cb4 <SpiritRadioGetDigDiv>
 80033a8:	4603      	mov	r3, r0
 80033aa:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 80033ac:	e015      	b.n	80033da <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 80033ae:	4b4f      	ldr	r3, [pc, #316]	; (80034ec <SpiritRadioSearchDatarateME+0x160>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033b6:	f1c3 0114 	rsb	r1, r3, #20
 80033ba:	7ebb      	ldrb	r3, [r7, #26]
 80033bc:	440b      	add	r3, r1
 80033be:	fa22 f303 	lsr.w	r3, r2, r3
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d302      	bcc.n	80033ce <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 80033c8:	2301      	movs	r3, #1
 80033ca:	763b      	strb	r3, [r7, #24]
 80033cc:	e005      	b.n	80033da <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 80033ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 80033da:	7e3b      	ldrb	r3, [r7, #24]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d103      	bne.n	80033ea <SpiritRadioSearchDatarateME+0x5e>
 80033e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	dae1      	bge.n	80033ae <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 80033ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	da01      	bge.n	80033f6 <SpiritRadioSearchDatarateME+0x6a>
 80033f2:	2300      	movs	r3, #0
 80033f4:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 80033f6:	7ffa      	ldrb	r2, [r7, #31]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 80033fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003400:	f1c3 0317 	rsb	r3, r3, #23
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	409a      	lsls	r2, r3
 8003408:	4b38      	ldr	r3, [pc, #224]	; (80034ec <SpiritRadioSearchDatarateME+0x160>)
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	7ebb      	ldrb	r3, [r7, #26]
 800340e:	3305      	adds	r3, #5
 8003410:	fa21 f303 	lsr.w	r3, r1, r3
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 800341a:	2300      	movs	r3, #0
 800341c:	77bb      	strb	r3, [r7, #30]
 800341e:	e031      	b.n	8003484 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 8003420:	7e7a      	ldrb	r2, [r7, #25]
 8003422:	7fbb      	ldrb	r3, [r7, #30]
 8003424:	4413      	add	r3, r2
 8003426:	2b01      	cmp	r3, #1
 8003428:	d021      	beq.n	800346e <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	b29a      	uxth	r2, r3
 800342e:	7e7b      	ldrb	r3, [r7, #25]
 8003430:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8003434:	7fbb      	ldrb	r3, [r7, #30]
 8003436:	440b      	add	r3, r1
 8003438:	3b01      	subs	r3, #1
 800343a:	4618      	mov	r0, r3
 800343c:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <SpiritRadioSearchDatarateME+0x160>)
 800343e:	6819      	ldr	r1, [r3, #0]
 8003440:	7ebb      	ldrb	r3, [r7, #26]
 8003442:	3305      	adds	r3, #5
 8003444:	fa21 f303 	lsr.w	r3, r1, r3
 8003448:	fb03 f100 	mul.w	r1, r3, r0
 800344c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003450:	f1c3 0317 	rsb	r3, r3, #23
 8003454:	fa21 f303 	lsr.w	r3, r1, r3
 8003458:	b29b      	uxth	r3, r3
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	b29a      	uxth	r2, r3
 800345e:	7fbb      	ldrb	r3, [r7, #30]
 8003460:	b212      	sxth	r2, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	3320      	adds	r3, #32
 8003466:	443b      	add	r3, r7
 8003468:	f823 2c10 	strh.w	r2, [r3, #-16]
 800346c:	e007      	b.n	800347e <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 800346e:	7fbb      	ldrb	r3, [r7, #30]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	3320      	adds	r3, #32
 8003474:	443b      	add	r3, r7
 8003476:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800347a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 800347e:	7fbb      	ldrb	r3, [r7, #30]
 8003480:	3301      	adds	r3, #1
 8003482:	77bb      	strb	r3, [r7, #30]
 8003484:	7fbb      	ldrb	r3, [r7, #30]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d9ca      	bls.n	8003420 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 800348a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800348e:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 8003490:	2300      	movs	r3, #0
 8003492:	76fb      	strb	r3, [r7, #27]
 8003494:	e021      	b.n	80034da <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8003496:	7efb      	ldrb	r3, [r7, #27]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	3320      	adds	r3, #32
 800349c:	443b      	add	r3, r7
 800349e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bfb8      	it	lt
 80034a6:	425b      	neglt	r3, r3
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	8bba      	ldrh	r2, [r7, #28]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d911      	bls.n	80034d4 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 80034b0:	7efb      	ldrb	r3, [r7, #27]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	3320      	adds	r3, #32
 80034b6:	443b      	add	r3, r7
 80034b8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bfb8      	it	lt
 80034c0:	425b      	neglt	r3, r3
 80034c2:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 80034c4:	7e7a      	ldrb	r2, [r7, #25]
 80034c6:	7efb      	ldrb	r3, [r7, #27]
 80034c8:	4413      	add	r3, r2
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 80034d4:	7efb      	ldrb	r3, [r7, #27]
 80034d6:	3301      	adds	r3, #1
 80034d8:	76fb      	strb	r3, [r7, #27]
 80034da:	7efb      	ldrb	r3, [r7, #27]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d9da      	bls.n	8003496 <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000268 	.word	0x20000268

080034f0 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8003502:	f000 fbd7 	bl	8003cb4 <SpiritRadioGetDigDiv>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 800350c:	2302      	movs	r3, #2
 800350e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003512:	e002      	b.n	800351a <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003514:	2301      	movs	r3, #1
 8003516:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 800351a:	4b63      	ldr	r3, [pc, #396]	; (80036a8 <SpiritRadioSearchChannelBwME+0x1b8>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	4a61      	ldr	r2, [pc, #388]	; (80036ac <SpiritRadioSearchChannelBwME+0x1bc>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8003530:	2300      	movs	r3, #0
 8003532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003536:	e006      	b.n	8003546 <SpiritRadioSearchChannelBwME+0x56>
 8003538:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800353c:	b2db      	uxtb	r3, r3
 800353e:	3301      	adds	r3, #1
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003546:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800354a:	2b59      	cmp	r3, #89	; 0x59
 800354c:	dc0f      	bgt.n	800356e <SpiritRadioSearchChannelBwME+0x7e>
 800354e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003552:	4a57      	ldr	r2, [pc, #348]	; (80036b0 <SpiritRadioSearchChannelBwME+0x1c0>)
 8003554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003558:	461a      	mov	r2, r3
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	4a54      	ldr	r2, [pc, #336]	; (80036b4 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	0adb      	lsrs	r3, r3, #11
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	429a      	cmp	r2, r3
 800356c:	d3e4      	bcc.n	8003538 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 800356e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003572:	2b00      	cmp	r3, #0
 8003574:	d077      	beq.n	8003666 <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8003576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800357a:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 800357c:	2300      	movs	r3, #0
 800357e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003582:	e03a      	b.n	80035fa <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003584:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003588:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800358c:	4413      	add	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	dc06      	bgt.n	80035a0 <SpiritRadioSearchChannelBwME+0xb0>
 8003592:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003596:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800359a:	4413      	add	r3, r2
 800359c:	2b5a      	cmp	r3, #90	; 0x5a
 800359e:	dc1e      	bgt.n	80035de <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	f997 101b 	ldrsb.w	r1, [r7, #27]
 80035a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035ac:	440b      	add	r3, r1
 80035ae:	3b01      	subs	r3, #1
 80035b0:	493f      	ldr	r1, [pc, #252]	; (80036b0 <SpiritRadioSearchChannelBwME+0x1c0>)
 80035b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80035b6:	4619      	mov	r1, r3
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	493d      	ldr	r1, [pc, #244]	; (80036b4 <SpiritRadioSearchChannelBwME+0x1c4>)
 80035c0:	fba1 1303 	umull	r1, r3, r1, r3
 80035c4:	0adb      	lsrs	r3, r3, #11
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035d0:	b212      	sxth	r2, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	3328      	adds	r3, #40	; 0x28
 80035d6:	443b      	add	r3, r7
 80035d8:	f823 2c14 	strh.w	r2, [r3, #-20]
 80035dc:	e008      	b.n	80035f0 <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 80035de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	3328      	adds	r3, #40	; 0x28
 80035e6:	443b      	add	r3, r7
 80035e8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80035ec:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 80035f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035f4:	3301      	adds	r3, #1
 80035f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80035fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d9c0      	bls.n	8003584 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8003602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003606:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003608:	2300      	movs	r3, #0
 800360a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800360e:	e026      	b.n	800365e <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003610:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	3328      	adds	r3, #40	; 0x28
 8003618:	443b      	add	r3, r7
 800361a:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	bfb8      	it	lt
 8003622:	425b      	neglt	r3, r3
 8003624:	b29b      	uxth	r3, r3
 8003626:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003628:	429a      	cmp	r2, r3
 800362a:	d913      	bls.n	8003654 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 800362c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	3328      	adds	r3, #40	; 0x28
 8003634:	443b      	add	r3, r7
 8003636:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	bfb8      	it	lt
 800363e:	425b      	neglt	r3, r3
 8003640:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 8003642:	7efa      	ldrb	r2, [r7, #27]
 8003644:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003648:	4413      	add	r3, r2
 800364a:	b2db      	uxtb	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8003654:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003658:	3301      	adds	r3, #1
 800365a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800365e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003662:	2b02      	cmp	r3, #2
 8003664:	d9d4      	bls.n	8003610 <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8003666:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800366a:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <SpiritRadioSearchChannelBwME+0x1c8>)
 800366c:	fb82 1203 	smull	r1, r2, r2, r3
 8003670:	1052      	asrs	r2, r2, #1
 8003672:	17db      	asrs	r3, r3, #31
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	b25b      	sxtb	r3, r3
 8003678:	b2da      	uxtb	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 800367e:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8003682:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003684:	fb83 1302 	smull	r1, r3, r3, r2
 8003688:	1059      	asrs	r1, r3, #1
 800368a:	17d3      	asrs	r3, r2, #31
 800368c:	1ac9      	subs	r1, r1, r3
 800368e:	460b      	mov	r3, r1
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	440b      	add	r3, r1
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	b25b      	sxtb	r3, r3
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	701a      	strb	r2, [r3, #0]
  
}
 800369e:	bf00      	nop
 80036a0:	3728      	adds	r7, #40	; 0x28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000268 	.word	0x20000268
 80036ac:	51eb851f 	.word	0x51eb851f
 80036b0:	0800c9d0 	.word	0x0800c9d0
 80036b4:	c9a633fd 	.word	0xc9a633fd
 80036b8:	38e38e39 	.word	0x38e38e39

080036bc <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 80036bc:	b5b0      	push	{r4, r5, r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 80036cc:	4b53      	ldr	r3, [pc, #332]	; (800381c <SpiritRadioSearchFreqDevME+0x160>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	ee07 3a90 	vmov	s15, r3
 80036d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036d8:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003820 <SpiritRadioSearchFreqDevME+0x164>
 80036dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036e0:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 80036e4:	2300      	movs	r3, #0
 80036e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036ea:	e028      	b.n	800373e <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 80036ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036f0:	2201      	movs	r2, #1
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc ff14 	bl	8000524 <__aeabi_i2d>
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	4b48      	ldr	r3, [pc, #288]	; (8003824 <SpiritRadioSearchFreqDevME+0x168>)
 8003702:	f7fc ff79 	bl	80005f8 <__aeabi_dmul>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	f7fd f985 	bl	8000a1c <__aeabi_d2uiz>
 8003712:	ee07 0a90 	vmov	s15, r0
 8003716:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800371a:	edd7 7a06 	vldr	s15, [r7, #24]
 800371e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003726:	ee17 3a90 	vmov	r3, s15
 800372a:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	429a      	cmp	r2, r3
 8003732:	d309      	bcc.n	8003748 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003738:	3301      	adds	r3, #1
 800373a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800373e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003742:	2b09      	cmp	r3, #9
 8003744:	d9d2      	bls.n	80036ec <SpiritRadioSearchFreqDevME+0x30>
 8003746:	e000      	b.n	800374a <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003748:	bf00      	nop
  }
  (*pcE) = i;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003750:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 8003752:	2300      	movs	r3, #0
 8003754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003758:	e043      	b.n	80037e2 <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 800375e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003762:	4618      	mov	r0, r3
 8003764:	f7fc fede 	bl	8000524 <__aeabi_i2d>
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	4b2e      	ldr	r3, [pc, #184]	; (8003828 <SpiritRadioSearchFreqDevME+0x16c>)
 800376e:	f7fc fd8d 	bl	800028c <__adddf3>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4610      	mov	r0, r2
 8003778:	4619      	mov	r1, r3
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003782:	f7fd f863 	bl	800084c <__aeabi_ddiv>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4614      	mov	r4, r2
 800378c:	461d      	mov	r5, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	2301      	movs	r3, #1
 8003796:	4093      	lsls	r3, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f7fc fec3 	bl	8000524 <__aeabi_i2d>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4620      	mov	r0, r4
 80037a4:	4629      	mov	r1, r5
 80037a6:	f7fc ff27 	bl	80005f8 <__aeabi_dmul>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4610      	mov	r0, r2
 80037b0:	4619      	mov	r1, r3
 80037b2:	f7fd f933 	bl	8000a1c <__aeabi_d2uiz>
 80037b6:	ee07 0a90 	vmov	s15, r0
 80037ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037be:	edd7 7a06 	vldr	s15, [r7, #24]
 80037c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ca:	ee17 3a90 	vmov	r3, s15
 80037ce:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d309      	bcc.n	80037ec <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 80037d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037dc:	3301      	adds	r3, #1
 80037de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80037e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037e6:	2b07      	cmp	r3, #7
 80037e8:	d9b7      	bls.n	800375a <SpiritRadioSearchFreqDevME+0x9e>
 80037ea:	e000      	b.n	80037ee <SpiritRadioSearchFreqDevME+0x132>
      break;
 80037ec:	bf00      	nop
  }
  
  (*pcM)=i;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037f4:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	1ad2      	subs	r2, r2, r3
 80037fc:	69f9      	ldr	r1, [r7, #28]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1acb      	subs	r3, r1, r3
 8003802:	429a      	cmp	r2, r3
 8003804:	d205      	bcs.n	8003812 <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	3b01      	subs	r3, #1
 800380c:	b2da      	uxtb	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	701a      	strb	r2, [r3, #0]
  
}
 8003812:	bf00      	nop
 8003814:	3728      	adds	r7, #40	; 0x28
 8003816:	46bd      	mov	sp, r7
 8003818:	bdb0      	pop	{r4, r5, r7, pc}
 800381a:	bf00      	nop
 800381c:	20000268 	.word	0x20000268
 8003820:	48800000 	.word	0x48800000
 8003824:	401e0000 	.word	0x401e0000
 8003828:	40200000 	.word	0x40200000

0800382c <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003838:	2300      	movs	r3, #0
 800383a:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 800383c:	2300      	movs	r3, #0
 800383e:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a74      	ldr	r2, [pc, #464]	; (8003a14 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d30c      	bcc.n	8003862 <SpiritRadioGetdBm2Reg+0x36>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a73      	ldr	r2, [pc, #460]	; (8003a18 <SpiritRadioGetdBm2Reg+0x1ec>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d808      	bhi.n	8003862 <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 8003850:	2300      	movs	r3, #0
 8003852:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4a71      	ldr	r2, [pc, #452]	; (8003a1c <SpiritRadioGetdBm2Reg+0x1f0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d822      	bhi.n	80038a2 <SpiritRadioGetdBm2Reg+0x76>
 800385c:	2301      	movs	r3, #1
 800385e:	75fb      	strb	r3, [r7, #23]
 8003860:	e01f      	b.n	80038a2 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a6e      	ldr	r2, [pc, #440]	; (8003a20 <SpiritRadioGetdBm2Reg+0x1f4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d906      	bls.n	8003878 <SpiritRadioGetdBm2Reg+0x4c>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a6d      	ldr	r2, [pc, #436]	; (8003a24 <SpiritRadioGetdBm2Reg+0x1f8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d802      	bhi.n	8003878 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 8003872:	2302      	movs	r3, #2
 8003874:	75fb      	strb	r3, [r7, #23]
 8003876:	e014      	b.n	80038a2 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a6b      	ldr	r2, [pc, #428]	; (8003a28 <SpiritRadioGetdBm2Reg+0x1fc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d906      	bls.n	800388e <SpiritRadioGetdBm2Reg+0x62>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a6a      	ldr	r2, [pc, #424]	; (8003a2c <SpiritRadioGetdBm2Reg+0x200>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d802      	bhi.n	800388e <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8003888:	2303      	movs	r3, #3
 800388a:	75fb      	strb	r3, [r7, #23]
 800388c:	e009      	b.n	80038a2 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4a67      	ldr	r2, [pc, #412]	; (8003a30 <SpiritRadioGetdBm2Reg+0x204>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d905      	bls.n	80038a2 <SpiritRadioGetdBm2Reg+0x76>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a66      	ldr	r2, [pc, #408]	; (8003a34 <SpiritRadioGetdBm2Reg+0x208>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d801      	bhi.n	80038a2 <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 800389e:	2304      	movs	r3, #4
 80038a0:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 80038a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80038aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b2:	dd2f      	ble.n	8003914 <SpiritRadioGetdBm2Reg+0xe8>
 80038b4:	7dfa      	ldrb	r2, [r7, #23]
 80038b6:	4960      	ldr	r1, [pc, #384]	; (8003a38 <SpiritRadioGetdBm2Reg+0x20c>)
 80038b8:	4613      	mov	r3, r2
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4413      	add	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	440b      	add	r3, r1
 80038c2:	3308      	adds	r3, #8
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 80038cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038d0:	7dfa      	ldrb	r2, [r7, #23]
 80038d2:	4959      	ldr	r1, [pc, #356]	; (8003a38 <SpiritRadioGetdBm2Reg+0x20c>)
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	440b      	add	r3, r1
 80038de:	330c      	adds	r3, #12
 80038e0:	ed93 6a00 	vldr	s12, [r3]
 80038e4:	7dfa      	ldrb	r2, [r7, #23]
 80038e6:	4954      	ldr	r1, [pc, #336]	; (8003a38 <SpiritRadioGetdBm2Reg+0x20c>)
 80038e8:	4613      	mov	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	440b      	add	r3, r1
 80038f2:	3308      	adds	r3, #8
 80038f4:	edd3 6a00 	vldr	s13, [r3]
 80038f8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80038fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003900:	ed97 7a02 	vldr	s14, [r7, #8]
 8003904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390c:	dd02      	ble.n	8003914 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 800390e:	2300      	movs	r3, #0
 8003910:	75bb      	strb	r3, [r7, #22]
 8003912:	e035      	b.n	8003980 <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003914:	edd7 7a02 	vldr	s15, [r7, #8]
 8003918:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800391c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003920:	d82e      	bhi.n	8003980 <SpiritRadioGetdBm2Reg+0x154>
 8003922:	7dfa      	ldrb	r2, [r7, #23]
 8003924:	4944      	ldr	r1, [pc, #272]	; (8003a38 <SpiritRadioGetdBm2Reg+0x20c>)
 8003926:	4613      	mov	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4413      	add	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	440b      	add	r3, r1
 8003930:	3308      	adds	r3, #8
 8003932:	edd3 7a00 	vldr	s15, [r3]
 8003936:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003a3c <SpiritRadioGetdBm2Reg+0x210>
 800393a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800393e:	7dfa      	ldrb	r2, [r7, #23]
 8003940:	493d      	ldr	r1, [pc, #244]	; (8003a38 <SpiritRadioGetdBm2Reg+0x20c>)
 8003942:	4613      	mov	r3, r2
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	440b      	add	r3, r1
 800394c:	330c      	adds	r3, #12
 800394e:	ed93 6a00 	vldr	s12, [r3]
 8003952:	7dfa      	ldrb	r2, [r7, #23]
 8003954:	4938      	ldr	r1, [pc, #224]	; (8003a38 <SpiritRadioGetdBm2Reg+0x20c>)
 8003956:	4613      	mov	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	440b      	add	r3, r1
 8003960:	3308      	adds	r3, #8
 8003962:	edd3 6a00 	vldr	s13, [r3]
 8003966:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800396a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800396e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003972:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397a:	d501      	bpl.n	8003980 <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 800397c:	2302      	movs	r3, #2
 800397e:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003980:	7dfa      	ldrb	r2, [r7, #23]
 8003982:	7dbb      	ldrb	r3, [r7, #22]
 8003984:	0059      	lsls	r1, r3, #1
 8003986:	482c      	ldr	r0, [pc, #176]	; (8003a38 <SpiritRadioGetdBm2Reg+0x20c>)
 8003988:	4613      	mov	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4413      	add	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	440b      	add	r3, r1
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4403      	add	r3, r0
 8003996:	ed93 7a00 	vldr	s14, [r3]
 800399a:	edd7 7a02 	vldr	s15, [r7, #8]
 800399e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039a2:	7dfa      	ldrb	r2, [r7, #23]
 80039a4:	7dbb      	ldrb	r3, [r7, #22]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	1c59      	adds	r1, r3, #1
 80039aa:	4823      	ldr	r0, [pc, #140]	; (8003a38 <SpiritRadioGetdBm2Reg+0x20c>)
 80039ac:	4613      	mov	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4413      	add	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	440b      	add	r3, r1
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4403      	add	r3, r0
 80039ba:	edd3 7a00 	vldr	s15, [r3]
 80039be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c2:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 80039c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80039ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d6:	d503      	bpl.n	80039e0 <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 80039d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	e00a      	b.n	80039f6 <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 80039e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80039e4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003a40 <SpiritRadioGetdBm2Reg+0x214>
 80039e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f0:	dd01      	ble.n	80039f6 <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 80039f2:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <SpiritRadioGetdBm2Reg+0x218>)
 80039f4:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 80039f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80039fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039fe:	edc7 7a01 	vstr	s15, [r7, #4]
 8003a02:	793b      	ldrb	r3, [r7, #4]
 8003a04:	b2db      	uxtb	r3, r3
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	2e5f5680 	.word	0x2e5f5680
 8003a18:	390c2fe0 	.word	0x390c2fe0
 8003a1c:	35a4e8ff 	.word	0x35a4e8ff
 8003a20:	1701e47f 	.word	0x1701e47f
 8003a24:	1c146a60 	.word	0x1c146a60
 8003a28:	11d260bf 	.word	0x11d260bf
 8003a2c:	14ced7e0 	.word	0x14ced7e0
 8003a30:	08e18f3f 	.word	0x08e18f3f
 8003a34:	0a6fd060 	.word	0x0a6fd060
 8003a38:	0800caa4 	.word	0x0800caa4
 8003a3c:	42200000 	.word	0x42200000
 8003a40:	42b40000 	.word	0x42b40000
 8003a44:	42b40000 	.word	0x42b40000

08003a48 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	ed87 0a00 	vstr	s0, [r7]
 8003a54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003a56:	f7ff fc4d 	bl	80032f4 <SpiritRadioGetFrequencyBase>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	ed97 0a00 	vldr	s0, [r7]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fee3 	bl	800382c <SpiritRadioGetdBm2Reg>
 8003a66:	4603      	mov	r3, r0
 8003a68:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	f1c3 0317 	rsb	r3, r3, #23
 8003a70:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8003a72:	f107 020e 	add.w	r2, r7, #14
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	2101      	movs	r1, #1
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fb2c 	bl	80040d8 <RadioSpiWriteRegisters>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <SpiritRadioSetPALeveldBm+0x50>)
 8003a84:	b212      	sxth	r2, r2
 8003a86:	4611      	mov	r1, r2
 8003a88:	7019      	strb	r1, [r3, #0]
 8003a8a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a8e:	705a      	strb	r2, [r3, #1]
  
}
 8003a90:	bf00      	nop
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	2000026c 	.word	0x2000026c

08003a9c <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003aa6:	f107 030f 	add.w	r3, r7, #15
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2101      	movs	r1, #1
 8003aae:	2018      	movs	r0, #24
 8003ab0:	f000 fb5e 	bl	8004170 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003abe:	7bfa      	ldrb	r2, [r7, #15]
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003ac8:	f107 030f 	add.w	r3, r7, #15
 8003acc:	461a      	mov	r2, r3
 8003ace:	2101      	movs	r1, #1
 8003ad0:	2018      	movs	r0, #24
 8003ad2:	f000 fb01 	bl	80040d8 <RadioSpiWriteRegisters>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <SpiritRadioSetPACwc+0x54>)
 8003ada:	b212      	sxth	r2, r2
 8003adc:	4611      	mov	r1, r2
 8003ade:	7019      	strb	r1, [r3, #0]
 8003ae0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ae4:	705a      	strb	r2, [r3, #1]
  
}
 8003ae6:	bf00      	nop
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	2000026c 	.word	0x2000026c

08003af4 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003afe:	f107 030f 	add.w	r3, r7, #15
 8003b02:	461a      	mov	r2, r3
 8003b04:	2101      	movs	r1, #1
 8003b06:	2018      	movs	r0, #24
 8003b08:	f000 fb32 	bl	8004170 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	f023 0307 	bic.w	r3, r3, #7
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8003b16:	7bfa      	ldrb	r2, [r7, #15]
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003b20:	f107 030f 	add.w	r3, r7, #15
 8003b24:	461a      	mov	r2, r3
 8003b26:	2101      	movs	r1, #1
 8003b28:	2018      	movs	r0, #24
 8003b2a:	f000 fad5 	bl	80040d8 <RadioSpiWriteRegisters>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003b32:	b212      	sxth	r2, r2
 8003b34:	4611      	mov	r1, r2
 8003b36:	7019      	strb	r1, [r3, #0]
 8003b38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b3c:	705a      	strb	r2, [r3, #1]
  
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	2000026c 	.word	0x2000026c

08003b4c <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003b5a:	f107 030f 	add.w	r3, r7, #15
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2101      	movs	r1, #1
 8003b62:	201e      	movs	r0, #30
 8003b64:	f000 fb04 	bl	8004170 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d105      	bne.n	8003b7a <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	73fb      	strb	r3, [r7, #15]
 8003b78:	e004      	b.n	8003b84 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003b84:	f107 030f 	add.w	r3, r7, #15
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	201e      	movs	r0, #30
 8003b8e:	f000 faa3 	bl	80040d8 <RadioSpiWriteRegisters>
 8003b92:	4602      	mov	r2, r0
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <SpiritRadioAFCFreezeOnSync+0x60>)
 8003b96:	b212      	sxth	r2, r2
 8003b98:	4611      	mov	r1, r2
 8003b9a:	7019      	strb	r1, [r3, #0]
 8003b9c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ba0:	705a      	strb	r2, [r3, #1]
  
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	2000026c 	.word	0x2000026c

08003bb0 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003bba:	f107 030f 	add.w	r3, r7, #15
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	209e      	movs	r0, #158	; 0x9e
 8003bc4:	f000 fad4 	bl	8004170 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d105      	bne.n	8003bda <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	73fb      	strb	r3, [r7, #15]
 8003bd8:	e004      	b.n	8003be4 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003be4:	f107 030f 	add.w	r3, r7, #15
 8003be8:	461a      	mov	r2, r3
 8003bea:	2101      	movs	r1, #1
 8003bec:	209e      	movs	r0, #158	; 0x9e
 8003bee:	f000 fa73 	bl	80040d8 <RadioSpiWriteRegisters>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <SpiritRadioSetRefDiv+0x5c>)
 8003bf6:	b212      	sxth	r2, r2
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	7019      	strb	r1, [r3, #0]
 8003bfc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c00:	705a      	strb	r2, [r3, #1]
  
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	2000026c 	.word	0x2000026c

08003c10 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003c16:	1dfb      	adds	r3, r7, #7
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	209e      	movs	r0, #158	; 0x9e
 8003c1e:	f000 faa7 	bl	8004170 <RadioSpiReadRegisters>
 8003c22:	4602      	mov	r2, r0
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <SpiritRadioGetRefDiv+0x40>)
 8003c26:	b212      	sxth	r2, r2
 8003c28:	4611      	mov	r1, r2
 8003c2a:	7019      	strb	r1, [r3, #0]
 8003c2c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c30:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	09db      	lsrs	r3, r3, #7
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003c44:	2300      	movs	r3, #0
  }
  
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	2000026c 	.word	0x2000026c

08003c54 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003c5e:	f107 030f 	add.w	r3, r7, #15
 8003c62:	461a      	mov	r2, r3
 8003c64:	2101      	movs	r1, #1
 8003c66:	20b4      	movs	r0, #180	; 0xb4
 8003c68:	f000 fa82 	bl	8004170 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d105      	bne.n	8003c7e <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	f023 0308 	bic.w	r3, r3, #8
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	73fb      	strb	r3, [r7, #15]
 8003c7c:	e004      	b.n	8003c88 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	f043 0308 	orr.w	r3, r3, #8
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003c88:	f107 030f 	add.w	r3, r7, #15
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2101      	movs	r1, #1
 8003c90:	20b4      	movs	r0, #180	; 0xb4
 8003c92:	f000 fa21 	bl	80040d8 <RadioSpiWriteRegisters>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <SpiritRadioSetDigDiv+0x5c>)
 8003c9a:	b212      	sxth	r2, r2
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	7019      	strb	r1, [r3, #0]
 8003ca0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ca4:	705a      	strb	r2, [r3, #1]
  
}
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	2000026c 	.word	0x2000026c

08003cb4 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003cba:	1dfb      	adds	r3, r7, #7
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	20b4      	movs	r0, #180	; 0xb4
 8003cc2:	f000 fa55 	bl	8004170 <RadioSpiReadRegisters>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <SpiritRadioGetDigDiv+0x40>)
 8003cca:	b212      	sxth	r2, r2
 8003ccc:	4611      	mov	r1, r2
 8003cce:	7019      	strb	r1, [r3, #0]
 8003cd0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003cd4:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	08db      	lsrs	r3, r3, #3
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003ce8:	2301      	movs	r3, #1
  }
  
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	2000026c 	.word	0x2000026c

08003cf8 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <SpiritRadioGetXtalFrequency+0x14>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000268 	.word	0x20000268

08003d10 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <SpiritRadioSetXtalFrequency+0x1c>)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6013      	str	r3, [r2, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20000268 	.word	0x20000268

08003d30 <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 8003d3a:	f107 020c 	add.w	r2, r7, #12
 8003d3e:	f107 030c 	add.w	r3, r7, #12
 8003d42:	3301      	adds	r3, #1
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	ed97 0a01 	vldr	s0, [r7, #4]
 8003d4c:	f000 f816 	bl	8003d7c <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 8003d50:	f107 030c 	add.w	r3, r7, #12
 8003d54:	461a      	mov	r2, r3
 8003d56:	2102      	movs	r1, #2
 8003d58:	2053      	movs	r0, #83	; 0x53
 8003d5a:	f000 f9bd 	bl	80040d8 <RadioSpiWriteRegisters>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <SpiritTimerSetRxTimeoutMs+0x48>)
 8003d62:	b212      	sxth	r2, r2
 8003d64:	4611      	mov	r1, r2
 8003d66:	7019      	strb	r1, [r3, #0]
 8003d68:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d6c:	705a      	strb	r2, [r3, #1]

}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	2000026c 	.word	0x2000026c

08003d7c <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d86:	60b8      	str	r0, [r7, #8]
 8003d88:	6079      	str	r1, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 8003d8a:	f7ff ffb5 	bl	8003cf8 <SpiritRadioGetXtalFrequency>
 8003d8e:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	4a91      	ldr	r2, [pc, #580]	; (8003fd8 <SpiritTimerComputeRxTimeoutValues+0x25c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d902      	bls.n	8003d9e <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	085b      	lsrs	r3, r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	ee07 3a90 	vmov	s15, r3
 8003da4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003db0:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8003fdc <SpiritTimerComputeRxTimeoutValues+0x260>
 8003db4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dbc:	ee17 3a90 	vmov	r3, s15
 8003dc0:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	f64f 5201 	movw	r2, #64769	; 0xfd01
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d906      	bls.n	8003dda <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	22ff      	movs	r2, #255	; 0xff
 8003dd0:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	22ff      	movs	r2, #255	; 0xff
 8003dd6:	701a      	strb	r2, [r3, #0]
    return;
 8003dd8:	e0fa      	b.n	8003fd0 <SpiritTimerComputeRxTimeoutValues+0x254>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	4a80      	ldr	r2, [pc, #512]	; (8003fe0 <SpiritTimerComputeRxTimeoutValues+0x264>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	09db      	lsrs	r3, r3, #7
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	3302      	adds	r3, #2
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	ee07 3a90 	vmov	s15, r3
 8003e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	ee07 3a90 	vmov	s15, r3
 8003e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8003fdc <SpiritTimerComputeRxTimeoutValues+0x260>
 8003e20:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e32:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e42:	dd1d      	ble.n	8003e80 <SpiritTimerComputeRxTimeoutValues+0x104>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	ee07 3a90 	vmov	s15, r3
 8003e4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	ee07 3a90 	vmov	s15, r3
 8003e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e60:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003fdc <SpiritTimerComputeRxTimeoutValues+0x260>
 8003e64:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e76:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e7e:	e01e      	b.n	8003ebe <SpiritTimerComputeRxTimeoutValues+0x142>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	ee07 3a90 	vmov	s15, r3
 8003e88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	ee07 3a90 	vmov	s15, r3
 8003e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003fdc <SpiritTimerComputeRxTimeoutValues+0x260>
 8003ea0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eba:	eef1 7a67 	vneg.f32	s15, s15
 8003ebe:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if((*pcCounter)<=254)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2bff      	cmp	r3, #255	; 0xff
 8003ec8:	d06e      	beq.n	8003fa8 <SpiritTimerComputeRxTimeoutValues+0x22c>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	ee07 3a90 	vmov	s15, r3
 8003ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	ee07 3a90 	vmov	s15, r3
 8003ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003fdc <SpiritTimerComputeRxTimeoutValues+0x260>
 8003eec:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0e:	dd1e      	ble.n	8003f4e <SpiritTimerComputeRxTimeoutValues+0x1d2>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003fdc <SpiritTimerComputeRxTimeoutValues+0x260>
 8003f32:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	ee07 3a90 	vmov	s15, r3
 8003f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f4c:	e01f      	b.n	8003f8e <SpiritTimerComputeRxTimeoutValues+0x212>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	3301      	adds	r3, #1
 8003f54:	ee07 3a90 	vmov	s15, r3
 8003f58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003fdc <SpiritTimerComputeRxTimeoutValues+0x260>
 8003f70:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f82:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f8a:	eef1 7a67 	vneg.f32	s15, s15
 8003f8e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9a:	d505      	bpl.n	8003fa8 <SpiritTimerComputeRxTimeoutValues+0x22c>
      (*pcCounter)=(*pcCounter)+1;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d906      	bls.n	8003fca <SpiritTimerComputeRxTimeoutValues+0x24e>
    (*pcCounter)--;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	701a      	strb	r2, [r3, #0]
 8003fc8:	e002      	b.n	8003fd0 <SpiritTimerComputeRxTimeoutValues+0x254>
  else
    (*pcCounter)=1;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	701a      	strb	r2, [r3, #0]
}
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	01c9c380 	.word	0x01c9c380
 8003fdc:	4993b480 	.word	0x4993b480
 8003fe0:	80808081 	.word	0x80808081

08003fe4 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003fee:	f107 030c 	add.w	r3, r7, #12
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	204f      	movs	r0, #79	; 0x4f
 8003ff8:	f000 f8ba 	bl	8004170 <RadioSpiReadRegisters>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004000:	b212      	sxth	r2, r2
 8004002:	4611      	mov	r1, r2
 8004004:	7019      	strb	r1, [r3, #0]
 8004006:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800400a:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 800400c:	7b3b      	ldrb	r3, [r7, #12]
 800400e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004012:	b2db      	uxtb	r3, r3
 8004014:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8004016:	7b3b      	ldrb	r3, [r7, #12]
 8004018:	b25a      	sxtb	r2, r3
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	b25b      	sxtb	r3, r3
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	b25b      	sxtb	r3, r3
 8004026:	4313      	orrs	r3, r2
 8004028:	b25b      	sxtb	r3, r3
 800402a:	b2db      	uxtb	r3, r3
 800402c:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 800402e:	7b7b      	ldrb	r3, [r7, #13]
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	b2db      	uxtb	r3, r3
 8004036:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8004038:	7b7b      	ldrb	r3, [r7, #13]
 800403a:	b25a      	sxtb	r2, r3
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	015b      	lsls	r3, r3, #5
 8004040:	b25b      	sxtb	r3, r3
 8004042:	4313      	orrs	r3, r2
 8004044:	b25b      	sxtb	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 800404a:	f107 030c 	add.w	r3, r7, #12
 800404e:	461a      	mov	r2, r3
 8004050:	2102      	movs	r1, #2
 8004052:	204f      	movs	r0, #79	; 0x4f
 8004054:	f000 f840 	bl	80040d8 <RadioSpiWriteRegisters>
 8004058:	4602      	mov	r2, r0
 800405a:	4b05      	ldr	r3, [pc, #20]	; (8004070 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 800405c:	b212      	sxth	r2, r2
 800405e:	4611      	mov	r1, r2
 8004060:	7019      	strb	r1, [r3, #0]
 8004062:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004066:	705a      	strb	r2, [r3, #1]

}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	2000026c 	.word	0x2000026c

08004074 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 800407a:	1d3b      	adds	r3, r7, #4
 800407c:	461a      	mov	r2, r3
 800407e:	2102      	movs	r1, #2
 8004080:	20c0      	movs	r0, #192	; 0xc0
 8004082:	f000 f875 	bl	8004170 <RadioSpiReadRegisters>
 8004086:	4603      	mov	r3, r0
 8004088:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <SpiritRefreshStatus+0x3c>)
 800408a:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 800408c:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <SpiritRefreshStatus+0x3c>)
 800408e:	781a      	ldrb	r2, [r3, #0]
 8004090:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8004092:	429a      	cmp	r2, r3
 8004094:	d1f1      	bne.n	800407a <SpiritRefreshStatus+0x6>
 8004096:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <SpiritRefreshStatus+0x40>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d1ea      	bne.n	800407a <SpiritRefreshStatus+0x6>

}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	2000026c 	.word	0x2000026c
 80040b4:	2000026d 	.word	0x2000026d

080040b8 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <RadioSpiInit+0x1c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <RadioSpiInit+0x16>
  {
    Error_Handler();
 80040ca:	f7fd f939 	bl	8001340 <Error_Handler>
  }
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000008 	.word	0x20000008

080040d8 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	4603      	mov	r3, r0
 80040e0:	603a      	str	r2, [r7, #0]
 80040e2:	71fb      	strb	r3, [r7, #7]
 80040e4:	460b      	mov	r3, r1
 80040e6:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 80040e8:	2300      	movs	r3, #0
 80040ea:	743b      	strb	r3, [r7, #16]
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80040f0:	2017      	movs	r0, #23
 80040f2:	f000 fadd 	bl	80046b0 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 80040f6:	2200      	movs	r2, #0
 80040f8:	2140      	movs	r1, #64	; 0x40
 80040fa:	481b      	ldr	r0, [pc, #108]	; (8004168 <RadioSpiWriteRegisters+0x90>)
 80040fc:	f000 fc90 	bl	8004a20 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <RadioSpiWriteRegisters+0x94>)
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	f107 020c 	add.w	r2, r7, #12
 8004108:	f107 0110 	add.w	r1, r7, #16
 800410c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2302      	movs	r3, #2
 8004114:	f002 fb47 	bl	80067a6 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004118:	4b14      	ldr	r3, [pc, #80]	; (800416c <RadioSpiWriteRegisters+0x94>)
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	79bb      	ldrb	r3, [r7, #6]
 800411e:	b29a      	uxth	r2, r3
 8004120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004124:	6839      	ldr	r1, [r7, #0]
 8004126:	f002 f8a0 	bl	800626a <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800412a:	2201      	movs	r2, #1
 800412c:	2140      	movs	r1, #64	; 0x40
 800412e:	480e      	ldr	r0, [pc, #56]	; (8004168 <RadioSpiWriteRegisters+0x90>)
 8004130:	f000 fc76 	bl	8004a20 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004134:	2017      	movs	r0, #23
 8004136:	f000 faad 	bl	8004694 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800413a:	f107 0308 	add.w	r3, r7, #8
 800413e:	3301      	adds	r3, #1
 8004140:	7b3a      	ldrb	r2, [r7, #12]
 8004142:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004144:	f107 0308 	add.w	r3, r7, #8
 8004148:	7b7a      	ldrb	r2, [r7, #13]
 800414a:	701a      	strb	r2, [r3, #0]

  return status;
 800414c:	893b      	ldrh	r3, [r7, #8]
 800414e:	82bb      	strh	r3, [r7, #20]
 8004150:	2300      	movs	r3, #0
 8004152:	7d3a      	ldrb	r2, [r7, #20]
 8004154:	f362 0307 	bfi	r3, r2, #0, #8
 8004158:	7d7a      	ldrb	r2, [r7, #21]
 800415a:	f362 230f 	bfi	r3, r2, #8, #8

}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	48000400 	.word	0x48000400
 800416c:	20000008 	.word	0x20000008

08004170 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af02      	add	r7, sp, #8
 8004176:	4603      	mov	r3, r0
 8004178:	603a      	str	r2, [r7, #0]
 800417a:	71fb      	strb	r3, [r7, #7]
 800417c:	460b      	mov	r3, r1
 800417e:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 8004180:	2301      	movs	r3, #1
 8004182:	743b      	strb	r3, [r7, #16]
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004188:	2017      	movs	r0, #23
 800418a:	f000 fa91 	bl	80046b0 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800418e:	2200      	movs	r2, #0
 8004190:	2140      	movs	r1, #64	; 0x40
 8004192:	481b      	ldr	r0, [pc, #108]	; (8004200 <RadioSpiReadRegisters+0x90>)
 8004194:	f000 fc44 	bl	8004a20 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004198:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <RadioSpiReadRegisters+0x94>)
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	f107 020c 	add.w	r2, r7, #12
 80041a0:	f107 0110 	add.w	r1, r7, #16
 80041a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	2302      	movs	r3, #2
 80041ac:	f002 fafb 	bl	80067a6 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80041b0:	4b14      	ldr	r3, [pc, #80]	; (8004204 <RadioSpiReadRegisters+0x94>)
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	79bb      	ldrb	r3, [r7, #6]
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041bc:	6839      	ldr	r1, [r7, #0]
 80041be:	f002 f9c2 	bl	8006546 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80041c2:	2201      	movs	r2, #1
 80041c4:	2140      	movs	r1, #64	; 0x40
 80041c6:	480e      	ldr	r0, [pc, #56]	; (8004200 <RadioSpiReadRegisters+0x90>)
 80041c8:	f000 fc2a 	bl	8004a20 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80041cc:	2017      	movs	r0, #23
 80041ce:	f000 fa61 	bl	8004694 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80041d2:	f107 0308 	add.w	r3, r7, #8
 80041d6:	3301      	adds	r3, #1
 80041d8:	7b3a      	ldrb	r2, [r7, #12]
 80041da:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80041dc:	f107 0308 	add.w	r3, r7, #8
 80041e0:	7b7a      	ldrb	r2, [r7, #13]
 80041e2:	701a      	strb	r2, [r3, #0]

  return status;
 80041e4:	893b      	ldrh	r3, [r7, #8]
 80041e6:	82bb      	strh	r3, [r7, #20]
 80041e8:	2300      	movs	r3, #0
 80041ea:	7d3a      	ldrb	r2, [r7, #20]
 80041ec:	f362 0307 	bfi	r3, r2, #0, #8
 80041f0:	7d7a      	ldrb	r2, [r7, #21]
 80041f2:	f362 230f 	bfi	r3, r2, #8, #8
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	48000400 	.word	0x48000400
 8004204:	20000008 	.word	0x20000008

08004208 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af02      	add	r7, sp, #8
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	743b      	strb	r3, [r7, #16]
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800421a:	2017      	movs	r0, #23
 800421c:	f000 fa48 	bl	80046b0 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004220:	2200      	movs	r2, #0
 8004222:	2140      	movs	r1, #64	; 0x40
 8004224:	4816      	ldr	r0, [pc, #88]	; (8004280 <RadioSpiCommandStrobes+0x78>)
 8004226:	f000 fbfb 	bl	8004a20 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800422a:	4b16      	ldr	r3, [pc, #88]	; (8004284 <RadioSpiCommandStrobes+0x7c>)
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	f107 020c 	add.w	r2, r7, #12
 8004232:	f107 0110 	add.w	r1, r7, #16
 8004236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	2302      	movs	r3, #2
 800423e:	f002 fab2 	bl	80067a6 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004242:	2201      	movs	r2, #1
 8004244:	2140      	movs	r1, #64	; 0x40
 8004246:	480e      	ldr	r0, [pc, #56]	; (8004280 <RadioSpiCommandStrobes+0x78>)
 8004248:	f000 fbea 	bl	8004a20 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800424c:	2017      	movs	r0, #23
 800424e:	f000 fa21 	bl	8004694 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004252:	f107 0308 	add.w	r3, r7, #8
 8004256:	3301      	adds	r3, #1
 8004258:	7b3a      	ldrb	r2, [r7, #12]
 800425a:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 800425c:	f107 0308 	add.w	r3, r7, #8
 8004260:	7b7a      	ldrb	r2, [r7, #13]
 8004262:	701a      	strb	r2, [r3, #0]

  return status;
 8004264:	893b      	ldrh	r3, [r7, #8]
 8004266:	82bb      	strh	r3, [r7, #20]
 8004268:	2300      	movs	r3, #0
 800426a:	7d3a      	ldrb	r2, [r7, #20]
 800426c:	f362 0307 	bfi	r3, r2, #0, #8
 8004270:	7d7a      	ldrb	r2, [r7, #21]
 8004272:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	48000400 	.word	0x48000400
 8004284:	20000008 	.word	0x20000008

08004288 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af02      	add	r7, sp, #8
 800428e:	4603      	mov	r3, r0
 8004290:	6039      	str	r1, [r7, #0]
 8004292:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8004294:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004298:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800429a:	2017      	movs	r0, #23
 800429c:	f000 fa08 	bl	80046b0 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80042a0:	2200      	movs	r2, #0
 80042a2:	2140      	movs	r1, #64	; 0x40
 80042a4:	481a      	ldr	r0, [pc, #104]	; (8004310 <RadioSpiWriteFifo+0x88>)
 80042a6:	f000 fbbb 	bl	8004a20 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80042aa:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <RadioSpiWriteFifo+0x8c>)
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	f107 020c 	add.w	r2, r7, #12
 80042b2:	f107 0110 	add.w	r1, r7, #16
 80042b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2302      	movs	r3, #2
 80042be:	f002 fa72 	bl	80067a6 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80042c2:	4b14      	ldr	r3, [pc, #80]	; (8004314 <RadioSpiWriteFifo+0x8c>)
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ce:	6839      	ldr	r1, [r7, #0]
 80042d0:	f001 ffcb 	bl	800626a <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80042d4:	2201      	movs	r2, #1
 80042d6:	2140      	movs	r1, #64	; 0x40
 80042d8:	480d      	ldr	r0, [pc, #52]	; (8004310 <RadioSpiWriteFifo+0x88>)
 80042da:	f000 fba1 	bl	8004a20 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80042de:	2017      	movs	r0, #23
 80042e0:	f000 f9d8 	bl	8004694 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80042e4:	f107 0308 	add.w	r3, r7, #8
 80042e8:	3301      	adds	r3, #1
 80042ea:	7b3a      	ldrb	r2, [r7, #12]
 80042ec:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80042ee:	f107 0308 	add.w	r3, r7, #8
 80042f2:	7b7a      	ldrb	r2, [r7, #13]
 80042f4:	701a      	strb	r2, [r3, #0]

  return status;
 80042f6:	893b      	ldrh	r3, [r7, #8]
 80042f8:	82bb      	strh	r3, [r7, #20]
 80042fa:	2300      	movs	r3, #0
 80042fc:	7d3a      	ldrb	r2, [r7, #20]
 80042fe:	f362 0307 	bfi	r3, r2, #0, #8
 8004302:	7d7a      	ldrb	r2, [r7, #21]
 8004304:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	48000400 	.word	0x48000400
 8004314:	20000008 	.word	0x20000008

08004318 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af02      	add	r7, sp, #8
 800431e:	4603      	mov	r3, r0
 8004320:	6039      	str	r1, [r7, #0]
 8004322:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 8004324:	f64f 7301 	movw	r3, #65281	; 0xff01
 8004328:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800432a:	2017      	movs	r0, #23
 800432c:	f000 f9c0 	bl	80046b0 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004330:	2200      	movs	r2, #0
 8004332:	2140      	movs	r1, #64	; 0x40
 8004334:	481a      	ldr	r0, [pc, #104]	; (80043a0 <RadioSpiReadFifo+0x88>)
 8004336:	f000 fb73 	bl	8004a20 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800433a:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <RadioSpiReadFifo+0x8c>)
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	f107 020c 	add.w	r2, r7, #12
 8004342:	f107 0110 	add.w	r1, r7, #16
 8004346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	2302      	movs	r3, #2
 800434e:	f002 fa2a 	bl	80067a6 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004352:	4b14      	ldr	r3, [pc, #80]	; (80043a4 <RadioSpiReadFifo+0x8c>)
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	b29a      	uxth	r2, r3
 800435a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800435e:	6839      	ldr	r1, [r7, #0]
 8004360:	f002 f8f1 	bl	8006546 <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 8004364:	2201      	movs	r2, #1
 8004366:	2140      	movs	r1, #64	; 0x40
 8004368:	480d      	ldr	r0, [pc, #52]	; (80043a0 <RadioSpiReadFifo+0x88>)
 800436a:	f000 fb59 	bl	8004a20 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800436e:	2017      	movs	r0, #23
 8004370:	f000 f990 	bl	8004694 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004374:	f107 0308 	add.w	r3, r7, #8
 8004378:	3301      	adds	r3, #1
 800437a:	7b3a      	ldrb	r2, [r7, #12]
 800437c:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 800437e:	f107 0308 	add.w	r3, r7, #8
 8004382:	7b7a      	ldrb	r2, [r7, #13]
 8004384:	701a      	strb	r2, [r3, #0]

  return status;
 8004386:	893b      	ldrh	r3, [r7, #8]
 8004388:	82bb      	strh	r3, [r7, #20]
 800438a:	2300      	movs	r3, #0
 800438c:	7d3a      	ldrb	r2, [r7, #20]
 800438e:	f362 0307 	bfi	r3, r2, #0, #8
 8004392:	7d7a      	ldrb	r2, [r7, #21]
 8004394:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	48000400 	.word	0x48000400
 80043a4:	20000008 	.word	0x20000008

080043a8 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 80043ac:	2201      	movs	r2, #1
 80043ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043b6:	f000 fb33 	bl	8004a20 <HAL_GPIO_WritePin>
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}

080043be <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 80043c2:	2200      	movs	r2, #0
 80043c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043cc:	f000 fb28 	bl	8004a20 <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 80043d0:	2001      	movs	r0, #1
 80043d2:	f000 f843 	bl	800445c <HAL_Delay>
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <HAL_Init+0x3c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a0b      	ldr	r2, [pc, #44]	; (8004418 <HAL_Init+0x3c>)
 80043ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043f2:	2003      	movs	r0, #3
 80043f4:	f000 f927 	bl	8004646 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043f8:	200f      	movs	r0, #15
 80043fa:	f7fd f95b 	bl	80016b4 <HAL_InitTick>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	71fb      	strb	r3, [r7, #7]
 8004408:	e001      	b.n	800440e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800440a:	f7fd f92b 	bl	8001664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800440e:	79fb      	ldrb	r3, [r7, #7]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40022000 	.word	0x40022000

0800441c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004420:	4b06      	ldr	r3, [pc, #24]	; (800443c <HAL_IncTick+0x20>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_IncTick+0x24>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4413      	add	r3, r2
 800442c:	4a04      	ldr	r2, [pc, #16]	; (8004440 <HAL_IncTick+0x24>)
 800442e:	6013      	str	r3, [r2, #0]
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000010 	.word	0x20000010
 8004440:	20000270 	.word	0x20000270

08004444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return uwTick;
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <HAL_GetTick+0x14>)
 800444a:	681b      	ldr	r3, [r3, #0]
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000270 	.word	0x20000270

0800445c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004464:	f7ff ffee 	bl	8004444 <HAL_GetTick>
 8004468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004474:	d005      	beq.n	8004482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HAL_Delay+0x44>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004482:	bf00      	nop
 8004484:	f7ff ffde 	bl	8004444 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	429a      	cmp	r2, r3
 8004492:	d8f7      	bhi.n	8004484 <HAL_Delay+0x28>
  {
  }
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000010 	.word	0x20000010

080044a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b4:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <__NVIC_SetPriorityGrouping+0x44>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044c0:	4013      	ands	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044d6:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <__NVIC_SetPriorityGrouping+0x44>)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	60d3      	str	r3, [r2, #12]
}
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <__NVIC_GetPriorityGrouping+0x18>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	0a1b      	lsrs	r3, r3, #8
 80044f6:	f003 0307 	and.w	r3, r3, #7
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004516:	2b00      	cmp	r3, #0
 8004518:	db0b      	blt.n	8004532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	f003 021f 	and.w	r2, r3, #31
 8004520:	4907      	ldr	r1, [pc, #28]	; (8004540 <__NVIC_EnableIRQ+0x38>)
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2001      	movs	r0, #1
 800452a:	fa00 f202 	lsl.w	r2, r0, r2
 800452e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	e000e100 	.word	0xe000e100

08004544 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004552:	2b00      	cmp	r3, #0
 8004554:	db12      	blt.n	800457c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	f003 021f 	and.w	r2, r3, #31
 800455c:	490a      	ldr	r1, [pc, #40]	; (8004588 <__NVIC_DisableIRQ+0x44>)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	2001      	movs	r0, #1
 8004566:	fa00 f202 	lsl.w	r2, r0, r2
 800456a:	3320      	adds	r3, #32
 800456c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004570:	f3bf 8f4f 	dsb	sy
}
 8004574:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004576:	f3bf 8f6f 	isb	sy
}
 800457a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	e000e100 	.word	0xe000e100

0800458c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	6039      	str	r1, [r7, #0]
 8004596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459c:	2b00      	cmp	r3, #0
 800459e:	db0a      	blt.n	80045b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	490c      	ldr	r1, [pc, #48]	; (80045d8 <__NVIC_SetPriority+0x4c>)
 80045a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045aa:	0112      	lsls	r2, r2, #4
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	440b      	add	r3, r1
 80045b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045b4:	e00a      	b.n	80045cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	4908      	ldr	r1, [pc, #32]	; (80045dc <__NVIC_SetPriority+0x50>)
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	3b04      	subs	r3, #4
 80045c4:	0112      	lsls	r2, r2, #4
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	440b      	add	r3, r1
 80045ca:	761a      	strb	r2, [r3, #24]
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000e100 	.word	0xe000e100
 80045dc:	e000ed00 	.word	0xe000ed00

080045e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b089      	sub	sp, #36	; 0x24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f1c3 0307 	rsb	r3, r3, #7
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	bf28      	it	cs
 80045fe:	2304      	movcs	r3, #4
 8004600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3304      	adds	r3, #4
 8004606:	2b06      	cmp	r3, #6
 8004608:	d902      	bls.n	8004610 <NVIC_EncodePriority+0x30>
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3b03      	subs	r3, #3
 800460e:	e000      	b.n	8004612 <NVIC_EncodePriority+0x32>
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43da      	mvns	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	401a      	ands	r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004628:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	fa01 f303 	lsl.w	r3, r1, r3
 8004632:	43d9      	mvns	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004638:	4313      	orrs	r3, r2
         );
}
 800463a:	4618      	mov	r0, r3
 800463c:	3724      	adds	r7, #36	; 0x24
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff ff28 	bl	80044a4 <__NVIC_SetPriorityGrouping>
}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800466e:	f7ff ff3d 	bl	80044ec <__NVIC_GetPriorityGrouping>
 8004672:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	6978      	ldr	r0, [r7, #20]
 800467a:	f7ff ffb1 	bl	80045e0 <NVIC_EncodePriority>
 800467e:	4602      	mov	r2, r0
 8004680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004684:	4611      	mov	r1, r2
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ff80 	bl	800458c <__NVIC_SetPriority>
}
 800468c:	bf00      	nop
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800469e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff ff30 	bl	8004508 <__NVIC_EnableIRQ>
}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff ff40 	bl	8004544 <__NVIC_DisableIRQ>
}
 80046c4:	bf00      	nop
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046da:	e17f      	b.n	80049dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	2101      	movs	r1, #1
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	fa01 f303 	lsl.w	r3, r1, r3
 80046e8:	4013      	ands	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8171 	beq.w	80049d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d005      	beq.n	800470c <HAL_GPIO_Init+0x40>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d130      	bne.n	800476e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	2203      	movs	r2, #3
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4013      	ands	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004742:	2201      	movs	r2, #1
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43db      	mvns	r3, r3
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4013      	ands	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	091b      	lsrs	r3, r3, #4
 8004758:	f003 0201 	and.w	r2, r3, #1
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b03      	cmp	r3, #3
 8004778:	d118      	bne.n	80047ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004780:	2201      	movs	r2, #1
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4013      	ands	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	08db      	lsrs	r3, r3, #3
 8004796:	f003 0201 	and.w	r2, r3, #1
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 0303 	and.w	r3, r3, #3
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d017      	beq.n	80047e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	2203      	movs	r2, #3
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4013      	ands	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d123      	bne.n	800483c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	08da      	lsrs	r2, r3, #3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3208      	adds	r2, #8
 80047fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004800:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	220f      	movs	r2, #15
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4013      	ands	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	08da      	lsrs	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3208      	adds	r2, #8
 8004836:	6939      	ldr	r1, [r7, #16]
 8004838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	2203      	movs	r2, #3
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4013      	ands	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 0203 	and.w	r2, r3, #3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80ac 	beq.w	80049d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800487e:	4b5f      	ldr	r3, [pc, #380]	; (80049fc <HAL_GPIO_Init+0x330>)
 8004880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004882:	4a5e      	ldr	r2, [pc, #376]	; (80049fc <HAL_GPIO_Init+0x330>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	6613      	str	r3, [r2, #96]	; 0x60
 800488a:	4b5c      	ldr	r3, [pc, #368]	; (80049fc <HAL_GPIO_Init+0x330>)
 800488c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004896:	4a5a      	ldr	r2, [pc, #360]	; (8004a00 <HAL_GPIO_Init+0x334>)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	089b      	lsrs	r3, r3, #2
 800489c:	3302      	adds	r3, #2
 800489e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	220f      	movs	r2, #15
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43db      	mvns	r3, r3
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4013      	ands	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80048c0:	d025      	beq.n	800490e <HAL_GPIO_Init+0x242>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a4f      	ldr	r2, [pc, #316]	; (8004a04 <HAL_GPIO_Init+0x338>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d01f      	beq.n	800490a <HAL_GPIO_Init+0x23e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a4e      	ldr	r2, [pc, #312]	; (8004a08 <HAL_GPIO_Init+0x33c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d019      	beq.n	8004906 <HAL_GPIO_Init+0x23a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a4d      	ldr	r2, [pc, #308]	; (8004a0c <HAL_GPIO_Init+0x340>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d013      	beq.n	8004902 <HAL_GPIO_Init+0x236>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a4c      	ldr	r2, [pc, #304]	; (8004a10 <HAL_GPIO_Init+0x344>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00d      	beq.n	80048fe <HAL_GPIO_Init+0x232>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a4b      	ldr	r2, [pc, #300]	; (8004a14 <HAL_GPIO_Init+0x348>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d007      	beq.n	80048fa <HAL_GPIO_Init+0x22e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a4a      	ldr	r2, [pc, #296]	; (8004a18 <HAL_GPIO_Init+0x34c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d101      	bne.n	80048f6 <HAL_GPIO_Init+0x22a>
 80048f2:	2306      	movs	r3, #6
 80048f4:	e00c      	b.n	8004910 <HAL_GPIO_Init+0x244>
 80048f6:	2307      	movs	r3, #7
 80048f8:	e00a      	b.n	8004910 <HAL_GPIO_Init+0x244>
 80048fa:	2305      	movs	r3, #5
 80048fc:	e008      	b.n	8004910 <HAL_GPIO_Init+0x244>
 80048fe:	2304      	movs	r3, #4
 8004900:	e006      	b.n	8004910 <HAL_GPIO_Init+0x244>
 8004902:	2303      	movs	r3, #3
 8004904:	e004      	b.n	8004910 <HAL_GPIO_Init+0x244>
 8004906:	2302      	movs	r3, #2
 8004908:	e002      	b.n	8004910 <HAL_GPIO_Init+0x244>
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <HAL_GPIO_Init+0x244>
 800490e:	2300      	movs	r3, #0
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	f002 0203 	and.w	r2, r2, #3
 8004916:	0092      	lsls	r2, r2, #2
 8004918:	4093      	lsls	r3, r2
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004920:	4937      	ldr	r1, [pc, #220]	; (8004a00 <HAL_GPIO_Init+0x334>)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	3302      	adds	r3, #2
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800492e:	4b3b      	ldr	r3, [pc, #236]	; (8004a1c <HAL_GPIO_Init+0x350>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	43db      	mvns	r3, r3
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4013      	ands	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004952:	4a32      	ldr	r2, [pc, #200]	; (8004a1c <HAL_GPIO_Init+0x350>)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004958:	4b30      	ldr	r3, [pc, #192]	; (8004a1c <HAL_GPIO_Init+0x350>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	43db      	mvns	r3, r3
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4013      	ands	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800497c:	4a27      	ldr	r2, [pc, #156]	; (8004a1c <HAL_GPIO_Init+0x350>)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004982:	4b26      	ldr	r3, [pc, #152]	; (8004a1c <HAL_GPIO_Init+0x350>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	43db      	mvns	r3, r3
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4013      	ands	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049a6:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <HAL_GPIO_Init+0x350>)
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80049ac:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <HAL_GPIO_Init+0x350>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4013      	ands	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049d0:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <HAL_GPIO_Init+0x350>)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	3301      	adds	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	fa22 f303 	lsr.w	r3, r2, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f47f ae78 	bne.w	80046dc <HAL_GPIO_Init+0x10>
  }
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40010000 	.word	0x40010000
 8004a04:	48000400 	.word	0x48000400
 8004a08:	48000800 	.word	0x48000800
 8004a0c:	48000c00 	.word	0x48000c00
 8004a10:	48001000 	.word	0x48001000
 8004a14:	48001400 	.word	0x48001400
 8004a18:	48001800 	.word	0x48001800
 8004a1c:	40010400 	.word	0x40010400

08004a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	807b      	strh	r3, [r7, #2]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a30:	787b      	ldrb	r3, [r7, #1]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a36:	887a      	ldrh	r2, [r7, #2]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a3c:	e002      	b.n	8004a44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a5a:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d006      	beq.n	8004a74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a66:	4a05      	ldr	r2, [pc, #20]	; (8004a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a68:	88fb      	ldrh	r3, [r7, #6]
 8004a6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fc fc16 	bl	80012a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40010400 	.word	0x40010400

08004a80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a84:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40007000 	.word	0x40007000

08004a9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aaa:	d130      	bne.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aac:	4b23      	ldr	r3, [pc, #140]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab8:	d038      	beq.n	8004b2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004aba:	4b20      	ldr	r3, [pc, #128]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ac2:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ac4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ac8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004aca:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2232      	movs	r2, #50	; 0x32
 8004ad0:	fb02 f303 	mul.w	r3, r2, r3
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ada:	0c9b      	lsrs	r3, r3, #18
 8004adc:	3301      	adds	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ae0:	e002      	b.n	8004ae8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ae8:	4b14      	ldr	r3, [pc, #80]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af4:	d102      	bne.n	8004afc <HAL_PWREx_ControlVoltageScaling+0x60>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f2      	bne.n	8004ae2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004afc:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b08:	d110      	bne.n	8004b2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e00f      	b.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1a:	d007      	beq.n	8004b2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b1c:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b24:	4a05      	ldr	r2, [pc, #20]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40007000 	.word	0x40007000
 8004b40:	20000000 	.word	0x20000000
 8004b44:	431bde83 	.word	0x431bde83

08004b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e3ca      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b5a:	4b97      	ldr	r3, [pc, #604]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b64:	4b94      	ldr	r3, [pc, #592]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 80e4 	beq.w	8004d44 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d007      	beq.n	8004b92 <HAL_RCC_OscConfig+0x4a>
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b0c      	cmp	r3, #12
 8004b86:	f040 808b 	bne.w	8004ca0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	f040 8087 	bne.w	8004ca0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b92:	4b89      	ldr	r3, [pc, #548]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <HAL_RCC_OscConfig+0x62>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e3a2      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1a      	ldr	r2, [r3, #32]
 8004bae:	4b82      	ldr	r3, [pc, #520]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d004      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x7c>
 8004bba:	4b7f      	ldr	r3, [pc, #508]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bc2:	e005      	b.n	8004bd0 <HAL_RCC_OscConfig+0x88>
 8004bc4:	4b7c      	ldr	r3, [pc, #496]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bca:	091b      	lsrs	r3, r3, #4
 8004bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d223      	bcs.n	8004c1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fd87 	bl	80056ec <RCC_SetFlashLatencyFromMSIRange>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e383      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004be8:	4b73      	ldr	r3, [pc, #460]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a72      	ldr	r2, [pc, #456]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bee:	f043 0308 	orr.w	r3, r3, #8
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	4b70      	ldr	r3, [pc, #448]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	496d      	ldr	r1, [pc, #436]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c06:	4b6c      	ldr	r3, [pc, #432]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	4968      	ldr	r1, [pc, #416]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	604b      	str	r3, [r1, #4]
 8004c1a:	e025      	b.n	8004c68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c1c:	4b66      	ldr	r3, [pc, #408]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a65      	ldr	r2, [pc, #404]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c22:	f043 0308 	orr.w	r3, r3, #8
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	4b63      	ldr	r3, [pc, #396]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	4960      	ldr	r1, [pc, #384]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c3a:	4b5f      	ldr	r3, [pc, #380]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	495b      	ldr	r1, [pc, #364]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d109      	bne.n	8004c68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fd47 	bl	80056ec <RCC_SetFlashLatencyFromMSIRange>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e343      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c68:	f000 fc4a 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	4b52      	ldr	r3, [pc, #328]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	091b      	lsrs	r3, r3, #4
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	4950      	ldr	r1, [pc, #320]	; (8004dbc <HAL_RCC_OscConfig+0x274>)
 8004c7a:	5ccb      	ldrb	r3, [r1, r3]
 8004c7c:	f003 031f 	and.w	r3, r3, #31
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
 8004c84:	4a4e      	ldr	r2, [pc, #312]	; (8004dc0 <HAL_RCC_OscConfig+0x278>)
 8004c86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c88:	4b4e      	ldr	r3, [pc, #312]	; (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fc fd11 	bl	80016b4 <HAL_InitTick>
 8004c92:	4603      	mov	r3, r0
 8004c94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d052      	beq.n	8004d42 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	e327      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d032      	beq.n	8004d0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ca8:	4b43      	ldr	r3, [pc, #268]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a42      	ldr	r2, [pc, #264]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cb4:	f7ff fbc6 	bl	8004444 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cbc:	f7ff fbc2 	bl	8004444 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e310      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cce:	4b3a      	ldr	r3, [pc, #232]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cda:	4b37      	ldr	r3, [pc, #220]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a36      	ldr	r2, [pc, #216]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004ce0:	f043 0308 	orr.w	r3, r3, #8
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	4b34      	ldr	r3, [pc, #208]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	4931      	ldr	r1, [pc, #196]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cf8:	4b2f      	ldr	r3, [pc, #188]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	492c      	ldr	r1, [pc, #176]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
 8004d0c:	e01a      	b.n	8004d44 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d0e:	4b2a      	ldr	r3, [pc, #168]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a29      	ldr	r2, [pc, #164]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d1a:	f7ff fb93 	bl	8004444 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d22:	f7ff fb8f 	bl	8004444 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e2dd      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d34:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f0      	bne.n	8004d22 <HAL_RCC_OscConfig+0x1da>
 8004d40:	e000      	b.n	8004d44 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d074      	beq.n	8004e3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d005      	beq.n	8004d62 <HAL_RCC_OscConfig+0x21a>
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b0c      	cmp	r3, #12
 8004d5a:	d10e      	bne.n	8004d7a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d10b      	bne.n	8004d7a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d62:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d064      	beq.n	8004e38 <HAL_RCC_OscConfig+0x2f0>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d160      	bne.n	8004e38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e2ba      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d82:	d106      	bne.n	8004d92 <HAL_RCC_OscConfig+0x24a>
 8004d84:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	e026      	b.n	8004de0 <HAL_RCC_OscConfig+0x298>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d9a:	d115      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x280>
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a05      	ldr	r2, [pc, #20]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a02      	ldr	r2, [pc, #8]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	e014      	b.n	8004de0 <HAL_RCC_OscConfig+0x298>
 8004db6:	bf00      	nop
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	0800c978 	.word	0x0800c978
 8004dc0:	20000000 	.word	0x20000000
 8004dc4:	2000000c 	.word	0x2000000c
 8004dc8:	4ba0      	ldr	r3, [pc, #640]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a9f      	ldr	r2, [pc, #636]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	4b9d      	ldr	r3, [pc, #628]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a9c      	ldr	r2, [pc, #624]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d013      	beq.n	8004e10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7ff fb2c 	bl	8004444 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df0:	f7ff fb28 	bl	8004444 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b64      	cmp	r3, #100	; 0x64
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e276      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e02:	4b92      	ldr	r3, [pc, #584]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x2a8>
 8004e0e:	e014      	b.n	8004e3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e10:	f7ff fb18 	bl	8004444 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e18:	f7ff fb14 	bl	8004444 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b64      	cmp	r3, #100	; 0x64
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e262      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e2a:	4b88      	ldr	r3, [pc, #544]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f0      	bne.n	8004e18 <HAL_RCC_OscConfig+0x2d0>
 8004e36:	e000      	b.n	8004e3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d060      	beq.n	8004f08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d005      	beq.n	8004e58 <HAL_RCC_OscConfig+0x310>
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b0c      	cmp	r3, #12
 8004e50:	d119      	bne.n	8004e86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d116      	bne.n	8004e86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e58:	4b7c      	ldr	r3, [pc, #496]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_OscConfig+0x328>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e23f      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e70:	4b76      	ldr	r3, [pc, #472]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	061b      	lsls	r3, r3, #24
 8004e7e:	4973      	ldr	r1, [pc, #460]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e84:	e040      	b.n	8004f08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d023      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e8e:	4b6f      	ldr	r3, [pc, #444]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a6e      	ldr	r2, [pc, #440]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9a:	f7ff fad3 	bl	8004444 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea2:	f7ff facf 	bl	8004444 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e21d      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eb4:	4b65      	ldr	r3, [pc, #404]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0f0      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec0:	4b62      	ldr	r3, [pc, #392]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	495f      	ldr	r1, [pc, #380]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	604b      	str	r3, [r1, #4]
 8004ed4:	e018      	b.n	8004f08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ed6:	4b5d      	ldr	r3, [pc, #372]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a5c      	ldr	r2, [pc, #368]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee2:	f7ff faaf 	bl	8004444 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eea:	f7ff faab 	bl	8004444 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e1f9      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004efc:	4b53      	ldr	r3, [pc, #332]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f0      	bne.n	8004eea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d03c      	beq.n	8004f8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01c      	beq.n	8004f56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1c:	4b4b      	ldr	r3, [pc, #300]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f22:	4a4a      	ldr	r2, [pc, #296]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2c:	f7ff fa8a 	bl	8004444 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f34:	f7ff fa86 	bl	8004444 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e1d4      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f46:	4b41      	ldr	r3, [pc, #260]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0ef      	beq.n	8004f34 <HAL_RCC_OscConfig+0x3ec>
 8004f54:	e01b      	b.n	8004f8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f56:	4b3d      	ldr	r3, [pc, #244]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f5c:	4a3b      	ldr	r2, [pc, #236]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f66:	f7ff fa6d 	bl	8004444 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6e:	f7ff fa69 	bl	8004444 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e1b7      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f80:	4b32      	ldr	r3, [pc, #200]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1ef      	bne.n	8004f6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80a6 	beq.w	80050e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fa0:	4b2a      	ldr	r3, [pc, #168]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10d      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fac:	4b27      	ldr	r3, [pc, #156]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	4a26      	ldr	r2, [pc, #152]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8004fb8:	4b24      	ldr	r3, [pc, #144]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fc8:	4b21      	ldr	r3, [pc, #132]	; (8005050 <HAL_RCC_OscConfig+0x508>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d118      	bne.n	8005006 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fd4:	4b1e      	ldr	r3, [pc, #120]	; (8005050 <HAL_RCC_OscConfig+0x508>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <HAL_RCC_OscConfig+0x508>)
 8004fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe0:	f7ff fa30 	bl	8004444 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe8:	f7ff fa2c 	bl	8004444 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e17a      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ffa:	4b15      	ldr	r3, [pc, #84]	; (8005050 <HAL_RCC_OscConfig+0x508>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d108      	bne.n	8005020 <HAL_RCC_OscConfig+0x4d8>
 800500e:	4b0f      	ldr	r3, [pc, #60]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8005010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005014:	4a0d      	ldr	r2, [pc, #52]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800501e:	e029      	b.n	8005074 <HAL_RCC_OscConfig+0x52c>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b05      	cmp	r3, #5
 8005026:	d115      	bne.n	8005054 <HAL_RCC_OscConfig+0x50c>
 8005028:	4b08      	ldr	r3, [pc, #32]	; (800504c <HAL_RCC_OscConfig+0x504>)
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502e:	4a07      	ldr	r2, [pc, #28]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8005030:	f043 0304 	orr.w	r3, r3, #4
 8005034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005038:	4b04      	ldr	r3, [pc, #16]	; (800504c <HAL_RCC_OscConfig+0x504>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503e:	4a03      	ldr	r2, [pc, #12]	; (800504c <HAL_RCC_OscConfig+0x504>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005048:	e014      	b.n	8005074 <HAL_RCC_OscConfig+0x52c>
 800504a:	bf00      	nop
 800504c:	40021000 	.word	0x40021000
 8005050:	40007000 	.word	0x40007000
 8005054:	4b9c      	ldr	r3, [pc, #624]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505a:	4a9b      	ldr	r2, [pc, #620]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005064:	4b98      	ldr	r3, [pc, #608]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506a:	4a97      	ldr	r2, [pc, #604]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 800506c:	f023 0304 	bic.w	r3, r3, #4
 8005070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d016      	beq.n	80050aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507c:	f7ff f9e2 	bl	8004444 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005082:	e00a      	b.n	800509a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005084:	f7ff f9de 	bl	8004444 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005092:	4293      	cmp	r3, r2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e12a      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800509a:	4b8b      	ldr	r3, [pc, #556]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0ed      	beq.n	8005084 <HAL_RCC_OscConfig+0x53c>
 80050a8:	e015      	b.n	80050d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050aa:	f7ff f9cb 	bl	8004444 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050b0:	e00a      	b.n	80050c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b2:	f7ff f9c7 	bl	8004444 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e113      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050c8:	4b7f      	ldr	r3, [pc, #508]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1ed      	bne.n	80050b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050d6:	7ffb      	ldrb	r3, [r7, #31]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d105      	bne.n	80050e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050dc:	4b7a      	ldr	r3, [pc, #488]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 80050de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e0:	4a79      	ldr	r2, [pc, #484]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 80050e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80fe 	beq.w	80052ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	f040 80d0 	bne.w	800529c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050fc:	4b72      	ldr	r3, [pc, #456]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f003 0203 	and.w	r2, r3, #3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	429a      	cmp	r2, r3
 800510e:	d130      	bne.n	8005172 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	3b01      	subs	r3, #1
 800511c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800511e:	429a      	cmp	r2, r3
 8005120:	d127      	bne.n	8005172 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d11f      	bne.n	8005172 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800513c:	2a07      	cmp	r2, #7
 800513e:	bf14      	ite	ne
 8005140:	2201      	movne	r2, #1
 8005142:	2200      	moveq	r2, #0
 8005144:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005146:	4293      	cmp	r3, r2
 8005148:	d113      	bne.n	8005172 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	3b01      	subs	r3, #1
 8005158:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d109      	bne.n	8005172 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	3b01      	subs	r3, #1
 800516c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d06e      	beq.n	8005250 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b0c      	cmp	r3, #12
 8005176:	d069      	beq.n	800524c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005178:	4b53      	ldr	r3, [pc, #332]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d105      	bne.n	8005190 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005184:	4b50      	ldr	r3, [pc, #320]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e0ad      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005194:	4b4c      	ldr	r3, [pc, #304]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a4b      	ldr	r2, [pc, #300]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 800519a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800519e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051a0:	f7ff f950 	bl	8004444 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a8:	f7ff f94c 	bl	8004444 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e09a      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ba:	4b43      	ldr	r3, [pc, #268]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051c6:	4b40      	ldr	r3, [pc, #256]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	4b40      	ldr	r3, [pc, #256]	; (80052cc <HAL_RCC_OscConfig+0x784>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051d6:	3a01      	subs	r2, #1
 80051d8:	0112      	lsls	r2, r2, #4
 80051da:	4311      	orrs	r1, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051e0:	0212      	lsls	r2, r2, #8
 80051e2:	4311      	orrs	r1, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051e8:	0852      	lsrs	r2, r2, #1
 80051ea:	3a01      	subs	r2, #1
 80051ec:	0552      	lsls	r2, r2, #21
 80051ee:	4311      	orrs	r1, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051f4:	0852      	lsrs	r2, r2, #1
 80051f6:	3a01      	subs	r2, #1
 80051f8:	0652      	lsls	r2, r2, #25
 80051fa:	4311      	orrs	r1, r2
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005200:	0912      	lsrs	r2, r2, #4
 8005202:	0452      	lsls	r2, r2, #17
 8005204:	430a      	orrs	r2, r1
 8005206:	4930      	ldr	r1, [pc, #192]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005208:	4313      	orrs	r3, r2
 800520a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800520c:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a2d      	ldr	r2, [pc, #180]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005216:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005218:	4b2b      	ldr	r3, [pc, #172]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4a2a      	ldr	r2, [pc, #168]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 800521e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005222:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005224:	f7ff f90e 	bl	8004444 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800522c:	f7ff f90a 	bl	8004444 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e058      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800523e:	4b22      	ldr	r3, [pc, #136]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800524a:	e050      	b.n	80052ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e04f      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005250:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d148      	bne.n	80052ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800525c:	4b1a      	ldr	r3, [pc, #104]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a19      	ldr	r2, [pc, #100]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005266:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005268:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a16      	ldr	r2, [pc, #88]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 800526e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005272:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005274:	f7ff f8e6 	bl	8004444 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527c:	f7ff f8e2 	bl	8004444 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e030      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800528e:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f0      	beq.n	800527c <HAL_RCC_OscConfig+0x734>
 800529a:	e028      	b.n	80052ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	2b0c      	cmp	r3, #12
 80052a0:	d023      	beq.n	80052ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a2:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <HAL_RCC_OscConfig+0x780>)
 80052a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ae:	f7ff f8c9 	bl	8004444 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052b4:	e00c      	b.n	80052d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b6:	f7ff f8c5 	bl	8004444 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d905      	bls.n	80052d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e013      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
 80052c8:	40021000 	.word	0x40021000
 80052cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052d0:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <HAL_RCC_OscConfig+0x7b0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1ec      	bne.n	80052b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80052dc:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <HAL_RCC_OscConfig+0x7b0>)
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	4905      	ldr	r1, [pc, #20]	; (80052f8 <HAL_RCC_OscConfig+0x7b0>)
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <HAL_RCC_OscConfig+0x7b4>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	60cb      	str	r3, [r1, #12]
 80052e8:	e001      	b.n	80052ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40021000 	.word	0x40021000
 80052fc:	feeefffc 	.word	0xfeeefffc

08005300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0e7      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005314:	4b75      	ldr	r3, [pc, #468]	; (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d910      	bls.n	8005344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	4b72      	ldr	r3, [pc, #456]	; (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f023 0207 	bic.w	r2, r3, #7
 800532a:	4970      	ldr	r1, [pc, #448]	; (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	4313      	orrs	r3, r2
 8005330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005332:	4b6e      	ldr	r3, [pc, #440]	; (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0cf      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d010      	beq.n	8005372 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	4b66      	ldr	r3, [pc, #408]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800535c:	429a      	cmp	r2, r3
 800535e:	d908      	bls.n	8005372 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005360:	4b63      	ldr	r3, [pc, #396]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	4960      	ldr	r1, [pc, #384]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 800536e:	4313      	orrs	r3, r2
 8005370:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d04c      	beq.n	8005418 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b03      	cmp	r3, #3
 8005384:	d107      	bne.n	8005396 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005386:	4b5a      	ldr	r3, [pc, #360]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d121      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e0a6      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d107      	bne.n	80053ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800539e:	4b54      	ldr	r3, [pc, #336]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d115      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e09a      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d107      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053b6:	4b4e      	ldr	r3, [pc, #312]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e08e      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053c6:	4b4a      	ldr	r3, [pc, #296]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e086      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053d6:	4b46      	ldr	r3, [pc, #280]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 0203 	bic.w	r2, r3, #3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4943      	ldr	r1, [pc, #268]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e8:	f7ff f82c 	bl	8004444 <HAL_GetTick>
 80053ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ee:	e00a      	b.n	8005406 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f0:	f7ff f828 	bl	8004444 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e06e      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005406:	4b3a      	ldr	r3, [pc, #232]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 020c 	and.w	r2, r3, #12
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	429a      	cmp	r2, r3
 8005416:	d1eb      	bne.n	80053f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d010      	beq.n	8005446 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	4b31      	ldr	r3, [pc, #196]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005430:	429a      	cmp	r2, r3
 8005432:	d208      	bcs.n	8005446 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005434:	4b2e      	ldr	r3, [pc, #184]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	492b      	ldr	r1, [pc, #172]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005442:	4313      	orrs	r3, r2
 8005444:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005446:	4b29      	ldr	r3, [pc, #164]	; (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d210      	bcs.n	8005476 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005454:	4b25      	ldr	r3, [pc, #148]	; (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f023 0207 	bic.w	r2, r3, #7
 800545c:	4923      	ldr	r1, [pc, #140]	; (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	4313      	orrs	r3, r2
 8005462:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005464:	4b21      	ldr	r3, [pc, #132]	; (80054ec <HAL_RCC_ClockConfig+0x1ec>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d001      	beq.n	8005476 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e036      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d008      	beq.n	8005494 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005482:	4b1b      	ldr	r3, [pc, #108]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	4918      	ldr	r1, [pc, #96]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005490:	4313      	orrs	r3, r2
 8005492:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054a0:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	4910      	ldr	r1, [pc, #64]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054b4:	f000 f824 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 80054b8:	4602      	mov	r2, r0
 80054ba:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <HAL_RCC_ClockConfig+0x1f0>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	091b      	lsrs	r3, r3, #4
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	490b      	ldr	r1, [pc, #44]	; (80054f4 <HAL_RCC_ClockConfig+0x1f4>)
 80054c6:	5ccb      	ldrb	r3, [r1, r3]
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
 80054d0:	4a09      	ldr	r2, [pc, #36]	; (80054f8 <HAL_RCC_ClockConfig+0x1f8>)
 80054d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054d4:	4b09      	ldr	r3, [pc, #36]	; (80054fc <HAL_RCC_ClockConfig+0x1fc>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fc f8eb 	bl	80016b4 <HAL_InitTick>
 80054de:	4603      	mov	r3, r0
 80054e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80054e2:	7afb      	ldrb	r3, [r7, #11]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40022000 	.word	0x40022000
 80054f0:	40021000 	.word	0x40021000
 80054f4:	0800c978 	.word	0x0800c978
 80054f8:	20000000 	.word	0x20000000
 80054fc:	2000000c 	.word	0x2000000c

08005500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005500:	b480      	push	{r7}
 8005502:	b089      	sub	sp, #36	; 0x24
 8005504:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	2300      	movs	r3, #0
 800550c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800550e:	4b3e      	ldr	r3, [pc, #248]	; (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 030c 	and.w	r3, r3, #12
 8005516:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005518:	4b3b      	ldr	r3, [pc, #236]	; (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_RCC_GetSysClockFreq+0x34>
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b0c      	cmp	r3, #12
 800552c:	d121      	bne.n	8005572 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d11e      	bne.n	8005572 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005534:	4b34      	ldr	r3, [pc, #208]	; (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d107      	bne.n	8005550 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005540:	4b31      	ldr	r3, [pc, #196]	; (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	e005      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005550:	4b2d      	ldr	r3, [pc, #180]	; (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800555c:	4a2b      	ldr	r2, [pc, #172]	; (800560c <HAL_RCC_GetSysClockFreq+0x10c>)
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005564:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10d      	bne.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005570:	e00a      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b04      	cmp	r3, #4
 8005576:	d102      	bne.n	800557e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005578:	4b25      	ldr	r3, [pc, #148]	; (8005610 <HAL_RCC_GetSysClockFreq+0x110>)
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	e004      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b08      	cmp	r3, #8
 8005582:	d101      	bne.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005584:	4b23      	ldr	r3, [pc, #140]	; (8005614 <HAL_RCC_GetSysClockFreq+0x114>)
 8005586:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b0c      	cmp	r3, #12
 800558c:	d134      	bne.n	80055f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800558e:	4b1e      	ldr	r3, [pc, #120]	; (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d003      	beq.n	80055a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d003      	beq.n	80055ac <HAL_RCC_GetSysClockFreq+0xac>
 80055a4:	e005      	b.n	80055b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055a6:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <HAL_RCC_GetSysClockFreq+0x110>)
 80055a8:	617b      	str	r3, [r7, #20]
      break;
 80055aa:	e005      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055ac:	4b19      	ldr	r3, [pc, #100]	; (8005614 <HAL_RCC_GetSysClockFreq+0x114>)
 80055ae:	617b      	str	r3, [r7, #20]
      break;
 80055b0:	e002      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	617b      	str	r3, [r7, #20]
      break;
 80055b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055b8:	4b13      	ldr	r3, [pc, #76]	; (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	3301      	adds	r3, #1
 80055c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055c6:	4b10      	ldr	r3, [pc, #64]	; (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	fb03 f202 	mul.w	r2, r3, r2
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055de:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <HAL_RCC_GetSysClockFreq+0x108>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	0e5b      	lsrs	r3, r3, #25
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	3301      	adds	r3, #1
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055f8:	69bb      	ldr	r3, [r7, #24]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3724      	adds	r7, #36	; 0x24
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
 800560c:	0800c990 	.word	0x0800c990
 8005610:	00f42400 	.word	0x00f42400
 8005614:	007a1200 	.word	0x007a1200

08005618 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800561c:	4b03      	ldr	r3, [pc, #12]	; (800562c <HAL_RCC_GetHCLKFreq+0x14>)
 800561e:	681b      	ldr	r3, [r3, #0]
}
 8005620:	4618      	mov	r0, r3
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	20000000 	.word	0x20000000

08005630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005634:	f7ff fff0 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8005638:	4602      	mov	r2, r0
 800563a:	4b06      	ldr	r3, [pc, #24]	; (8005654 <HAL_RCC_GetPCLK1Freq+0x24>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	4904      	ldr	r1, [pc, #16]	; (8005658 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005646:	5ccb      	ldrb	r3, [r1, r3]
 8005648:	f003 031f 	and.w	r3, r3, #31
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005650:	4618      	mov	r0, r3
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40021000 	.word	0x40021000
 8005658:	0800c988 	.word	0x0800c988

0800565c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005660:	f7ff ffda 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8005664:	4602      	mov	r2, r0
 8005666:	4b06      	ldr	r3, [pc, #24]	; (8005680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	0adb      	lsrs	r3, r3, #11
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	4904      	ldr	r1, [pc, #16]	; (8005684 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005672:	5ccb      	ldrb	r3, [r1, r3]
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40021000 	.word	0x40021000
 8005684:	0800c988 	.word	0x0800c988

08005688 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	220f      	movs	r2, #15
 8005696:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005698:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <HAL_RCC_GetClockConfig+0x5c>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 0203 	and.w	r2, r3, #3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80056a4:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <HAL_RCC_GetClockConfig+0x5c>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80056b0:	4b0c      	ldr	r3, [pc, #48]	; (80056e4 <HAL_RCC_GetClockConfig+0x5c>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80056bc:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <HAL_RCC_GetClockConfig+0x5c>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	08db      	lsrs	r3, r3, #3
 80056c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80056ca:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <HAL_RCC_GetClockConfig+0x60>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0207 	and.w	r2, r3, #7
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	601a      	str	r2, [r3, #0]
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40022000 	.word	0x40022000

080056ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056f4:	2300      	movs	r3, #0
 80056f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056f8:	4b2a      	ldr	r3, [pc, #168]	; (80057a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005704:	f7ff f9bc 	bl	8004a80 <HAL_PWREx_GetVoltageRange>
 8005708:	6178      	str	r0, [r7, #20]
 800570a:	e014      	b.n	8005736 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800570c:	4b25      	ldr	r3, [pc, #148]	; (80057a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800570e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005710:	4a24      	ldr	r2, [pc, #144]	; (80057a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005716:	6593      	str	r3, [r2, #88]	; 0x58
 8005718:	4b22      	ldr	r3, [pc, #136]	; (80057a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005724:	f7ff f9ac 	bl	8004a80 <HAL_PWREx_GetVoltageRange>
 8005728:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800572a:	4b1e      	ldr	r3, [pc, #120]	; (80057a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800572c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572e:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005734:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800573c:	d10b      	bne.n	8005756 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b80      	cmp	r3, #128	; 0x80
 8005742:	d919      	bls.n	8005778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2ba0      	cmp	r3, #160	; 0xa0
 8005748:	d902      	bls.n	8005750 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800574a:	2302      	movs	r3, #2
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	e013      	b.n	8005778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005750:	2301      	movs	r3, #1
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	e010      	b.n	8005778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b80      	cmp	r3, #128	; 0x80
 800575a:	d902      	bls.n	8005762 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800575c:	2303      	movs	r3, #3
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	e00a      	b.n	8005778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b80      	cmp	r3, #128	; 0x80
 8005766:	d102      	bne.n	800576e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005768:	2302      	movs	r3, #2
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	e004      	b.n	8005778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b70      	cmp	r3, #112	; 0x70
 8005772:	d101      	bne.n	8005778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005774:	2301      	movs	r3, #1
 8005776:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005778:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f023 0207 	bic.w	r2, r3, #7
 8005780:	4909      	ldr	r1, [pc, #36]	; (80057a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005788:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	429a      	cmp	r2, r3
 8005794:	d001      	beq.n	800579a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40021000 	.word	0x40021000
 80057a8:	40022000 	.word	0x40022000

080057ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057b4:	2300      	movs	r3, #0
 80057b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057b8:	2300      	movs	r3, #0
 80057ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d041      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057d0:	d02a      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80057d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057d6:	d824      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057dc:	d008      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057e2:	d81e      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80057e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ec:	d010      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057ee:	e018      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057f0:	4b86      	ldr	r3, [pc, #536]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4a85      	ldr	r2, [pc, #532]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057fc:	e015      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	2100      	movs	r1, #0
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fabb 	bl	8005d80 <RCCEx_PLLSAI1_Config>
 800580a:	4603      	mov	r3, r0
 800580c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800580e:	e00c      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3320      	adds	r3, #32
 8005814:	2100      	movs	r1, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fba6 	bl	8005f68 <RCCEx_PLLSAI2_Config>
 800581c:	4603      	mov	r3, r0
 800581e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005820:	e003      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	74fb      	strb	r3, [r7, #19]
      break;
 8005826:	e000      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005828:	bf00      	nop
    }

    if(ret == HAL_OK)
 800582a:	7cfb      	ldrb	r3, [r7, #19]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10b      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005830:	4b76      	ldr	r3, [pc, #472]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005836:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800583e:	4973      	ldr	r1, [pc, #460]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005846:	e001      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	7cfb      	ldrb	r3, [r7, #19]
 800584a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d041      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800585c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005860:	d02a      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005862:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005866:	d824      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800586c:	d008      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800586e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005872:	d81e      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800587c:	d010      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800587e:	e018      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005880:	4b62      	ldr	r3, [pc, #392]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	4a61      	ldr	r2, [pc, #388]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800588a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800588c:	e015      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3304      	adds	r3, #4
 8005892:	2100      	movs	r1, #0
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fa73 	bl	8005d80 <RCCEx_PLLSAI1_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800589e:	e00c      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3320      	adds	r3, #32
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fb5e 	bl	8005f68 <RCCEx_PLLSAI2_Config>
 80058ac:	4603      	mov	r3, r0
 80058ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058b0:	e003      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	74fb      	strb	r3, [r7, #19]
      break;
 80058b6:	e000      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80058b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058ba:	7cfb      	ldrb	r3, [r7, #19]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10b      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058c0:	4b52      	ldr	r3, [pc, #328]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ce:	494f      	ldr	r1, [pc, #316]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80058d6:	e001      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d8:	7cfb      	ldrb	r3, [r7, #19]
 80058da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80a0 	beq.w	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ea:	2300      	movs	r3, #0
 80058ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058ee:	4b47      	ldr	r3, [pc, #284]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80058fe:	2300      	movs	r3, #0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00d      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005904:	4b41      	ldr	r3, [pc, #260]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005908:	4a40      	ldr	r2, [pc, #256]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800590a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800590e:	6593      	str	r3, [r2, #88]	; 0x58
 8005910:	4b3e      	ldr	r3, [pc, #248]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800591c:	2301      	movs	r3, #1
 800591e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005920:	4b3b      	ldr	r3, [pc, #236]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a3a      	ldr	r2, [pc, #232]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800592a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800592c:	f7fe fd8a 	bl	8004444 <HAL_GetTick>
 8005930:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005932:	e009      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005934:	f7fe fd86 	bl	8004444 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d902      	bls.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	74fb      	strb	r3, [r7, #19]
        break;
 8005946:	e005      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005948:	4b31      	ldr	r3, [pc, #196]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0ef      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005954:	7cfb      	ldrb	r3, [r7, #19]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d15c      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800595a:	4b2c      	ldr	r3, [pc, #176]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800595c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005964:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01f      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	429a      	cmp	r2, r3
 8005976:	d019      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005978:	4b24      	ldr	r3, [pc, #144]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005982:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005984:	4b21      	ldr	r3, [pc, #132]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598a:	4a20      	ldr	r2, [pc, #128]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800598c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005994:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	4a1c      	ldr	r2, [pc, #112]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800599c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059a4:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d016      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b6:	f7fe fd45 	bl	8004444 <HAL_GetTick>
 80059ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059bc:	e00b      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059be:	f7fe fd41 	bl	8004444 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d902      	bls.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	74fb      	strb	r3, [r7, #19]
            break;
 80059d4:	e006      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059d6:	4b0d      	ldr	r3, [pc, #52]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0ec      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80059e4:	7cfb      	ldrb	r3, [r7, #19]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10c      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059ea:	4b08      	ldr	r3, [pc, #32]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059fa:	4904      	ldr	r1, [pc, #16]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a02:	e009      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a04:	7cfb      	ldrb	r3, [r7, #19]
 8005a06:	74bb      	strb	r3, [r7, #18]
 8005a08:	e006      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005a0a:	bf00      	nop
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a14:	7cfb      	ldrb	r3, [r7, #19]
 8005a16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a18:	7c7b      	ldrb	r3, [r7, #17]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d105      	bne.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a1e:	4b9e      	ldr	r3, [pc, #632]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	4a9d      	ldr	r2, [pc, #628]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a36:	4b98      	ldr	r3, [pc, #608]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3c:	f023 0203 	bic.w	r2, r3, #3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	4994      	ldr	r1, [pc, #592]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a58:	4b8f      	ldr	r3, [pc, #572]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	f023 020c 	bic.w	r2, r3, #12
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a66:	498c      	ldr	r1, [pc, #560]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a7a:	4b87      	ldr	r3, [pc, #540]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	4983      	ldr	r1, [pc, #524]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a9c:	4b7e      	ldr	r3, [pc, #504]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aaa:	497b      	ldr	r1, [pc, #492]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0310 	and.w	r3, r3, #16
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005abe:	4b76      	ldr	r3, [pc, #472]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005acc:	4972      	ldr	r1, [pc, #456]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0320 	and.w	r3, r3, #32
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ae0:	4b6d      	ldr	r3, [pc, #436]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aee:	496a      	ldr	r1, [pc, #424]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b02:	4b65      	ldr	r3, [pc, #404]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b10:	4961      	ldr	r1, [pc, #388]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b24:	4b5c      	ldr	r3, [pc, #368]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b32:	4959      	ldr	r1, [pc, #356]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b46:	4b54      	ldr	r3, [pc, #336]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b54:	4950      	ldr	r1, [pc, #320]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00a      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b68:	4b4b      	ldr	r3, [pc, #300]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b76:	4948      	ldr	r1, [pc, #288]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b8a:	4b43      	ldr	r3, [pc, #268]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b98:	493f      	ldr	r1, [pc, #252]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d028      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bac:	4b3a      	ldr	r3, [pc, #232]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bba:	4937      	ldr	r1, [pc, #220]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bca:	d106      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bcc:	4b32      	ldr	r3, [pc, #200]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	4a31      	ldr	r2, [pc, #196]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bd6:	60d3      	str	r3, [r2, #12]
 8005bd8:	e011      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005be2:	d10c      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3304      	adds	r3, #4
 8005be8:	2101      	movs	r1, #1
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 f8c8 	bl	8005d80 <RCCEx_PLLSAI1_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005bf4:	7cfb      	ldrb	r3, [r7, #19]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005bfa:	7cfb      	ldrb	r3, [r7, #19]
 8005bfc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d028      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c0a:	4b23      	ldr	r3, [pc, #140]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c18:	491f      	ldr	r1, [pc, #124]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c28:	d106      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c2a:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	4a1a      	ldr	r2, [pc, #104]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c34:	60d3      	str	r3, [r2, #12]
 8005c36:	e011      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c40:	d10c      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3304      	adds	r3, #4
 8005c46:	2101      	movs	r1, #1
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 f899 	bl	8005d80 <RCCEx_PLLSAI1_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c52:	7cfb      	ldrb	r3, [r7, #19]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005c58:	7cfb      	ldrb	r3, [r7, #19]
 8005c5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d02b      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c76:	4908      	ldr	r1, [pc, #32]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c86:	d109      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c88:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	4a02      	ldr	r2, [pc, #8]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c92:	60d3      	str	r3, [r2, #12]
 8005c94:	e014      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005c96:	bf00      	nop
 8005c98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ca0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ca4:	d10c      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	2101      	movs	r1, #1
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 f867 	bl	8005d80 <RCCEx_PLLSAI1_Config>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cb6:	7cfb      	ldrb	r3, [r7, #19]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005cbc:	7cfb      	ldrb	r3, [r7, #19]
 8005cbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d02f      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ccc:	4b2b      	ldr	r3, [pc, #172]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cda:	4928      	ldr	r1, [pc, #160]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cea:	d10d      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3304      	adds	r3, #4
 8005cf0:	2102      	movs	r1, #2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 f844 	bl	8005d80 <RCCEx_PLLSAI1_Config>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cfc:	7cfb      	ldrb	r3, [r7, #19]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d014      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d02:	7cfb      	ldrb	r3, [r7, #19]
 8005d04:	74bb      	strb	r3, [r7, #18]
 8005d06:	e011      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d10:	d10c      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	3320      	adds	r3, #32
 8005d16:	2102      	movs	r1, #2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 f925 	bl	8005f68 <RCCEx_PLLSAI2_Config>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d22:	7cfb      	ldrb	r3, [r7, #19]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d28:	7cfb      	ldrb	r3, [r7, #19]
 8005d2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00a      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d38:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d46:	490d      	ldr	r1, [pc, #52]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d5a:	4b08      	ldr	r3, [pc, #32]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d6a:	4904      	ldr	r1, [pc, #16]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d72:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40021000 	.word	0x40021000

08005d80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d8e:	4b75      	ldr	r3, [pc, #468]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d018      	beq.n	8005dcc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d9a:	4b72      	ldr	r3, [pc, #456]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f003 0203 	and.w	r2, r3, #3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d10d      	bne.n	8005dc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
       ||
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d009      	beq.n	8005dc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005db2:	4b6c      	ldr	r3, [pc, #432]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	091b      	lsrs	r3, r3, #4
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
       ||
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d047      	beq.n	8005e56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	73fb      	strb	r3, [r7, #15]
 8005dca:	e044      	b.n	8005e56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d018      	beq.n	8005e06 <RCCEx_PLLSAI1_Config+0x86>
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d825      	bhi.n	8005e24 <RCCEx_PLLSAI1_Config+0xa4>
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d002      	beq.n	8005de2 <RCCEx_PLLSAI1_Config+0x62>
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d009      	beq.n	8005df4 <RCCEx_PLLSAI1_Config+0x74>
 8005de0:	e020      	b.n	8005e24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005de2:	4b60      	ldr	r3, [pc, #384]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d11d      	bne.n	8005e2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df2:	e01a      	b.n	8005e2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005df4:	4b5b      	ldr	r3, [pc, #364]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d116      	bne.n	8005e2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e04:	e013      	b.n	8005e2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e06:	4b57      	ldr	r3, [pc, #348]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10f      	bne.n	8005e32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e12:	4b54      	ldr	r3, [pc, #336]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d109      	bne.n	8005e32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e22:	e006      	b.n	8005e32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
      break;
 8005e28:	e004      	b.n	8005e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e2a:	bf00      	nop
 8005e2c:	e002      	b.n	8005e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e2e:	bf00      	nop
 8005e30:	e000      	b.n	8005e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e32:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10d      	bne.n	8005e56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e3a:	4b4a      	ldr	r3, [pc, #296]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6819      	ldr	r1, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	4944      	ldr	r1, [pc, #272]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d17d      	bne.n	8005f58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e5c:	4b41      	ldr	r3, [pc, #260]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a40      	ldr	r2, [pc, #256]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e68:	f7fe faec 	bl	8004444 <HAL_GetTick>
 8005e6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e6e:	e009      	b.n	8005e84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e70:	f7fe fae8 	bl	8004444 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d902      	bls.n	8005e84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	73fb      	strb	r3, [r7, #15]
        break;
 8005e82:	e005      	b.n	8005e90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e84:	4b37      	ldr	r3, [pc, #220]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1ef      	bne.n	8005e70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d160      	bne.n	8005f58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d111      	bne.n	8005ec0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e9c:	4b31      	ldr	r3, [pc, #196]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6892      	ldr	r2, [r2, #8]
 8005eac:	0211      	lsls	r1, r2, #8
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	68d2      	ldr	r2, [r2, #12]
 8005eb2:	0912      	lsrs	r2, r2, #4
 8005eb4:	0452      	lsls	r2, r2, #17
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	492a      	ldr	r1, [pc, #168]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	610b      	str	r3, [r1, #16]
 8005ebe:	e027      	b.n	8005f10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d112      	bne.n	8005eec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ec6:	4b27      	ldr	r3, [pc, #156]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005ece:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6892      	ldr	r2, [r2, #8]
 8005ed6:	0211      	lsls	r1, r2, #8
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	6912      	ldr	r2, [r2, #16]
 8005edc:	0852      	lsrs	r2, r2, #1
 8005ede:	3a01      	subs	r2, #1
 8005ee0:	0552      	lsls	r2, r2, #21
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	491f      	ldr	r1, [pc, #124]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	610b      	str	r3, [r1, #16]
 8005eea:	e011      	b.n	8005f10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005eec:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ef4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6892      	ldr	r2, [r2, #8]
 8005efc:	0211      	lsls	r1, r2, #8
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6952      	ldr	r2, [r2, #20]
 8005f02:	0852      	lsrs	r2, r2, #1
 8005f04:	3a01      	subs	r2, #1
 8005f06:	0652      	lsls	r2, r2, #25
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	4916      	ldr	r1, [pc, #88]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f10:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a13      	ldr	r2, [pc, #76]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1c:	f7fe fa92 	bl	8004444 <HAL_GetTick>
 8005f20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f22:	e009      	b.n	8005f38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f24:	f7fe fa8e 	bl	8004444 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d902      	bls.n	8005f38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	73fb      	strb	r3, [r7, #15]
          break;
 8005f36:	e005      	b.n	8005f44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0ef      	beq.n	8005f24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f4a:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	4904      	ldr	r1, [pc, #16]	; (8005f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	40021000 	.word	0x40021000

08005f68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f76:	4b6a      	ldr	r3, [pc, #424]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d018      	beq.n	8005fb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f82:	4b67      	ldr	r3, [pc, #412]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f003 0203 	and.w	r2, r3, #3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d10d      	bne.n	8005fae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
       ||
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d009      	beq.n	8005fae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f9a:	4b61      	ldr	r3, [pc, #388]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	091b      	lsrs	r3, r3, #4
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
       ||
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d047      	beq.n	800603e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	73fb      	strb	r3, [r7, #15]
 8005fb2:	e044      	b.n	800603e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d018      	beq.n	8005fee <RCCEx_PLLSAI2_Config+0x86>
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d825      	bhi.n	800600c <RCCEx_PLLSAI2_Config+0xa4>
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d002      	beq.n	8005fca <RCCEx_PLLSAI2_Config+0x62>
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d009      	beq.n	8005fdc <RCCEx_PLLSAI2_Config+0x74>
 8005fc8:	e020      	b.n	800600c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fca:	4b55      	ldr	r3, [pc, #340]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d11d      	bne.n	8006012 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fda:	e01a      	b.n	8006012 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fdc:	4b50      	ldr	r3, [pc, #320]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d116      	bne.n	8006016 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fec:	e013      	b.n	8006016 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fee:	4b4c      	ldr	r3, [pc, #304]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10f      	bne.n	800601a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ffa:	4b49      	ldr	r3, [pc, #292]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800600a:	e006      	b.n	800601a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	73fb      	strb	r3, [r7, #15]
      break;
 8006010:	e004      	b.n	800601c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006012:	bf00      	nop
 8006014:	e002      	b.n	800601c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006016:	bf00      	nop
 8006018:	e000      	b.n	800601c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800601a:	bf00      	nop
    }

    if(status == HAL_OK)
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10d      	bne.n	800603e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006022:	4b3f      	ldr	r3, [pc, #252]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6819      	ldr	r1, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	3b01      	subs	r3, #1
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	430b      	orrs	r3, r1
 8006038:	4939      	ldr	r1, [pc, #228]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 800603a:	4313      	orrs	r3, r2
 800603c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d167      	bne.n	8006114 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006044:	4b36      	ldr	r3, [pc, #216]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a35      	ldr	r2, [pc, #212]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 800604a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800604e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006050:	f7fe f9f8 	bl	8004444 <HAL_GetTick>
 8006054:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006056:	e009      	b.n	800606c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006058:	f7fe f9f4 	bl	8004444 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d902      	bls.n	800606c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	73fb      	strb	r3, [r7, #15]
        break;
 800606a:	e005      	b.n	8006078 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800606c:	4b2c      	ldr	r3, [pc, #176]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1ef      	bne.n	8006058 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d14a      	bne.n	8006114 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d111      	bne.n	80060a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006084:	4b26      	ldr	r3, [pc, #152]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800608c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	6892      	ldr	r2, [r2, #8]
 8006094:	0211      	lsls	r1, r2, #8
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	68d2      	ldr	r2, [r2, #12]
 800609a:	0912      	lsrs	r2, r2, #4
 800609c:	0452      	lsls	r2, r2, #17
 800609e:	430a      	orrs	r2, r1
 80060a0:	491f      	ldr	r1, [pc, #124]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	614b      	str	r3, [r1, #20]
 80060a6:	e011      	b.n	80060cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060a8:	4b1d      	ldr	r3, [pc, #116]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80060b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6892      	ldr	r2, [r2, #8]
 80060b8:	0211      	lsls	r1, r2, #8
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6912      	ldr	r2, [r2, #16]
 80060be:	0852      	lsrs	r2, r2, #1
 80060c0:	3a01      	subs	r2, #1
 80060c2:	0652      	lsls	r2, r2, #25
 80060c4:	430a      	orrs	r2, r1
 80060c6:	4916      	ldr	r1, [pc, #88]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80060cc:	4b14      	ldr	r3, [pc, #80]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a13      	ldr	r2, [pc, #76]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d8:	f7fe f9b4 	bl	8004444 <HAL_GetTick>
 80060dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060de:	e009      	b.n	80060f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060e0:	f7fe f9b0 	bl	8004444 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d902      	bls.n	80060f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	73fb      	strb	r3, [r7, #15]
          break;
 80060f2:	e005      	b.n	8006100 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060f4:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0ef      	beq.n	80060e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006106:	4b06      	ldr	r3, [pc, #24]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006108:	695a      	ldr	r2, [r3, #20]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	4904      	ldr	r1, [pc, #16]	; (8006120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006110:	4313      	orrs	r3, r2
 8006112:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	40021000 	.word	0x40021000

08006124 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e095      	b.n	8006262 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	2b00      	cmp	r3, #0
 800613c:	d108      	bne.n	8006150 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006146:	d009      	beq.n	800615c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	61da      	str	r2, [r3, #28]
 800614e:	e005      	b.n	800615c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d106      	bne.n	800617c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fb f926 	bl	80013c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006192:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800619c:	d902      	bls.n	80061a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	e002      	b.n	80061aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80061b2:	d007      	beq.n	80061c4 <HAL_SPI_Init+0xa0>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061bc:	d002      	beq.n	80061c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061fc:	431a      	orrs	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006206:	ea42 0103 	orr.w	r1, r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	0c1b      	lsrs	r3, r3, #16
 8006220:	f003 0204 	and.w	r2, r3, #4
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	431a      	orrs	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006240:	ea42 0103 	orr.w	r1, r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b088      	sub	sp, #32
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	4613      	mov	r3, r2
 8006278:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_SPI_Transmit+0x22>
 8006288:	2302      	movs	r3, #2
 800628a:	e158      	b.n	800653e <HAL_SPI_Transmit+0x2d4>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006294:	f7fe f8d6 	bl	8004444 <HAL_GetTick>
 8006298:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d002      	beq.n	80062b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80062aa:	2302      	movs	r3, #2
 80062ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062ae:	e13d      	b.n	800652c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_SPI_Transmit+0x52>
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d102      	bne.n	80062c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062c0:	e134      	b.n	800652c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2203      	movs	r2, #3
 80062c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	88fa      	ldrh	r2, [r7, #6]
 80062da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	88fa      	ldrh	r2, [r7, #6]
 80062e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800630c:	d10f      	bne.n	800632e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800631c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800632c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006338:	2b40      	cmp	r3, #64	; 0x40
 800633a:	d007      	beq.n	800634c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800634a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006354:	d94b      	bls.n	80063ee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <HAL_SPI_Transmit+0xfa>
 800635e:	8afb      	ldrh	r3, [r7, #22]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d13e      	bne.n	80063e2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	881a      	ldrh	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	1c9a      	adds	r2, r3, #2
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006388:	e02b      	b.n	80063e2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b02      	cmp	r3, #2
 8006396:	d112      	bne.n	80063be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	881a      	ldrh	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	1c9a      	adds	r2, r3, #2
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063bc:	e011      	b.n	80063e2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063be:	f7fe f841 	bl	8004444 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d803      	bhi.n	80063d6 <HAL_SPI_Transmit+0x16c>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d4:	d102      	bne.n	80063dc <HAL_SPI_Transmit+0x172>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d102      	bne.n	80063e2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063e0:	e0a4      	b.n	800652c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1ce      	bne.n	800638a <HAL_SPI_Transmit+0x120>
 80063ec:	e07c      	b.n	80064e8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <HAL_SPI_Transmit+0x192>
 80063f6:	8afb      	ldrh	r3, [r7, #22]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d170      	bne.n	80064de <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b01      	cmp	r3, #1
 8006404:	d912      	bls.n	800642c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	881a      	ldrh	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	1c9a      	adds	r2, r3, #2
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b02      	subs	r3, #2
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	87da      	strh	r2, [r3, #62]	; 0x3e
 800642a:	e058      	b.n	80064de <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	7812      	ldrb	r2, [r2, #0]
 8006438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006452:	e044      	b.n	80064de <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b02      	cmp	r3, #2
 8006460:	d12b      	bne.n	80064ba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006466:	b29b      	uxth	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	d912      	bls.n	8006492 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	881a      	ldrh	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	1c9a      	adds	r2, r3, #2
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006486:	b29b      	uxth	r3, r3
 8006488:	3b02      	subs	r3, #2
 800648a:	b29a      	uxth	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006490:	e025      	b.n	80064de <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	330c      	adds	r3, #12
 800649c:	7812      	ldrb	r2, [r2, #0]
 800649e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064b8:	e011      	b.n	80064de <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ba:	f7fd ffc3 	bl	8004444 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d803      	bhi.n	80064d2 <HAL_SPI_Transmit+0x268>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064d0:	d102      	bne.n	80064d8 <HAL_SPI_Transmit+0x26e>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d102      	bne.n	80064de <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064dc:	e026      	b.n	800652c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1b5      	bne.n	8006454 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fce3 	bl	8006eb8 <SPI_EndRxTxTransaction>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10a      	bne.n	800651c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	613b      	str	r3, [r7, #16]
 800651a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e000      	b.n	800652c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800652a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800653c:	7ffb      	ldrb	r3, [r7, #31]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3720      	adds	r7, #32
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b088      	sub	sp, #32
 800654a:	af02      	add	r7, sp, #8
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	603b      	str	r3, [r7, #0]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006562:	d112      	bne.n	800658a <HAL_SPI_Receive+0x44>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10e      	bne.n	800658a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2204      	movs	r2, #4
 8006570:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006574:	88fa      	ldrh	r2, [r7, #6]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	4613      	mov	r3, r2
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	68b9      	ldr	r1, [r7, #8]
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 f910 	bl	80067a6 <HAL_SPI_TransmitReceive>
 8006586:	4603      	mov	r3, r0
 8006588:	e109      	b.n	800679e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_SPI_Receive+0x52>
 8006594:	2302      	movs	r3, #2
 8006596:	e102      	b.n	800679e <HAL_SPI_Receive+0x258>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065a0:	f7fd ff50 	bl	8004444 <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d002      	beq.n	80065b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80065b2:	2302      	movs	r3, #2
 80065b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065b6:	e0e9      	b.n	800678c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <HAL_SPI_Receive+0x7e>
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d102      	bne.n	80065ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065c8:	e0e0      	b.n	800678c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2204      	movs	r2, #4
 80065ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	88fa      	ldrh	r2, [r7, #6]
 80065e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	88fa      	ldrh	r2, [r7, #6]
 80065ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006614:	d908      	bls.n	8006628 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006624:	605a      	str	r2, [r3, #4]
 8006626:	e007      	b.n	8006638 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006636:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006640:	d10f      	bne.n	8006662 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006650:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006660:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	d007      	beq.n	8006680 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800667e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006688:	d867      	bhi.n	800675a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800668a:	e030      	b.n	80066ee <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b01      	cmp	r3, #1
 8006698:	d117      	bne.n	80066ca <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f103 020c 	add.w	r2, r3, #12
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	7812      	ldrb	r2, [r2, #0]
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80066c8:	e011      	b.n	80066ee <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066ca:	f7fd febb 	bl	8004444 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d803      	bhi.n	80066e2 <HAL_SPI_Receive+0x19c>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066e0:	d102      	bne.n	80066e8 <HAL_SPI_Receive+0x1a2>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d102      	bne.n	80066ee <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80066ec:	e04e      	b.n	800678c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1c8      	bne.n	800668c <HAL_SPI_Receive+0x146>
 80066fa:	e034      	b.n	8006766 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b01      	cmp	r3, #1
 8006708:	d115      	bne.n	8006736 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	b292      	uxth	r2, r2
 8006716:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	1c9a      	adds	r2, r3, #2
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006734:	e011      	b.n	800675a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006736:	f7fd fe85 	bl	8004444 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d803      	bhi.n	800674e <HAL_SPI_Receive+0x208>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800674c:	d102      	bne.n	8006754 <HAL_SPI_Receive+0x20e>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d102      	bne.n	800675a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006758:	e018      	b.n	800678c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1ca      	bne.n	80066fc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 fb4c 	bl	8006e08 <SPI_EndRxTransaction>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	75fb      	strb	r3, [r7, #23]
 8006788:	e000      	b.n	800678c <HAL_SPI_Receive+0x246>
  }

error :
 800678a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800679c:	7dfb      	ldrb	r3, [r7, #23]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b08a      	sub	sp, #40	; 0x28
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
 80067b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067b4:	2301      	movs	r3, #1
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_SPI_TransmitReceive+0x26>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e1fb      	b.n	8006bc4 <HAL_SPI_TransmitReceive+0x41e>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067d4:	f7fd fe36 	bl	8004444 <HAL_GetTick>
 80067d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80067e8:	887b      	ldrh	r3, [r7, #2]
 80067ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80067ec:	887b      	ldrh	r3, [r7, #2]
 80067ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067f0:	7efb      	ldrb	r3, [r7, #27]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d00e      	beq.n	8006814 <HAL_SPI_TransmitReceive+0x6e>
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067fc:	d106      	bne.n	800680c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d102      	bne.n	800680c <HAL_SPI_TransmitReceive+0x66>
 8006806:	7efb      	ldrb	r3, [r7, #27]
 8006808:	2b04      	cmp	r3, #4
 800680a:	d003      	beq.n	8006814 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800680c:	2302      	movs	r3, #2
 800680e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006812:	e1cd      	b.n	8006bb0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <HAL_SPI_TransmitReceive+0x80>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_SPI_TransmitReceive+0x80>
 8006820:	887b      	ldrh	r3, [r7, #2]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d103      	bne.n	800682e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800682c:	e1c0      	b.n	8006bb0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b04      	cmp	r3, #4
 8006838:	d003      	beq.n	8006842 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2205      	movs	r2, #5
 800683e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	887a      	ldrh	r2, [r7, #2]
 8006852:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	887a      	ldrh	r2, [r7, #2]
 800685a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	887a      	ldrh	r2, [r7, #2]
 8006868:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	887a      	ldrh	r2, [r7, #2]
 800686e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006884:	d802      	bhi.n	800688c <HAL_SPI_TransmitReceive+0xe6>
 8006886:	8a3b      	ldrh	r3, [r7, #16]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d908      	bls.n	800689e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800689a:	605a      	str	r2, [r3, #4]
 800689c:	e007      	b.n	80068ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b8:	2b40      	cmp	r3, #64	; 0x40
 80068ba:	d007      	beq.n	80068cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068d4:	d97c      	bls.n	80069d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x13e>
 80068de:	8a7b      	ldrh	r3, [r7, #18]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d169      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	881a      	ldrh	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	1c9a      	adds	r2, r3, #2
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068fe:	b29b      	uxth	r3, r3
 8006900:	3b01      	subs	r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006908:	e056      	b.n	80069b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b02      	cmp	r3, #2
 8006916:	d11b      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x1aa>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d016      	beq.n	8006950 <HAL_SPI_TransmitReceive+0x1aa>
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	2b01      	cmp	r3, #1
 8006926:	d113      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	881a      	ldrh	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	1c9a      	adds	r2, r3, #2
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006942:	b29b      	uxth	r3, r3
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b01      	cmp	r3, #1
 800695c:	d11c      	bne.n	8006998 <HAL_SPI_TransmitReceive+0x1f2>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d016      	beq.n	8006998 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006974:	b292      	uxth	r2, r2
 8006976:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	1c9a      	adds	r2, r3, #2
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006994:	2301      	movs	r3, #1
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006998:	f7fd fd54 	bl	8004444 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d807      	bhi.n	80069b8 <HAL_SPI_TransmitReceive+0x212>
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ae:	d003      	beq.n	80069b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80069b6:	e0fb      	b.n	8006bb0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1a3      	bne.n	800690a <HAL_SPI_TransmitReceive+0x164>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d19d      	bne.n	800690a <HAL_SPI_TransmitReceive+0x164>
 80069ce:	e0df      	b.n	8006b90 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_SPI_TransmitReceive+0x23a>
 80069d8:	8a7b      	ldrh	r3, [r7, #18]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	f040 80cb 	bne.w	8006b76 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d912      	bls.n	8006a10 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ee:	881a      	ldrh	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fa:	1c9a      	adds	r2, r3, #2
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b02      	subs	r3, #2
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a0e:	e0b2      	b.n	8006b76 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	7812      	ldrb	r2, [r2, #0]
 8006a1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a36:	e09e      	b.n	8006b76 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d134      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x30a>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d02f      	beq.n	8006ab0 <HAL_SPI_TransmitReceive+0x30a>
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d12c      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d912      	bls.n	8006a86 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	881a      	ldrh	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	1c9a      	adds	r2, r3, #2
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b02      	subs	r3, #2
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a84:	e012      	b.n	8006aac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	330c      	adds	r3, #12
 8006a90:	7812      	ldrb	r2, [r2, #0]
 8006a92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d148      	bne.n	8006b50 <HAL_SPI_TransmitReceive+0x3aa>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d042      	beq.n	8006b50 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d923      	bls.n	8006b1e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae0:	b292      	uxth	r2, r2
 8006ae2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae8:	1c9a      	adds	r2, r3, #2
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b02      	subs	r3, #2
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d81f      	bhi.n	8006b4c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b1a:	605a      	str	r2, [r3, #4]
 8006b1c:	e016      	b.n	8006b4c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f103 020c 	add.w	r2, r3, #12
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	7812      	ldrb	r2, [r2, #0]
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3b01      	subs	r3, #1
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b50:	f7fd fc78 	bl	8004444 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d803      	bhi.n	8006b68 <HAL_SPI_TransmitReceive+0x3c2>
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b66:	d102      	bne.n	8006b6e <HAL_SPI_TransmitReceive+0x3c8>
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d103      	bne.n	8006b76 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006b74:	e01c      	b.n	8006bb0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f47f af5b 	bne.w	8006a38 <HAL_SPI_TransmitReceive+0x292>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f47f af54 	bne.w	8006a38 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b90:	69fa      	ldr	r2, [r7, #28]
 8006b92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f98f 	bl	8006eb8 <SPI_EndRxTxTransaction>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d006      	beq.n	8006bae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	661a      	str	r2, [r3, #96]	; 0x60
 8006bac:	e000      	b.n	8006bb0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006bae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3728      	adds	r7, #40	; 0x28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bdc:	f7fd fc32 	bl	8004444 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	1a9b      	subs	r3, r3, r2
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	4413      	add	r3, r2
 8006bea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bec:	f7fd fc2a 	bl	8004444 <HAL_GetTick>
 8006bf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bf2:	4b39      	ldr	r3, [pc, #228]	; (8006cd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	015b      	lsls	r3, r3, #5
 8006bf8:	0d1b      	lsrs	r3, r3, #20
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	fb02 f303 	mul.w	r3, r2, r3
 8006c00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c02:	e054      	b.n	8006cae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c0a:	d050      	beq.n	8006cae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c0c:	f7fd fc1a 	bl	8004444 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	69fa      	ldr	r2, [r7, #28]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d902      	bls.n	8006c22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d13d      	bne.n	8006c9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c3a:	d111      	bne.n	8006c60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c44:	d004      	beq.n	8006c50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c4e:	d107      	bne.n	8006c60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c68:	d10f      	bne.n	8006c8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e017      	b.n	8006cce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	bf0c      	ite	eq
 8006cbe:	2301      	moveq	r3, #1
 8006cc0:	2300      	movne	r3, #0
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	79fb      	ldrb	r3, [r7, #7]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d19b      	bne.n	8006c04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000000 	.word	0x20000000

08006cdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	; 0x28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006cee:	f7fd fba9 	bl	8004444 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	1a9b      	subs	r3, r3, r2
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006cfe:	f7fd fba1 	bl	8004444 <HAL_GetTick>
 8006d02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	330c      	adds	r3, #12
 8006d0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d0c:	4b3d      	ldr	r3, [pc, #244]	; (8006e04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	00da      	lsls	r2, r3, #3
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	0d1b      	lsrs	r3, r3, #20
 8006d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1e:	fb02 f303 	mul.w	r3, r2, r3
 8006d22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d24:	e060      	b.n	8006de8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d2c:	d107      	bne.n	8006d3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d44:	d050      	beq.n	8006de8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d46:	f7fd fb7d 	bl	8004444 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d902      	bls.n	8006d5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d13d      	bne.n	8006dd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d74:	d111      	bne.n	8006d9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d7e:	d004      	beq.n	8006d8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d88:	d107      	bne.n	8006d9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da2:	d10f      	bne.n	8006dc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e010      	b.n	8006dfa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4013      	ands	r3, r2
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d196      	bne.n	8006d26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3728      	adds	r7, #40	; 0x28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20000000 	.word	0x20000000

08006e08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e1c:	d111      	bne.n	8006e42 <SPI_EndRxTransaction+0x3a>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e26:	d004      	beq.n	8006e32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e30:	d107      	bne.n	8006e42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e40:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2180      	movs	r1, #128	; 0x80
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f7ff febd 	bl	8006bcc <SPI_WaitFlagStateUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d007      	beq.n	8006e68 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e5c:	f043 0220 	orr.w	r2, r3, #32
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e023      	b.n	8006eb0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e70:	d11d      	bne.n	8006eae <SPI_EndRxTransaction+0xa6>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e7a:	d004      	beq.n	8006e86 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e84:	d113      	bne.n	8006eae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f7ff ff22 	bl	8006cdc <SPI_WaitFifoStateUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d007      	beq.n	8006eae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea2:	f043 0220 	orr.w	r2, r3, #32
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e000      	b.n	8006eb0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f7ff ff03 	bl	8006cdc <SPI_WaitFifoStateUntilTimeout>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d007      	beq.n	8006eec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ee0:	f043 0220 	orr.w	r2, r3, #32
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e027      	b.n	8006f3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2180      	movs	r1, #128	; 0x80
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7ff fe68 	bl	8006bcc <SPI_WaitFlagStateUntilTimeout>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d007      	beq.n	8006f12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f06:	f043 0220 	orr.w	r2, r3, #32
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e014      	b.n	8006f3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f7ff fedc 	bl	8006cdc <SPI_WaitFifoStateUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d007      	beq.n	8006f3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f2e:	f043 0220 	orr.w	r2, r3, #32
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e000      	b.n	8006f3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e049      	b.n	8006fea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f841 	bl	8006ff2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4619      	mov	r1, r3
 8006f82:	4610      	mov	r0, r2
 8006f84:	f000 f9f8 	bl	8007378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
	...

08007008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b01      	cmp	r3, #1
 800701a:	d001      	beq.n	8007020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e04f      	b.n	80070c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a23      	ldr	r2, [pc, #140]	; (80070cc <HAL_TIM_Base_Start_IT+0xc4>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d01d      	beq.n	800707e <HAL_TIM_Base_Start_IT+0x76>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704a:	d018      	beq.n	800707e <HAL_TIM_Base_Start_IT+0x76>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1f      	ldr	r2, [pc, #124]	; (80070d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d013      	beq.n	800707e <HAL_TIM_Base_Start_IT+0x76>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a1e      	ldr	r2, [pc, #120]	; (80070d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00e      	beq.n	800707e <HAL_TIM_Base_Start_IT+0x76>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1c      	ldr	r2, [pc, #112]	; (80070d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d009      	beq.n	800707e <HAL_TIM_Base_Start_IT+0x76>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a1b      	ldr	r2, [pc, #108]	; (80070dc <HAL_TIM_Base_Start_IT+0xd4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d004      	beq.n	800707e <HAL_TIM_Base_Start_IT+0x76>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a19      	ldr	r2, [pc, #100]	; (80070e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d115      	bne.n	80070aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	4b17      	ldr	r3, [pc, #92]	; (80070e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007086:	4013      	ands	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b06      	cmp	r3, #6
 800708e:	d015      	beq.n	80070bc <HAL_TIM_Base_Start_IT+0xb4>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007096:	d011      	beq.n	80070bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a8:	e008      	b.n	80070bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0201 	orr.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	e000      	b.n	80070be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	40012c00 	.word	0x40012c00
 80070d0:	40000400 	.word	0x40000400
 80070d4:	40000800 	.word	0x40000800
 80070d8:	40000c00 	.word	0x40000c00
 80070dc:	40013400 	.word	0x40013400
 80070e0:	40014000 	.word	0x40014000
 80070e4:	00010007 	.word	0x00010007

080070e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d122      	bne.n	8007144 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b02      	cmp	r3, #2
 800710a:	d11b      	bne.n	8007144 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f06f 0202 	mvn.w	r2, #2
 8007114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f905 	bl	800733a <HAL_TIM_IC_CaptureCallback>
 8007130:	e005      	b.n	800713e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f8f7 	bl	8007326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f908 	bl	800734e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b04      	cmp	r3, #4
 8007150:	d122      	bne.n	8007198 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b04      	cmp	r3, #4
 800715e:	d11b      	bne.n	8007198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f06f 0204 	mvn.w	r2, #4
 8007168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2202      	movs	r2, #2
 800716e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f8db 	bl	800733a <HAL_TIM_IC_CaptureCallback>
 8007184:	e005      	b.n	8007192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f8cd 	bl	8007326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f8de 	bl	800734e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b08      	cmp	r3, #8
 80071a4:	d122      	bne.n	80071ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f003 0308 	and.w	r3, r3, #8
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d11b      	bne.n	80071ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f06f 0208 	mvn.w	r2, #8
 80071bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2204      	movs	r2, #4
 80071c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f8b1 	bl	800733a <HAL_TIM_IC_CaptureCallback>
 80071d8:	e005      	b.n	80071e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f8a3 	bl	8007326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f8b4 	bl	800734e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	f003 0310 	and.w	r3, r3, #16
 80071f6:	2b10      	cmp	r3, #16
 80071f8:	d122      	bne.n	8007240 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f003 0310 	and.w	r3, r3, #16
 8007204:	2b10      	cmp	r3, #16
 8007206:	d11b      	bne.n	8007240 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f06f 0210 	mvn.w	r2, #16
 8007210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2208      	movs	r2, #8
 8007216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f887 	bl	800733a <HAL_TIM_IC_CaptureCallback>
 800722c:	e005      	b.n	800723a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f879 	bl	8007326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f88a 	bl	800734e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b01      	cmp	r3, #1
 800724c:	d10e      	bne.n	800726c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b01      	cmp	r3, #1
 800725a:	d107      	bne.n	800726c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f06f 0201 	mvn.w	r2, #1
 8007264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7fa f858 	bl	800131c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007276:	2b80      	cmp	r3, #128	; 0x80
 8007278:	d10e      	bne.n	8007298 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007284:	2b80      	cmp	r3, #128	; 0x80
 8007286:	d107      	bne.n	8007298 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f914 	bl	80074c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a6:	d10e      	bne.n	80072c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b2:	2b80      	cmp	r3, #128	; 0x80
 80072b4:	d107      	bne.n	80072c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f907 	bl	80074d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d0:	2b40      	cmp	r3, #64	; 0x40
 80072d2:	d10e      	bne.n	80072f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	d107      	bne.n	80072f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f838 	bl	8007362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	f003 0320 	and.w	r3, r3, #32
 80072fc:	2b20      	cmp	r3, #32
 80072fe:	d10e      	bne.n	800731e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	f003 0320 	and.w	r3, r3, #32
 800730a:	2b20      	cmp	r3, #32
 800730c:	d107      	bne.n	800731e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f06f 0220 	mvn.w	r2, #32
 8007316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f8c7 	bl	80074ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800733a:	b480      	push	{r7}
 800733c:	b083      	sub	sp, #12
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007342:	bf00      	nop
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
	...

08007378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a40      	ldr	r2, [pc, #256]	; (800748c <TIM_Base_SetConfig+0x114>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d013      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007396:	d00f      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a3d      	ldr	r2, [pc, #244]	; (8007490 <TIM_Base_SetConfig+0x118>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d00b      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a3c      	ldr	r2, [pc, #240]	; (8007494 <TIM_Base_SetConfig+0x11c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d007      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a3b      	ldr	r2, [pc, #236]	; (8007498 <TIM_Base_SetConfig+0x120>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a3a      	ldr	r2, [pc, #232]	; (800749c <TIM_Base_SetConfig+0x124>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d108      	bne.n	80073ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a2f      	ldr	r2, [pc, #188]	; (800748c <TIM_Base_SetConfig+0x114>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d01f      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d8:	d01b      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a2c      	ldr	r2, [pc, #176]	; (8007490 <TIM_Base_SetConfig+0x118>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d017      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a2b      	ldr	r2, [pc, #172]	; (8007494 <TIM_Base_SetConfig+0x11c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a2a      	ldr	r2, [pc, #168]	; (8007498 <TIM_Base_SetConfig+0x120>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d00f      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a29      	ldr	r2, [pc, #164]	; (800749c <TIM_Base_SetConfig+0x124>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d00b      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a28      	ldr	r2, [pc, #160]	; (80074a0 <TIM_Base_SetConfig+0x128>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d007      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a27      	ldr	r2, [pc, #156]	; (80074a4 <TIM_Base_SetConfig+0x12c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d003      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a26      	ldr	r2, [pc, #152]	; (80074a8 <TIM_Base_SetConfig+0x130>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d108      	bne.n	8007424 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	4313      	orrs	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a10      	ldr	r2, [pc, #64]	; (800748c <TIM_Base_SetConfig+0x114>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d00f      	beq.n	8007470 <TIM_Base_SetConfig+0xf8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a12      	ldr	r2, [pc, #72]	; (800749c <TIM_Base_SetConfig+0x124>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00b      	beq.n	8007470 <TIM_Base_SetConfig+0xf8>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a11      	ldr	r2, [pc, #68]	; (80074a0 <TIM_Base_SetConfig+0x128>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d007      	beq.n	8007470 <TIM_Base_SetConfig+0xf8>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a10      	ldr	r2, [pc, #64]	; (80074a4 <TIM_Base_SetConfig+0x12c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d003      	beq.n	8007470 <TIM_Base_SetConfig+0xf8>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a0f      	ldr	r2, [pc, #60]	; (80074a8 <TIM_Base_SetConfig+0x130>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d103      	bne.n	8007478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	691a      	ldr	r2, [r3, #16]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	615a      	str	r2, [r3, #20]
}
 800747e:	bf00      	nop
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40012c00 	.word	0x40012c00
 8007490:	40000400 	.word	0x40000400
 8007494:	40000800 	.word	0x40000800
 8007498:	40000c00 	.word	0x40000c00
 800749c:	40013400 	.word	0x40013400
 80074a0:	40014000 	.word	0x40014000
 80074a4:	40014400 	.word	0x40014400
 80074a8:	40014800 	.word	0x40014800

080074ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e040      	b.n	800757c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d106      	bne.n	8007510 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7fa f9f6 	bl	80018fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2224      	movs	r2, #36	; 0x24
 8007514:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0201 	bic.w	r2, r2, #1
 8007524:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f82c 	bl	8007584 <UART_SetConfig>
 800752c:	4603      	mov	r3, r0
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e022      	b.n	800757c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fad8 	bl	8007af4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007552:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689a      	ldr	r2, [r3, #8]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007562:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 0201 	orr.w	r2, r2, #1
 8007572:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fb5f 	bl	8007c38 <UART_CheckIdleState>
 800757a:	4603      	mov	r3, r0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007588:	b08a      	sub	sp, #40	; 0x28
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	431a      	orrs	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	4ba4      	ldr	r3, [pc, #656]	; (8007844 <UART_SetConfig+0x2c0>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	6812      	ldr	r2, [r2, #0]
 80075ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075bc:	430b      	orrs	r3, r1
 80075be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a99      	ldr	r2, [pc, #612]	; (8007848 <UART_SetConfig+0x2c4>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d004      	beq.n	80075f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ec:	4313      	orrs	r3, r2
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007600:	430a      	orrs	r2, r1
 8007602:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a90      	ldr	r2, [pc, #576]	; (800784c <UART_SetConfig+0x2c8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d126      	bne.n	800765c <UART_SetConfig+0xd8>
 800760e:	4b90      	ldr	r3, [pc, #576]	; (8007850 <UART_SetConfig+0x2cc>)
 8007610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007614:	f003 0303 	and.w	r3, r3, #3
 8007618:	2b03      	cmp	r3, #3
 800761a:	d81b      	bhi.n	8007654 <UART_SetConfig+0xd0>
 800761c:	a201      	add	r2, pc, #4	; (adr r2, 8007624 <UART_SetConfig+0xa0>)
 800761e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007622:	bf00      	nop
 8007624:	08007635 	.word	0x08007635
 8007628:	08007645 	.word	0x08007645
 800762c:	0800763d 	.word	0x0800763d
 8007630:	0800764d 	.word	0x0800764d
 8007634:	2301      	movs	r3, #1
 8007636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800763a:	e116      	b.n	800786a <UART_SetConfig+0x2e6>
 800763c:	2302      	movs	r3, #2
 800763e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007642:	e112      	b.n	800786a <UART_SetConfig+0x2e6>
 8007644:	2304      	movs	r3, #4
 8007646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800764a:	e10e      	b.n	800786a <UART_SetConfig+0x2e6>
 800764c:	2308      	movs	r3, #8
 800764e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007652:	e10a      	b.n	800786a <UART_SetConfig+0x2e6>
 8007654:	2310      	movs	r3, #16
 8007656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800765a:	e106      	b.n	800786a <UART_SetConfig+0x2e6>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a7c      	ldr	r2, [pc, #496]	; (8007854 <UART_SetConfig+0x2d0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d138      	bne.n	80076d8 <UART_SetConfig+0x154>
 8007666:	4b7a      	ldr	r3, [pc, #488]	; (8007850 <UART_SetConfig+0x2cc>)
 8007668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800766c:	f003 030c 	and.w	r3, r3, #12
 8007670:	2b0c      	cmp	r3, #12
 8007672:	d82d      	bhi.n	80076d0 <UART_SetConfig+0x14c>
 8007674:	a201      	add	r2, pc, #4	; (adr r2, 800767c <UART_SetConfig+0xf8>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	080076b1 	.word	0x080076b1
 8007680:	080076d1 	.word	0x080076d1
 8007684:	080076d1 	.word	0x080076d1
 8007688:	080076d1 	.word	0x080076d1
 800768c:	080076c1 	.word	0x080076c1
 8007690:	080076d1 	.word	0x080076d1
 8007694:	080076d1 	.word	0x080076d1
 8007698:	080076d1 	.word	0x080076d1
 800769c:	080076b9 	.word	0x080076b9
 80076a0:	080076d1 	.word	0x080076d1
 80076a4:	080076d1 	.word	0x080076d1
 80076a8:	080076d1 	.word	0x080076d1
 80076ac:	080076c9 	.word	0x080076c9
 80076b0:	2300      	movs	r3, #0
 80076b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076b6:	e0d8      	b.n	800786a <UART_SetConfig+0x2e6>
 80076b8:	2302      	movs	r3, #2
 80076ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076be:	e0d4      	b.n	800786a <UART_SetConfig+0x2e6>
 80076c0:	2304      	movs	r3, #4
 80076c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076c6:	e0d0      	b.n	800786a <UART_SetConfig+0x2e6>
 80076c8:	2308      	movs	r3, #8
 80076ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ce:	e0cc      	b.n	800786a <UART_SetConfig+0x2e6>
 80076d0:	2310      	movs	r3, #16
 80076d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076d6:	e0c8      	b.n	800786a <UART_SetConfig+0x2e6>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a5e      	ldr	r2, [pc, #376]	; (8007858 <UART_SetConfig+0x2d4>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d125      	bne.n	800772e <UART_SetConfig+0x1aa>
 80076e2:	4b5b      	ldr	r3, [pc, #364]	; (8007850 <UART_SetConfig+0x2cc>)
 80076e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076ec:	2b30      	cmp	r3, #48	; 0x30
 80076ee:	d016      	beq.n	800771e <UART_SetConfig+0x19a>
 80076f0:	2b30      	cmp	r3, #48	; 0x30
 80076f2:	d818      	bhi.n	8007726 <UART_SetConfig+0x1a2>
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d00a      	beq.n	800770e <UART_SetConfig+0x18a>
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	d814      	bhi.n	8007726 <UART_SetConfig+0x1a2>
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <UART_SetConfig+0x182>
 8007700:	2b10      	cmp	r3, #16
 8007702:	d008      	beq.n	8007716 <UART_SetConfig+0x192>
 8007704:	e00f      	b.n	8007726 <UART_SetConfig+0x1a2>
 8007706:	2300      	movs	r3, #0
 8007708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800770c:	e0ad      	b.n	800786a <UART_SetConfig+0x2e6>
 800770e:	2302      	movs	r3, #2
 8007710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007714:	e0a9      	b.n	800786a <UART_SetConfig+0x2e6>
 8007716:	2304      	movs	r3, #4
 8007718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800771c:	e0a5      	b.n	800786a <UART_SetConfig+0x2e6>
 800771e:	2308      	movs	r3, #8
 8007720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007724:	e0a1      	b.n	800786a <UART_SetConfig+0x2e6>
 8007726:	2310      	movs	r3, #16
 8007728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800772c:	e09d      	b.n	800786a <UART_SetConfig+0x2e6>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a4a      	ldr	r2, [pc, #296]	; (800785c <UART_SetConfig+0x2d8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d125      	bne.n	8007784 <UART_SetConfig+0x200>
 8007738:	4b45      	ldr	r3, [pc, #276]	; (8007850 <UART_SetConfig+0x2cc>)
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007742:	2bc0      	cmp	r3, #192	; 0xc0
 8007744:	d016      	beq.n	8007774 <UART_SetConfig+0x1f0>
 8007746:	2bc0      	cmp	r3, #192	; 0xc0
 8007748:	d818      	bhi.n	800777c <UART_SetConfig+0x1f8>
 800774a:	2b80      	cmp	r3, #128	; 0x80
 800774c:	d00a      	beq.n	8007764 <UART_SetConfig+0x1e0>
 800774e:	2b80      	cmp	r3, #128	; 0x80
 8007750:	d814      	bhi.n	800777c <UART_SetConfig+0x1f8>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <UART_SetConfig+0x1d8>
 8007756:	2b40      	cmp	r3, #64	; 0x40
 8007758:	d008      	beq.n	800776c <UART_SetConfig+0x1e8>
 800775a:	e00f      	b.n	800777c <UART_SetConfig+0x1f8>
 800775c:	2300      	movs	r3, #0
 800775e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007762:	e082      	b.n	800786a <UART_SetConfig+0x2e6>
 8007764:	2302      	movs	r3, #2
 8007766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800776a:	e07e      	b.n	800786a <UART_SetConfig+0x2e6>
 800776c:	2304      	movs	r3, #4
 800776e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007772:	e07a      	b.n	800786a <UART_SetConfig+0x2e6>
 8007774:	2308      	movs	r3, #8
 8007776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800777a:	e076      	b.n	800786a <UART_SetConfig+0x2e6>
 800777c:	2310      	movs	r3, #16
 800777e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007782:	e072      	b.n	800786a <UART_SetConfig+0x2e6>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a35      	ldr	r2, [pc, #212]	; (8007860 <UART_SetConfig+0x2dc>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d12a      	bne.n	80077e4 <UART_SetConfig+0x260>
 800778e:	4b30      	ldr	r3, [pc, #192]	; (8007850 <UART_SetConfig+0x2cc>)
 8007790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800779c:	d01a      	beq.n	80077d4 <UART_SetConfig+0x250>
 800779e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077a2:	d81b      	bhi.n	80077dc <UART_SetConfig+0x258>
 80077a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077a8:	d00c      	beq.n	80077c4 <UART_SetConfig+0x240>
 80077aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ae:	d815      	bhi.n	80077dc <UART_SetConfig+0x258>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <UART_SetConfig+0x238>
 80077b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077b8:	d008      	beq.n	80077cc <UART_SetConfig+0x248>
 80077ba:	e00f      	b.n	80077dc <UART_SetConfig+0x258>
 80077bc:	2300      	movs	r3, #0
 80077be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077c2:	e052      	b.n	800786a <UART_SetConfig+0x2e6>
 80077c4:	2302      	movs	r3, #2
 80077c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ca:	e04e      	b.n	800786a <UART_SetConfig+0x2e6>
 80077cc:	2304      	movs	r3, #4
 80077ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d2:	e04a      	b.n	800786a <UART_SetConfig+0x2e6>
 80077d4:	2308      	movs	r3, #8
 80077d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077da:	e046      	b.n	800786a <UART_SetConfig+0x2e6>
 80077dc:	2310      	movs	r3, #16
 80077de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077e2:	e042      	b.n	800786a <UART_SetConfig+0x2e6>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a17      	ldr	r2, [pc, #92]	; (8007848 <UART_SetConfig+0x2c4>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d13a      	bne.n	8007864 <UART_SetConfig+0x2e0>
 80077ee:	4b18      	ldr	r3, [pc, #96]	; (8007850 <UART_SetConfig+0x2cc>)
 80077f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077fc:	d01a      	beq.n	8007834 <UART_SetConfig+0x2b0>
 80077fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007802:	d81b      	bhi.n	800783c <UART_SetConfig+0x2b8>
 8007804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007808:	d00c      	beq.n	8007824 <UART_SetConfig+0x2a0>
 800780a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800780e:	d815      	bhi.n	800783c <UART_SetConfig+0x2b8>
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <UART_SetConfig+0x298>
 8007814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007818:	d008      	beq.n	800782c <UART_SetConfig+0x2a8>
 800781a:	e00f      	b.n	800783c <UART_SetConfig+0x2b8>
 800781c:	2300      	movs	r3, #0
 800781e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007822:	e022      	b.n	800786a <UART_SetConfig+0x2e6>
 8007824:	2302      	movs	r3, #2
 8007826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800782a:	e01e      	b.n	800786a <UART_SetConfig+0x2e6>
 800782c:	2304      	movs	r3, #4
 800782e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007832:	e01a      	b.n	800786a <UART_SetConfig+0x2e6>
 8007834:	2308      	movs	r3, #8
 8007836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800783a:	e016      	b.n	800786a <UART_SetConfig+0x2e6>
 800783c:	2310      	movs	r3, #16
 800783e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007842:	e012      	b.n	800786a <UART_SetConfig+0x2e6>
 8007844:	efff69f3 	.word	0xefff69f3
 8007848:	40008000 	.word	0x40008000
 800784c:	40013800 	.word	0x40013800
 8007850:	40021000 	.word	0x40021000
 8007854:	40004400 	.word	0x40004400
 8007858:	40004800 	.word	0x40004800
 800785c:	40004c00 	.word	0x40004c00
 8007860:	40005000 	.word	0x40005000
 8007864:	2310      	movs	r3, #16
 8007866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a9f      	ldr	r2, [pc, #636]	; (8007aec <UART_SetConfig+0x568>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d17a      	bne.n	800796a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007878:	2b08      	cmp	r3, #8
 800787a:	d824      	bhi.n	80078c6 <UART_SetConfig+0x342>
 800787c:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <UART_SetConfig+0x300>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	080078a9 	.word	0x080078a9
 8007888:	080078c7 	.word	0x080078c7
 800788c:	080078b1 	.word	0x080078b1
 8007890:	080078c7 	.word	0x080078c7
 8007894:	080078b7 	.word	0x080078b7
 8007898:	080078c7 	.word	0x080078c7
 800789c:	080078c7 	.word	0x080078c7
 80078a0:	080078c7 	.word	0x080078c7
 80078a4:	080078bf 	.word	0x080078bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078a8:	f7fd fec2 	bl	8005630 <HAL_RCC_GetPCLK1Freq>
 80078ac:	61f8      	str	r0, [r7, #28]
        break;
 80078ae:	e010      	b.n	80078d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078b0:	4b8f      	ldr	r3, [pc, #572]	; (8007af0 <UART_SetConfig+0x56c>)
 80078b2:	61fb      	str	r3, [r7, #28]
        break;
 80078b4:	e00d      	b.n	80078d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078b6:	f7fd fe23 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 80078ba:	61f8      	str	r0, [r7, #28]
        break;
 80078bc:	e009      	b.n	80078d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078c2:	61fb      	str	r3, [r7, #28]
        break;
 80078c4:	e005      	b.n	80078d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80078d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 80fb 	beq.w	8007ad0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	4613      	mov	r3, r2
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	4413      	add	r3, r2
 80078e4:	69fa      	ldr	r2, [r7, #28]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d305      	bcc.n	80078f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078f0:	69fa      	ldr	r2, [r7, #28]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d903      	bls.n	80078fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078fc:	e0e8      	b.n	8007ad0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	2200      	movs	r2, #0
 8007902:	461c      	mov	r4, r3
 8007904:	4615      	mov	r5, r2
 8007906:	f04f 0200 	mov.w	r2, #0
 800790a:	f04f 0300 	mov.w	r3, #0
 800790e:	022b      	lsls	r3, r5, #8
 8007910:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007914:	0222      	lsls	r2, r4, #8
 8007916:	68f9      	ldr	r1, [r7, #12]
 8007918:	6849      	ldr	r1, [r1, #4]
 800791a:	0849      	lsrs	r1, r1, #1
 800791c:	2000      	movs	r0, #0
 800791e:	4688      	mov	r8, r1
 8007920:	4681      	mov	r9, r0
 8007922:	eb12 0a08 	adds.w	sl, r2, r8
 8007926:	eb43 0b09 	adc.w	fp, r3, r9
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	603b      	str	r3, [r7, #0]
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007938:	4650      	mov	r0, sl
 800793a:	4659      	mov	r1, fp
 800793c:	f7f9 f88e 	bl	8000a5c <__aeabi_uldivmod>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4613      	mov	r3, r2
 8007946:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800794e:	d308      	bcc.n	8007962 <UART_SetConfig+0x3de>
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007956:	d204      	bcs.n	8007962 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	60da      	str	r2, [r3, #12]
 8007960:	e0b6      	b.n	8007ad0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007968:	e0b2      	b.n	8007ad0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007972:	d15e      	bne.n	8007a32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007978:	2b08      	cmp	r3, #8
 800797a:	d828      	bhi.n	80079ce <UART_SetConfig+0x44a>
 800797c:	a201      	add	r2, pc, #4	; (adr r2, 8007984 <UART_SetConfig+0x400>)
 800797e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007982:	bf00      	nop
 8007984:	080079a9 	.word	0x080079a9
 8007988:	080079b1 	.word	0x080079b1
 800798c:	080079b9 	.word	0x080079b9
 8007990:	080079cf 	.word	0x080079cf
 8007994:	080079bf 	.word	0x080079bf
 8007998:	080079cf 	.word	0x080079cf
 800799c:	080079cf 	.word	0x080079cf
 80079a0:	080079cf 	.word	0x080079cf
 80079a4:	080079c7 	.word	0x080079c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079a8:	f7fd fe42 	bl	8005630 <HAL_RCC_GetPCLK1Freq>
 80079ac:	61f8      	str	r0, [r7, #28]
        break;
 80079ae:	e014      	b.n	80079da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079b0:	f7fd fe54 	bl	800565c <HAL_RCC_GetPCLK2Freq>
 80079b4:	61f8      	str	r0, [r7, #28]
        break;
 80079b6:	e010      	b.n	80079da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079b8:	4b4d      	ldr	r3, [pc, #308]	; (8007af0 <UART_SetConfig+0x56c>)
 80079ba:	61fb      	str	r3, [r7, #28]
        break;
 80079bc:	e00d      	b.n	80079da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079be:	f7fd fd9f 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 80079c2:	61f8      	str	r0, [r7, #28]
        break;
 80079c4:	e009      	b.n	80079da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ca:	61fb      	str	r3, [r7, #28]
        break;
 80079cc:	e005      	b.n	80079da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80079d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d077      	beq.n	8007ad0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	005a      	lsls	r2, r3, #1
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	085b      	lsrs	r3, r3, #1
 80079ea:	441a      	add	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	2b0f      	cmp	r3, #15
 80079fa:	d916      	bls.n	8007a2a <UART_SetConfig+0x4a6>
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a02:	d212      	bcs.n	8007a2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	f023 030f 	bic.w	r3, r3, #15
 8007a0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	085b      	lsrs	r3, r3, #1
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	f003 0307 	and.w	r3, r3, #7
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	8afb      	ldrh	r3, [r7, #22]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	8afa      	ldrh	r2, [r7, #22]
 8007a26:	60da      	str	r2, [r3, #12]
 8007a28:	e052      	b.n	8007ad0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a30:	e04e      	b.n	8007ad0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a36:	2b08      	cmp	r3, #8
 8007a38:	d827      	bhi.n	8007a8a <UART_SetConfig+0x506>
 8007a3a:	a201      	add	r2, pc, #4	; (adr r2, 8007a40 <UART_SetConfig+0x4bc>)
 8007a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a40:	08007a65 	.word	0x08007a65
 8007a44:	08007a6d 	.word	0x08007a6d
 8007a48:	08007a75 	.word	0x08007a75
 8007a4c:	08007a8b 	.word	0x08007a8b
 8007a50:	08007a7b 	.word	0x08007a7b
 8007a54:	08007a8b 	.word	0x08007a8b
 8007a58:	08007a8b 	.word	0x08007a8b
 8007a5c:	08007a8b 	.word	0x08007a8b
 8007a60:	08007a83 	.word	0x08007a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a64:	f7fd fde4 	bl	8005630 <HAL_RCC_GetPCLK1Freq>
 8007a68:	61f8      	str	r0, [r7, #28]
        break;
 8007a6a:	e014      	b.n	8007a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a6c:	f7fd fdf6 	bl	800565c <HAL_RCC_GetPCLK2Freq>
 8007a70:	61f8      	str	r0, [r7, #28]
        break;
 8007a72:	e010      	b.n	8007a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a74:	4b1e      	ldr	r3, [pc, #120]	; (8007af0 <UART_SetConfig+0x56c>)
 8007a76:	61fb      	str	r3, [r7, #28]
        break;
 8007a78:	e00d      	b.n	8007a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a7a:	f7fd fd41 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 8007a7e:	61f8      	str	r0, [r7, #28]
        break;
 8007a80:	e009      	b.n	8007a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a86:	61fb      	str	r3, [r7, #28]
        break;
 8007a88:	e005      	b.n	8007a96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a94:	bf00      	nop
    }

    if (pclk != 0U)
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d019      	beq.n	8007ad0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	085a      	lsrs	r2, r3, #1
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	441a      	add	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	2b0f      	cmp	r3, #15
 8007ab4:	d909      	bls.n	8007aca <UART_SetConfig+0x546>
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007abc:	d205      	bcs.n	8007aca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	60da      	str	r2, [r3, #12]
 8007ac8:	e002      	b.n	8007ad0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007adc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3728      	adds	r7, #40	; 0x28
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aea:	bf00      	nop
 8007aec:	40008000 	.word	0x40008000
 8007af0:	00f42400 	.word	0x00f42400

08007af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00a      	beq.n	8007b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00a      	beq.n	8007b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	f003 0308 	and.w	r3, r3, #8
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	430a      	orrs	r2, r1
 8007b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00a      	beq.n	8007ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d01a      	beq.n	8007c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bf2:	d10a      	bne.n	8007c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	605a      	str	r2, [r3, #4]
  }
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c48:	f7fc fbfc 	bl	8004444 <HAL_GetTick>
 8007c4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0308 	and.w	r3, r3, #8
 8007c58:	2b08      	cmp	r3, #8
 8007c5a:	d10e      	bne.n	8007c7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f82d 	bl	8007cca <UART_WaitOnFlagUntilTimeout>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e023      	b.n	8007cc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d10e      	bne.n	8007ca6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f817 	bl	8007cca <UART_WaitOnFlagUntilTimeout>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e00d      	b.n	8007cc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b09c      	sub	sp, #112	; 0x70
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	603b      	str	r3, [r7, #0]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cda:	e0a5      	b.n	8007e28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ce2:	f000 80a1 	beq.w	8007e28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ce6:	f7fc fbad 	bl	8004444 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d302      	bcc.n	8007cfc <UART_WaitOnFlagUntilTimeout+0x32>
 8007cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d13e      	bne.n	8007d7a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d10:	667b      	str	r3, [r7, #100]	; 0x64
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d22:	e841 2300 	strex	r3, r2, [r1]
 8007d26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e6      	bne.n	8007cfc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3308      	adds	r3, #8
 8007d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	f023 0301 	bic.w	r3, r3, #1
 8007d44:	663b      	str	r3, [r7, #96]	; 0x60
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1e5      	bne.n	8007d2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2220      	movs	r2, #32
 8007d66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e067      	b.n	8007e4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0304 	and.w	r3, r3, #4
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d04f      	beq.n	8007e28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d96:	d147      	bne.n	8007e28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007da0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	e853 3f00 	ldrex	r3, [r3]
 8007dae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007db6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dc8:	e841 2300 	strex	r3, r2, [r1]
 8007dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e6      	bne.n	8007da2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3308      	adds	r3, #8
 8007dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	613b      	str	r3, [r7, #16]
   return(result);
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f023 0301 	bic.w	r3, r3, #1
 8007dea:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3308      	adds	r3, #8
 8007df2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007df4:	623a      	str	r2, [r7, #32]
 8007df6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	69f9      	ldr	r1, [r7, #28]
 8007dfa:	6a3a      	ldr	r2, [r7, #32]
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e5      	bne.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2220      	movs	r2, #32
 8007e12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2220      	movs	r2, #32
 8007e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e010      	b.n	8007e4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	69da      	ldr	r2, [r3, #28]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	4013      	ands	r3, r2
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	bf0c      	ite	eq
 8007e38:	2301      	moveq	r3, #1
 8007e3a:	2300      	movne	r3, #0
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	461a      	mov	r2, r3
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	f43f af4a 	beq.w	8007cdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3770      	adds	r7, #112	; 0x70
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
	...

08007e54 <__NVIC_SetPriority>:
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	6039      	str	r1, [r7, #0]
 8007e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	db0a      	blt.n	8007e7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	490c      	ldr	r1, [pc, #48]	; (8007ea0 <__NVIC_SetPriority+0x4c>)
 8007e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e72:	0112      	lsls	r2, r2, #4
 8007e74:	b2d2      	uxtb	r2, r2
 8007e76:	440b      	add	r3, r1
 8007e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e7c:	e00a      	b.n	8007e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	4908      	ldr	r1, [pc, #32]	; (8007ea4 <__NVIC_SetPriority+0x50>)
 8007e84:	79fb      	ldrb	r3, [r7, #7]
 8007e86:	f003 030f 	and.w	r3, r3, #15
 8007e8a:	3b04      	subs	r3, #4
 8007e8c:	0112      	lsls	r2, r2, #4
 8007e8e:	b2d2      	uxtb	r2, r2
 8007e90:	440b      	add	r3, r1
 8007e92:	761a      	strb	r2, [r3, #24]
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	e000e100 	.word	0xe000e100
 8007ea4:	e000ed00 	.word	0xe000ed00

08007ea8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007eac:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <SysTick_Handler+0x1c>)
 8007eae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007eb0:	f002 fb00 	bl	800a4b4 <xTaskGetSchedulerState>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d001      	beq.n	8007ebe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007eba:	f003 fb2d 	bl	800b518 <xPortSysTickHandler>
  }
}
 8007ebe:	bf00      	nop
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	e000e010 	.word	0xe000e010

08007ec8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ecc:	2100      	movs	r1, #0
 8007ece:	f06f 0004 	mvn.w	r0, #4
 8007ed2:	f7ff ffbf 	bl	8007e54 <__NVIC_SetPriority>
#endif
}
 8007ed6:	bf00      	nop
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ee2:	f3ef 8305 	mrs	r3, IPSR
 8007ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ee8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007eee:	f06f 0305 	mvn.w	r3, #5
 8007ef2:	607b      	str	r3, [r7, #4]
 8007ef4:	e00c      	b.n	8007f10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007ef6:	4b0a      	ldr	r3, [pc, #40]	; (8007f20 <osKernelInitialize+0x44>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d105      	bne.n	8007f0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007efe:	4b08      	ldr	r3, [pc, #32]	; (8007f20 <osKernelInitialize+0x44>)
 8007f00:	2201      	movs	r2, #1
 8007f02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	607b      	str	r3, [r7, #4]
 8007f08:	e002      	b.n	8007f10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f10:	687b      	ldr	r3, [r7, #4]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	20000274 	.word	0x20000274

08007f24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f2a:	f3ef 8305 	mrs	r3, IPSR
 8007f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8007f30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f36:	f06f 0305 	mvn.w	r3, #5
 8007f3a:	607b      	str	r3, [r7, #4]
 8007f3c:	e010      	b.n	8007f60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f3e:	4b0b      	ldr	r3, [pc, #44]	; (8007f6c <osKernelStart+0x48>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d109      	bne.n	8007f5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f46:	f7ff ffbf 	bl	8007ec8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f4a:	4b08      	ldr	r3, [pc, #32]	; (8007f6c <osKernelStart+0x48>)
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f50:	f001 fe1e 	bl	8009b90 <vTaskStartScheduler>
      stat = osOK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	607b      	str	r3, [r7, #4]
 8007f58:	e002      	b.n	8007f60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f60:	687b      	ldr	r3, [r7, #4]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000274 	.word	0x20000274

08007f70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b08e      	sub	sp, #56	; 0x38
 8007f74:	af04      	add	r7, sp, #16
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f80:	f3ef 8305 	mrs	r3, IPSR
 8007f84:	617b      	str	r3, [r7, #20]
  return(result);
 8007f86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d17e      	bne.n	800808a <osThreadNew+0x11a>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d07b      	beq.n	800808a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007f92:	2380      	movs	r3, #128	; 0x80
 8007f94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007f96:	2318      	movs	r3, #24
 8007f98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fa2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d045      	beq.n	8008036 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <osThreadNew+0x48>
        name = attr->name;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d008      	beq.n	8007fde <osThreadNew+0x6e>
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	2b38      	cmp	r3, #56	; 0x38
 8007fd0:	d805      	bhi.n	8007fde <osThreadNew+0x6e>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <osThreadNew+0x72>
        return (NULL);
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e054      	b.n	800808c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	089b      	lsrs	r3, r3, #2
 8007ff0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00e      	beq.n	8008018 <osThreadNew+0xa8>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	2bbb      	cmp	r3, #187	; 0xbb
 8008000:	d90a      	bls.n	8008018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008006:	2b00      	cmp	r3, #0
 8008008:	d006      	beq.n	8008018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <osThreadNew+0xa8>
        mem = 1;
 8008012:	2301      	movs	r3, #1
 8008014:	61bb      	str	r3, [r7, #24]
 8008016:	e010      	b.n	800803a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10c      	bne.n	800803a <osThreadNew+0xca>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d108      	bne.n	800803a <osThreadNew+0xca>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d104      	bne.n	800803a <osThreadNew+0xca>
          mem = 0;
 8008030:	2300      	movs	r3, #0
 8008032:	61bb      	str	r3, [r7, #24]
 8008034:	e001      	b.n	800803a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008036:	2300      	movs	r3, #0
 8008038:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d110      	bne.n	8008062 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008048:	9202      	str	r2, [sp, #8]
 800804a:	9301      	str	r3, [sp, #4]
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	6a3a      	ldr	r2, [r7, #32]
 8008054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f001 fbae 	bl	80097b8 <xTaskCreateStatic>
 800805c:	4603      	mov	r3, r0
 800805e:	613b      	str	r3, [r7, #16]
 8008060:	e013      	b.n	800808a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d110      	bne.n	800808a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	b29a      	uxth	r2, r3
 800806c:	f107 0310 	add.w	r3, r7, #16
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f001 fbf9 	bl	8009872 <xTaskCreate>
 8008080:	4603      	mov	r3, r0
 8008082:	2b01      	cmp	r3, #1
 8008084:	d001      	beq.n	800808a <osThreadNew+0x11a>
            hTask = NULL;
 8008086:	2300      	movs	r3, #0
 8008088:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800808a:	693b      	ldr	r3, [r7, #16]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3728      	adds	r7, #40	; 0x28
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800809c:	f3ef 8305 	mrs	r3, IPSR
 80080a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80080a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <osDelay+0x1c>
    stat = osErrorISR;
 80080a8:	f06f 0305 	mvn.w	r3, #5
 80080ac:	60fb      	str	r3, [r7, #12]
 80080ae:	e007      	b.n	80080c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f001 fd34 	bl	8009b28 <vTaskDelay>
    }
  }

  return (stat);
 80080c0:	68fb      	ldr	r3, [r7, #12]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4a07      	ldr	r2, [pc, #28]	; (80080f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80080dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	4a06      	ldr	r2, [pc, #24]	; (80080fc <vApplicationGetIdleTaskMemory+0x30>)
 80080e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2280      	movs	r2, #128	; 0x80
 80080e8:	601a      	str	r2, [r3, #0]
}
 80080ea:	bf00      	nop
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	20000278 	.word	0x20000278
 80080fc:	20000334 	.word	0x20000334

08008100 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4a07      	ldr	r2, [pc, #28]	; (800812c <vApplicationGetTimerTaskMemory+0x2c>)
 8008110:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	4a06      	ldr	r2, [pc, #24]	; (8008130 <vApplicationGetTimerTaskMemory+0x30>)
 8008116:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800811e:	601a      	str	r2, [r3, #0]
}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	20000534 	.word	0x20000534
 8008130:	200005f0 	.word	0x200005f0

08008134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f103 0208 	add.w	r2, r3, #8
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800814c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f103 0208 	add.w	r2, r3, #8
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f103 0208 	add.w	r2, r3, #8
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008182:	bf00      	nop
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800818e:	b480      	push	{r7}
 8008190:	b085      	sub	sp, #20
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	601a      	str	r2, [r3, #0]
}
 80081ca:	bf00      	nop
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081d6:	b480      	push	{r7}
 80081d8:	b085      	sub	sp, #20
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081ec:	d103      	bne.n	80081f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	e00c      	b.n	8008210 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3308      	adds	r3, #8
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	e002      	b.n	8008204 <vListInsert+0x2e>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	429a      	cmp	r2, r3
 800820e:	d2f6      	bcs.n	80081fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	1c5a      	adds	r2, r3, #1
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	601a      	str	r2, [r3, #0]
}
 800823c:	bf00      	nop
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	6892      	ldr	r2, [r2, #8]
 800825e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	6852      	ldr	r2, [r2, #4]
 8008268:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	429a      	cmp	r2, r3
 8008272:	d103      	bne.n	800827c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	1e5a      	subs	r2, r3, #1
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10a      	bne.n	80082c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80082c2:	bf00      	nop
 80082c4:	e7fe      	b.n	80082c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082c6:	f003 f895 	bl	800b3f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d2:	68f9      	ldr	r1, [r7, #12]
 80082d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082d6:	fb01 f303 	mul.w	r3, r1, r3
 80082da:	441a      	add	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f6:	3b01      	subs	r3, #1
 80082f8:	68f9      	ldr	r1, [r7, #12]
 80082fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082fc:	fb01 f303 	mul.w	r3, r1, r3
 8008300:	441a      	add	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	22ff      	movs	r2, #255	; 0xff
 800830a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	22ff      	movs	r2, #255	; 0xff
 8008312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d114      	bne.n	8008346 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d01a      	beq.n	800835a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	3310      	adds	r3, #16
 8008328:	4618      	mov	r0, r3
 800832a:	f001 fecb 	bl	800a0c4 <xTaskRemoveFromEventList>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d012      	beq.n	800835a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008334:	4b0c      	ldr	r3, [pc, #48]	; (8008368 <xQueueGenericReset+0xcc>)
 8008336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	e009      	b.n	800835a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3310      	adds	r3, #16
 800834a:	4618      	mov	r0, r3
 800834c:	f7ff fef2 	bl	8008134 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	3324      	adds	r3, #36	; 0x24
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff feed 	bl	8008134 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800835a:	f003 f87b 	bl	800b454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800835e:	2301      	movs	r3, #1
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	e000ed04 	.word	0xe000ed04

0800836c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800836c:	b580      	push	{r7, lr}
 800836e:	b08e      	sub	sp, #56	; 0x38
 8008370:	af02      	add	r7, sp, #8
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10a      	bne.n	8008396 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008392:	bf00      	nop
 8008394:	e7fe      	b.n	8008394 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10a      	bne.n	80083b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083ae:	bf00      	nop
 80083b0:	e7fe      	b.n	80083b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d002      	beq.n	80083be <xQueueGenericCreateStatic+0x52>
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <xQueueGenericCreateStatic+0x56>
 80083be:	2301      	movs	r3, #1
 80083c0:	e000      	b.n	80083c4 <xQueueGenericCreateStatic+0x58>
 80083c2:	2300      	movs	r3, #0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	623b      	str	r3, [r7, #32]
}
 80083da:	bf00      	nop
 80083dc:	e7fe      	b.n	80083dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d102      	bne.n	80083ea <xQueueGenericCreateStatic+0x7e>
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <xQueueGenericCreateStatic+0x82>
 80083ea:	2301      	movs	r3, #1
 80083ec:	e000      	b.n	80083f0 <xQueueGenericCreateStatic+0x84>
 80083ee:	2300      	movs	r3, #0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10a      	bne.n	800840a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	61fb      	str	r3, [r7, #28]
}
 8008406:	bf00      	nop
 8008408:	e7fe      	b.n	8008408 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800840a:	2350      	movs	r3, #80	; 0x50
 800840c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2b50      	cmp	r3, #80	; 0x50
 8008412:	d00a      	beq.n	800842a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	61bb      	str	r3, [r7, #24]
}
 8008426:	bf00      	nop
 8008428:	e7fe      	b.n	8008428 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800842a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00d      	beq.n	8008452 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800843e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	4613      	mov	r3, r2
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	68b9      	ldr	r1, [r7, #8]
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 f83f 	bl	80084d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008454:	4618      	mov	r0, r3
 8008456:	3730      	adds	r7, #48	; 0x30
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08a      	sub	sp, #40	; 0x28
 8008460:	af02      	add	r7, sp, #8
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	4613      	mov	r3, r2
 8008468:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	613b      	str	r3, [r7, #16]
}
 8008482:	bf00      	nop
 8008484:	e7fe      	b.n	8008484 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	fb02 f303 	mul.w	r3, r2, r3
 800848e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	3350      	adds	r3, #80	; 0x50
 8008494:	4618      	mov	r0, r3
 8008496:	f003 f8cf 	bl	800b638 <pvPortMalloc>
 800849a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d011      	beq.n	80084c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	3350      	adds	r3, #80	; 0x50
 80084aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084b4:	79fa      	ldrb	r2, [r7, #7]
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	4613      	mov	r3, r2
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 f805 	bl	80084d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084c6:	69bb      	ldr	r3, [r7, #24]
	}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3720      	adds	r7, #32
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d103      	bne.n	80084ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	69ba      	ldr	r2, [r7, #24]
 80084e8:	601a      	str	r2, [r3, #0]
 80084ea:	e002      	b.n	80084f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084fe:	2101      	movs	r1, #1
 8008500:	69b8      	ldr	r0, [r7, #24]
 8008502:	f7ff fecb 	bl	800829c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	78fa      	ldrb	r2, [r7, #3]
 800850a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800850e:	bf00      	nop
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008516:	b580      	push	{r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00e      	beq.n	8008542 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008536:	2300      	movs	r3, #0
 8008538:	2200      	movs	r2, #0
 800853a:	2100      	movs	r1, #0
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f81d 	bl	800857c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800854a:	b580      	push	{r7, lr}
 800854c:	b086      	sub	sp, #24
 800854e:	af00      	add	r7, sp, #0
 8008550:	4603      	mov	r3, r0
 8008552:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008554:	2301      	movs	r3, #1
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	2300      	movs	r3, #0
 800855a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800855c:	79fb      	ldrb	r3, [r7, #7]
 800855e:	461a      	mov	r2, r3
 8008560:	6939      	ldr	r1, [r7, #16]
 8008562:	6978      	ldr	r0, [r7, #20]
 8008564:	f7ff ff7a 	bl	800845c <xQueueGenericCreate>
 8008568:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff ffd3 	bl	8008516 <prvInitialiseMutex>

		return xNewQueue;
 8008570:	68fb      	ldr	r3, [r7, #12]
	}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08e      	sub	sp, #56	; 0x38
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800858a:	2300      	movs	r3, #0
 800858c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10a      	bne.n	80085ae <xQueueGenericSend+0x32>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085aa:	bf00      	nop
 80085ac:	e7fe      	b.n	80085ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d103      	bne.n	80085bc <xQueueGenericSend+0x40>
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <xQueueGenericSend+0x44>
 80085bc:	2301      	movs	r3, #1
 80085be:	e000      	b.n	80085c2 <xQueueGenericSend+0x46>
 80085c0:	2300      	movs	r3, #0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10a      	bne.n	80085dc <xQueueGenericSend+0x60>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d103      	bne.n	80085ea <xQueueGenericSend+0x6e>
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d101      	bne.n	80085ee <xQueueGenericSend+0x72>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e000      	b.n	80085f0 <xQueueGenericSend+0x74>
 80085ee:	2300      	movs	r3, #0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10a      	bne.n	800860a <xQueueGenericSend+0x8e>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	623b      	str	r3, [r7, #32]
}
 8008606:	bf00      	nop
 8008608:	e7fe      	b.n	8008608 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800860a:	f001 ff53 	bl	800a4b4 <xTaskGetSchedulerState>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d102      	bne.n	800861a <xQueueGenericSend+0x9e>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <xQueueGenericSend+0xa2>
 800861a:	2301      	movs	r3, #1
 800861c:	e000      	b.n	8008620 <xQueueGenericSend+0xa4>
 800861e:	2300      	movs	r3, #0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <xQueueGenericSend+0xbe>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	61fb      	str	r3, [r7, #28]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800863a:	f002 fedb 	bl	800b3f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008646:	429a      	cmp	r2, r3
 8008648:	d302      	bcc.n	8008650 <xQueueGenericSend+0xd4>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b02      	cmp	r3, #2
 800864e:	d129      	bne.n	80086a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	68b9      	ldr	r1, [r7, #8]
 8008654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008656:	f000 fbbb 	bl	8008dd0 <prvCopyDataToQueue>
 800865a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	2b00      	cmp	r3, #0
 8008662:	d010      	beq.n	8008686 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008666:	3324      	adds	r3, #36	; 0x24
 8008668:	4618      	mov	r0, r3
 800866a:	f001 fd2b 	bl	800a0c4 <xTaskRemoveFromEventList>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d013      	beq.n	800869c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008674:	4b3f      	ldr	r3, [pc, #252]	; (8008774 <xQueueGenericSend+0x1f8>)
 8008676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	e00a      	b.n	800869c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	2b00      	cmp	r3, #0
 800868a:	d007      	beq.n	800869c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800868c:	4b39      	ldr	r3, [pc, #228]	; (8008774 <xQueueGenericSend+0x1f8>)
 800868e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800869c:	f002 feda 	bl	800b454 <vPortExitCritical>
				return pdPASS;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e063      	b.n	800876c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d103      	bne.n	80086b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086aa:	f002 fed3 	bl	800b454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80086ae:	2300      	movs	r3, #0
 80086b0:	e05c      	b.n	800876c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d106      	bne.n	80086c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086b8:	f107 0314 	add.w	r3, r7, #20
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 fd8b 	bl	800a1d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086c2:	2301      	movs	r3, #1
 80086c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086c6:	f002 fec5 	bl	800b454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086ca:	f001 fad1 	bl	8009c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086ce:	f002 fe91 	bl	800b3f4 <vPortEnterCritical>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086d8:	b25b      	sxtb	r3, r3
 80086da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086de:	d103      	bne.n	80086e8 <xQueueGenericSend+0x16c>
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086ee:	b25b      	sxtb	r3, r3
 80086f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086f4:	d103      	bne.n	80086fe <xQueueGenericSend+0x182>
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086fe:	f002 fea9 	bl	800b454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008702:	1d3a      	adds	r2, r7, #4
 8008704:	f107 0314 	add.w	r3, r7, #20
 8008708:	4611      	mov	r1, r2
 800870a:	4618      	mov	r0, r3
 800870c:	f001 fd7a 	bl	800a204 <xTaskCheckForTimeOut>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d124      	bne.n	8008760 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008718:	f000 fc52 	bl	8008fc0 <prvIsQueueFull>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d018      	beq.n	8008754 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008724:	3310      	adds	r3, #16
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	4611      	mov	r1, r2
 800872a:	4618      	mov	r0, r3
 800872c:	f001 fc7a 	bl	800a024 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008732:	f000 fbdd 	bl	8008ef0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008736:	f001 faa9 	bl	8009c8c <xTaskResumeAll>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	f47f af7c 	bne.w	800863a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008742:	4b0c      	ldr	r3, [pc, #48]	; (8008774 <xQueueGenericSend+0x1f8>)
 8008744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	e772      	b.n	800863a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008756:	f000 fbcb 	bl	8008ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800875a:	f001 fa97 	bl	8009c8c <xTaskResumeAll>
 800875e:	e76c      	b.n	800863a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008762:	f000 fbc5 	bl	8008ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008766:	f001 fa91 	bl	8009c8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800876a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800876c:	4618      	mov	r0, r3
 800876e:	3738      	adds	r7, #56	; 0x38
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	e000ed04 	.word	0xe000ed04

08008778 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b090      	sub	sp, #64	; 0x40
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800878a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10a      	bne.n	80087a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d103      	bne.n	80087b4 <xQueueGenericSendFromISR+0x3c>
 80087ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <xQueueGenericSendFromISR+0x40>
 80087b4:	2301      	movs	r3, #1
 80087b6:	e000      	b.n	80087ba <xQueueGenericSendFromISR+0x42>
 80087b8:	2300      	movs	r3, #0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10a      	bne.n	80087d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087d0:	bf00      	nop
 80087d2:	e7fe      	b.n	80087d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d103      	bne.n	80087e2 <xQueueGenericSendFromISR+0x6a>
 80087da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <xQueueGenericSendFromISR+0x6e>
 80087e2:	2301      	movs	r3, #1
 80087e4:	e000      	b.n	80087e8 <xQueueGenericSendFromISR+0x70>
 80087e6:	2300      	movs	r3, #0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	623b      	str	r3, [r7, #32]
}
 80087fe:	bf00      	nop
 8008800:	e7fe      	b.n	8008800 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008802:	f002 fed9 	bl	800b5b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008806:	f3ef 8211 	mrs	r2, BASEPRI
 800880a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	61fa      	str	r2, [r7, #28]
 800881c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800881e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008820:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882a:	429a      	cmp	r2, r3
 800882c:	d302      	bcc.n	8008834 <xQueueGenericSendFromISR+0xbc>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b02      	cmp	r3, #2
 8008832:	d12f      	bne.n	8008894 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800883a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008842:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800884a:	f000 fac1 	bl	8008dd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800884e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008856:	d112      	bne.n	800887e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885c:	2b00      	cmp	r3, #0
 800885e:	d016      	beq.n	800888e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	3324      	adds	r3, #36	; 0x24
 8008864:	4618      	mov	r0, r3
 8008866:	f001 fc2d 	bl	800a0c4 <xTaskRemoveFromEventList>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00e      	beq.n	800888e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00b      	beq.n	800888e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	e007      	b.n	800888e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800887e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008882:	3301      	adds	r3, #1
 8008884:	b2db      	uxtb	r3, r3
 8008886:	b25a      	sxtb	r2, r3
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800888e:	2301      	movs	r3, #1
 8008890:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008892:	e001      	b.n	8008898 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008894:	2300      	movs	r3, #0
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80088a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3740      	adds	r7, #64	; 0x40
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b08e      	sub	sp, #56	; 0x38
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	623b      	str	r3, [r7, #32]
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00a      	beq.n	80088f6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	61fb      	str	r3, [r7, #28]
}
 80088f2:	bf00      	nop
 80088f4:	e7fe      	b.n	80088f4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d103      	bne.n	8008906 <xQueueGiveFromISR+0x58>
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <xQueueGiveFromISR+0x5c>
 8008906:	2301      	movs	r3, #1
 8008908:	e000      	b.n	800890c <xQueueGiveFromISR+0x5e>
 800890a:	2300      	movs	r3, #0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10a      	bne.n	8008926 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	61bb      	str	r3, [r7, #24]
}
 8008922:	bf00      	nop
 8008924:	e7fe      	b.n	8008924 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008926:	f002 fe47 	bl	800b5b8 <vPortValidateInterruptPriority>
	__asm volatile
 800892a:	f3ef 8211 	mrs	r2, BASEPRI
 800892e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	617a      	str	r2, [r7, #20]
 8008940:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008942:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008944:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800894c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008952:	429a      	cmp	r2, r3
 8008954:	d22b      	bcs.n	80089ae <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800895c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	1c5a      	adds	r2, r3, #1
 8008964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008966:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008968:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800896c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008970:	d112      	bne.n	8008998 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	2b00      	cmp	r3, #0
 8008978:	d016      	beq.n	80089a8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	3324      	adds	r3, #36	; 0x24
 800897e:	4618      	mov	r0, r3
 8008980:	f001 fba0 	bl	800a0c4 <xTaskRemoveFromEventList>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00e      	beq.n	80089a8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2201      	movs	r2, #1
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	e007      	b.n	80089a8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800899c:	3301      	adds	r3, #1
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	b25a      	sxtb	r2, r3
 80089a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80089a8:	2301      	movs	r3, #1
 80089aa:	637b      	str	r3, [r7, #52]	; 0x34
 80089ac:	e001      	b.n	80089b2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	637b      	str	r3, [r7, #52]	; 0x34
 80089b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f383 8811 	msr	BASEPRI, r3
}
 80089bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3738      	adds	r7, #56	; 0x38
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08c      	sub	sp, #48	; 0x30
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089d4:	2300      	movs	r3, #0
 80089d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10a      	bne.n	80089f8 <xQueueReceive+0x30>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	623b      	str	r3, [r7, #32]
}
 80089f4:	bf00      	nop
 80089f6:	e7fe      	b.n	80089f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d103      	bne.n	8008a06 <xQueueReceive+0x3e>
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <xQueueReceive+0x42>
 8008a06:	2301      	movs	r3, #1
 8008a08:	e000      	b.n	8008a0c <xQueueReceive+0x44>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10a      	bne.n	8008a26 <xQueueReceive+0x5e>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	61fb      	str	r3, [r7, #28]
}
 8008a22:	bf00      	nop
 8008a24:	e7fe      	b.n	8008a24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a26:	f001 fd45 	bl	800a4b4 <xTaskGetSchedulerState>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d102      	bne.n	8008a36 <xQueueReceive+0x6e>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <xQueueReceive+0x72>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e000      	b.n	8008a3c <xQueueReceive+0x74>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <xQueueReceive+0x8e>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	61bb      	str	r3, [r7, #24]
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a56:	f002 fccd 	bl	800b3f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d01f      	beq.n	8008aa6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a66:	68b9      	ldr	r1, [r7, #8]
 8008a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a6a:	f000 fa1b 	bl	8008ea4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	1e5a      	subs	r2, r3, #1
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00f      	beq.n	8008a9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	3310      	adds	r3, #16
 8008a82:	4618      	mov	r0, r3
 8008a84:	f001 fb1e 	bl	800a0c4 <xTaskRemoveFromEventList>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d007      	beq.n	8008a9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a8e:	4b3d      	ldr	r3, [pc, #244]	; (8008b84 <xQueueReceive+0x1bc>)
 8008a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a9e:	f002 fcd9 	bl	800b454 <vPortExitCritical>
				return pdPASS;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e069      	b.n	8008b7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d103      	bne.n	8008ab4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008aac:	f002 fcd2 	bl	800b454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e062      	b.n	8008b7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d106      	bne.n	8008ac8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008aba:	f107 0310 	add.w	r3, r7, #16
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f001 fb8a 	bl	800a1d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ac8:	f002 fcc4 	bl	800b454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008acc:	f001 f8d0 	bl	8009c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ad0:	f002 fc90 	bl	800b3f4 <vPortEnterCritical>
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ada:	b25b      	sxtb	r3, r3
 8008adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ae0:	d103      	bne.n	8008aea <xQueueReceive+0x122>
 8008ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008af0:	b25b      	sxtb	r3, r3
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008af6:	d103      	bne.n	8008b00 <xQueueReceive+0x138>
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b00:	f002 fca8 	bl	800b454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b04:	1d3a      	adds	r2, r7, #4
 8008b06:	f107 0310 	add.w	r3, r7, #16
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f001 fb79 	bl	800a204 <xTaskCheckForTimeOut>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d123      	bne.n	8008b60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b1a:	f000 fa3b 	bl	8008f94 <prvIsQueueEmpty>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d017      	beq.n	8008b54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b26:	3324      	adds	r3, #36	; 0x24
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	4611      	mov	r1, r2
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 fa79 	bl	800a024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b34:	f000 f9dc 	bl	8008ef0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b38:	f001 f8a8 	bl	8009c8c <xTaskResumeAll>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d189      	bne.n	8008a56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008b42:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <xQueueReceive+0x1bc>)
 8008b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b48:	601a      	str	r2, [r3, #0]
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	e780      	b.n	8008a56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b56:	f000 f9cb 	bl	8008ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b5a:	f001 f897 	bl	8009c8c <xTaskResumeAll>
 8008b5e:	e77a      	b.n	8008a56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b62:	f000 f9c5 	bl	8008ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b66:	f001 f891 	bl	8009c8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b6c:	f000 fa12 	bl	8008f94 <prvIsQueueEmpty>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f43f af6f 	beq.w	8008a56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3730      	adds	r7, #48	; 0x30
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	e000ed04 	.word	0xe000ed04

08008b88 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08e      	sub	sp, #56	; 0x38
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b92:	2300      	movs	r3, #0
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10a      	bne.n	8008bba <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	623b      	str	r3, [r7, #32]
}
 8008bb6:	bf00      	nop
 8008bb8:	e7fe      	b.n	8008bb8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00a      	beq.n	8008bd8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	61fb      	str	r3, [r7, #28]
}
 8008bd4:	bf00      	nop
 8008bd6:	e7fe      	b.n	8008bd6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bd8:	f001 fc6c 	bl	800a4b4 <xTaskGetSchedulerState>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d102      	bne.n	8008be8 <xQueueSemaphoreTake+0x60>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <xQueueSemaphoreTake+0x64>
 8008be8:	2301      	movs	r3, #1
 8008bea:	e000      	b.n	8008bee <xQueueSemaphoreTake+0x66>
 8008bec:	2300      	movs	r3, #0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10a      	bne.n	8008c08 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	61bb      	str	r3, [r7, #24]
}
 8008c04:	bf00      	nop
 8008c06:	e7fe      	b.n	8008c06 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c08:	f002 fbf4 	bl	800b3f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c10:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d024      	beq.n	8008c62 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	1e5a      	subs	r2, r3, #1
 8008c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d104      	bne.n	8008c32 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008c28:	f001 fdba 	bl	800a7a0 <pvTaskIncrementMutexHeldCount>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c30:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00f      	beq.n	8008c5a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3c:	3310      	adds	r3, #16
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 fa40 	bl	800a0c4 <xTaskRemoveFromEventList>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d007      	beq.n	8008c5a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c4a:	4b54      	ldr	r3, [pc, #336]	; (8008d9c <xQueueSemaphoreTake+0x214>)
 8008c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c50:	601a      	str	r2, [r3, #0]
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c5a:	f002 fbfb 	bl	800b454 <vPortExitCritical>
				return pdPASS;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e097      	b.n	8008d92 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d111      	bne.n	8008c8c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00a      	beq.n	8008c84 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	617b      	str	r3, [r7, #20]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008c84:	f002 fbe6 	bl	800b454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	e082      	b.n	8008d92 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d106      	bne.n	8008ca0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c92:	f107 030c 	add.w	r3, r7, #12
 8008c96:	4618      	mov	r0, r3
 8008c98:	f001 fa9e 	bl	800a1d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ca0:	f002 fbd8 	bl	800b454 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ca4:	f000 ffe4 	bl	8009c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ca8:	f002 fba4 	bl	800b3f4 <vPortEnterCritical>
 8008cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cb2:	b25b      	sxtb	r3, r3
 8008cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cb8:	d103      	bne.n	8008cc2 <xQueueSemaphoreTake+0x13a>
 8008cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cc8:	b25b      	sxtb	r3, r3
 8008cca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cce:	d103      	bne.n	8008cd8 <xQueueSemaphoreTake+0x150>
 8008cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cd8:	f002 fbbc 	bl	800b454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cdc:	463a      	mov	r2, r7
 8008cde:	f107 030c 	add.w	r3, r7, #12
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f001 fa8d 	bl	800a204 <xTaskCheckForTimeOut>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d132      	bne.n	8008d56 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cf2:	f000 f94f 	bl	8008f94 <prvIsQueueEmpty>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d026      	beq.n	8008d4a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d109      	bne.n	8008d18 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008d04:	f002 fb76 	bl	800b3f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 fbef 	bl	800a4f0 <xTaskPriorityInherit>
 8008d12:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008d14:	f002 fb9e 	bl	800b454 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1a:	3324      	adds	r3, #36	; 0x24
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	4611      	mov	r1, r2
 8008d20:	4618      	mov	r0, r3
 8008d22:	f001 f97f 	bl	800a024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d28:	f000 f8e2 	bl	8008ef0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d2c:	f000 ffae 	bl	8009c8c <xTaskResumeAll>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f47f af68 	bne.w	8008c08 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008d38:	4b18      	ldr	r3, [pc, #96]	; (8008d9c <xQueueSemaphoreTake+0x214>)
 8008d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	e75e      	b.n	8008c08 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008d4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d4c:	f000 f8d0 	bl	8008ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d50:	f000 ff9c 	bl	8009c8c <xTaskResumeAll>
 8008d54:	e758      	b.n	8008c08 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008d56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d58:	f000 f8ca 	bl	8008ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d5c:	f000 ff96 	bl	8009c8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d62:	f000 f917 	bl	8008f94 <prvIsQueueEmpty>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f43f af4d 	beq.w	8008c08 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00d      	beq.n	8008d90 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008d74:	f002 fb3e 	bl	800b3f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d7a:	f000 f811 	bl	8008da0 <prvGetDisinheritPriorityAfterTimeout>
 8008d7e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d86:	4618      	mov	r0, r3
 8008d88:	f001 fc88 	bl	800a69c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008d8c:	f002 fb62 	bl	800b454 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3738      	adds	r7, #56	; 0x38
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	e000ed04 	.word	0xe000ed04

08008da0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d006      	beq.n	8008dbe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008dba:	60fb      	str	r3, [r7, #12]
 8008dbc:	e001      	b.n	8008dc2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
	}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10d      	bne.n	8008e0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d14d      	bne.n	8008e92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f001 fbe0 	bl	800a5c0 <xTaskPriorityDisinherit>
 8008e00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	609a      	str	r2, [r3, #8]
 8008e08:	e043      	b.n	8008e92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d119      	bne.n	8008e44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6858      	ldr	r0, [r3, #4]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e18:	461a      	mov	r2, r3
 8008e1a:	68b9      	ldr	r1, [r7, #8]
 8008e1c:	f002 fe3c 	bl	800ba98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e28:	441a      	add	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d32b      	bcc.n	8008e92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	605a      	str	r2, [r3, #4]
 8008e42:	e026      	b.n	8008e92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	68d8      	ldr	r0, [r3, #12]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	68b9      	ldr	r1, [r7, #8]
 8008e50:	f002 fe22 	bl	800ba98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5c:	425b      	negs	r3, r3
 8008e5e:	441a      	add	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	68da      	ldr	r2, [r3, #12]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d207      	bcs.n	8008e80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	689a      	ldr	r2, [r3, #8]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e78:	425b      	negs	r3, r3
 8008e7a:	441a      	add	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d105      	bne.n	8008e92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e9a:	697b      	ldr	r3, [r7, #20]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d018      	beq.n	8008ee8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68da      	ldr	r2, [r3, #12]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebe:	441a      	add	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68da      	ldr	r2, [r3, #12]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d303      	bcc.n	8008ed8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68d9      	ldr	r1, [r3, #12]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	6838      	ldr	r0, [r7, #0]
 8008ee4:	f002 fdd8 	bl	800ba98 <memcpy>
	}
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ef8:	f002 fa7c 	bl	800b3f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f04:	e011      	b.n	8008f2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d012      	beq.n	8008f34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	3324      	adds	r3, #36	; 0x24
 8008f12:	4618      	mov	r0, r3
 8008f14:	f001 f8d6 	bl	800a0c4 <xTaskRemoveFromEventList>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f1e:	f001 f9d3 	bl	800a2c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
 8008f24:	3b01      	subs	r3, #1
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	dce9      	bgt.n	8008f06 <prvUnlockQueue+0x16>
 8008f32:	e000      	b.n	8008f36 <prvUnlockQueue+0x46>
					break;
 8008f34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	22ff      	movs	r2, #255	; 0xff
 8008f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008f3e:	f002 fa89 	bl	800b454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f42:	f002 fa57 	bl	800b3f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f4e:	e011      	b.n	8008f74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d012      	beq.n	8008f7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3310      	adds	r3, #16
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f001 f8b1 	bl	800a0c4 <xTaskRemoveFromEventList>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f68:	f001 f9ae 	bl	800a2c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	dce9      	bgt.n	8008f50 <prvUnlockQueue+0x60>
 8008f7c:	e000      	b.n	8008f80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	22ff      	movs	r2, #255	; 0xff
 8008f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008f88:	f002 fa64 	bl	800b454 <vPortExitCritical>
}
 8008f8c:	bf00      	nop
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f9c:	f002 fa2a 	bl	800b3f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d102      	bne.n	8008fae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	e001      	b.n	8008fb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fb2:	f002 fa4f 	bl	800b454 <vPortExitCritical>

	return xReturn;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fc8:	f002 fa14 	bl	800b3f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d102      	bne.n	8008fde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	e001      	b.n	8008fe2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fe2:	f002 fa37 	bl	800b454 <vPortExitCritical>

	return xReturn;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60fb      	str	r3, [r7, #12]
 8008ffe:	e014      	b.n	800902a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009000:	4a0f      	ldr	r2, [pc, #60]	; (8009040 <vQueueAddToRegistry+0x50>)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10b      	bne.n	8009024 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800900c:	490c      	ldr	r1, [pc, #48]	; (8009040 <vQueueAddToRegistry+0x50>)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009016:	4a0a      	ldr	r2, [pc, #40]	; (8009040 <vQueueAddToRegistry+0x50>)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	00db      	lsls	r3, r3, #3
 800901c:	4413      	add	r3, r2
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009022:	e006      	b.n	8009032 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3301      	adds	r3, #1
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b07      	cmp	r3, #7
 800902e:	d9e7      	bls.n	8009000 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009030:	bf00      	nop
 8009032:	bf00      	nop
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	200009f0 	.word	0x200009f0

08009044 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009054:	f002 f9ce 	bl	800b3f4 <vPortEnterCritical>
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800905e:	b25b      	sxtb	r3, r3
 8009060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009064:	d103      	bne.n	800906e <vQueueWaitForMessageRestricted+0x2a>
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009074:	b25b      	sxtb	r3, r3
 8009076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800907a:	d103      	bne.n	8009084 <vQueueWaitForMessageRestricted+0x40>
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009084:	f002 f9e6 	bl	800b454 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908c:	2b00      	cmp	r3, #0
 800908e:	d106      	bne.n	800909e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	3324      	adds	r3, #36	; 0x24
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	68b9      	ldr	r1, [r7, #8]
 8009098:	4618      	mov	r0, r3
 800909a:	f000 ffe7 	bl	800a06c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800909e:	6978      	ldr	r0, [r7, #20]
 80090a0:	f7ff ff26 	bl	8008ef0 <prvUnlockQueue>
	}
 80090a4:	bf00      	nop
 80090a6:	3718      	adds	r7, #24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b08c      	sub	sp, #48	; 0x30
 80090b0:	af02      	add	r7, sp, #8
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d110      	bne.n	80090e0 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80090be:	2301      	movs	r3, #1
 80090c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d81b      	bhi.n	8009102 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	61fb      	str	r3, [r7, #28]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10a      	bne.n	8009102 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	61bb      	str	r3, [r7, #24]
}
 80090fe:	bf00      	nop
 8009100:	e7fe      	b.n	8009100 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	429a      	cmp	r2, r3
 8009108:	d90a      	bls.n	8009120 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	617b      	str	r3, [r7, #20]
}
 800911c:	bf00      	nop
 800911e:	e7fe      	b.n	800911e <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8009126:	2301      	movs	r3, #1
 8009128:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	3301      	adds	r3, #1
 800912e:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	3324      	adds	r3, #36	; 0x24
 8009134:	4618      	mov	r0, r3
 8009136:	f002 fa7f 	bl	800b638 <pvPortMalloc>
 800913a:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00a      	beq.n	8009158 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8009142:	6a3b      	ldr	r3, [r7, #32]
 8009144:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	6a38      	ldr	r0, [r7, #32]
 8009154:	f000 fafd 	bl	8009752 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8009158:	6a3b      	ldr	r3, [r7, #32]
	}
 800915a:	4618      	mov	r0, r3
 800915c:	3728      	adds	r7, #40	; 0x28
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8009162:	b480      	push	{r7}
 8009164:	b087      	sub	sp, #28
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10a      	bne.n	800918a <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	60fb      	str	r3, [r7, #12]
}
 8009186:	bf00      	nop
 8009188:	e7fe      	b.n	8009188 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4413      	add	r3, r2
 8009194:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d304      	bcc.n	80091ba <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 80091ba:	697b      	ldr	r3, [r7, #20]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	371c      	adds	r7, #28
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b090      	sub	sp, #64	; 0x40
 80091cc:	af02      	add	r7, sp, #8
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
 80091d4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10a      	bne.n	80091fe <xStreamBufferSend+0x36>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091fa:	bf00      	nop
 80091fc:	e7fe      	b.n	80091fc <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 80091fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10a      	bne.n	800921a <xStreamBufferSend+0x52>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	623b      	str	r3, [r7, #32]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	7f1b      	ldrb	r3, [r3, #28]
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b00      	cmp	r3, #0
 8009224:	d011      	beq.n	800924a <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	3304      	adds	r3, #4
 800922a:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 800922c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	429a      	cmp	r2, r3
 8009232:	d80a      	bhi.n	800924a <xStreamBufferSend+0x82>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	61fb      	str	r3, [r7, #28]
}
 8009246:	bf00      	nop
 8009248:	e7fe      	b.n	8009248 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d03e      	beq.n	80092ce <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8009250:	f107 0310 	add.w	r3, r7, #16
 8009254:	4618      	mov	r0, r3
 8009256:	f000 ff99 	bl	800a18c <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800925a:	f002 f8cb 	bl	800b3f4 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800925e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009260:	f7ff ff7f 	bl	8009162 <xStreamBufferSpacesAvailable>
 8009264:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8009266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926a:	429a      	cmp	r2, r3
 800926c:	d217      	bcs.n	800929e <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800926e:	2000      	movs	r0, #0
 8009270:	f001 fbc8 	bl	800aa04 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8009274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00a      	beq.n	8009292 <xStreamBufferSend+0xca>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	61bb      	str	r3, [r7, #24]
}
 800928e:	bf00      	nop
 8009290:	e7fe      	b.n	8009290 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8009292:	f001 f8ff 	bl	800a494 <xTaskGetCurrentTaskHandle>
 8009296:	4602      	mov	r2, r0
 8009298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929a:	615a      	str	r2, [r3, #20]
 800929c:	e002      	b.n	80092a4 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 800929e:	f002 f8d9 	bl	800b454 <vPortExitCritical>
					break;
 80092a2:	e014      	b.n	80092ce <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 80092a4:	f002 f8d6 	bl	800b454 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2200      	movs	r2, #0
 80092ac:	2100      	movs	r1, #0
 80092ae:	2000      	movs	r0, #0
 80092b0:	f001 fa8a 	bl	800a7c8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	2200      	movs	r2, #0
 80092b8:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 80092ba:	463a      	mov	r2, r7
 80092bc:	f107 0310 	add.w	r3, r7, #16
 80092c0:	4611      	mov	r1, r2
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 ff9e 	bl	800a204 <xTaskCheckForTimeOut>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0c5      	beq.n	800925a <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 80092ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d103      	bne.n	80092dc <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80092d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092d6:	f7ff ff44 	bl	8009162 <xStreamBufferSpacesAvailable>
 80092da:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	68b9      	ldr	r1, [r7, #8]
 80092e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092e8:	f000 f823 	bl	8009332 <prvWriteMessageToBuffer>
 80092ec:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d019      	beq.n	8009328 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80092f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092f6:	f000 fa0c 	bl	8009712 <prvBytesInBuffer>
 80092fa:	4602      	mov	r2, r0
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	429a      	cmp	r2, r3
 8009302:	d311      	bcc.n	8009328 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8009304:	f000 fcb4 	bl	8009c70 <vTaskSuspendAll>
 8009308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d009      	beq.n	8009324 <xStreamBufferSend+0x15c>
 8009310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009312:	6918      	ldr	r0, [r3, #16]
 8009314:	2300      	movs	r3, #0
 8009316:	2200      	movs	r2, #0
 8009318:	2100      	movs	r1, #0
 800931a:	f001 fab5 	bl	800a888 <xTaskGenericNotify>
 800931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009320:	2200      	movs	r2, #0
 8009322:	611a      	str	r2, [r3, #16]
 8009324:	f000 fcb2 	bl	8009c8c <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8009328:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800932a:	4618      	mov	r0, r3
 800932c:	3738      	adds	r7, #56	; 0x38
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b086      	sub	sp, #24
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	607a      	str	r2, [r7, #4]
 800933e:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d102      	bne.n	800934c <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8009346:	2300      	movs	r3, #0
 8009348:	617b      	str	r3, [r7, #20]
 800934a:	e01d      	b.n	8009388 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	7f1b      	ldrb	r3, [r3, #28]
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b00      	cmp	r3, #0
 8009356:	d108      	bne.n	800936a <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8009358:	2301      	movs	r3, #1
 800935a:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	4293      	cmp	r3, r2
 8009362:	bf28      	it	cs
 8009364:	4613      	movcs	r3, r2
 8009366:	607b      	str	r3, [r7, #4]
 8009368:	e00e      	b.n	8009388 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	429a      	cmp	r2, r3
 8009370:	d308      	bcc.n	8009384 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8009372:	2301      	movs	r3, #1
 8009374:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009376:	1d3b      	adds	r3, r7, #4
 8009378:	2204      	movs	r2, #4
 800937a:	4619      	mov	r1, r3
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 f8dc 	bl	800953a <prvWriteBytesToBuffer>
 8009382:	e001      	b.n	8009388 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8009384:	2300      	movs	r3, #0
 8009386:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d007      	beq.n	800939e <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	461a      	mov	r2, r3
 8009392:	68b9      	ldr	r1, [r7, #8]
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 f8d0 	bl	800953a <prvWriteBytesToBuffer>
 800939a:	6138      	str	r0, [r7, #16]
 800939c:	e001      	b.n	80093a2 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800939e:	2300      	movs	r3, #0
 80093a0:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80093a2:	693b      	ldr	r3, [r7, #16]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b08e      	sub	sp, #56	; 0x38
 80093b0:	af02      	add	r7, sp, #8
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
 80093b8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80093be:	2300      	movs	r3, #0
 80093c0:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <xStreamBufferReceive+0x32>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	61fb      	str	r3, [r7, #28]
}
 80093da:	bf00      	nop
 80093dc:	e7fe      	b.n	80093dc <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10a      	bne.n	80093fa <xStreamBufferReceive+0x4e>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	61bb      	str	r3, [r7, #24]
}
 80093f6:	bf00      	nop
 80093f8:	e7fe      	b.n	80093f8 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80093fa:	6a3b      	ldr	r3, [r7, #32]
 80093fc:	7f1b      	ldrb	r3, [r3, #28]
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d002      	beq.n	800940c <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009406:	2304      	movs	r3, #4
 8009408:	627b      	str	r3, [r7, #36]	; 0x24
 800940a:	e001      	b.n	8009410 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800940c:	2300      	movs	r3, #0
 800940e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d034      	beq.n	8009480 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8009416:	f001 ffed 	bl	800b3f4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800941a:	6a38      	ldr	r0, [r7, #32]
 800941c:	f000 f979 	bl	8009712 <prvBytesInBuffer>
 8009420:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	429a      	cmp	r2, r3
 8009428:	d816      	bhi.n	8009458 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800942a:	2000      	movs	r0, #0
 800942c:	f001 faea 	bl	800aa04 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00a      	beq.n	800944e <xStreamBufferReceive+0xa2>
	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	617b      	str	r3, [r7, #20]
}
 800944a:	bf00      	nop
 800944c:	e7fe      	b.n	800944c <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800944e:	f001 f821 	bl	800a494 <xTaskGetCurrentTaskHandle>
 8009452:	4602      	mov	r2, r0
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009458:	f001 fffc 	bl	800b454 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800945c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800945e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009460:	429a      	cmp	r2, r3
 8009462:	d811      	bhi.n	8009488 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	2200      	movs	r2, #0
 8009468:	2100      	movs	r1, #0
 800946a:	2000      	movs	r0, #0
 800946c:	f001 f9ac 	bl	800a7c8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8009470:	6a3b      	ldr	r3, [r7, #32]
 8009472:	2200      	movs	r2, #0
 8009474:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009476:	6a38      	ldr	r0, [r7, #32]
 8009478:	f000 f94b 	bl	8009712 <prvBytesInBuffer>
 800947c:	62b8      	str	r0, [r7, #40]	; 0x28
 800947e:	e003      	b.n	8009488 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009480:	6a38      	ldr	r0, [r7, #32]
 8009482:	f000 f946 	bl	8009712 <prvBytesInBuffer>
 8009486:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8009488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	429a      	cmp	r2, r3
 800948e:	d91d      	bls.n	80094cc <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	68b9      	ldr	r1, [r7, #8]
 800949a:	6a38      	ldr	r0, [r7, #32]
 800949c:	f000 f81b 	bl	80094d6 <prvReadMessageFromBuffer>
 80094a0:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80094a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d011      	beq.n	80094cc <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80094a8:	f000 fbe2 	bl	8009c70 <vTaskSuspendAll>
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d009      	beq.n	80094c8 <xStreamBufferReceive+0x11c>
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	6958      	ldr	r0, [r3, #20]
 80094b8:	2300      	movs	r3, #0
 80094ba:	2200      	movs	r2, #0
 80094bc:	2100      	movs	r1, #0
 80094be:	f001 f9e3 	bl	800a888 <xTaskGenericNotify>
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	2200      	movs	r2, #0
 80094c6:	615a      	str	r2, [r3, #20]
 80094c8:	f000 fbe0 	bl	8009c8c <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80094cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3730      	adds	r7, #48	; 0x30
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b088      	sub	sp, #32
 80094da:	af00      	add	r7, sp, #0
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	60b9      	str	r1, [r7, #8]
 80094e0:	607a      	str	r2, [r7, #4]
 80094e2:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80094e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d019      	beq.n	800951e <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80094f0:	f107 0110 	add.w	r1, r7, #16
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f000 f890 	bl	800961e <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800950a:	69fa      	ldr	r2, [r7, #28]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	429a      	cmp	r2, r3
 8009510:	d907      	bls.n	8009522 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	69ba      	ldr	r2, [r7, #24]
 8009516:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	61fb      	str	r3, [r7, #28]
 800951c:	e001      	b.n	8009522 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	69fa      	ldr	r2, [r7, #28]
 8009526:	68b9      	ldr	r1, [r7, #8]
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 f878 	bl	800961e <prvReadBytesFromBuffer>
 800952e:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8009530:	697b      	ldr	r3, [r7, #20]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3720      	adds	r7, #32
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b08a      	sub	sp, #40	; 0x28
 800953e:	af00      	add	r7, sp, #0
 8009540:	60f8      	str	r0, [r7, #12]
 8009542:	60b9      	str	r1, [r7, #8]
 8009544:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10a      	bne.n	8009562 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	61fb      	str	r3, [r7, #28]
}
 800955e:	bf00      	nop
 8009560:	e7fe      	b.n	8009560 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	689a      	ldr	r2, [r3, #8]
 800956c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	4293      	cmp	r3, r2
 8009574:	bf28      	it	cs
 8009576:	4613      	movcs	r3, r2
 8009578:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800957a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	441a      	add	r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	429a      	cmp	r2, r3
 8009586:	d90a      	bls.n	800959e <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	61bb      	str	r3, [r7, #24]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	699a      	ldr	r2, [r3, #24]
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	4413      	add	r3, r2
 80095a6:	6a3a      	ldr	r2, [r7, #32]
 80095a8:	68b9      	ldr	r1, [r7, #8]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f002 fa74 	bl	800ba98 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d91c      	bls.n	80095f2 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	6a3b      	ldr	r3, [r7, #32]
 80095bc:	1ad2      	subs	r2, r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d90a      	bls.n	80095dc <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	617b      	str	r3, [r7, #20]
}
 80095d8:	bf00      	nop
 80095da:	e7fe      	b.n	80095da <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6998      	ldr	r0, [r3, #24]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	6a3b      	ldr	r3, [r7, #32]
 80095e4:	18d1      	adds	r1, r2, r3
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	461a      	mov	r2, r3
 80095ee:	f002 fa53 	bl	800ba98 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80095f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4413      	add	r3, r2
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009600:	429a      	cmp	r2, r3
 8009602:	d304      	bcc.n	800960e <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009612:	605a      	str	r2, [r3, #4]

	return xCount;
 8009614:	687b      	ldr	r3, [r7, #4]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3728      	adds	r7, #40	; 0x28
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b08a      	sub	sp, #40	; 0x28
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	60b9      	str	r1, [r7, #8]
 8009628:	607a      	str	r2, [r7, #4]
 800962a:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	4293      	cmp	r3, r2
 8009632:	bf28      	it	cs
 8009634:	4613      	movcs	r3, r2
 8009636:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8009638:	6a3b      	ldr	r3, [r7, #32]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d064      	beq.n	8009708 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	689a      	ldr	r2, [r3, #8]
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	6a3a      	ldr	r2, [r7, #32]
 800964e:	4293      	cmp	r3, r2
 8009650:	bf28      	it	cs
 8009652:	4613      	movcs	r3, r2
 8009654:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8009656:	69fa      	ldr	r2, [r7, #28]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	429a      	cmp	r2, r3
 800965c:	d90a      	bls.n	8009674 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	61bb      	str	r3, [r7, #24]
}
 8009670:	bf00      	nop
 8009672:	e7fe      	b.n	8009672 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8009674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	441a      	add	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	429a      	cmp	r2, r3
 8009680:	d90a      	bls.n	8009698 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	617b      	str	r3, [r7, #20]
}
 8009694:	bf00      	nop
 8009696:	e7fe      	b.n	8009696 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	699a      	ldr	r2, [r3, #24]
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	4413      	add	r3, r2
 80096a0:	69fa      	ldr	r2, [r7, #28]
 80096a2:	4619      	mov	r1, r3
 80096a4:	68b8      	ldr	r0, [r7, #8]
 80096a6:	f002 f9f7 	bl	800ba98 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80096aa:	6a3a      	ldr	r2, [r7, #32]
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d919      	bls.n	80096e6 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80096b2:	6a3a      	ldr	r2, [r7, #32]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d90a      	bls.n	80096d0 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	613b      	str	r3, [r7, #16]
}
 80096cc:	bf00      	nop
 80096ce:	e7fe      	b.n	80096ce <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	18d0      	adds	r0, r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6999      	ldr	r1, [r3, #24]
 80096da:	6a3a      	ldr	r2, [r7, #32]
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	461a      	mov	r2, r3
 80096e2:	f002 f9d9 	bl	800ba98 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80096e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	4413      	add	r3, r2
 80096ec:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d304      	bcc.n	8009702 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009706:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8009708:	6a3b      	ldr	r3, [r7, #32]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3728      	adds	r7, #40	; 0x28
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8009712:	b480      	push	{r7}
 8009714:	b085      	sub	sp, #20
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	689a      	ldr	r2, [r3, #8]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	4413      	add	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	429a      	cmp	r2, r3
 8009738:	d304      	bcc.n	8009744 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8009744:	68fb      	ldr	r3, [r7, #12]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b086      	sub	sp, #24
 8009756:	af00      	add	r7, sp, #0
 8009758:	60f8      	str	r0, [r7, #12]
 800975a:	60b9      	str	r1, [r7, #8]
 800975c:	607a      	str	r2, [r7, #4]
 800975e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8009760:	2355      	movs	r3, #85	; 0x55
 8009762:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	6979      	ldr	r1, [r7, #20]
 8009768:	68b8      	ldr	r0, [r7, #8]
 800976a:	f002 f9a3 	bl	800bab4 <memset>
 800976e:	4602      	mov	r2, r0
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	4293      	cmp	r3, r2
 8009774:	d00a      	beq.n	800978c <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8009776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977a:	f383 8811 	msr	BASEPRI, r3
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	613b      	str	r3, [r7, #16]
}
 8009788:	bf00      	nop
 800978a:	e7fe      	b.n	800978a <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800978c:	2224      	movs	r2, #36	; 0x24
 800978e:	2100      	movs	r1, #0
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f002 f98f 	bl	800bab4 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	683a      	ldr	r2, [r7, #0]
 80097a6:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80097ae:	771a      	strb	r2, [r3, #28]
}
 80097b0:	bf00      	nop
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08e      	sub	sp, #56	; 0x38
 80097bc:	af04      	add	r7, sp, #16
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	623b      	str	r3, [r7, #32]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10a      	bne.n	80097fe <xTaskCreateStatic+0x46>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	61fb      	str	r3, [r7, #28]
}
 80097fa:	bf00      	nop
 80097fc:	e7fe      	b.n	80097fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097fe:	23bc      	movs	r3, #188	; 0xbc
 8009800:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	2bbc      	cmp	r3, #188	; 0xbc
 8009806:	d00a      	beq.n	800981e <xTaskCreateStatic+0x66>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	61bb      	str	r3, [r7, #24]
}
 800981a:	bf00      	nop
 800981c:	e7fe      	b.n	800981c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800981e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009822:	2b00      	cmp	r3, #0
 8009824:	d01e      	beq.n	8009864 <xTaskCreateStatic+0xac>
 8009826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009828:	2b00      	cmp	r3, #0
 800982a:	d01b      	beq.n	8009864 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009834:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009838:	2202      	movs	r2, #2
 800983a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800983e:	2300      	movs	r3, #0
 8009840:	9303      	str	r3, [sp, #12]
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	9302      	str	r3, [sp, #8]
 8009846:	f107 0314 	add.w	r3, r7, #20
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 f850 	bl	80098fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800985c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800985e:	f000 f8f3 	bl	8009a48 <prvAddNewTaskToReadyList>
 8009862:	e001      	b.n	8009868 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009864:	2300      	movs	r3, #0
 8009866:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009868:	697b      	ldr	r3, [r7, #20]
	}
 800986a:	4618      	mov	r0, r3
 800986c:	3728      	adds	r7, #40	; 0x28
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009872:	b580      	push	{r7, lr}
 8009874:	b08c      	sub	sp, #48	; 0x30
 8009876:	af04      	add	r7, sp, #16
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	60b9      	str	r1, [r7, #8]
 800987c:	603b      	str	r3, [r7, #0]
 800987e:	4613      	mov	r3, r2
 8009880:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009882:	88fb      	ldrh	r3, [r7, #6]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4618      	mov	r0, r3
 8009888:	f001 fed6 	bl	800b638 <pvPortMalloc>
 800988c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00e      	beq.n	80098b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009894:	20bc      	movs	r0, #188	; 0xbc
 8009896:	f001 fecf 	bl	800b638 <pvPortMalloc>
 800989a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	631a      	str	r2, [r3, #48]	; 0x30
 80098a8:	e005      	b.n	80098b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098aa:	6978      	ldr	r0, [r7, #20]
 80098ac:	f001 ff90 	bl	800b7d0 <vPortFree>
 80098b0:	e001      	b.n	80098b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098b2:	2300      	movs	r3, #0
 80098b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d017      	beq.n	80098ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098c4:	88fa      	ldrh	r2, [r7, #6]
 80098c6:	2300      	movs	r3, #0
 80098c8:	9303      	str	r3, [sp, #12]
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	9302      	str	r3, [sp, #8]
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	9301      	str	r3, [sp, #4]
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	68b9      	ldr	r1, [r7, #8]
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 f80e 	bl	80098fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098e0:	69f8      	ldr	r0, [r7, #28]
 80098e2:	f000 f8b1 	bl	8009a48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098e6:	2301      	movs	r3, #1
 80098e8:	61bb      	str	r3, [r7, #24]
 80098ea:	e002      	b.n	80098f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098f2:	69bb      	ldr	r3, [r7, #24]
	}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3720      	adds	r7, #32
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
 8009908:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	461a      	mov	r2, r3
 8009914:	21a5      	movs	r1, #165	; 0xa5
 8009916:	f002 f8cd 	bl	800bab4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009924:	3b01      	subs	r3, #1
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	f023 0307 	bic.w	r3, r3, #7
 8009932:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	f003 0307 	and.w	r3, r3, #7
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00a      	beq.n	8009954 <prvInitialiseNewTask+0x58>
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	617b      	str	r3, [r7, #20]
}
 8009950:	bf00      	nop
 8009952:	e7fe      	b.n	8009952 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d01f      	beq.n	800999a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800995a:	2300      	movs	r3, #0
 800995c:	61fb      	str	r3, [r7, #28]
 800995e:	e012      	b.n	8009986 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009960:	68ba      	ldr	r2, [r7, #8]
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	4413      	add	r3, r2
 8009966:	7819      	ldrb	r1, [r3, #0]
 8009968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	4413      	add	r3, r2
 800996e:	3334      	adds	r3, #52	; 0x34
 8009970:	460a      	mov	r2, r1
 8009972:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	4413      	add	r3, r2
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d006      	beq.n	800998e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	3301      	adds	r3, #1
 8009984:	61fb      	str	r3, [r7, #28]
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	2b0f      	cmp	r3, #15
 800998a:	d9e9      	bls.n	8009960 <prvInitialiseNewTask+0x64>
 800998c:	e000      	b.n	8009990 <prvInitialiseNewTask+0x94>
			{
				break;
 800998e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009998:	e003      	b.n	80099a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a4:	2b37      	cmp	r3, #55	; 0x37
 80099a6:	d901      	bls.n	80099ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099a8:	2337      	movs	r3, #55	; 0x37
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	2200      	movs	r2, #0
 80099bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	3304      	adds	r3, #4
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fe fbd6 	bl	8008174 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ca:	3318      	adds	r3, #24
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fe fbd1 	bl	8008174 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	2200      	movs	r2, #0
 80099ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fa:	3354      	adds	r3, #84	; 0x54
 80099fc:	2260      	movs	r2, #96	; 0x60
 80099fe:	2100      	movs	r1, #0
 8009a00:	4618      	mov	r0, r3
 8009a02:	f002 f857 	bl	800bab4 <memset>
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	4a0c      	ldr	r2, [pc, #48]	; (8009a3c <prvInitialiseNewTask+0x140>)
 8009a0a:	659a      	str	r2, [r3, #88]	; 0x58
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	4a0c      	ldr	r2, [pc, #48]	; (8009a40 <prvInitialiseNewTask+0x144>)
 8009a10:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	4a0b      	ldr	r2, [pc, #44]	; (8009a44 <prvInitialiseNewTask+0x148>)
 8009a16:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	68f9      	ldr	r1, [r7, #12]
 8009a1c:	69b8      	ldr	r0, [r7, #24]
 8009a1e:	f001 fbb9 	bl	800b194 <pxPortInitialiseStack>
 8009a22:	4602      	mov	r2, r0
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a34:	bf00      	nop
 8009a36:	3720      	adds	r7, #32
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	0800cb3c 	.word	0x0800cb3c
 8009a40:	0800cb5c 	.word	0x0800cb5c
 8009a44:	0800cb1c 	.word	0x0800cb1c

08009a48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a50:	f001 fcd0 	bl	800b3f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a54:	4b2d      	ldr	r3, [pc, #180]	; (8009b0c <prvAddNewTaskToReadyList+0xc4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	4a2c      	ldr	r2, [pc, #176]	; (8009b0c <prvAddNewTaskToReadyList+0xc4>)
 8009a5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a5e:	4b2c      	ldr	r3, [pc, #176]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d109      	bne.n	8009a7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a66:	4a2a      	ldr	r2, [pc, #168]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a6c:	4b27      	ldr	r3, [pc, #156]	; (8009b0c <prvAddNewTaskToReadyList+0xc4>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d110      	bne.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a74:	f000 fc4c 	bl	800a310 <prvInitialiseTaskLists>
 8009a78:	e00d      	b.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a7a:	4b26      	ldr	r3, [pc, #152]	; (8009b14 <prvAddNewTaskToReadyList+0xcc>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a82:	4b23      	ldr	r3, [pc, #140]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d802      	bhi.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a90:	4a1f      	ldr	r2, [pc, #124]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a96:	4b20      	ldr	r3, [pc, #128]	; (8009b18 <prvAddNewTaskToReadyList+0xd0>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	4a1e      	ldr	r2, [pc, #120]	; (8009b18 <prvAddNewTaskToReadyList+0xd0>)
 8009a9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009aa0:	4b1d      	ldr	r3, [pc, #116]	; (8009b18 <prvAddNewTaskToReadyList+0xd0>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aac:	4b1b      	ldr	r3, [pc, #108]	; (8009b1c <prvAddNewTaskToReadyList+0xd4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d903      	bls.n	8009abc <prvAddNewTaskToReadyList+0x74>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab8:	4a18      	ldr	r2, [pc, #96]	; (8009b1c <prvAddNewTaskToReadyList+0xd4>)
 8009aba:	6013      	str	r3, [r2, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4a15      	ldr	r2, [pc, #84]	; (8009b20 <prvAddNewTaskToReadyList+0xd8>)
 8009aca:	441a      	add	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	f7fe fb5b 	bl	800818e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ad8:	f001 fcbc 	bl	800b454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009adc:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <prvAddNewTaskToReadyList+0xcc>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00e      	beq.n	8009b02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d207      	bcs.n	8009b02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009af2:	4b0c      	ldr	r3, [pc, #48]	; (8009b24 <prvAddNewTaskToReadyList+0xdc>)
 8009af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009af8:	601a      	str	r2, [r3, #0]
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b02:	bf00      	nop
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	20000f04 	.word	0x20000f04
 8009b10:	20000a30 	.word	0x20000a30
 8009b14:	20000f10 	.word	0x20000f10
 8009b18:	20000f20 	.word	0x20000f20
 8009b1c:	20000f0c 	.word	0x20000f0c
 8009b20:	20000a34 	.word	0x20000a34
 8009b24:	e000ed04 	.word	0xe000ed04

08009b28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b30:	2300      	movs	r3, #0
 8009b32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d017      	beq.n	8009b6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b3a:	4b13      	ldr	r3, [pc, #76]	; (8009b88 <vTaskDelay+0x60>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00a      	beq.n	8009b58 <vTaskDelay+0x30>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	60bb      	str	r3, [r7, #8]
}
 8009b54:	bf00      	nop
 8009b56:	e7fe      	b.n	8009b56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b58:	f000 f88a 	bl	8009c70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 ff76 	bl	800aa50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b64:	f000 f892 	bl	8009c8c <xTaskResumeAll>
 8009b68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d107      	bne.n	8009b80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b70:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <vTaskDelay+0x64>)
 8009b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b80:	bf00      	nop
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	20000f2c 	.word	0x20000f2c
 8009b8c:	e000ed04 	.word	0xe000ed04

08009b90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b08a      	sub	sp, #40	; 0x28
 8009b94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b9e:	463a      	mov	r2, r7
 8009ba0:	1d39      	adds	r1, r7, #4
 8009ba2:	f107 0308 	add.w	r3, r7, #8
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fe fa90 	bl	80080cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	9202      	str	r2, [sp, #8]
 8009bb4:	9301      	str	r3, [sp, #4]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	460a      	mov	r2, r1
 8009bbe:	4924      	ldr	r1, [pc, #144]	; (8009c50 <vTaskStartScheduler+0xc0>)
 8009bc0:	4824      	ldr	r0, [pc, #144]	; (8009c54 <vTaskStartScheduler+0xc4>)
 8009bc2:	f7ff fdf9 	bl	80097b8 <xTaskCreateStatic>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	4a23      	ldr	r2, [pc, #140]	; (8009c58 <vTaskStartScheduler+0xc8>)
 8009bca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bcc:	4b22      	ldr	r3, [pc, #136]	; (8009c58 <vTaskStartScheduler+0xc8>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	617b      	str	r3, [r7, #20]
 8009bd8:	e001      	b.n	8009bde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d102      	bne.n	8009bea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009be4:	f000 ff88 	bl	800aaf8 <xTimerCreateTimerTask>
 8009be8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d11b      	bne.n	8009c28 <vTaskStartScheduler+0x98>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	613b      	str	r3, [r7, #16]
}
 8009c02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c04:	4b15      	ldr	r3, [pc, #84]	; (8009c5c <vTaskStartScheduler+0xcc>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	3354      	adds	r3, #84	; 0x54
 8009c0a:	4a15      	ldr	r2, [pc, #84]	; (8009c60 <vTaskStartScheduler+0xd0>)
 8009c0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c0e:	4b15      	ldr	r3, [pc, #84]	; (8009c64 <vTaskStartScheduler+0xd4>)
 8009c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c16:	4b14      	ldr	r3, [pc, #80]	; (8009c68 <vTaskStartScheduler+0xd8>)
 8009c18:	2201      	movs	r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c1c:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <vTaskStartScheduler+0xdc>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c22:	f001 fb45 	bl	800b2b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c26:	e00e      	b.n	8009c46 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c2e:	d10a      	bne.n	8009c46 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	60fb      	str	r3, [r7, #12]
}
 8009c42:	bf00      	nop
 8009c44:	e7fe      	b.n	8009c44 <vTaskStartScheduler+0xb4>
}
 8009c46:	bf00      	nop
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	0800c930 	.word	0x0800c930
 8009c54:	0800a2e1 	.word	0x0800a2e1
 8009c58:	20000f28 	.word	0x20000f28
 8009c5c:	20000a30 	.word	0x20000a30
 8009c60:	20000018 	.word	0x20000018
 8009c64:	20000f24 	.word	0x20000f24
 8009c68:	20000f10 	.word	0x20000f10
 8009c6c:	20000f08 	.word	0x20000f08

08009c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c70:	b480      	push	{r7}
 8009c72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c74:	4b04      	ldr	r3, [pc, #16]	; (8009c88 <vTaskSuspendAll+0x18>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	4a03      	ldr	r2, [pc, #12]	; (8009c88 <vTaskSuspendAll+0x18>)
 8009c7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c7e:	bf00      	nop
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	20000f2c 	.word	0x20000f2c

08009c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c96:	2300      	movs	r3, #0
 8009c98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c9a:	4b42      	ldr	r3, [pc, #264]	; (8009da4 <xTaskResumeAll+0x118>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10a      	bne.n	8009cb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8009ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	603b      	str	r3, [r7, #0]
}
 8009cb4:	bf00      	nop
 8009cb6:	e7fe      	b.n	8009cb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009cb8:	f001 fb9c 	bl	800b3f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009cbc:	4b39      	ldr	r3, [pc, #228]	; (8009da4 <xTaskResumeAll+0x118>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	4a38      	ldr	r2, [pc, #224]	; (8009da4 <xTaskResumeAll+0x118>)
 8009cc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cc6:	4b37      	ldr	r3, [pc, #220]	; (8009da4 <xTaskResumeAll+0x118>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d162      	bne.n	8009d94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cce:	4b36      	ldr	r3, [pc, #216]	; (8009da8 <xTaskResumeAll+0x11c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d05e      	beq.n	8009d94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cd6:	e02f      	b.n	8009d38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cd8:	4b34      	ldr	r3, [pc, #208]	; (8009dac <xTaskResumeAll+0x120>)
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3318      	adds	r3, #24
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fe faaf 	bl	8008248 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	3304      	adds	r3, #4
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fe faaa 	bl	8008248 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf8:	4b2d      	ldr	r3, [pc, #180]	; (8009db0 <xTaskResumeAll+0x124>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d903      	bls.n	8009d08 <xTaskResumeAll+0x7c>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d04:	4a2a      	ldr	r2, [pc, #168]	; (8009db0 <xTaskResumeAll+0x124>)
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4a27      	ldr	r2, [pc, #156]	; (8009db4 <xTaskResumeAll+0x128>)
 8009d16:	441a      	add	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4610      	mov	r0, r2
 8009d20:	f7fe fa35 	bl	800818e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d28:	4b23      	ldr	r3, [pc, #140]	; (8009db8 <xTaskResumeAll+0x12c>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d302      	bcc.n	8009d38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009d32:	4b22      	ldr	r3, [pc, #136]	; (8009dbc <xTaskResumeAll+0x130>)
 8009d34:	2201      	movs	r2, #1
 8009d36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d38:	4b1c      	ldr	r3, [pc, #112]	; (8009dac <xTaskResumeAll+0x120>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1cb      	bne.n	8009cd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d001      	beq.n	8009d4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d46:	f000 fb85 	bl	800a454 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d4a:	4b1d      	ldr	r3, [pc, #116]	; (8009dc0 <xTaskResumeAll+0x134>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d010      	beq.n	8009d78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d56:	f000 f847 	bl	8009de8 <xTaskIncrementTick>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d60:	4b16      	ldr	r3, [pc, #88]	; (8009dbc <xTaskResumeAll+0x130>)
 8009d62:	2201      	movs	r2, #1
 8009d64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1f1      	bne.n	8009d56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d72:	4b13      	ldr	r3, [pc, #76]	; (8009dc0 <xTaskResumeAll+0x134>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d78:	4b10      	ldr	r3, [pc, #64]	; (8009dbc <xTaskResumeAll+0x130>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d009      	beq.n	8009d94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d80:	2301      	movs	r3, #1
 8009d82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d84:	4b0f      	ldr	r3, [pc, #60]	; (8009dc4 <xTaskResumeAll+0x138>)
 8009d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d94:	f001 fb5e 	bl	800b454 <vPortExitCritical>

	return xAlreadyYielded;
 8009d98:	68bb      	ldr	r3, [r7, #8]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000f2c 	.word	0x20000f2c
 8009da8:	20000f04 	.word	0x20000f04
 8009dac:	20000ec4 	.word	0x20000ec4
 8009db0:	20000f0c 	.word	0x20000f0c
 8009db4:	20000a34 	.word	0x20000a34
 8009db8:	20000a30 	.word	0x20000a30
 8009dbc:	20000f18 	.word	0x20000f18
 8009dc0:	20000f14 	.word	0x20000f14
 8009dc4:	e000ed04 	.word	0xe000ed04

08009dc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009dce:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <xTaskGetTickCount+0x1c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009dd4:	687b      	ldr	r3, [r7, #4]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	370c      	adds	r7, #12
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	20000f08 	.word	0x20000f08

08009de8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dee:	2300      	movs	r3, #0
 8009df0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009df2:	4b4f      	ldr	r3, [pc, #316]	; (8009f30 <xTaskIncrementTick+0x148>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f040 808f 	bne.w	8009f1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dfc:	4b4d      	ldr	r3, [pc, #308]	; (8009f34 <xTaskIncrementTick+0x14c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3301      	adds	r3, #1
 8009e02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e04:	4a4b      	ldr	r2, [pc, #300]	; (8009f34 <xTaskIncrementTick+0x14c>)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d120      	bne.n	8009e52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e10:	4b49      	ldr	r3, [pc, #292]	; (8009f38 <xTaskIncrementTick+0x150>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <xTaskIncrementTick+0x48>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	603b      	str	r3, [r7, #0]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <xTaskIncrementTick+0x46>
 8009e30:	4b41      	ldr	r3, [pc, #260]	; (8009f38 <xTaskIncrementTick+0x150>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	4b41      	ldr	r3, [pc, #260]	; (8009f3c <xTaskIncrementTick+0x154>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a3f      	ldr	r2, [pc, #252]	; (8009f38 <xTaskIncrementTick+0x150>)
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	4a3f      	ldr	r2, [pc, #252]	; (8009f3c <xTaskIncrementTick+0x154>)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	4b3e      	ldr	r3, [pc, #248]	; (8009f40 <xTaskIncrementTick+0x158>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	4a3d      	ldr	r2, [pc, #244]	; (8009f40 <xTaskIncrementTick+0x158>)
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	f000 fb01 	bl	800a454 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e52:	4b3c      	ldr	r3, [pc, #240]	; (8009f44 <xTaskIncrementTick+0x15c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d349      	bcc.n	8009ef0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e5c:	4b36      	ldr	r3, [pc, #216]	; (8009f38 <xTaskIncrementTick+0x150>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d104      	bne.n	8009e70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e66:	4b37      	ldr	r3, [pc, #220]	; (8009f44 <xTaskIncrementTick+0x15c>)
 8009e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e6c:	601a      	str	r2, [r3, #0]
					break;
 8009e6e:	e03f      	b.n	8009ef0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e70:	4b31      	ldr	r3, [pc, #196]	; (8009f38 <xTaskIncrementTick+0x150>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d203      	bcs.n	8009e90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e88:	4a2e      	ldr	r2, [pc, #184]	; (8009f44 <xTaskIncrementTick+0x15c>)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e8e:	e02f      	b.n	8009ef0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	3304      	adds	r3, #4
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7fe f9d7 	bl	8008248 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d004      	beq.n	8009eac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	3318      	adds	r3, #24
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe f9ce 	bl	8008248 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb0:	4b25      	ldr	r3, [pc, #148]	; (8009f48 <xTaskIncrementTick+0x160>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d903      	bls.n	8009ec0 <xTaskIncrementTick+0xd8>
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	4a22      	ldr	r2, [pc, #136]	; (8009f48 <xTaskIncrementTick+0x160>)
 8009ebe:	6013      	str	r3, [r2, #0]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4a1f      	ldr	r2, [pc, #124]	; (8009f4c <xTaskIncrementTick+0x164>)
 8009ece:	441a      	add	r2, r3
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4610      	mov	r0, r2
 8009ed8:	f7fe f959 	bl	800818e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee0:	4b1b      	ldr	r3, [pc, #108]	; (8009f50 <xTaskIncrementTick+0x168>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d3b8      	bcc.n	8009e5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009eea:	2301      	movs	r3, #1
 8009eec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eee:	e7b5      	b.n	8009e5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ef0:	4b17      	ldr	r3, [pc, #92]	; (8009f50 <xTaskIncrementTick+0x168>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef6:	4915      	ldr	r1, [pc, #84]	; (8009f4c <xTaskIncrementTick+0x164>)
 8009ef8:	4613      	mov	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	440b      	add	r3, r1
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d901      	bls.n	8009f0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f0c:	4b11      	ldr	r3, [pc, #68]	; (8009f54 <xTaskIncrementTick+0x16c>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d007      	beq.n	8009f24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009f14:	2301      	movs	r3, #1
 8009f16:	617b      	str	r3, [r7, #20]
 8009f18:	e004      	b.n	8009f24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f1a:	4b0f      	ldr	r3, [pc, #60]	; (8009f58 <xTaskIncrementTick+0x170>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	4a0d      	ldr	r2, [pc, #52]	; (8009f58 <xTaskIncrementTick+0x170>)
 8009f22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f24:	697b      	ldr	r3, [r7, #20]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20000f2c 	.word	0x20000f2c
 8009f34:	20000f08 	.word	0x20000f08
 8009f38:	20000ebc 	.word	0x20000ebc
 8009f3c:	20000ec0 	.word	0x20000ec0
 8009f40:	20000f1c 	.word	0x20000f1c
 8009f44:	20000f24 	.word	0x20000f24
 8009f48:	20000f0c 	.word	0x20000f0c
 8009f4c:	20000a34 	.word	0x20000a34
 8009f50:	20000a30 	.word	0x20000a30
 8009f54:	20000f18 	.word	0x20000f18
 8009f58:	20000f14 	.word	0x20000f14

08009f5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f62:	4b2a      	ldr	r3, [pc, #168]	; (800a00c <vTaskSwitchContext+0xb0>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d003      	beq.n	8009f72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f6a:	4b29      	ldr	r3, [pc, #164]	; (800a010 <vTaskSwitchContext+0xb4>)
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f70:	e046      	b.n	800a000 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009f72:	4b27      	ldr	r3, [pc, #156]	; (800a010 <vTaskSwitchContext+0xb4>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f78:	4b26      	ldr	r3, [pc, #152]	; (800a014 <vTaskSwitchContext+0xb8>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	60fb      	str	r3, [r7, #12]
 8009f7e:	e010      	b.n	8009fa2 <vTaskSwitchContext+0x46>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10a      	bne.n	8009f9c <vTaskSwitchContext+0x40>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	607b      	str	r3, [r7, #4]
}
 8009f98:	bf00      	nop
 8009f9a:	e7fe      	b.n	8009f9a <vTaskSwitchContext+0x3e>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	60fb      	str	r3, [r7, #12]
 8009fa2:	491d      	ldr	r1, [pc, #116]	; (800a018 <vTaskSwitchContext+0xbc>)
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	440b      	add	r3, r1
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0e4      	beq.n	8009f80 <vTaskSwitchContext+0x24>
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4a15      	ldr	r2, [pc, #84]	; (800a018 <vTaskSwitchContext+0xbc>)
 8009fc2:	4413      	add	r3, r2
 8009fc4:	60bb      	str	r3, [r7, #8]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	605a      	str	r2, [r3, #4]
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d104      	bne.n	8009fe6 <vTaskSwitchContext+0x8a>
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	605a      	str	r2, [r3, #4]
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	4a0b      	ldr	r2, [pc, #44]	; (800a01c <vTaskSwitchContext+0xc0>)
 8009fee:	6013      	str	r3, [r2, #0]
 8009ff0:	4a08      	ldr	r2, [pc, #32]	; (800a014 <vTaskSwitchContext+0xb8>)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ff6:	4b09      	ldr	r3, [pc, #36]	; (800a01c <vTaskSwitchContext+0xc0>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3354      	adds	r3, #84	; 0x54
 8009ffc:	4a08      	ldr	r2, [pc, #32]	; (800a020 <vTaskSwitchContext+0xc4>)
 8009ffe:	6013      	str	r3, [r2, #0]
}
 800a000:	bf00      	nop
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	20000f2c 	.word	0x20000f2c
 800a010:	20000f18 	.word	0x20000f18
 800a014:	20000f0c 	.word	0x20000f0c
 800a018:	20000a34 	.word	0x20000a34
 800a01c:	20000a30 	.word	0x20000a30
 800a020:	20000018 	.word	0x20000018

0800a024 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10a      	bne.n	800a04a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	60fb      	str	r3, [r7, #12]
}
 800a046:	bf00      	nop
 800a048:	e7fe      	b.n	800a048 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a04a:	4b07      	ldr	r3, [pc, #28]	; (800a068 <vTaskPlaceOnEventList+0x44>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3318      	adds	r3, #24
 800a050:	4619      	mov	r1, r3
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7fe f8bf 	bl	80081d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a058:	2101      	movs	r1, #1
 800a05a:	6838      	ldr	r0, [r7, #0]
 800a05c:	f000 fcf8 	bl	800aa50 <prvAddCurrentTaskToDelayedList>
}
 800a060:	bf00      	nop
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	20000a30 	.word	0x20000a30

0800a06c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10a      	bne.n	800a094 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	617b      	str	r3, [r7, #20]
}
 800a090:	bf00      	nop
 800a092:	e7fe      	b.n	800a092 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a094:	4b0a      	ldr	r3, [pc, #40]	; (800a0c0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	3318      	adds	r3, #24
 800a09a:	4619      	mov	r1, r3
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f7fe f876 	bl	800818e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a0a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0ae:	6879      	ldr	r1, [r7, #4]
 800a0b0:	68b8      	ldr	r0, [r7, #8]
 800a0b2:	f000 fccd 	bl	800aa50 <prvAddCurrentTaskToDelayedList>
	}
 800a0b6:	bf00      	nop
 800a0b8:	3718      	adds	r7, #24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20000a30 	.word	0x20000a30

0800a0c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10a      	bne.n	800a0f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	60fb      	str	r3, [r7, #12]
}
 800a0ec:	bf00      	nop
 800a0ee:	e7fe      	b.n	800a0ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	3318      	adds	r3, #24
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fe f8a7 	bl	8008248 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0fa:	4b1e      	ldr	r3, [pc, #120]	; (800a174 <xTaskRemoveFromEventList+0xb0>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d11d      	bne.n	800a13e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	3304      	adds	r3, #4
 800a106:	4618      	mov	r0, r3
 800a108:	f7fe f89e 	bl	8008248 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a110:	4b19      	ldr	r3, [pc, #100]	; (800a178 <xTaskRemoveFromEventList+0xb4>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	429a      	cmp	r2, r3
 800a116:	d903      	bls.n	800a120 <xTaskRemoveFromEventList+0x5c>
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11c:	4a16      	ldr	r2, [pc, #88]	; (800a178 <xTaskRemoveFromEventList+0xb4>)
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a124:	4613      	mov	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4a13      	ldr	r2, [pc, #76]	; (800a17c <xTaskRemoveFromEventList+0xb8>)
 800a12e:	441a      	add	r2, r3
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	3304      	adds	r3, #4
 800a134:	4619      	mov	r1, r3
 800a136:	4610      	mov	r0, r2
 800a138:	f7fe f829 	bl	800818e <vListInsertEnd>
 800a13c:	e005      	b.n	800a14a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	3318      	adds	r3, #24
 800a142:	4619      	mov	r1, r3
 800a144:	480e      	ldr	r0, [pc, #56]	; (800a180 <xTaskRemoveFromEventList+0xbc>)
 800a146:	f7fe f822 	bl	800818e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a14e:	4b0d      	ldr	r3, [pc, #52]	; (800a184 <xTaskRemoveFromEventList+0xc0>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a154:	429a      	cmp	r2, r3
 800a156:	d905      	bls.n	800a164 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a158:	2301      	movs	r3, #1
 800a15a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a15c:	4b0a      	ldr	r3, [pc, #40]	; (800a188 <xTaskRemoveFromEventList+0xc4>)
 800a15e:	2201      	movs	r2, #1
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	e001      	b.n	800a168 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a164:	2300      	movs	r3, #0
 800a166:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a168:	697b      	ldr	r3, [r7, #20]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20000f2c 	.word	0x20000f2c
 800a178:	20000f0c 	.word	0x20000f0c
 800a17c:	20000a34 	.word	0x20000a34
 800a180:	20000ec4 	.word	0x20000ec4
 800a184:	20000a30 	.word	0x20000a30
 800a188:	20000f18 	.word	0x20000f18

0800a18c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10a      	bne.n	800a1b0 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800a19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	60fb      	str	r3, [r7, #12]
}
 800a1ac:	bf00      	nop
 800a1ae:	e7fe      	b.n	800a1ae <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800a1b0:	f001 f920 	bl	800b3f4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1b4:	4b06      	ldr	r3, [pc, #24]	; (800a1d0 <vTaskSetTimeOutState+0x44>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a1bc:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <vTaskSetTimeOutState+0x48>)
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800a1c4:	f001 f946 	bl	800b454 <vPortExitCritical>
}
 800a1c8:	bf00      	nop
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	20000f1c 	.word	0x20000f1c
 800a1d4:	20000f08 	.word	0x20000f08

0800a1d8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1e0:	4b06      	ldr	r3, [pc, #24]	; (800a1fc <vTaskInternalSetTimeOutState+0x24>)
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1e8:	4b05      	ldr	r3, [pc, #20]	; (800a200 <vTaskInternalSetTimeOutState+0x28>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	605a      	str	r2, [r3, #4]
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	20000f1c 	.word	0x20000f1c
 800a200:	20000f08 	.word	0x20000f08

0800a204 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	613b      	str	r3, [r7, #16]
}
 800a226:	bf00      	nop
 800a228:	e7fe      	b.n	800a228 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10a      	bne.n	800a246 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	60fb      	str	r3, [r7, #12]
}
 800a242:	bf00      	nop
 800a244:	e7fe      	b.n	800a244 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a246:	f001 f8d5 	bl	800b3f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a24a:	4b1d      	ldr	r3, [pc, #116]	; (800a2c0 <xTaskCheckForTimeOut+0xbc>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	69ba      	ldr	r2, [r7, #24]
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a262:	d102      	bne.n	800a26a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a264:	2300      	movs	r3, #0
 800a266:	61fb      	str	r3, [r7, #28]
 800a268:	e023      	b.n	800a2b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	4b15      	ldr	r3, [pc, #84]	; (800a2c4 <xTaskCheckForTimeOut+0xc0>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	429a      	cmp	r2, r3
 800a274:	d007      	beq.n	800a286 <xTaskCheckForTimeOut+0x82>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	69ba      	ldr	r2, [r7, #24]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d302      	bcc.n	800a286 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a280:	2301      	movs	r3, #1
 800a282:	61fb      	str	r3, [r7, #28]
 800a284:	e015      	b.n	800a2b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d20b      	bcs.n	800a2a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	1ad2      	subs	r2, r2, r3
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7ff ff9b 	bl	800a1d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	61fb      	str	r3, [r7, #28]
 800a2a6:	e004      	b.n	800a2b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a2b2:	f001 f8cf 	bl	800b454 <vPortExitCritical>

	return xReturn;
 800a2b6:	69fb      	ldr	r3, [r7, #28]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3720      	adds	r7, #32
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	20000f08 	.word	0x20000f08
 800a2c4:	20000f1c 	.word	0x20000f1c

0800a2c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a2cc:	4b03      	ldr	r3, [pc, #12]	; (800a2dc <vTaskMissedYield+0x14>)
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	601a      	str	r2, [r3, #0]
}
 800a2d2:	bf00      	nop
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	20000f18 	.word	0x20000f18

0800a2e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a2e8:	f000 f852 	bl	800a390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a2ec:	4b06      	ldr	r3, [pc, #24]	; (800a308 <prvIdleTask+0x28>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d9f9      	bls.n	800a2e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a2f4:	4b05      	ldr	r3, [pc, #20]	; (800a30c <prvIdleTask+0x2c>)
 800a2f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a304:	e7f0      	b.n	800a2e8 <prvIdleTask+0x8>
 800a306:	bf00      	nop
 800a308:	20000a34 	.word	0x20000a34
 800a30c:	e000ed04 	.word	0xe000ed04

0800a310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a316:	2300      	movs	r3, #0
 800a318:	607b      	str	r3, [r7, #4]
 800a31a:	e00c      	b.n	800a336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	4613      	mov	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4a12      	ldr	r2, [pc, #72]	; (800a370 <prvInitialiseTaskLists+0x60>)
 800a328:	4413      	add	r3, r2
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fd ff02 	bl	8008134 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3301      	adds	r3, #1
 800a334:	607b      	str	r3, [r7, #4]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b37      	cmp	r3, #55	; 0x37
 800a33a:	d9ef      	bls.n	800a31c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a33c:	480d      	ldr	r0, [pc, #52]	; (800a374 <prvInitialiseTaskLists+0x64>)
 800a33e:	f7fd fef9 	bl	8008134 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a342:	480d      	ldr	r0, [pc, #52]	; (800a378 <prvInitialiseTaskLists+0x68>)
 800a344:	f7fd fef6 	bl	8008134 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a348:	480c      	ldr	r0, [pc, #48]	; (800a37c <prvInitialiseTaskLists+0x6c>)
 800a34a:	f7fd fef3 	bl	8008134 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a34e:	480c      	ldr	r0, [pc, #48]	; (800a380 <prvInitialiseTaskLists+0x70>)
 800a350:	f7fd fef0 	bl	8008134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a354:	480b      	ldr	r0, [pc, #44]	; (800a384 <prvInitialiseTaskLists+0x74>)
 800a356:	f7fd feed 	bl	8008134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a35a:	4b0b      	ldr	r3, [pc, #44]	; (800a388 <prvInitialiseTaskLists+0x78>)
 800a35c:	4a05      	ldr	r2, [pc, #20]	; (800a374 <prvInitialiseTaskLists+0x64>)
 800a35e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a360:	4b0a      	ldr	r3, [pc, #40]	; (800a38c <prvInitialiseTaskLists+0x7c>)
 800a362:	4a05      	ldr	r2, [pc, #20]	; (800a378 <prvInitialiseTaskLists+0x68>)
 800a364:	601a      	str	r2, [r3, #0]
}
 800a366:	bf00      	nop
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	20000a34 	.word	0x20000a34
 800a374:	20000e94 	.word	0x20000e94
 800a378:	20000ea8 	.word	0x20000ea8
 800a37c:	20000ec4 	.word	0x20000ec4
 800a380:	20000ed8 	.word	0x20000ed8
 800a384:	20000ef0 	.word	0x20000ef0
 800a388:	20000ebc 	.word	0x20000ebc
 800a38c:	20000ec0 	.word	0x20000ec0

0800a390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a396:	e019      	b.n	800a3cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a398:	f001 f82c 	bl	800b3f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a39c:	4b10      	ldr	r3, [pc, #64]	; (800a3e0 <prvCheckTasksWaitingTermination+0x50>)
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fd ff4d 	bl	8008248 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3ae:	4b0d      	ldr	r3, [pc, #52]	; (800a3e4 <prvCheckTasksWaitingTermination+0x54>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	4a0b      	ldr	r2, [pc, #44]	; (800a3e4 <prvCheckTasksWaitingTermination+0x54>)
 800a3b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a3b8:	4b0b      	ldr	r3, [pc, #44]	; (800a3e8 <prvCheckTasksWaitingTermination+0x58>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	4a0a      	ldr	r2, [pc, #40]	; (800a3e8 <prvCheckTasksWaitingTermination+0x58>)
 800a3c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a3c2:	f001 f847 	bl	800b454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f810 	bl	800a3ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3cc:	4b06      	ldr	r3, [pc, #24]	; (800a3e8 <prvCheckTasksWaitingTermination+0x58>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1e1      	bne.n	800a398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a3d4:	bf00      	nop
 800a3d6:	bf00      	nop
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	20000ed8 	.word	0x20000ed8
 800a3e4:	20000f04 	.word	0x20000f04
 800a3e8:	20000eec 	.word	0x20000eec

0800a3ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	3354      	adds	r3, #84	; 0x54
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f001 fc05 	bl	800bc08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a404:	2b00      	cmp	r3, #0
 800a406:	d108      	bne.n	800a41a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40c:	4618      	mov	r0, r3
 800a40e:	f001 f9df 	bl	800b7d0 <vPortFree>
				vPortFree( pxTCB );
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f001 f9dc 	bl	800b7d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a418:	e018      	b.n	800a44c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a420:	2b01      	cmp	r3, #1
 800a422:	d103      	bne.n	800a42c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f001 f9d3 	bl	800b7d0 <vPortFree>
	}
 800a42a:	e00f      	b.n	800a44c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a432:	2b02      	cmp	r3, #2
 800a434:	d00a      	beq.n	800a44c <prvDeleteTCB+0x60>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	60fb      	str	r3, [r7, #12]
}
 800a448:	bf00      	nop
 800a44a:	e7fe      	b.n	800a44a <prvDeleteTCB+0x5e>
	}
 800a44c:	bf00      	nop
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a45a:	4b0c      	ldr	r3, [pc, #48]	; (800a48c <prvResetNextTaskUnblockTime+0x38>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d104      	bne.n	800a46e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a464:	4b0a      	ldr	r3, [pc, #40]	; (800a490 <prvResetNextTaskUnblockTime+0x3c>)
 800a466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a46a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a46c:	e008      	b.n	800a480 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a46e:	4b07      	ldr	r3, [pc, #28]	; (800a48c <prvResetNextTaskUnblockTime+0x38>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	4a04      	ldr	r2, [pc, #16]	; (800a490 <prvResetNextTaskUnblockTime+0x3c>)
 800a47e:	6013      	str	r3, [r2, #0]
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	20000ebc 	.word	0x20000ebc
 800a490:	20000f24 	.word	0x20000f24

0800a494 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a49a:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <xTaskGetCurrentTaskHandle+0x1c>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a4a0:	687b      	ldr	r3, [r7, #4]
	}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	20000a30 	.word	0x20000a30

0800a4b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a4ba:	4b0b      	ldr	r3, [pc, #44]	; (800a4e8 <xTaskGetSchedulerState+0x34>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d102      	bne.n	800a4c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	607b      	str	r3, [r7, #4]
 800a4c6:	e008      	b.n	800a4da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4c8:	4b08      	ldr	r3, [pc, #32]	; (800a4ec <xTaskGetSchedulerState+0x38>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d102      	bne.n	800a4d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	607b      	str	r3, [r7, #4]
 800a4d4:	e001      	b.n	800a4da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a4da:	687b      	ldr	r3, [r7, #4]
	}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	20000f10 	.word	0x20000f10
 800a4ec:	20000f2c 	.word	0x20000f2c

0800a4f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d051      	beq.n	800a5aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a50a:	4b2a      	ldr	r3, [pc, #168]	; (800a5b4 <xTaskPriorityInherit+0xc4>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a510:	429a      	cmp	r2, r3
 800a512:	d241      	bcs.n	800a598 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	db06      	blt.n	800a52a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a51c:	4b25      	ldr	r3, [pc, #148]	; (800a5b4 <xTaskPriorityInherit+0xc4>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a522:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	6959      	ldr	r1, [r3, #20]
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a532:	4613      	mov	r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	4413      	add	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	4a1f      	ldr	r2, [pc, #124]	; (800a5b8 <xTaskPriorityInherit+0xc8>)
 800a53c:	4413      	add	r3, r2
 800a53e:	4299      	cmp	r1, r3
 800a540:	d122      	bne.n	800a588 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	3304      	adds	r3, #4
 800a546:	4618      	mov	r0, r3
 800a548:	f7fd fe7e 	bl	8008248 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a54c:	4b19      	ldr	r3, [pc, #100]	; (800a5b4 <xTaskPriorityInherit+0xc4>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a55a:	4b18      	ldr	r3, [pc, #96]	; (800a5bc <xTaskPriorityInherit+0xcc>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d903      	bls.n	800a56a <xTaskPriorityInherit+0x7a>
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a566:	4a15      	ldr	r2, [pc, #84]	; (800a5bc <xTaskPriorityInherit+0xcc>)
 800a568:	6013      	str	r3, [r2, #0]
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a56e:	4613      	mov	r3, r2
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	4413      	add	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4a10      	ldr	r2, [pc, #64]	; (800a5b8 <xTaskPriorityInherit+0xc8>)
 800a578:	441a      	add	r2, r3
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	3304      	adds	r3, #4
 800a57e:	4619      	mov	r1, r3
 800a580:	4610      	mov	r0, r2
 800a582:	f7fd fe04 	bl	800818e <vListInsertEnd>
 800a586:	e004      	b.n	800a592 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a588:	4b0a      	ldr	r3, [pc, #40]	; (800a5b4 <xTaskPriorityInherit+0xc4>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a592:	2301      	movs	r3, #1
 800a594:	60fb      	str	r3, [r7, #12]
 800a596:	e008      	b.n	800a5aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a59c:	4b05      	ldr	r3, [pc, #20]	; (800a5b4 <xTaskPriorityInherit+0xc4>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d201      	bcs.n	800a5aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
	}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	20000a30 	.word	0x20000a30
 800a5b8:	20000a34 	.word	0x20000a34
 800a5bc:	20000f0c 	.word	0x20000f0c

0800a5c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d056      	beq.n	800a684 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a5d6:	4b2e      	ldr	r3, [pc, #184]	; (800a690 <xTaskPriorityDisinherit+0xd0>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	693a      	ldr	r2, [r7, #16]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d00a      	beq.n	800a5f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	60fb      	str	r3, [r7, #12]
}
 800a5f2:	bf00      	nop
 800a5f4:	e7fe      	b.n	800a5f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10a      	bne.n	800a614 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	60bb      	str	r3, [r7, #8]
}
 800a610:	bf00      	nop
 800a612:	e7fe      	b.n	800a612 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a618:	1e5a      	subs	r2, r3, #1
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a626:	429a      	cmp	r2, r3
 800a628:	d02c      	beq.n	800a684 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d128      	bne.n	800a684 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	3304      	adds	r3, #4
 800a636:	4618      	mov	r0, r3
 800a638:	f7fd fe06 	bl	8008248 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a648:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a654:	4b0f      	ldr	r3, [pc, #60]	; (800a694 <xTaskPriorityDisinherit+0xd4>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d903      	bls.n	800a664 <xTaskPriorityDisinherit+0xa4>
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a660:	4a0c      	ldr	r2, [pc, #48]	; (800a694 <xTaskPriorityDisinherit+0xd4>)
 800a662:	6013      	str	r3, [r2, #0]
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a668:	4613      	mov	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4a09      	ldr	r2, [pc, #36]	; (800a698 <xTaskPriorityDisinherit+0xd8>)
 800a672:	441a      	add	r2, r3
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	3304      	adds	r3, #4
 800a678:	4619      	mov	r1, r3
 800a67a:	4610      	mov	r0, r2
 800a67c:	f7fd fd87 	bl	800818e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a680:	2301      	movs	r3, #1
 800a682:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a684:	697b      	ldr	r3, [r7, #20]
	}
 800a686:	4618      	mov	r0, r3
 800a688:	3718      	adds	r7, #24
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	20000a30 	.word	0x20000a30
 800a694:	20000f0c 	.word	0x20000f0c
 800a698:	20000a34 	.word	0x20000a34

0800a69c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d06a      	beq.n	800a78a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10a      	bne.n	800a6d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	60fb      	str	r3, [r7, #12]
}
 800a6ce:	bf00      	nop
 800a6d0:	e7fe      	b.n	800a6d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d902      	bls.n	800a6e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	61fb      	str	r3, [r7, #28]
 800a6e0:	e002      	b.n	800a6e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ec:	69fa      	ldr	r2, [r7, #28]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d04b      	beq.n	800a78a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6f6:	697a      	ldr	r2, [r7, #20]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d146      	bne.n	800a78a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a6fc:	4b25      	ldr	r3, [pc, #148]	; (800a794 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	429a      	cmp	r2, r3
 800a704:	d10a      	bne.n	800a71c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	60bb      	str	r3, [r7, #8]
}
 800a718:	bf00      	nop
 800a71a:	e7fe      	b.n	800a71a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a720:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	69fa      	ldr	r2, [r7, #28]
 800a726:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	699b      	ldr	r3, [r3, #24]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	db04      	blt.n	800a73a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	6959      	ldr	r1, [r3, #20]
 800a73e:	693a      	ldr	r2, [r7, #16]
 800a740:	4613      	mov	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4413      	add	r3, r2
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	4a13      	ldr	r2, [pc, #76]	; (800a798 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a74a:	4413      	add	r3, r2
 800a74c:	4299      	cmp	r1, r3
 800a74e:	d11c      	bne.n	800a78a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	3304      	adds	r3, #4
 800a754:	4618      	mov	r0, r3
 800a756:	f7fd fd77 	bl	8008248 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75e:	4b0f      	ldr	r3, [pc, #60]	; (800a79c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	429a      	cmp	r2, r3
 800a764:	d903      	bls.n	800a76e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76a:	4a0c      	ldr	r2, [pc, #48]	; (800a79c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a772:	4613      	mov	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4a07      	ldr	r2, [pc, #28]	; (800a798 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a77c:	441a      	add	r2, r3
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	3304      	adds	r3, #4
 800a782:	4619      	mov	r1, r3
 800a784:	4610      	mov	r0, r2
 800a786:	f7fd fd02 	bl	800818e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a78a:	bf00      	nop
 800a78c:	3720      	adds	r7, #32
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	20000a30 	.word	0x20000a30
 800a798:	20000a34 	.word	0x20000a34
 800a79c:	20000f0c 	.word	0x20000f0c

0800a7a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a7a0:	b480      	push	{r7}
 800a7a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a7a4:	4b07      	ldr	r3, [pc, #28]	; (800a7c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d004      	beq.n	800a7b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a7ac:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7b2:	3201      	adds	r2, #1
 800a7b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a7b6:	4b03      	ldr	r3, [pc, #12]	; (800a7c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
	}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr
 800a7c4:	20000a30 	.word	0x20000a30

0800a7c8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
 800a7d4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a7d6:	f000 fe0d 	bl	800b3f4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a7da:	4b29      	ldr	r3, [pc, #164]	; (800a880 <xTaskNotifyWait+0xb8>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d01c      	beq.n	800a822 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a7e8:	4b25      	ldr	r3, [pc, #148]	; (800a880 <xTaskNotifyWait+0xb8>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	43d2      	mvns	r2, r2
 800a7f4:	400a      	ands	r2, r1
 800a7f6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a7fa:	4b21      	ldr	r3, [pc, #132]	; (800a880 <xTaskNotifyWait+0xb8>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00b      	beq.n	800a822 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a80a:	2101      	movs	r1, #1
 800a80c:	6838      	ldr	r0, [r7, #0]
 800a80e:	f000 f91f 	bl	800aa50 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a812:	4b1c      	ldr	r3, [pc, #112]	; (800a884 <xTaskNotifyWait+0xbc>)
 800a814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a818:	601a      	str	r2, [r3, #0]
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a822:	f000 fe17 	bl	800b454 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a826:	f000 fde5 	bl	800b3f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d005      	beq.n	800a83c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a830:	4b13      	ldr	r3, [pc, #76]	; (800a880 <xTaskNotifyWait+0xb8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a83c:	4b10      	ldr	r3, [pc, #64]	; (800a880 <xTaskNotifyWait+0xb8>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a844:	b2db      	uxtb	r3, r3
 800a846:	2b02      	cmp	r3, #2
 800a848:	d002      	beq.n	800a850 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a84a:	2300      	movs	r3, #0
 800a84c:	617b      	str	r3, [r7, #20]
 800a84e:	e00a      	b.n	800a866 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a850:	4b0b      	ldr	r3, [pc, #44]	; (800a880 <xTaskNotifyWait+0xb8>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	43d2      	mvns	r2, r2
 800a85c:	400a      	ands	r2, r1
 800a85e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800a862:	2301      	movs	r3, #1
 800a864:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a866:	4b06      	ldr	r3, [pc, #24]	; (800a880 <xTaskNotifyWait+0xb8>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800a870:	f000 fdf0 	bl	800b454 <vPortExitCritical>

		return xReturn;
 800a874:	697b      	ldr	r3, [r7, #20]
	}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	20000a30 	.word	0x20000a30
 800a884:	e000ed04 	.word	0xe000ed04

0800a888 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b08a      	sub	sp, #40	; 0x28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	4613      	mov	r3, r2
 800a896:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a898:	2301      	movs	r3, #1
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10a      	bne.n	800a8b8 <xTaskGenericNotify+0x30>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	61bb      	str	r3, [r7, #24]
}
 800a8b4:	bf00      	nop
 800a8b6:	e7fe      	b.n	800a8b6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a8bc:	f000 fd9a 	bl	800b3f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d004      	beq.n	800a8d0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a8c6:	6a3b      	ldr	r3, [r7, #32]
 800a8c8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a8d0:	6a3b      	ldr	r3, [r7, #32]
 800a8d2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a8d6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800a8e0:	79fb      	ldrb	r3, [r7, #7]
 800a8e2:	2b04      	cmp	r3, #4
 800a8e4:	d82d      	bhi.n	800a942 <xTaskGenericNotify+0xba>
 800a8e6:	a201      	add	r2, pc, #4	; (adr r2, 800a8ec <xTaskGenericNotify+0x64>)
 800a8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ec:	0800a965 	.word	0x0800a965
 800a8f0:	0800a901 	.word	0x0800a901
 800a8f4:	0800a913 	.word	0x0800a913
 800a8f8:	0800a923 	.word	0x0800a923
 800a8fc:	0800a92d 	.word	0x0800a92d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	431a      	orrs	r2, r3
 800a90a:	6a3b      	ldr	r3, [r7, #32]
 800a90c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a910:	e02b      	b.n	800a96a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a912:	6a3b      	ldr	r3, [r7, #32]
 800a914:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a918:	1c5a      	adds	r2, r3, #1
 800a91a:	6a3b      	ldr	r3, [r7, #32]
 800a91c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a920:	e023      	b.n	800a96a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a92a:	e01e      	b.n	800a96a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a92c:	7ffb      	ldrb	r3, [r7, #31]
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d004      	beq.n	800a93c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a932:	6a3b      	ldr	r3, [r7, #32]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a93a:	e016      	b.n	800a96a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800a93c:	2300      	movs	r3, #0
 800a93e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a940:	e013      	b.n	800a96a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a942:	6a3b      	ldr	r3, [r7, #32]
 800a944:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a94c:	d00c      	beq.n	800a968 <xTaskGenericNotify+0xe0>
	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	617b      	str	r3, [r7, #20]
}
 800a960:	bf00      	nop
 800a962:	e7fe      	b.n	800a962 <xTaskGenericNotify+0xda>
					break;
 800a964:	bf00      	nop
 800a966:	e000      	b.n	800a96a <xTaskGenericNotify+0xe2>

					break;
 800a968:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a96a:	7ffb      	ldrb	r3, [r7, #31]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d13a      	bne.n	800a9e6 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a970:	6a3b      	ldr	r3, [r7, #32]
 800a972:	3304      	adds	r3, #4
 800a974:	4618      	mov	r0, r3
 800a976:	f7fd fc67 	bl	8008248 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a97a:	6a3b      	ldr	r3, [r7, #32]
 800a97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a97e:	4b1d      	ldr	r3, [pc, #116]	; (800a9f4 <xTaskGenericNotify+0x16c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	429a      	cmp	r2, r3
 800a984:	d903      	bls.n	800a98e <xTaskGenericNotify+0x106>
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98a:	4a1a      	ldr	r2, [pc, #104]	; (800a9f4 <xTaskGenericNotify+0x16c>)
 800a98c:	6013      	str	r3, [r2, #0]
 800a98e:	6a3b      	ldr	r3, [r7, #32]
 800a990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a992:	4613      	mov	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4a17      	ldr	r2, [pc, #92]	; (800a9f8 <xTaskGenericNotify+0x170>)
 800a99c:	441a      	add	r2, r3
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	3304      	adds	r3, #4
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	f7fd fbf2 	bl	800818e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a9aa:	6a3b      	ldr	r3, [r7, #32]
 800a9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00a      	beq.n	800a9c8 <xTaskGenericNotify+0x140>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	613b      	str	r3, [r7, #16]
}
 800a9c4:	bf00      	nop
 800a9c6:	e7fe      	b.n	800a9c6 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9cc:	4b0b      	ldr	r3, [pc, #44]	; (800a9fc <xTaskGenericNotify+0x174>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d907      	bls.n	800a9e6 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a9d6:	4b0a      	ldr	r3, [pc, #40]	; (800aa00 <xTaskGenericNotify+0x178>)
 800a9d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9dc:	601a      	str	r2, [r3, #0]
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a9e6:	f000 fd35 	bl	800b454 <vPortExitCritical>

		return xReturn;
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3728      	adds	r7, #40	; 0x28
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	20000f0c 	.word	0x20000f0c
 800a9f8:	20000a34 	.word	0x20000a34
 800a9fc:	20000a30 	.word	0x20000a30
 800aa00:	e000ed04 	.word	0xe000ed04

0800aa04 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d102      	bne.n	800aa18 <xTaskNotifyStateClear+0x14>
 800aa12:	4b0e      	ldr	r3, [pc, #56]	; (800aa4c <xTaskNotifyStateClear+0x48>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	e000      	b.n	800aa1a <xTaskNotifyStateClear+0x16>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800aa1c:	f000 fcea 	bl	800b3f4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d106      	bne.n	800aa3a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 800aa34:	2301      	movs	r3, #1
 800aa36:	60fb      	str	r3, [r7, #12]
 800aa38:	e001      	b.n	800aa3e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800aa3e:	f000 fd09 	bl	800b454 <vPortExitCritical>

		return xReturn;
 800aa42:	68fb      	ldr	r3, [r7, #12]
	}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	20000a30 	.word	0x20000a30

0800aa50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa5a:	4b21      	ldr	r3, [pc, #132]	; (800aae0 <prvAddCurrentTaskToDelayedList+0x90>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa60:	4b20      	ldr	r3, [pc, #128]	; (800aae4 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3304      	adds	r3, #4
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fd fbee 	bl	8008248 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa72:	d10a      	bne.n	800aa8a <prvAddCurrentTaskToDelayedList+0x3a>
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d007      	beq.n	800aa8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa7a:	4b1a      	ldr	r3, [pc, #104]	; (800aae4 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3304      	adds	r3, #4
 800aa80:	4619      	mov	r1, r3
 800aa82:	4819      	ldr	r0, [pc, #100]	; (800aae8 <prvAddCurrentTaskToDelayedList+0x98>)
 800aa84:	f7fd fb83 	bl	800818e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa88:	e026      	b.n	800aad8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4413      	add	r3, r2
 800aa90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa92:	4b14      	ldr	r3, [pc, #80]	; (800aae4 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d209      	bcs.n	800aab6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaa2:	4b12      	ldr	r3, [pc, #72]	; (800aaec <prvAddCurrentTaskToDelayedList+0x9c>)
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	4b0f      	ldr	r3, [pc, #60]	; (800aae4 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3304      	adds	r3, #4
 800aaac:	4619      	mov	r1, r3
 800aaae:	4610      	mov	r0, r2
 800aab0:	f7fd fb91 	bl	80081d6 <vListInsert>
}
 800aab4:	e010      	b.n	800aad8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aab6:	4b0e      	ldr	r3, [pc, #56]	; (800aaf0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	4b0a      	ldr	r3, [pc, #40]	; (800aae4 <prvAddCurrentTaskToDelayedList+0x94>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4619      	mov	r1, r3
 800aac2:	4610      	mov	r0, r2
 800aac4:	f7fd fb87 	bl	80081d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aac8:	4b0a      	ldr	r3, [pc, #40]	; (800aaf4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d202      	bcs.n	800aad8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aad2:	4a08      	ldr	r2, [pc, #32]	; (800aaf4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	6013      	str	r3, [r2, #0]
}
 800aad8:	bf00      	nop
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	20000f08 	.word	0x20000f08
 800aae4:	20000a30 	.word	0x20000a30
 800aae8:	20000ef0 	.word	0x20000ef0
 800aaec:	20000ec0 	.word	0x20000ec0
 800aaf0:	20000ebc 	.word	0x20000ebc
 800aaf4:	20000f24 	.word	0x20000f24

0800aaf8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b08a      	sub	sp, #40	; 0x28
 800aafc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aafe:	2300      	movs	r3, #0
 800ab00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab02:	f000 fb07 	bl	800b114 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab06:	4b1c      	ldr	r3, [pc, #112]	; (800ab78 <xTimerCreateTimerTask+0x80>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d021      	beq.n	800ab52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab12:	2300      	movs	r3, #0
 800ab14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab16:	1d3a      	adds	r2, r7, #4
 800ab18:	f107 0108 	add.w	r1, r7, #8
 800ab1c:	f107 030c 	add.w	r3, r7, #12
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7fd faed 	bl	8008100 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab26:	6879      	ldr	r1, [r7, #4]
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	9202      	str	r2, [sp, #8]
 800ab2e:	9301      	str	r3, [sp, #4]
 800ab30:	2302      	movs	r3, #2
 800ab32:	9300      	str	r3, [sp, #0]
 800ab34:	2300      	movs	r3, #0
 800ab36:	460a      	mov	r2, r1
 800ab38:	4910      	ldr	r1, [pc, #64]	; (800ab7c <xTimerCreateTimerTask+0x84>)
 800ab3a:	4811      	ldr	r0, [pc, #68]	; (800ab80 <xTimerCreateTimerTask+0x88>)
 800ab3c:	f7fe fe3c 	bl	80097b8 <xTaskCreateStatic>
 800ab40:	4603      	mov	r3, r0
 800ab42:	4a10      	ldr	r2, [pc, #64]	; (800ab84 <xTimerCreateTimerTask+0x8c>)
 800ab44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ab46:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <xTimerCreateTimerTask+0x8c>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10a      	bne.n	800ab6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ab58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5c:	f383 8811 	msr	BASEPRI, r3
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	613b      	str	r3, [r7, #16]
}
 800ab6a:	bf00      	nop
 800ab6c:	e7fe      	b.n	800ab6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ab6e:	697b      	ldr	r3, [r7, #20]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3718      	adds	r7, #24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	20000f60 	.word	0x20000f60
 800ab7c:	0800c938 	.word	0x0800c938
 800ab80:	0800acbd 	.word	0x0800acbd
 800ab84:	20000f64 	.word	0x20000f64

0800ab88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b08a      	sub	sp, #40	; 0x28
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab96:	2300      	movs	r3, #0
 800ab98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d10a      	bne.n	800abb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800aba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba4:	f383 8811 	msr	BASEPRI, r3
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	623b      	str	r3, [r7, #32]
}
 800abb2:	bf00      	nop
 800abb4:	e7fe      	b.n	800abb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800abb6:	4b1a      	ldr	r3, [pc, #104]	; (800ac20 <xTimerGenericCommand+0x98>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d02a      	beq.n	800ac14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	2b05      	cmp	r3, #5
 800abce:	dc18      	bgt.n	800ac02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800abd0:	f7ff fc70 	bl	800a4b4 <xTaskGetSchedulerState>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d109      	bne.n	800abee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800abda:	4b11      	ldr	r3, [pc, #68]	; (800ac20 <xTimerGenericCommand+0x98>)
 800abdc:	6818      	ldr	r0, [r3, #0]
 800abde:	f107 0110 	add.w	r1, r7, #16
 800abe2:	2300      	movs	r3, #0
 800abe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abe6:	f7fd fcc9 	bl	800857c <xQueueGenericSend>
 800abea:	6278      	str	r0, [r7, #36]	; 0x24
 800abec:	e012      	b.n	800ac14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800abee:	4b0c      	ldr	r3, [pc, #48]	; (800ac20 <xTimerGenericCommand+0x98>)
 800abf0:	6818      	ldr	r0, [r3, #0]
 800abf2:	f107 0110 	add.w	r1, r7, #16
 800abf6:	2300      	movs	r3, #0
 800abf8:	2200      	movs	r2, #0
 800abfa:	f7fd fcbf 	bl	800857c <xQueueGenericSend>
 800abfe:	6278      	str	r0, [r7, #36]	; 0x24
 800ac00:	e008      	b.n	800ac14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac02:	4b07      	ldr	r3, [pc, #28]	; (800ac20 <xTimerGenericCommand+0x98>)
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	f107 0110 	add.w	r1, r7, #16
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	683a      	ldr	r2, [r7, #0]
 800ac0e:	f7fd fdb3 	bl	8008778 <xQueueGenericSendFromISR>
 800ac12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3728      	adds	r7, #40	; 0x28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20000f60 	.word	0x20000f60

0800ac24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b088      	sub	sp, #32
 800ac28:	af02      	add	r7, sp, #8
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac2e:	4b22      	ldr	r3, [pc, #136]	; (800acb8 <prvProcessExpiredTimer+0x94>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	3304      	adds	r3, #4
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fd fb03 	bl	8008248 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac48:	f003 0304 	and.w	r3, r3, #4
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d022      	beq.n	800ac96 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	699a      	ldr	r2, [r3, #24]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	18d1      	adds	r1, r2, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	683a      	ldr	r2, [r7, #0]
 800ac5c:	6978      	ldr	r0, [r7, #20]
 800ac5e:	f000 f8d1 	bl	800ae04 <prvInsertTimerInActiveList>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d01f      	beq.n	800aca8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac68:	2300      	movs	r3, #0
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	2100      	movs	r1, #0
 800ac72:	6978      	ldr	r0, [r7, #20]
 800ac74:	f7ff ff88 	bl	800ab88 <xTimerGenericCommand>
 800ac78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d113      	bne.n	800aca8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ac80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac84:	f383 8811 	msr	BASEPRI, r3
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	60fb      	str	r3, [r7, #12]
}
 800ac92:	bf00      	nop
 800ac94:	e7fe      	b.n	800ac94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac9c:	f023 0301 	bic.w	r3, r3, #1
 800aca0:	b2da      	uxtb	r2, r3
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	6a1b      	ldr	r3, [r3, #32]
 800acac:	6978      	ldr	r0, [r7, #20]
 800acae:	4798      	blx	r3
}
 800acb0:	bf00      	nop
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	20000f58 	.word	0x20000f58

0800acbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acc4:	f107 0308 	add.w	r3, r7, #8
 800acc8:	4618      	mov	r0, r3
 800acca:	f000 f857 	bl	800ad7c <prvGetNextExpireTime>
 800acce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	4619      	mov	r1, r3
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f000 f803 	bl	800ace0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800acda:	f000 f8d5 	bl	800ae88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acde:	e7f1      	b.n	800acc4 <prvTimerTask+0x8>

0800ace0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800acea:	f7fe ffc1 	bl	8009c70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800acee:	f107 0308 	add.w	r3, r7, #8
 800acf2:	4618      	mov	r0, r3
 800acf4:	f000 f866 	bl	800adc4 <prvSampleTimeNow>
 800acf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d130      	bne.n	800ad62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10a      	bne.n	800ad1c <prvProcessTimerOrBlockTask+0x3c>
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d806      	bhi.n	800ad1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad0e:	f7fe ffbd 	bl	8009c8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad12:	68f9      	ldr	r1, [r7, #12]
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7ff ff85 	bl	800ac24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad1a:	e024      	b.n	800ad66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d008      	beq.n	800ad34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad22:	4b13      	ldr	r3, [pc, #76]	; (800ad70 <prvProcessTimerOrBlockTask+0x90>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <prvProcessTimerOrBlockTask+0x50>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e000      	b.n	800ad32 <prvProcessTimerOrBlockTask+0x52>
 800ad30:	2300      	movs	r3, #0
 800ad32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad34:	4b0f      	ldr	r3, [pc, #60]	; (800ad74 <prvProcessTimerOrBlockTask+0x94>)
 800ad36:	6818      	ldr	r0, [r3, #0]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	1ad3      	subs	r3, r2, r3
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	4619      	mov	r1, r3
 800ad42:	f7fe f97f 	bl	8009044 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad46:	f7fe ffa1 	bl	8009c8c <xTaskResumeAll>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10a      	bne.n	800ad66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad50:	4b09      	ldr	r3, [pc, #36]	; (800ad78 <prvProcessTimerOrBlockTask+0x98>)
 800ad52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad56:	601a      	str	r2, [r3, #0]
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	f3bf 8f6f 	isb	sy
}
 800ad60:	e001      	b.n	800ad66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad62:	f7fe ff93 	bl	8009c8c <xTaskResumeAll>
}
 800ad66:	bf00      	nop
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	20000f5c 	.word	0x20000f5c
 800ad74:	20000f60 	.word	0x20000f60
 800ad78:	e000ed04 	.word	0xe000ed04

0800ad7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad84:	4b0e      	ldr	r3, [pc, #56]	; (800adc0 <prvGetNextExpireTime+0x44>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <prvGetNextExpireTime+0x16>
 800ad8e:	2201      	movs	r2, #1
 800ad90:	e000      	b.n	800ad94 <prvGetNextExpireTime+0x18>
 800ad92:	2200      	movs	r2, #0
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d105      	bne.n	800adac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ada0:	4b07      	ldr	r3, [pc, #28]	; (800adc0 <prvGetNextExpireTime+0x44>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	60fb      	str	r3, [r7, #12]
 800adaa:	e001      	b.n	800adb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800adac:	2300      	movs	r3, #0
 800adae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800adb0:	68fb      	ldr	r3, [r7, #12]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3714      	adds	r7, #20
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	20000f58 	.word	0x20000f58

0800adc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800adcc:	f7fe fffc 	bl	8009dc8 <xTaskGetTickCount>
 800add0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800add2:	4b0b      	ldr	r3, [pc, #44]	; (800ae00 <prvSampleTimeNow+0x3c>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	429a      	cmp	r2, r3
 800adda:	d205      	bcs.n	800ade8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800addc:	f000 f936 	bl	800b04c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2201      	movs	r2, #1
 800ade4:	601a      	str	r2, [r3, #0]
 800ade6:	e002      	b.n	800adee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800adee:	4a04      	ldr	r2, [pc, #16]	; (800ae00 <prvSampleTimeNow+0x3c>)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800adf4:	68fb      	ldr	r3, [r7, #12]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	20000f68 	.word	0x20000f68

0800ae04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
 800ae10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae12:	2300      	movs	r3, #0
 800ae14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d812      	bhi.n	800ae50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	1ad2      	subs	r2, r2, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d302      	bcc.n	800ae3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	617b      	str	r3, [r7, #20]
 800ae3c:	e01b      	b.n	800ae76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae3e:	4b10      	ldr	r3, [pc, #64]	; (800ae80 <prvInsertTimerInActiveList+0x7c>)
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3304      	adds	r3, #4
 800ae46:	4619      	mov	r1, r3
 800ae48:	4610      	mov	r0, r2
 800ae4a:	f7fd f9c4 	bl	80081d6 <vListInsert>
 800ae4e:	e012      	b.n	800ae76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d206      	bcs.n	800ae66 <prvInsertTimerInActiveList+0x62>
 800ae58:	68ba      	ldr	r2, [r7, #8]
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d302      	bcc.n	800ae66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae60:	2301      	movs	r3, #1
 800ae62:	617b      	str	r3, [r7, #20]
 800ae64:	e007      	b.n	800ae76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae66:	4b07      	ldr	r3, [pc, #28]	; (800ae84 <prvInsertTimerInActiveList+0x80>)
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	3304      	adds	r3, #4
 800ae6e:	4619      	mov	r1, r3
 800ae70:	4610      	mov	r0, r2
 800ae72:	f7fd f9b0 	bl	80081d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae76:	697b      	ldr	r3, [r7, #20]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3718      	adds	r7, #24
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	20000f5c 	.word	0x20000f5c
 800ae84:	20000f58 	.word	0x20000f58

0800ae88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08e      	sub	sp, #56	; 0x38
 800ae8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae8e:	e0ca      	b.n	800b026 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	da18      	bge.n	800aec8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae96:	1d3b      	adds	r3, r7, #4
 800ae98:	3304      	adds	r3, #4
 800ae9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10a      	bne.n	800aeb8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	61fb      	str	r3, [r7, #28]
}
 800aeb4:	bf00      	nop
 800aeb6:	e7fe      	b.n	800aeb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aebe:	6850      	ldr	r0, [r2, #4]
 800aec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aec2:	6892      	ldr	r2, [r2, #8]
 800aec4:	4611      	mov	r1, r2
 800aec6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f2c0 80aa 	blt.w	800b024 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed6:	695b      	ldr	r3, [r3, #20]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d004      	beq.n	800aee6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aede:	3304      	adds	r3, #4
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7fd f9b1 	bl	8008248 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aee6:	463b      	mov	r3, r7
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7ff ff6b 	bl	800adc4 <prvSampleTimeNow>
 800aeee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b09      	cmp	r3, #9
 800aef4:	f200 8097 	bhi.w	800b026 <prvProcessReceivedCommands+0x19e>
 800aef8:	a201      	add	r2, pc, #4	; (adr r2, 800af00 <prvProcessReceivedCommands+0x78>)
 800aefa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefe:	bf00      	nop
 800af00:	0800af29 	.word	0x0800af29
 800af04:	0800af29 	.word	0x0800af29
 800af08:	0800af29 	.word	0x0800af29
 800af0c:	0800af9d 	.word	0x0800af9d
 800af10:	0800afb1 	.word	0x0800afb1
 800af14:	0800affb 	.word	0x0800affb
 800af18:	0800af29 	.word	0x0800af29
 800af1c:	0800af29 	.word	0x0800af29
 800af20:	0800af9d 	.word	0x0800af9d
 800af24:	0800afb1 	.word	0x0800afb1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af2e:	f043 0301 	orr.w	r3, r3, #1
 800af32:	b2da      	uxtb	r2, r3
 800af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3e:	699b      	ldr	r3, [r3, #24]
 800af40:	18d1      	adds	r1, r2, r3
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af48:	f7ff ff5c 	bl	800ae04 <prvInsertTimerInActiveList>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d069      	beq.n	800b026 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af60:	f003 0304 	and.w	r3, r3, #4
 800af64:	2b00      	cmp	r3, #0
 800af66:	d05e      	beq.n	800b026 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6c:	699b      	ldr	r3, [r3, #24]
 800af6e:	441a      	add	r2, r3
 800af70:	2300      	movs	r3, #0
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	2300      	movs	r3, #0
 800af76:	2100      	movs	r1, #0
 800af78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af7a:	f7ff fe05 	bl	800ab88 <xTimerGenericCommand>
 800af7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af80:	6a3b      	ldr	r3, [r7, #32]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d14f      	bne.n	800b026 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	61bb      	str	r3, [r7, #24]
}
 800af98:	bf00      	nop
 800af9a:	e7fe      	b.n	800af9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afa2:	f023 0301 	bic.w	r3, r3, #1
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800afae:	e03a      	b.n	800b026 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afb6:	f043 0301 	orr.w	r3, r3, #1
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800afc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10a      	bne.n	800afe6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	617b      	str	r3, [r7, #20]
}
 800afe2:	bf00      	nop
 800afe4:	e7fe      	b.n	800afe4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800afe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe8:	699a      	ldr	r2, [r3, #24]
 800afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afec:	18d1      	adds	r1, r2, r3
 800afee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aff4:	f7ff ff06 	bl	800ae04 <prvInsertTimerInActiveList>
					break;
 800aff8:	e015      	b.n	800b026 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800affa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b000:	f003 0302 	and.w	r3, r3, #2
 800b004:	2b00      	cmp	r3, #0
 800b006:	d103      	bne.n	800b010 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b00a:	f000 fbe1 	bl	800b7d0 <vPortFree>
 800b00e:	e00a      	b.n	800b026 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b016:	f023 0301 	bic.w	r3, r3, #1
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b022:	e000      	b.n	800b026 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b024:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b026:	4b08      	ldr	r3, [pc, #32]	; (800b048 <prvProcessReceivedCommands+0x1c0>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	1d39      	adds	r1, r7, #4
 800b02c:	2200      	movs	r2, #0
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fd fcca 	bl	80089c8 <xQueueReceive>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	f47f af2a 	bne.w	800ae90 <prvProcessReceivedCommands+0x8>
	}
}
 800b03c:	bf00      	nop
 800b03e:	bf00      	nop
 800b040:	3730      	adds	r7, #48	; 0x30
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	20000f60 	.word	0x20000f60

0800b04c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b088      	sub	sp, #32
 800b050:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b052:	e048      	b.n	800b0e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b054:	4b2d      	ldr	r3, [pc, #180]	; (800b10c <prvSwitchTimerLists+0xc0>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b05e:	4b2b      	ldr	r3, [pc, #172]	; (800b10c <prvSwitchTimerLists+0xc0>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	3304      	adds	r3, #4
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7fd f8eb 	bl	8008248 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b080:	f003 0304 	and.w	r3, r3, #4
 800b084:	2b00      	cmp	r3, #0
 800b086:	d02e      	beq.n	800b0e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	699b      	ldr	r3, [r3, #24]
 800b08c:	693a      	ldr	r2, [r7, #16]
 800b08e:	4413      	add	r3, r2
 800b090:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b092:	68ba      	ldr	r2, [r7, #8]
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	429a      	cmp	r2, r3
 800b098:	d90e      	bls.n	800b0b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	68ba      	ldr	r2, [r7, #8]
 800b09e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0a6:	4b19      	ldr	r3, [pc, #100]	; (800b10c <prvSwitchTimerLists+0xc0>)
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	3304      	adds	r3, #4
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	f7fd f890 	bl	80081d6 <vListInsert>
 800b0b6:	e016      	b.n	800b0e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	2300      	movs	r3, #0
 800b0be:	693a      	ldr	r2, [r7, #16]
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f7ff fd60 	bl	800ab88 <xTimerGenericCommand>
 800b0c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10a      	bne.n	800b0e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	603b      	str	r3, [r7, #0]
}
 800b0e2:	bf00      	nop
 800b0e4:	e7fe      	b.n	800b0e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0e6:	4b09      	ldr	r3, [pc, #36]	; (800b10c <prvSwitchTimerLists+0xc0>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1b1      	bne.n	800b054 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b0f0:	4b06      	ldr	r3, [pc, #24]	; (800b10c <prvSwitchTimerLists+0xc0>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b0f6:	4b06      	ldr	r3, [pc, #24]	; (800b110 <prvSwitchTimerLists+0xc4>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a04      	ldr	r2, [pc, #16]	; (800b10c <prvSwitchTimerLists+0xc0>)
 800b0fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b0fe:	4a04      	ldr	r2, [pc, #16]	; (800b110 <prvSwitchTimerLists+0xc4>)
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	6013      	str	r3, [r2, #0]
}
 800b104:	bf00      	nop
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	20000f58 	.word	0x20000f58
 800b110:	20000f5c 	.word	0x20000f5c

0800b114 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b11a:	f000 f96b 	bl	800b3f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b11e:	4b15      	ldr	r3, [pc, #84]	; (800b174 <prvCheckForValidListAndQueue+0x60>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d120      	bne.n	800b168 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b126:	4814      	ldr	r0, [pc, #80]	; (800b178 <prvCheckForValidListAndQueue+0x64>)
 800b128:	f7fd f804 	bl	8008134 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b12c:	4813      	ldr	r0, [pc, #76]	; (800b17c <prvCheckForValidListAndQueue+0x68>)
 800b12e:	f7fd f801 	bl	8008134 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b132:	4b13      	ldr	r3, [pc, #76]	; (800b180 <prvCheckForValidListAndQueue+0x6c>)
 800b134:	4a10      	ldr	r2, [pc, #64]	; (800b178 <prvCheckForValidListAndQueue+0x64>)
 800b136:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b138:	4b12      	ldr	r3, [pc, #72]	; (800b184 <prvCheckForValidListAndQueue+0x70>)
 800b13a:	4a10      	ldr	r2, [pc, #64]	; (800b17c <prvCheckForValidListAndQueue+0x68>)
 800b13c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b13e:	2300      	movs	r3, #0
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	4b11      	ldr	r3, [pc, #68]	; (800b188 <prvCheckForValidListAndQueue+0x74>)
 800b144:	4a11      	ldr	r2, [pc, #68]	; (800b18c <prvCheckForValidListAndQueue+0x78>)
 800b146:	2110      	movs	r1, #16
 800b148:	200a      	movs	r0, #10
 800b14a:	f7fd f90f 	bl	800836c <xQueueGenericCreateStatic>
 800b14e:	4603      	mov	r3, r0
 800b150:	4a08      	ldr	r2, [pc, #32]	; (800b174 <prvCheckForValidListAndQueue+0x60>)
 800b152:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b154:	4b07      	ldr	r3, [pc, #28]	; (800b174 <prvCheckForValidListAndQueue+0x60>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d005      	beq.n	800b168 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b15c:	4b05      	ldr	r3, [pc, #20]	; (800b174 <prvCheckForValidListAndQueue+0x60>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	490b      	ldr	r1, [pc, #44]	; (800b190 <prvCheckForValidListAndQueue+0x7c>)
 800b162:	4618      	mov	r0, r3
 800b164:	f7fd ff44 	bl	8008ff0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b168:	f000 f974 	bl	800b454 <vPortExitCritical>
}
 800b16c:	bf00      	nop
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20000f60 	.word	0x20000f60
 800b178:	20000f30 	.word	0x20000f30
 800b17c:	20000f44 	.word	0x20000f44
 800b180:	20000f58 	.word	0x20000f58
 800b184:	20000f5c 	.word	0x20000f5c
 800b188:	2000100c 	.word	0x2000100c
 800b18c:	20000f6c 	.word	0x20000f6c
 800b190:	0800c940 	.word	0x0800c940

0800b194 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3b04      	subs	r3, #4
 800b1a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b1ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	3b04      	subs	r3, #4
 800b1b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	f023 0201 	bic.w	r2, r3, #1
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3b04      	subs	r3, #4
 800b1c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b1c4:	4a0c      	ldr	r2, [pc, #48]	; (800b1f8 <pxPortInitialiseStack+0x64>)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3b14      	subs	r3, #20
 800b1ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	3b04      	subs	r3, #4
 800b1da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f06f 0202 	mvn.w	r2, #2
 800b1e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	3b20      	subs	r3, #32
 800b1e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	0800b1fd 	.word	0x0800b1fd

0800b1fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b206:	4b12      	ldr	r3, [pc, #72]	; (800b250 <prvTaskExitError+0x54>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b20e:	d00a      	beq.n	800b226 <prvTaskExitError+0x2a>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	60fb      	str	r3, [r7, #12]
}
 800b222:	bf00      	nop
 800b224:	e7fe      	b.n	800b224 <prvTaskExitError+0x28>
	__asm volatile
 800b226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22a:	f383 8811 	msr	BASEPRI, r3
 800b22e:	f3bf 8f6f 	isb	sy
 800b232:	f3bf 8f4f 	dsb	sy
 800b236:	60bb      	str	r3, [r7, #8]
}
 800b238:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b23a:	bf00      	nop
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d0fc      	beq.n	800b23c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b242:	bf00      	nop
 800b244:	bf00      	nop
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	20000014 	.word	0x20000014
	...

0800b260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b260:	4b07      	ldr	r3, [pc, #28]	; (800b280 <pxCurrentTCBConst2>)
 800b262:	6819      	ldr	r1, [r3, #0]
 800b264:	6808      	ldr	r0, [r1, #0]
 800b266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b26a:	f380 8809 	msr	PSP, r0
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f04f 0000 	mov.w	r0, #0
 800b276:	f380 8811 	msr	BASEPRI, r0
 800b27a:	4770      	bx	lr
 800b27c:	f3af 8000 	nop.w

0800b280 <pxCurrentTCBConst2>:
 800b280:	20000a30 	.word	0x20000a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b284:	bf00      	nop
 800b286:	bf00      	nop

0800b288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b288:	4808      	ldr	r0, [pc, #32]	; (800b2ac <prvPortStartFirstTask+0x24>)
 800b28a:	6800      	ldr	r0, [r0, #0]
 800b28c:	6800      	ldr	r0, [r0, #0]
 800b28e:	f380 8808 	msr	MSP, r0
 800b292:	f04f 0000 	mov.w	r0, #0
 800b296:	f380 8814 	msr	CONTROL, r0
 800b29a:	b662      	cpsie	i
 800b29c:	b661      	cpsie	f
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	df00      	svc	0
 800b2a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b2aa:	bf00      	nop
 800b2ac:	e000ed08 	.word	0xe000ed08

0800b2b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b2b6:	4b46      	ldr	r3, [pc, #280]	; (800b3d0 <xPortStartScheduler+0x120>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a46      	ldr	r2, [pc, #280]	; (800b3d4 <xPortStartScheduler+0x124>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d10a      	bne.n	800b2d6 <xPortStartScheduler+0x26>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	613b      	str	r3, [r7, #16]
}
 800b2d2:	bf00      	nop
 800b2d4:	e7fe      	b.n	800b2d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b2d6:	4b3e      	ldr	r3, [pc, #248]	; (800b3d0 <xPortStartScheduler+0x120>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a3f      	ldr	r2, [pc, #252]	; (800b3d8 <xPortStartScheduler+0x128>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d10a      	bne.n	800b2f6 <xPortStartScheduler+0x46>
	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e4:	f383 8811 	msr	BASEPRI, r3
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	60fb      	str	r3, [r7, #12]
}
 800b2f2:	bf00      	nop
 800b2f4:	e7fe      	b.n	800b2f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b2f6:	4b39      	ldr	r3, [pc, #228]	; (800b3dc <xPortStartScheduler+0x12c>)
 800b2f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	22ff      	movs	r2, #255	; 0xff
 800b306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b310:	78fb      	ldrb	r3, [r7, #3]
 800b312:	b2db      	uxtb	r3, r3
 800b314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b318:	b2da      	uxtb	r2, r3
 800b31a:	4b31      	ldr	r3, [pc, #196]	; (800b3e0 <xPortStartScheduler+0x130>)
 800b31c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b31e:	4b31      	ldr	r3, [pc, #196]	; (800b3e4 <xPortStartScheduler+0x134>)
 800b320:	2207      	movs	r2, #7
 800b322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b324:	e009      	b.n	800b33a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b326:	4b2f      	ldr	r3, [pc, #188]	; (800b3e4 <xPortStartScheduler+0x134>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3b01      	subs	r3, #1
 800b32c:	4a2d      	ldr	r2, [pc, #180]	; (800b3e4 <xPortStartScheduler+0x134>)
 800b32e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b330:	78fb      	ldrb	r3, [r7, #3]
 800b332:	b2db      	uxtb	r3, r3
 800b334:	005b      	lsls	r3, r3, #1
 800b336:	b2db      	uxtb	r3, r3
 800b338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b33a:	78fb      	ldrb	r3, [r7, #3]
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b342:	2b80      	cmp	r3, #128	; 0x80
 800b344:	d0ef      	beq.n	800b326 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b346:	4b27      	ldr	r3, [pc, #156]	; (800b3e4 <xPortStartScheduler+0x134>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f1c3 0307 	rsb	r3, r3, #7
 800b34e:	2b04      	cmp	r3, #4
 800b350:	d00a      	beq.n	800b368 <xPortStartScheduler+0xb8>
	__asm volatile
 800b352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b356:	f383 8811 	msr	BASEPRI, r3
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	60bb      	str	r3, [r7, #8]
}
 800b364:	bf00      	nop
 800b366:	e7fe      	b.n	800b366 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b368:	4b1e      	ldr	r3, [pc, #120]	; (800b3e4 <xPortStartScheduler+0x134>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	021b      	lsls	r3, r3, #8
 800b36e:	4a1d      	ldr	r2, [pc, #116]	; (800b3e4 <xPortStartScheduler+0x134>)
 800b370:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b372:	4b1c      	ldr	r3, [pc, #112]	; (800b3e4 <xPortStartScheduler+0x134>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b37a:	4a1a      	ldr	r2, [pc, #104]	; (800b3e4 <xPortStartScheduler+0x134>)
 800b37c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	b2da      	uxtb	r2, r3
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b386:	4b18      	ldr	r3, [pc, #96]	; (800b3e8 <xPortStartScheduler+0x138>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a17      	ldr	r2, [pc, #92]	; (800b3e8 <xPortStartScheduler+0x138>)
 800b38c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b392:	4b15      	ldr	r3, [pc, #84]	; (800b3e8 <xPortStartScheduler+0x138>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a14      	ldr	r2, [pc, #80]	; (800b3e8 <xPortStartScheduler+0x138>)
 800b398:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b39c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b39e:	f000 f8dd 	bl	800b55c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b3a2:	4b12      	ldr	r3, [pc, #72]	; (800b3ec <xPortStartScheduler+0x13c>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b3a8:	f000 f8fc 	bl	800b5a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b3ac:	4b10      	ldr	r3, [pc, #64]	; (800b3f0 <xPortStartScheduler+0x140>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a0f      	ldr	r2, [pc, #60]	; (800b3f0 <xPortStartScheduler+0x140>)
 800b3b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b3b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b3b8:	f7ff ff66 	bl	800b288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b3bc:	f7fe fdce 	bl	8009f5c <vTaskSwitchContext>
	prvTaskExitError();
 800b3c0:	f7ff ff1c 	bl	800b1fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3718      	adds	r7, #24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	e000ed00 	.word	0xe000ed00
 800b3d4:	410fc271 	.word	0x410fc271
 800b3d8:	410fc270 	.word	0x410fc270
 800b3dc:	e000e400 	.word	0xe000e400
 800b3e0:	2000105c 	.word	0x2000105c
 800b3e4:	20001060 	.word	0x20001060
 800b3e8:	e000ed20 	.word	0xe000ed20
 800b3ec:	20000014 	.word	0x20000014
 800b3f0:	e000ef34 	.word	0xe000ef34

0800b3f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
	__asm volatile
 800b3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fe:	f383 8811 	msr	BASEPRI, r3
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	607b      	str	r3, [r7, #4]
}
 800b40c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b40e:	4b0f      	ldr	r3, [pc, #60]	; (800b44c <vPortEnterCritical+0x58>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	3301      	adds	r3, #1
 800b414:	4a0d      	ldr	r2, [pc, #52]	; (800b44c <vPortEnterCritical+0x58>)
 800b416:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b418:	4b0c      	ldr	r3, [pc, #48]	; (800b44c <vPortEnterCritical+0x58>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d10f      	bne.n	800b440 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b420:	4b0b      	ldr	r3, [pc, #44]	; (800b450 <vPortEnterCritical+0x5c>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00a      	beq.n	800b440 <vPortEnterCritical+0x4c>
	__asm volatile
 800b42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42e:	f383 8811 	msr	BASEPRI, r3
 800b432:	f3bf 8f6f 	isb	sy
 800b436:	f3bf 8f4f 	dsb	sy
 800b43a:	603b      	str	r3, [r7, #0]
}
 800b43c:	bf00      	nop
 800b43e:	e7fe      	b.n	800b43e <vPortEnterCritical+0x4a>
	}
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	20000014 	.word	0x20000014
 800b450:	e000ed04 	.word	0xe000ed04

0800b454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b45a:	4b12      	ldr	r3, [pc, #72]	; (800b4a4 <vPortExitCritical+0x50>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10a      	bne.n	800b478 <vPortExitCritical+0x24>
	__asm volatile
 800b462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	607b      	str	r3, [r7, #4]
}
 800b474:	bf00      	nop
 800b476:	e7fe      	b.n	800b476 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b478:	4b0a      	ldr	r3, [pc, #40]	; (800b4a4 <vPortExitCritical+0x50>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	3b01      	subs	r3, #1
 800b47e:	4a09      	ldr	r2, [pc, #36]	; (800b4a4 <vPortExitCritical+0x50>)
 800b480:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b482:	4b08      	ldr	r3, [pc, #32]	; (800b4a4 <vPortExitCritical+0x50>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d105      	bne.n	800b496 <vPortExitCritical+0x42>
 800b48a:	2300      	movs	r3, #0
 800b48c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	f383 8811 	msr	BASEPRI, r3
}
 800b494:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b496:	bf00      	nop
 800b498:	370c      	adds	r7, #12
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	20000014 	.word	0x20000014
	...

0800b4b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b4b0:	f3ef 8009 	mrs	r0, PSP
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	4b15      	ldr	r3, [pc, #84]	; (800b510 <pxCurrentTCBConst>)
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	f01e 0f10 	tst.w	lr, #16
 800b4c0:	bf08      	it	eq
 800b4c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b4c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ca:	6010      	str	r0, [r2, #0]
 800b4cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b4d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b4d4:	f380 8811 	msr	BASEPRI, r0
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f7fe fd3c 	bl	8009f5c <vTaskSwitchContext>
 800b4e4:	f04f 0000 	mov.w	r0, #0
 800b4e8:	f380 8811 	msr	BASEPRI, r0
 800b4ec:	bc09      	pop	{r0, r3}
 800b4ee:	6819      	ldr	r1, [r3, #0]
 800b4f0:	6808      	ldr	r0, [r1, #0]
 800b4f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f6:	f01e 0f10 	tst.w	lr, #16
 800b4fa:	bf08      	it	eq
 800b4fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b500:	f380 8809 	msr	PSP, r0
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	f3af 8000 	nop.w

0800b510 <pxCurrentTCBConst>:
 800b510:	20000a30 	.word	0x20000a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b514:	bf00      	nop
 800b516:	bf00      	nop

0800b518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
	__asm volatile
 800b51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	607b      	str	r3, [r7, #4]
}
 800b530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b532:	f7fe fc59 	bl	8009de8 <xTaskIncrementTick>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d003      	beq.n	800b544 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b53c:	4b06      	ldr	r3, [pc, #24]	; (800b558 <xPortSysTickHandler+0x40>)
 800b53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b542:	601a      	str	r2, [r3, #0]
 800b544:	2300      	movs	r3, #0
 800b546:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	f383 8811 	msr	BASEPRI, r3
}
 800b54e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b550:	bf00      	nop
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	e000ed04 	.word	0xe000ed04

0800b55c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b55c:	b480      	push	{r7}
 800b55e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b560:	4b0b      	ldr	r3, [pc, #44]	; (800b590 <vPortSetupTimerInterrupt+0x34>)
 800b562:	2200      	movs	r2, #0
 800b564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b566:	4b0b      	ldr	r3, [pc, #44]	; (800b594 <vPortSetupTimerInterrupt+0x38>)
 800b568:	2200      	movs	r2, #0
 800b56a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b56c:	4b0a      	ldr	r3, [pc, #40]	; (800b598 <vPortSetupTimerInterrupt+0x3c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a0a      	ldr	r2, [pc, #40]	; (800b59c <vPortSetupTimerInterrupt+0x40>)
 800b572:	fba2 2303 	umull	r2, r3, r2, r3
 800b576:	099b      	lsrs	r3, r3, #6
 800b578:	4a09      	ldr	r2, [pc, #36]	; (800b5a0 <vPortSetupTimerInterrupt+0x44>)
 800b57a:	3b01      	subs	r3, #1
 800b57c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b57e:	4b04      	ldr	r3, [pc, #16]	; (800b590 <vPortSetupTimerInterrupt+0x34>)
 800b580:	2207      	movs	r2, #7
 800b582:	601a      	str	r2, [r3, #0]
}
 800b584:	bf00      	nop
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	e000e010 	.word	0xe000e010
 800b594:	e000e018 	.word	0xe000e018
 800b598:	20000000 	.word	0x20000000
 800b59c:	10624dd3 	.word	0x10624dd3
 800b5a0:	e000e014 	.word	0xe000e014

0800b5a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b5a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b5b4 <vPortEnableVFP+0x10>
 800b5a8:	6801      	ldr	r1, [r0, #0]
 800b5aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b5ae:	6001      	str	r1, [r0, #0]
 800b5b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b5b2:	bf00      	nop
 800b5b4:	e000ed88 	.word	0xe000ed88

0800b5b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b5be:	f3ef 8305 	mrs	r3, IPSR
 800b5c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b0f      	cmp	r3, #15
 800b5c8:	d914      	bls.n	800b5f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b5ca:	4a17      	ldr	r2, [pc, #92]	; (800b628 <vPortValidateInterruptPriority+0x70>)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b5d4:	4b15      	ldr	r3, [pc, #84]	; (800b62c <vPortValidateInterruptPriority+0x74>)
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	7afa      	ldrb	r2, [r7, #11]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d20a      	bcs.n	800b5f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	607b      	str	r3, [r7, #4]
}
 800b5f0:	bf00      	nop
 800b5f2:	e7fe      	b.n	800b5f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b5f4:	4b0e      	ldr	r3, [pc, #56]	; (800b630 <vPortValidateInterruptPriority+0x78>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b5fc:	4b0d      	ldr	r3, [pc, #52]	; (800b634 <vPortValidateInterruptPriority+0x7c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	429a      	cmp	r2, r3
 800b602:	d90a      	bls.n	800b61a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	603b      	str	r3, [r7, #0]
}
 800b616:	bf00      	nop
 800b618:	e7fe      	b.n	800b618 <vPortValidateInterruptPriority+0x60>
	}
 800b61a:	bf00      	nop
 800b61c:	3714      	adds	r7, #20
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	e000e3f0 	.word	0xe000e3f0
 800b62c:	2000105c 	.word	0x2000105c
 800b630:	e000ed0c 	.word	0xe000ed0c
 800b634:	20001060 	.word	0x20001060

0800b638 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b08a      	sub	sp, #40	; 0x28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b640:	2300      	movs	r3, #0
 800b642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b644:	f7fe fb14 	bl	8009c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b648:	4b5b      	ldr	r3, [pc, #364]	; (800b7b8 <pvPortMalloc+0x180>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d101      	bne.n	800b654 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b650:	f000 f920 	bl	800b894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b654:	4b59      	ldr	r3, [pc, #356]	; (800b7bc <pvPortMalloc+0x184>)
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4013      	ands	r3, r2
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f040 8093 	bne.w	800b788 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d01d      	beq.n	800b6a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b668:	2208      	movs	r2, #8
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4413      	add	r3, r2
 800b66e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f003 0307 	and.w	r3, r3, #7
 800b676:	2b00      	cmp	r3, #0
 800b678:	d014      	beq.n	800b6a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f023 0307 	bic.w	r3, r3, #7
 800b680:	3308      	adds	r3, #8
 800b682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f003 0307 	and.w	r3, r3, #7
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00a      	beq.n	800b6a4 <pvPortMalloc+0x6c>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	617b      	str	r3, [r7, #20]
}
 800b6a0:	bf00      	nop
 800b6a2:	e7fe      	b.n	800b6a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d06e      	beq.n	800b788 <pvPortMalloc+0x150>
 800b6aa:	4b45      	ldr	r3, [pc, #276]	; (800b7c0 <pvPortMalloc+0x188>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d869      	bhi.n	800b788 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b6b4:	4b43      	ldr	r3, [pc, #268]	; (800b7c4 <pvPortMalloc+0x18c>)
 800b6b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b6b8:	4b42      	ldr	r3, [pc, #264]	; (800b7c4 <pvPortMalloc+0x18c>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6be:	e004      	b.n	800b6ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d903      	bls.n	800b6dc <pvPortMalloc+0xa4>
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1f1      	bne.n	800b6c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6dc:	4b36      	ldr	r3, [pc, #216]	; (800b7b8 <pvPortMalloc+0x180>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d050      	beq.n	800b788 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6e6:	6a3b      	ldr	r3, [r7, #32]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2208      	movs	r2, #8
 800b6ec:	4413      	add	r3, r2
 800b6ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	1ad2      	subs	r2, r2, r3
 800b700:	2308      	movs	r3, #8
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	429a      	cmp	r2, r3
 800b706:	d91f      	bls.n	800b748 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4413      	add	r3, r2
 800b70e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	f003 0307 	and.w	r3, r3, #7
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00a      	beq.n	800b730 <pvPortMalloc+0xf8>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	613b      	str	r3, [r7, #16]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	685a      	ldr	r2, [r3, #4]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	1ad2      	subs	r2, r2, r3
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b742:	69b8      	ldr	r0, [r7, #24]
 800b744:	f000 f908 	bl	800b958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b748:	4b1d      	ldr	r3, [pc, #116]	; (800b7c0 <pvPortMalloc+0x188>)
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	4a1b      	ldr	r2, [pc, #108]	; (800b7c0 <pvPortMalloc+0x188>)
 800b754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b756:	4b1a      	ldr	r3, [pc, #104]	; (800b7c0 <pvPortMalloc+0x188>)
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	4b1b      	ldr	r3, [pc, #108]	; (800b7c8 <pvPortMalloc+0x190>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d203      	bcs.n	800b76a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b762:	4b17      	ldr	r3, [pc, #92]	; (800b7c0 <pvPortMalloc+0x188>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a18      	ldr	r2, [pc, #96]	; (800b7c8 <pvPortMalloc+0x190>)
 800b768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76c:	685a      	ldr	r2, [r3, #4]
 800b76e:	4b13      	ldr	r3, [pc, #76]	; (800b7bc <pvPortMalloc+0x184>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	431a      	orrs	r2, r3
 800b774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77a:	2200      	movs	r2, #0
 800b77c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b77e:	4b13      	ldr	r3, [pc, #76]	; (800b7cc <pvPortMalloc+0x194>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3301      	adds	r3, #1
 800b784:	4a11      	ldr	r2, [pc, #68]	; (800b7cc <pvPortMalloc+0x194>)
 800b786:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b788:	f7fe fa80 	bl	8009c8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	f003 0307 	and.w	r3, r3, #7
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <pvPortMalloc+0x174>
	__asm volatile
 800b796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	60fb      	str	r3, [r7, #12]
}
 800b7a8:	bf00      	nop
 800b7aa:	e7fe      	b.n	800b7aa <pvPortMalloc+0x172>
	return pvReturn;
 800b7ac:	69fb      	ldr	r3, [r7, #28]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3728      	adds	r7, #40	; 0x28
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20005e8c 	.word	0x20005e8c
 800b7bc:	20005ea0 	.word	0x20005ea0
 800b7c0:	20005e90 	.word	0x20005e90
 800b7c4:	20005e84 	.word	0x20005e84
 800b7c8:	20005e94 	.word	0x20005e94
 800b7cc:	20005e98 	.word	0x20005e98

0800b7d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d04d      	beq.n	800b87e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b7e2:	2308      	movs	r3, #8
 800b7e4:	425b      	negs	r3, r3
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	4b24      	ldr	r3, [pc, #144]	; (800b888 <vPortFree+0xb8>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <vPortFree+0x44>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	60fb      	str	r3, [r7, #12]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00a      	beq.n	800b832 <vPortFree+0x62>
	__asm volatile
 800b81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b820:	f383 8811 	msr	BASEPRI, r3
 800b824:	f3bf 8f6f 	isb	sy
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	60bb      	str	r3, [r7, #8]
}
 800b82e:	bf00      	nop
 800b830:	e7fe      	b.n	800b830 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	685a      	ldr	r2, [r3, #4]
 800b836:	4b14      	ldr	r3, [pc, #80]	; (800b888 <vPortFree+0xb8>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4013      	ands	r3, r2
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d01e      	beq.n	800b87e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d11a      	bne.n	800b87e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	685a      	ldr	r2, [r3, #4]
 800b84c:	4b0e      	ldr	r3, [pc, #56]	; (800b888 <vPortFree+0xb8>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	43db      	mvns	r3, r3
 800b852:	401a      	ands	r2, r3
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b858:	f7fe fa0a 	bl	8009c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	685a      	ldr	r2, [r3, #4]
 800b860:	4b0a      	ldr	r3, [pc, #40]	; (800b88c <vPortFree+0xbc>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4413      	add	r3, r2
 800b866:	4a09      	ldr	r2, [pc, #36]	; (800b88c <vPortFree+0xbc>)
 800b868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b86a:	6938      	ldr	r0, [r7, #16]
 800b86c:	f000 f874 	bl	800b958 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b870:	4b07      	ldr	r3, [pc, #28]	; (800b890 <vPortFree+0xc0>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3301      	adds	r3, #1
 800b876:	4a06      	ldr	r2, [pc, #24]	; (800b890 <vPortFree+0xc0>)
 800b878:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b87a:	f7fe fa07 	bl	8009c8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b87e:	bf00      	nop
 800b880:	3718      	adds	r7, #24
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	20005ea0 	.word	0x20005ea0
 800b88c:	20005e90 	.word	0x20005e90
 800b890:	20005e9c 	.word	0x20005e9c

0800b894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b89a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800b89e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b8a0:	4b27      	ldr	r3, [pc, #156]	; (800b940 <prvHeapInit+0xac>)
 800b8a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f003 0307 	and.w	r3, r3, #7
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00c      	beq.n	800b8c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	3307      	adds	r3, #7
 800b8b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f023 0307 	bic.w	r3, r3, #7
 800b8ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	4a1f      	ldr	r2, [pc, #124]	; (800b940 <prvHeapInit+0xac>)
 800b8c4:	4413      	add	r3, r2
 800b8c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b8cc:	4a1d      	ldr	r2, [pc, #116]	; (800b944 <prvHeapInit+0xb0>)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b8d2:	4b1c      	ldr	r3, [pc, #112]	; (800b944 <prvHeapInit+0xb0>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	4413      	add	r3, r2
 800b8de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b8e0:	2208      	movs	r2, #8
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	1a9b      	subs	r3, r3, r2
 800b8e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f023 0307 	bic.w	r3, r3, #7
 800b8ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	4a15      	ldr	r2, [pc, #84]	; (800b948 <prvHeapInit+0xb4>)
 800b8f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8f6:	4b14      	ldr	r3, [pc, #80]	; (800b948 <prvHeapInit+0xb4>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8fe:	4b12      	ldr	r3, [pc, #72]	; (800b948 <prvHeapInit+0xb4>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2200      	movs	r2, #0
 800b904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	1ad2      	subs	r2, r2, r3
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b914:	4b0c      	ldr	r3, [pc, #48]	; (800b948 <prvHeapInit+0xb4>)
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	4a0a      	ldr	r2, [pc, #40]	; (800b94c <prvHeapInit+0xb8>)
 800b922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	4a09      	ldr	r2, [pc, #36]	; (800b950 <prvHeapInit+0xbc>)
 800b92a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b92c:	4b09      	ldr	r3, [pc, #36]	; (800b954 <prvHeapInit+0xc0>)
 800b92e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b932:	601a      	str	r2, [r3, #0]
}
 800b934:	bf00      	nop
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	20001064 	.word	0x20001064
 800b944:	20005e84 	.word	0x20005e84
 800b948:	20005e8c 	.word	0x20005e8c
 800b94c:	20005e94 	.word	0x20005e94
 800b950:	20005e90 	.word	0x20005e90
 800b954:	20005ea0 	.word	0x20005ea0

0800b958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b960:	4b28      	ldr	r3, [pc, #160]	; (800ba04 <prvInsertBlockIntoFreeList+0xac>)
 800b962:	60fb      	str	r3, [r7, #12]
 800b964:	e002      	b.n	800b96c <prvInsertBlockIntoFreeList+0x14>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	60fb      	str	r3, [r7, #12]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	429a      	cmp	r2, r3
 800b974:	d8f7      	bhi.n	800b966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	68ba      	ldr	r2, [r7, #8]
 800b980:	4413      	add	r3, r2
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	429a      	cmp	r2, r3
 800b986:	d108      	bne.n	800b99a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	441a      	add	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	68ba      	ldr	r2, [r7, #8]
 800b9a4:	441a      	add	r2, r3
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d118      	bne.n	800b9e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	4b15      	ldr	r3, [pc, #84]	; (800ba08 <prvInsertBlockIntoFreeList+0xb0>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d00d      	beq.n	800b9d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	685a      	ldr	r2, [r3, #4]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	441a      	add	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	601a      	str	r2, [r3, #0]
 800b9d4:	e008      	b.n	800b9e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b9d6:	4b0c      	ldr	r3, [pc, #48]	; (800ba08 <prvInsertBlockIntoFreeList+0xb0>)
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	601a      	str	r2, [r3, #0]
 800b9de:	e003      	b.n	800b9e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d002      	beq.n	800b9f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9f6:	bf00      	nop
 800b9f8:	3714      	adds	r7, #20
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	20005e84 	.word	0x20005e84
 800ba08:	20005e8c 	.word	0x20005e8c

0800ba0c <__errno>:
 800ba0c:	4b01      	ldr	r3, [pc, #4]	; (800ba14 <__errno+0x8>)
 800ba0e:	6818      	ldr	r0, [r3, #0]
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	20000018 	.word	0x20000018

0800ba18 <__libc_init_array>:
 800ba18:	b570      	push	{r4, r5, r6, lr}
 800ba1a:	4d0d      	ldr	r5, [pc, #52]	; (800ba50 <__libc_init_array+0x38>)
 800ba1c:	4c0d      	ldr	r4, [pc, #52]	; (800ba54 <__libc_init_array+0x3c>)
 800ba1e:	1b64      	subs	r4, r4, r5
 800ba20:	10a4      	asrs	r4, r4, #2
 800ba22:	2600      	movs	r6, #0
 800ba24:	42a6      	cmp	r6, r4
 800ba26:	d109      	bne.n	800ba3c <__libc_init_array+0x24>
 800ba28:	4d0b      	ldr	r5, [pc, #44]	; (800ba58 <__libc_init_array+0x40>)
 800ba2a:	4c0c      	ldr	r4, [pc, #48]	; (800ba5c <__libc_init_array+0x44>)
 800ba2c:	f000 ff2c 	bl	800c888 <_init>
 800ba30:	1b64      	subs	r4, r4, r5
 800ba32:	10a4      	asrs	r4, r4, #2
 800ba34:	2600      	movs	r6, #0
 800ba36:	42a6      	cmp	r6, r4
 800ba38:	d105      	bne.n	800ba46 <__libc_init_array+0x2e>
 800ba3a:	bd70      	pop	{r4, r5, r6, pc}
 800ba3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba40:	4798      	blx	r3
 800ba42:	3601      	adds	r6, #1
 800ba44:	e7ee      	b.n	800ba24 <__libc_init_array+0xc>
 800ba46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba4a:	4798      	blx	r3
 800ba4c:	3601      	adds	r6, #1
 800ba4e:	e7f2      	b.n	800ba36 <__libc_init_array+0x1e>
 800ba50:	0800cccc 	.word	0x0800cccc
 800ba54:	0800cccc 	.word	0x0800cccc
 800ba58:	0800cccc 	.word	0x0800cccc
 800ba5c:	0800ccd0 	.word	0x0800ccd0

0800ba60 <__itoa>:
 800ba60:	1e93      	subs	r3, r2, #2
 800ba62:	2b22      	cmp	r3, #34	; 0x22
 800ba64:	b510      	push	{r4, lr}
 800ba66:	460c      	mov	r4, r1
 800ba68:	d904      	bls.n	800ba74 <__itoa+0x14>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	700b      	strb	r3, [r1, #0]
 800ba6e:	461c      	mov	r4, r3
 800ba70:	4620      	mov	r0, r4
 800ba72:	bd10      	pop	{r4, pc}
 800ba74:	2a0a      	cmp	r2, #10
 800ba76:	d109      	bne.n	800ba8c <__itoa+0x2c>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	da07      	bge.n	800ba8c <__itoa+0x2c>
 800ba7c:	232d      	movs	r3, #45	; 0x2d
 800ba7e:	700b      	strb	r3, [r1, #0]
 800ba80:	4240      	negs	r0, r0
 800ba82:	2101      	movs	r1, #1
 800ba84:	4421      	add	r1, r4
 800ba86:	f000 f959 	bl	800bd3c <__utoa>
 800ba8a:	e7f1      	b.n	800ba70 <__itoa+0x10>
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	e7f9      	b.n	800ba84 <__itoa+0x24>

0800ba90 <itoa>:
 800ba90:	f7ff bfe6 	b.w	800ba60 <__itoa>

0800ba94 <__retarget_lock_acquire_recursive>:
 800ba94:	4770      	bx	lr

0800ba96 <__retarget_lock_release_recursive>:
 800ba96:	4770      	bx	lr

0800ba98 <memcpy>:
 800ba98:	440a      	add	r2, r1
 800ba9a:	4291      	cmp	r1, r2
 800ba9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800baa0:	d100      	bne.n	800baa4 <memcpy+0xc>
 800baa2:	4770      	bx	lr
 800baa4:	b510      	push	{r4, lr}
 800baa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baae:	4291      	cmp	r1, r2
 800bab0:	d1f9      	bne.n	800baa6 <memcpy+0xe>
 800bab2:	bd10      	pop	{r4, pc}

0800bab4 <memset>:
 800bab4:	4402      	add	r2, r0
 800bab6:	4603      	mov	r3, r0
 800bab8:	4293      	cmp	r3, r2
 800baba:	d100      	bne.n	800babe <memset+0xa>
 800babc:	4770      	bx	lr
 800babe:	f803 1b01 	strb.w	r1, [r3], #1
 800bac2:	e7f9      	b.n	800bab8 <memset+0x4>

0800bac4 <sbrk_aligned>:
 800bac4:	b570      	push	{r4, r5, r6, lr}
 800bac6:	4e0e      	ldr	r6, [pc, #56]	; (800bb00 <sbrk_aligned+0x3c>)
 800bac8:	460c      	mov	r4, r1
 800baca:	6831      	ldr	r1, [r6, #0]
 800bacc:	4605      	mov	r5, r0
 800bace:	b911      	cbnz	r1, 800bad6 <sbrk_aligned+0x12>
 800bad0:	f000 f8f6 	bl	800bcc0 <_sbrk_r>
 800bad4:	6030      	str	r0, [r6, #0]
 800bad6:	4621      	mov	r1, r4
 800bad8:	4628      	mov	r0, r5
 800bada:	f000 f8f1 	bl	800bcc0 <_sbrk_r>
 800bade:	1c43      	adds	r3, r0, #1
 800bae0:	d00a      	beq.n	800baf8 <sbrk_aligned+0x34>
 800bae2:	1cc4      	adds	r4, r0, #3
 800bae4:	f024 0403 	bic.w	r4, r4, #3
 800bae8:	42a0      	cmp	r0, r4
 800baea:	d007      	beq.n	800bafc <sbrk_aligned+0x38>
 800baec:	1a21      	subs	r1, r4, r0
 800baee:	4628      	mov	r0, r5
 800baf0:	f000 f8e6 	bl	800bcc0 <_sbrk_r>
 800baf4:	3001      	adds	r0, #1
 800baf6:	d101      	bne.n	800bafc <sbrk_aligned+0x38>
 800baf8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bafc:	4620      	mov	r0, r4
 800bafe:	bd70      	pop	{r4, r5, r6, pc}
 800bb00:	20005eac 	.word	0x20005eac

0800bb04 <_malloc_r>:
 800bb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb08:	1ccd      	adds	r5, r1, #3
 800bb0a:	f025 0503 	bic.w	r5, r5, #3
 800bb0e:	3508      	adds	r5, #8
 800bb10:	2d0c      	cmp	r5, #12
 800bb12:	bf38      	it	cc
 800bb14:	250c      	movcc	r5, #12
 800bb16:	2d00      	cmp	r5, #0
 800bb18:	4607      	mov	r7, r0
 800bb1a:	db01      	blt.n	800bb20 <_malloc_r+0x1c>
 800bb1c:	42a9      	cmp	r1, r5
 800bb1e:	d905      	bls.n	800bb2c <_malloc_r+0x28>
 800bb20:	230c      	movs	r3, #12
 800bb22:	603b      	str	r3, [r7, #0]
 800bb24:	2600      	movs	r6, #0
 800bb26:	4630      	mov	r0, r6
 800bb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb2c:	4e2e      	ldr	r6, [pc, #184]	; (800bbe8 <_malloc_r+0xe4>)
 800bb2e:	f000 f947 	bl	800bdc0 <__malloc_lock>
 800bb32:	6833      	ldr	r3, [r6, #0]
 800bb34:	461c      	mov	r4, r3
 800bb36:	bb34      	cbnz	r4, 800bb86 <_malloc_r+0x82>
 800bb38:	4629      	mov	r1, r5
 800bb3a:	4638      	mov	r0, r7
 800bb3c:	f7ff ffc2 	bl	800bac4 <sbrk_aligned>
 800bb40:	1c43      	adds	r3, r0, #1
 800bb42:	4604      	mov	r4, r0
 800bb44:	d14d      	bne.n	800bbe2 <_malloc_r+0xde>
 800bb46:	6834      	ldr	r4, [r6, #0]
 800bb48:	4626      	mov	r6, r4
 800bb4a:	2e00      	cmp	r6, #0
 800bb4c:	d140      	bne.n	800bbd0 <_malloc_r+0xcc>
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	4631      	mov	r1, r6
 800bb52:	4638      	mov	r0, r7
 800bb54:	eb04 0803 	add.w	r8, r4, r3
 800bb58:	f000 f8b2 	bl	800bcc0 <_sbrk_r>
 800bb5c:	4580      	cmp	r8, r0
 800bb5e:	d13a      	bne.n	800bbd6 <_malloc_r+0xd2>
 800bb60:	6821      	ldr	r1, [r4, #0]
 800bb62:	3503      	adds	r5, #3
 800bb64:	1a6d      	subs	r5, r5, r1
 800bb66:	f025 0503 	bic.w	r5, r5, #3
 800bb6a:	3508      	adds	r5, #8
 800bb6c:	2d0c      	cmp	r5, #12
 800bb6e:	bf38      	it	cc
 800bb70:	250c      	movcc	r5, #12
 800bb72:	4629      	mov	r1, r5
 800bb74:	4638      	mov	r0, r7
 800bb76:	f7ff ffa5 	bl	800bac4 <sbrk_aligned>
 800bb7a:	3001      	adds	r0, #1
 800bb7c:	d02b      	beq.n	800bbd6 <_malloc_r+0xd2>
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	442b      	add	r3, r5
 800bb82:	6023      	str	r3, [r4, #0]
 800bb84:	e00e      	b.n	800bba4 <_malloc_r+0xa0>
 800bb86:	6822      	ldr	r2, [r4, #0]
 800bb88:	1b52      	subs	r2, r2, r5
 800bb8a:	d41e      	bmi.n	800bbca <_malloc_r+0xc6>
 800bb8c:	2a0b      	cmp	r2, #11
 800bb8e:	d916      	bls.n	800bbbe <_malloc_r+0xba>
 800bb90:	1961      	adds	r1, r4, r5
 800bb92:	42a3      	cmp	r3, r4
 800bb94:	6025      	str	r5, [r4, #0]
 800bb96:	bf18      	it	ne
 800bb98:	6059      	strne	r1, [r3, #4]
 800bb9a:	6863      	ldr	r3, [r4, #4]
 800bb9c:	bf08      	it	eq
 800bb9e:	6031      	streq	r1, [r6, #0]
 800bba0:	5162      	str	r2, [r4, r5]
 800bba2:	604b      	str	r3, [r1, #4]
 800bba4:	4638      	mov	r0, r7
 800bba6:	f104 060b 	add.w	r6, r4, #11
 800bbaa:	f000 f90f 	bl	800bdcc <__malloc_unlock>
 800bbae:	f026 0607 	bic.w	r6, r6, #7
 800bbb2:	1d23      	adds	r3, r4, #4
 800bbb4:	1af2      	subs	r2, r6, r3
 800bbb6:	d0b6      	beq.n	800bb26 <_malloc_r+0x22>
 800bbb8:	1b9b      	subs	r3, r3, r6
 800bbba:	50a3      	str	r3, [r4, r2]
 800bbbc:	e7b3      	b.n	800bb26 <_malloc_r+0x22>
 800bbbe:	6862      	ldr	r2, [r4, #4]
 800bbc0:	42a3      	cmp	r3, r4
 800bbc2:	bf0c      	ite	eq
 800bbc4:	6032      	streq	r2, [r6, #0]
 800bbc6:	605a      	strne	r2, [r3, #4]
 800bbc8:	e7ec      	b.n	800bba4 <_malloc_r+0xa0>
 800bbca:	4623      	mov	r3, r4
 800bbcc:	6864      	ldr	r4, [r4, #4]
 800bbce:	e7b2      	b.n	800bb36 <_malloc_r+0x32>
 800bbd0:	4634      	mov	r4, r6
 800bbd2:	6876      	ldr	r6, [r6, #4]
 800bbd4:	e7b9      	b.n	800bb4a <_malloc_r+0x46>
 800bbd6:	230c      	movs	r3, #12
 800bbd8:	603b      	str	r3, [r7, #0]
 800bbda:	4638      	mov	r0, r7
 800bbdc:	f000 f8f6 	bl	800bdcc <__malloc_unlock>
 800bbe0:	e7a1      	b.n	800bb26 <_malloc_r+0x22>
 800bbe2:	6025      	str	r5, [r4, #0]
 800bbe4:	e7de      	b.n	800bba4 <_malloc_r+0xa0>
 800bbe6:	bf00      	nop
 800bbe8:	20005ea8 	.word	0x20005ea8

0800bbec <cleanup_glue>:
 800bbec:	b538      	push	{r3, r4, r5, lr}
 800bbee:	460c      	mov	r4, r1
 800bbf0:	6809      	ldr	r1, [r1, #0]
 800bbf2:	4605      	mov	r5, r0
 800bbf4:	b109      	cbz	r1, 800bbfa <cleanup_glue+0xe>
 800bbf6:	f7ff fff9 	bl	800bbec <cleanup_glue>
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc02:	f000 b8e9 	b.w	800bdd8 <_free_r>
	...

0800bc08 <_reclaim_reent>:
 800bc08:	4b2c      	ldr	r3, [pc, #176]	; (800bcbc <_reclaim_reent+0xb4>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4283      	cmp	r3, r0
 800bc0e:	b570      	push	{r4, r5, r6, lr}
 800bc10:	4604      	mov	r4, r0
 800bc12:	d051      	beq.n	800bcb8 <_reclaim_reent+0xb0>
 800bc14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bc16:	b143      	cbz	r3, 800bc2a <_reclaim_reent+0x22>
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d14a      	bne.n	800bcb4 <_reclaim_reent+0xac>
 800bc1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc20:	6819      	ldr	r1, [r3, #0]
 800bc22:	b111      	cbz	r1, 800bc2a <_reclaim_reent+0x22>
 800bc24:	4620      	mov	r0, r4
 800bc26:	f000 f8d7 	bl	800bdd8 <_free_r>
 800bc2a:	6961      	ldr	r1, [r4, #20]
 800bc2c:	b111      	cbz	r1, 800bc34 <_reclaim_reent+0x2c>
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f000 f8d2 	bl	800bdd8 <_free_r>
 800bc34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bc36:	b111      	cbz	r1, 800bc3e <_reclaim_reent+0x36>
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f000 f8cd 	bl	800bdd8 <_free_r>
 800bc3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bc40:	b111      	cbz	r1, 800bc48 <_reclaim_reent+0x40>
 800bc42:	4620      	mov	r0, r4
 800bc44:	f000 f8c8 	bl	800bdd8 <_free_r>
 800bc48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bc4a:	b111      	cbz	r1, 800bc52 <_reclaim_reent+0x4a>
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f000 f8c3 	bl	800bdd8 <_free_r>
 800bc52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bc54:	b111      	cbz	r1, 800bc5c <_reclaim_reent+0x54>
 800bc56:	4620      	mov	r0, r4
 800bc58:	f000 f8be 	bl	800bdd8 <_free_r>
 800bc5c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bc5e:	b111      	cbz	r1, 800bc66 <_reclaim_reent+0x5e>
 800bc60:	4620      	mov	r0, r4
 800bc62:	f000 f8b9 	bl	800bdd8 <_free_r>
 800bc66:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bc68:	b111      	cbz	r1, 800bc70 <_reclaim_reent+0x68>
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f000 f8b4 	bl	800bdd8 <_free_r>
 800bc70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc72:	b111      	cbz	r1, 800bc7a <_reclaim_reent+0x72>
 800bc74:	4620      	mov	r0, r4
 800bc76:	f000 f8af 	bl	800bdd8 <_free_r>
 800bc7a:	69a3      	ldr	r3, [r4, #24]
 800bc7c:	b1e3      	cbz	r3, 800bcb8 <_reclaim_reent+0xb0>
 800bc7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bc80:	4620      	mov	r0, r4
 800bc82:	4798      	blx	r3
 800bc84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bc86:	b1b9      	cbz	r1, 800bcb8 <_reclaim_reent+0xb0>
 800bc88:	4620      	mov	r0, r4
 800bc8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc8e:	f7ff bfad 	b.w	800bbec <cleanup_glue>
 800bc92:	5949      	ldr	r1, [r1, r5]
 800bc94:	b941      	cbnz	r1, 800bca8 <_reclaim_reent+0xa0>
 800bc96:	3504      	adds	r5, #4
 800bc98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc9a:	2d80      	cmp	r5, #128	; 0x80
 800bc9c:	68d9      	ldr	r1, [r3, #12]
 800bc9e:	d1f8      	bne.n	800bc92 <_reclaim_reent+0x8a>
 800bca0:	4620      	mov	r0, r4
 800bca2:	f000 f899 	bl	800bdd8 <_free_r>
 800bca6:	e7ba      	b.n	800bc1e <_reclaim_reent+0x16>
 800bca8:	680e      	ldr	r6, [r1, #0]
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f000 f894 	bl	800bdd8 <_free_r>
 800bcb0:	4631      	mov	r1, r6
 800bcb2:	e7ef      	b.n	800bc94 <_reclaim_reent+0x8c>
 800bcb4:	2500      	movs	r5, #0
 800bcb6:	e7ef      	b.n	800bc98 <_reclaim_reent+0x90>
 800bcb8:	bd70      	pop	{r4, r5, r6, pc}
 800bcba:	bf00      	nop
 800bcbc:	20000018 	.word	0x20000018

0800bcc0 <_sbrk_r>:
 800bcc0:	b538      	push	{r3, r4, r5, lr}
 800bcc2:	4d06      	ldr	r5, [pc, #24]	; (800bcdc <_sbrk_r+0x1c>)
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	4608      	mov	r0, r1
 800bcca:	602b      	str	r3, [r5, #0]
 800bccc:	f7f5 fd9c 	bl	8001808 <_sbrk>
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	d102      	bne.n	800bcda <_sbrk_r+0x1a>
 800bcd4:	682b      	ldr	r3, [r5, #0]
 800bcd6:	b103      	cbz	r3, 800bcda <_sbrk_r+0x1a>
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	bd38      	pop	{r3, r4, r5, pc}
 800bcdc:	20005eb0 	.word	0x20005eb0

0800bce0 <siscanf>:
 800bce0:	b40e      	push	{r1, r2, r3}
 800bce2:	b510      	push	{r4, lr}
 800bce4:	b09f      	sub	sp, #124	; 0x7c
 800bce6:	ac21      	add	r4, sp, #132	; 0x84
 800bce8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800bcec:	f854 2b04 	ldr.w	r2, [r4], #4
 800bcf0:	9201      	str	r2, [sp, #4]
 800bcf2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800bcf6:	9004      	str	r0, [sp, #16]
 800bcf8:	9008      	str	r0, [sp, #32]
 800bcfa:	f7f4 fa69 	bl	80001d0 <strlen>
 800bcfe:	4b0c      	ldr	r3, [pc, #48]	; (800bd30 <siscanf+0x50>)
 800bd00:	9005      	str	r0, [sp, #20]
 800bd02:	9009      	str	r0, [sp, #36]	; 0x24
 800bd04:	930d      	str	r3, [sp, #52]	; 0x34
 800bd06:	480b      	ldr	r0, [pc, #44]	; (800bd34 <siscanf+0x54>)
 800bd08:	9a01      	ldr	r2, [sp, #4]
 800bd0a:	6800      	ldr	r0, [r0, #0]
 800bd0c:	9403      	str	r4, [sp, #12]
 800bd0e:	2300      	movs	r3, #0
 800bd10:	9311      	str	r3, [sp, #68]	; 0x44
 800bd12:	9316      	str	r3, [sp, #88]	; 0x58
 800bd14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd18:	f8ad 301e 	strh.w	r3, [sp, #30]
 800bd1c:	a904      	add	r1, sp, #16
 800bd1e:	4623      	mov	r3, r4
 800bd20:	f000 f900 	bl	800bf24 <__ssvfiscanf_r>
 800bd24:	b01f      	add	sp, #124	; 0x7c
 800bd26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd2a:	b003      	add	sp, #12
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	0800bd39 	.word	0x0800bd39
 800bd34:	20000018 	.word	0x20000018

0800bd38 <__seofread>:
 800bd38:	2000      	movs	r0, #0
 800bd3a:	4770      	bx	lr

0800bd3c <__utoa>:
 800bd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd3e:	4c1f      	ldr	r4, [pc, #124]	; (800bdbc <__utoa+0x80>)
 800bd40:	b08b      	sub	sp, #44	; 0x2c
 800bd42:	4605      	mov	r5, r0
 800bd44:	460b      	mov	r3, r1
 800bd46:	466e      	mov	r6, sp
 800bd48:	f104 0c20 	add.w	ip, r4, #32
 800bd4c:	6820      	ldr	r0, [r4, #0]
 800bd4e:	6861      	ldr	r1, [r4, #4]
 800bd50:	4637      	mov	r7, r6
 800bd52:	c703      	stmia	r7!, {r0, r1}
 800bd54:	3408      	adds	r4, #8
 800bd56:	4564      	cmp	r4, ip
 800bd58:	463e      	mov	r6, r7
 800bd5a:	d1f7      	bne.n	800bd4c <__utoa+0x10>
 800bd5c:	7921      	ldrb	r1, [r4, #4]
 800bd5e:	7139      	strb	r1, [r7, #4]
 800bd60:	1e91      	subs	r1, r2, #2
 800bd62:	6820      	ldr	r0, [r4, #0]
 800bd64:	6038      	str	r0, [r7, #0]
 800bd66:	2922      	cmp	r1, #34	; 0x22
 800bd68:	f04f 0100 	mov.w	r1, #0
 800bd6c:	d904      	bls.n	800bd78 <__utoa+0x3c>
 800bd6e:	7019      	strb	r1, [r3, #0]
 800bd70:	460b      	mov	r3, r1
 800bd72:	4618      	mov	r0, r3
 800bd74:	b00b      	add	sp, #44	; 0x2c
 800bd76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd78:	1e58      	subs	r0, r3, #1
 800bd7a:	4684      	mov	ip, r0
 800bd7c:	fbb5 f7f2 	udiv	r7, r5, r2
 800bd80:	fb02 5617 	mls	r6, r2, r7, r5
 800bd84:	3628      	adds	r6, #40	; 0x28
 800bd86:	446e      	add	r6, sp
 800bd88:	460c      	mov	r4, r1
 800bd8a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bd8e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bd92:	462e      	mov	r6, r5
 800bd94:	42b2      	cmp	r2, r6
 800bd96:	f101 0101 	add.w	r1, r1, #1
 800bd9a:	463d      	mov	r5, r7
 800bd9c:	d9ee      	bls.n	800bd7c <__utoa+0x40>
 800bd9e:	2200      	movs	r2, #0
 800bda0:	545a      	strb	r2, [r3, r1]
 800bda2:	1919      	adds	r1, r3, r4
 800bda4:	1aa5      	subs	r5, r4, r2
 800bda6:	42aa      	cmp	r2, r5
 800bda8:	dae3      	bge.n	800bd72 <__utoa+0x36>
 800bdaa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bdae:	780e      	ldrb	r6, [r1, #0]
 800bdb0:	7006      	strb	r6, [r0, #0]
 800bdb2:	3201      	adds	r2, #1
 800bdb4:	f801 5901 	strb.w	r5, [r1], #-1
 800bdb8:	e7f4      	b.n	800bda4 <__utoa+0x68>
 800bdba:	bf00      	nop
 800bdbc:	0800cb7c 	.word	0x0800cb7c

0800bdc0 <__malloc_lock>:
 800bdc0:	4801      	ldr	r0, [pc, #4]	; (800bdc8 <__malloc_lock+0x8>)
 800bdc2:	f7ff be67 	b.w	800ba94 <__retarget_lock_acquire_recursive>
 800bdc6:	bf00      	nop
 800bdc8:	20005ea4 	.word	0x20005ea4

0800bdcc <__malloc_unlock>:
 800bdcc:	4801      	ldr	r0, [pc, #4]	; (800bdd4 <__malloc_unlock+0x8>)
 800bdce:	f7ff be62 	b.w	800ba96 <__retarget_lock_release_recursive>
 800bdd2:	bf00      	nop
 800bdd4:	20005ea4 	.word	0x20005ea4

0800bdd8 <_free_r>:
 800bdd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdda:	2900      	cmp	r1, #0
 800bddc:	d044      	beq.n	800be68 <_free_r+0x90>
 800bdde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bde2:	9001      	str	r0, [sp, #4]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f1a1 0404 	sub.w	r4, r1, #4
 800bdea:	bfb8      	it	lt
 800bdec:	18e4      	addlt	r4, r4, r3
 800bdee:	f7ff ffe7 	bl	800bdc0 <__malloc_lock>
 800bdf2:	4a1e      	ldr	r2, [pc, #120]	; (800be6c <_free_r+0x94>)
 800bdf4:	9801      	ldr	r0, [sp, #4]
 800bdf6:	6813      	ldr	r3, [r2, #0]
 800bdf8:	b933      	cbnz	r3, 800be08 <_free_r+0x30>
 800bdfa:	6063      	str	r3, [r4, #4]
 800bdfc:	6014      	str	r4, [r2, #0]
 800bdfe:	b003      	add	sp, #12
 800be00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be04:	f7ff bfe2 	b.w	800bdcc <__malloc_unlock>
 800be08:	42a3      	cmp	r3, r4
 800be0a:	d908      	bls.n	800be1e <_free_r+0x46>
 800be0c:	6825      	ldr	r5, [r4, #0]
 800be0e:	1961      	adds	r1, r4, r5
 800be10:	428b      	cmp	r3, r1
 800be12:	bf01      	itttt	eq
 800be14:	6819      	ldreq	r1, [r3, #0]
 800be16:	685b      	ldreq	r3, [r3, #4]
 800be18:	1949      	addeq	r1, r1, r5
 800be1a:	6021      	streq	r1, [r4, #0]
 800be1c:	e7ed      	b.n	800bdfa <_free_r+0x22>
 800be1e:	461a      	mov	r2, r3
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	b10b      	cbz	r3, 800be28 <_free_r+0x50>
 800be24:	42a3      	cmp	r3, r4
 800be26:	d9fa      	bls.n	800be1e <_free_r+0x46>
 800be28:	6811      	ldr	r1, [r2, #0]
 800be2a:	1855      	adds	r5, r2, r1
 800be2c:	42a5      	cmp	r5, r4
 800be2e:	d10b      	bne.n	800be48 <_free_r+0x70>
 800be30:	6824      	ldr	r4, [r4, #0]
 800be32:	4421      	add	r1, r4
 800be34:	1854      	adds	r4, r2, r1
 800be36:	42a3      	cmp	r3, r4
 800be38:	6011      	str	r1, [r2, #0]
 800be3a:	d1e0      	bne.n	800bdfe <_free_r+0x26>
 800be3c:	681c      	ldr	r4, [r3, #0]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	6053      	str	r3, [r2, #4]
 800be42:	4421      	add	r1, r4
 800be44:	6011      	str	r1, [r2, #0]
 800be46:	e7da      	b.n	800bdfe <_free_r+0x26>
 800be48:	d902      	bls.n	800be50 <_free_r+0x78>
 800be4a:	230c      	movs	r3, #12
 800be4c:	6003      	str	r3, [r0, #0]
 800be4e:	e7d6      	b.n	800bdfe <_free_r+0x26>
 800be50:	6825      	ldr	r5, [r4, #0]
 800be52:	1961      	adds	r1, r4, r5
 800be54:	428b      	cmp	r3, r1
 800be56:	bf04      	itt	eq
 800be58:	6819      	ldreq	r1, [r3, #0]
 800be5a:	685b      	ldreq	r3, [r3, #4]
 800be5c:	6063      	str	r3, [r4, #4]
 800be5e:	bf04      	itt	eq
 800be60:	1949      	addeq	r1, r1, r5
 800be62:	6021      	streq	r1, [r4, #0]
 800be64:	6054      	str	r4, [r2, #4]
 800be66:	e7ca      	b.n	800bdfe <_free_r+0x26>
 800be68:	b003      	add	sp, #12
 800be6a:	bd30      	pop	{r4, r5, pc}
 800be6c:	20005ea8 	.word	0x20005ea8

0800be70 <_sungetc_r>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	1c4b      	adds	r3, r1, #1
 800be74:	4614      	mov	r4, r2
 800be76:	d103      	bne.n	800be80 <_sungetc_r+0x10>
 800be78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800be7c:	4628      	mov	r0, r5
 800be7e:	bd38      	pop	{r3, r4, r5, pc}
 800be80:	8993      	ldrh	r3, [r2, #12]
 800be82:	f023 0320 	bic.w	r3, r3, #32
 800be86:	8193      	strh	r3, [r2, #12]
 800be88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be8a:	6852      	ldr	r2, [r2, #4]
 800be8c:	b2cd      	uxtb	r5, r1
 800be8e:	b18b      	cbz	r3, 800beb4 <_sungetc_r+0x44>
 800be90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800be92:	4293      	cmp	r3, r2
 800be94:	dd08      	ble.n	800bea8 <_sungetc_r+0x38>
 800be96:	6823      	ldr	r3, [r4, #0]
 800be98:	1e5a      	subs	r2, r3, #1
 800be9a:	6022      	str	r2, [r4, #0]
 800be9c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bea0:	6863      	ldr	r3, [r4, #4]
 800bea2:	3301      	adds	r3, #1
 800bea4:	6063      	str	r3, [r4, #4]
 800bea6:	e7e9      	b.n	800be7c <_sungetc_r+0xc>
 800bea8:	4621      	mov	r1, r4
 800beaa:	f000 fc35 	bl	800c718 <__submore>
 800beae:	2800      	cmp	r0, #0
 800beb0:	d0f1      	beq.n	800be96 <_sungetc_r+0x26>
 800beb2:	e7e1      	b.n	800be78 <_sungetc_r+0x8>
 800beb4:	6921      	ldr	r1, [r4, #16]
 800beb6:	6823      	ldr	r3, [r4, #0]
 800beb8:	b151      	cbz	r1, 800bed0 <_sungetc_r+0x60>
 800beba:	4299      	cmp	r1, r3
 800bebc:	d208      	bcs.n	800bed0 <_sungetc_r+0x60>
 800bebe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bec2:	42a9      	cmp	r1, r5
 800bec4:	d104      	bne.n	800bed0 <_sungetc_r+0x60>
 800bec6:	3b01      	subs	r3, #1
 800bec8:	3201      	adds	r2, #1
 800beca:	6023      	str	r3, [r4, #0]
 800becc:	6062      	str	r2, [r4, #4]
 800bece:	e7d5      	b.n	800be7c <_sungetc_r+0xc>
 800bed0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bed8:	6363      	str	r3, [r4, #52]	; 0x34
 800beda:	2303      	movs	r3, #3
 800bedc:	63a3      	str	r3, [r4, #56]	; 0x38
 800bede:	4623      	mov	r3, r4
 800bee0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bee4:	6023      	str	r3, [r4, #0]
 800bee6:	2301      	movs	r3, #1
 800bee8:	e7dc      	b.n	800bea4 <_sungetc_r+0x34>

0800beea <__ssrefill_r>:
 800beea:	b510      	push	{r4, lr}
 800beec:	460c      	mov	r4, r1
 800beee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bef0:	b169      	cbz	r1, 800bf0e <__ssrefill_r+0x24>
 800bef2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bef6:	4299      	cmp	r1, r3
 800bef8:	d001      	beq.n	800befe <__ssrefill_r+0x14>
 800befa:	f7ff ff6d 	bl	800bdd8 <_free_r>
 800befe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf00:	6063      	str	r3, [r4, #4]
 800bf02:	2000      	movs	r0, #0
 800bf04:	6360      	str	r0, [r4, #52]	; 0x34
 800bf06:	b113      	cbz	r3, 800bf0e <__ssrefill_r+0x24>
 800bf08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf0a:	6023      	str	r3, [r4, #0]
 800bf0c:	bd10      	pop	{r4, pc}
 800bf0e:	6923      	ldr	r3, [r4, #16]
 800bf10:	6023      	str	r3, [r4, #0]
 800bf12:	2300      	movs	r3, #0
 800bf14:	6063      	str	r3, [r4, #4]
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	f043 0320 	orr.w	r3, r3, #32
 800bf1c:	81a3      	strh	r3, [r4, #12]
 800bf1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf22:	e7f3      	b.n	800bf0c <__ssrefill_r+0x22>

0800bf24 <__ssvfiscanf_r>:
 800bf24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf28:	460c      	mov	r4, r1
 800bf2a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bf2e:	2100      	movs	r1, #0
 800bf30:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bf34:	49a6      	ldr	r1, [pc, #664]	; (800c1d0 <__ssvfiscanf_r+0x2ac>)
 800bf36:	91a0      	str	r1, [sp, #640]	; 0x280
 800bf38:	f10d 0804 	add.w	r8, sp, #4
 800bf3c:	49a5      	ldr	r1, [pc, #660]	; (800c1d4 <__ssvfiscanf_r+0x2b0>)
 800bf3e:	4fa6      	ldr	r7, [pc, #664]	; (800c1d8 <__ssvfiscanf_r+0x2b4>)
 800bf40:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c1dc <__ssvfiscanf_r+0x2b8>
 800bf44:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bf48:	4606      	mov	r6, r0
 800bf4a:	91a1      	str	r1, [sp, #644]	; 0x284
 800bf4c:	9300      	str	r3, [sp, #0]
 800bf4e:	7813      	ldrb	r3, [r2, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f000 815a 	beq.w	800c20a <__ssvfiscanf_r+0x2e6>
 800bf56:	5dd9      	ldrb	r1, [r3, r7]
 800bf58:	f011 0108 	ands.w	r1, r1, #8
 800bf5c:	f102 0501 	add.w	r5, r2, #1
 800bf60:	d019      	beq.n	800bf96 <__ssvfiscanf_r+0x72>
 800bf62:	6863      	ldr	r3, [r4, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	dd0f      	ble.n	800bf88 <__ssvfiscanf_r+0x64>
 800bf68:	6823      	ldr	r3, [r4, #0]
 800bf6a:	781a      	ldrb	r2, [r3, #0]
 800bf6c:	5cba      	ldrb	r2, [r7, r2]
 800bf6e:	0712      	lsls	r2, r2, #28
 800bf70:	d401      	bmi.n	800bf76 <__ssvfiscanf_r+0x52>
 800bf72:	462a      	mov	r2, r5
 800bf74:	e7eb      	b.n	800bf4e <__ssvfiscanf_r+0x2a>
 800bf76:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bf78:	3201      	adds	r2, #1
 800bf7a:	9245      	str	r2, [sp, #276]	; 0x114
 800bf7c:	6862      	ldr	r2, [r4, #4]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	3a01      	subs	r2, #1
 800bf82:	6062      	str	r2, [r4, #4]
 800bf84:	6023      	str	r3, [r4, #0]
 800bf86:	e7ec      	b.n	800bf62 <__ssvfiscanf_r+0x3e>
 800bf88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	4798      	blx	r3
 800bf90:	2800      	cmp	r0, #0
 800bf92:	d0e9      	beq.n	800bf68 <__ssvfiscanf_r+0x44>
 800bf94:	e7ed      	b.n	800bf72 <__ssvfiscanf_r+0x4e>
 800bf96:	2b25      	cmp	r3, #37	; 0x25
 800bf98:	d012      	beq.n	800bfc0 <__ssvfiscanf_r+0x9c>
 800bf9a:	469a      	mov	sl, r3
 800bf9c:	6863      	ldr	r3, [r4, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	f340 8091 	ble.w	800c0c6 <__ssvfiscanf_r+0x1a2>
 800bfa4:	6822      	ldr	r2, [r4, #0]
 800bfa6:	7813      	ldrb	r3, [r2, #0]
 800bfa8:	4553      	cmp	r3, sl
 800bfaa:	f040 812e 	bne.w	800c20a <__ssvfiscanf_r+0x2e6>
 800bfae:	6863      	ldr	r3, [r4, #4]
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	6063      	str	r3, [r4, #4]
 800bfb4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bfb6:	3201      	adds	r2, #1
 800bfb8:	3301      	adds	r3, #1
 800bfba:	6022      	str	r2, [r4, #0]
 800bfbc:	9345      	str	r3, [sp, #276]	; 0x114
 800bfbe:	e7d8      	b.n	800bf72 <__ssvfiscanf_r+0x4e>
 800bfc0:	9141      	str	r1, [sp, #260]	; 0x104
 800bfc2:	9143      	str	r1, [sp, #268]	; 0x10c
 800bfc4:	7853      	ldrb	r3, [r2, #1]
 800bfc6:	2b2a      	cmp	r3, #42	; 0x2a
 800bfc8:	bf02      	ittt	eq
 800bfca:	2310      	moveq	r3, #16
 800bfcc:	1c95      	addeq	r5, r2, #2
 800bfce:	9341      	streq	r3, [sp, #260]	; 0x104
 800bfd0:	220a      	movs	r2, #10
 800bfd2:	46aa      	mov	sl, r5
 800bfd4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bfd8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bfdc:	2b09      	cmp	r3, #9
 800bfde:	d91d      	bls.n	800c01c <__ssvfiscanf_r+0xf8>
 800bfe0:	487e      	ldr	r0, [pc, #504]	; (800c1dc <__ssvfiscanf_r+0x2b8>)
 800bfe2:	2203      	movs	r2, #3
 800bfe4:	f7f4 f8fc 	bl	80001e0 <memchr>
 800bfe8:	b140      	cbz	r0, 800bffc <__ssvfiscanf_r+0xd8>
 800bfea:	2301      	movs	r3, #1
 800bfec:	eba0 0009 	sub.w	r0, r0, r9
 800bff0:	fa03 f000 	lsl.w	r0, r3, r0
 800bff4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bff6:	4318      	orrs	r0, r3
 800bff8:	9041      	str	r0, [sp, #260]	; 0x104
 800bffa:	4655      	mov	r5, sl
 800bffc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c000:	2b78      	cmp	r3, #120	; 0x78
 800c002:	d806      	bhi.n	800c012 <__ssvfiscanf_r+0xee>
 800c004:	2b57      	cmp	r3, #87	; 0x57
 800c006:	d810      	bhi.n	800c02a <__ssvfiscanf_r+0x106>
 800c008:	2b25      	cmp	r3, #37	; 0x25
 800c00a:	d0c6      	beq.n	800bf9a <__ssvfiscanf_r+0x76>
 800c00c:	d856      	bhi.n	800c0bc <__ssvfiscanf_r+0x198>
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d064      	beq.n	800c0dc <__ssvfiscanf_r+0x1b8>
 800c012:	2303      	movs	r3, #3
 800c014:	9347      	str	r3, [sp, #284]	; 0x11c
 800c016:	230a      	movs	r3, #10
 800c018:	9342      	str	r3, [sp, #264]	; 0x108
 800c01a:	e071      	b.n	800c100 <__ssvfiscanf_r+0x1dc>
 800c01c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c01e:	fb02 1103 	mla	r1, r2, r3, r1
 800c022:	3930      	subs	r1, #48	; 0x30
 800c024:	9143      	str	r1, [sp, #268]	; 0x10c
 800c026:	4655      	mov	r5, sl
 800c028:	e7d3      	b.n	800bfd2 <__ssvfiscanf_r+0xae>
 800c02a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c02e:	2a20      	cmp	r2, #32
 800c030:	d8ef      	bhi.n	800c012 <__ssvfiscanf_r+0xee>
 800c032:	a101      	add	r1, pc, #4	; (adr r1, 800c038 <__ssvfiscanf_r+0x114>)
 800c034:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c038:	0800c0eb 	.word	0x0800c0eb
 800c03c:	0800c013 	.word	0x0800c013
 800c040:	0800c013 	.word	0x0800c013
 800c044:	0800c149 	.word	0x0800c149
 800c048:	0800c013 	.word	0x0800c013
 800c04c:	0800c013 	.word	0x0800c013
 800c050:	0800c013 	.word	0x0800c013
 800c054:	0800c013 	.word	0x0800c013
 800c058:	0800c013 	.word	0x0800c013
 800c05c:	0800c013 	.word	0x0800c013
 800c060:	0800c013 	.word	0x0800c013
 800c064:	0800c15f 	.word	0x0800c15f
 800c068:	0800c135 	.word	0x0800c135
 800c06c:	0800c0c3 	.word	0x0800c0c3
 800c070:	0800c0c3 	.word	0x0800c0c3
 800c074:	0800c0c3 	.word	0x0800c0c3
 800c078:	0800c013 	.word	0x0800c013
 800c07c:	0800c139 	.word	0x0800c139
 800c080:	0800c013 	.word	0x0800c013
 800c084:	0800c013 	.word	0x0800c013
 800c088:	0800c013 	.word	0x0800c013
 800c08c:	0800c013 	.word	0x0800c013
 800c090:	0800c16f 	.word	0x0800c16f
 800c094:	0800c141 	.word	0x0800c141
 800c098:	0800c0e3 	.word	0x0800c0e3
 800c09c:	0800c013 	.word	0x0800c013
 800c0a0:	0800c013 	.word	0x0800c013
 800c0a4:	0800c16b 	.word	0x0800c16b
 800c0a8:	0800c013 	.word	0x0800c013
 800c0ac:	0800c135 	.word	0x0800c135
 800c0b0:	0800c013 	.word	0x0800c013
 800c0b4:	0800c013 	.word	0x0800c013
 800c0b8:	0800c0eb 	.word	0x0800c0eb
 800c0bc:	3b45      	subs	r3, #69	; 0x45
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	d8a7      	bhi.n	800c012 <__ssvfiscanf_r+0xee>
 800c0c2:	2305      	movs	r3, #5
 800c0c4:	e01b      	b.n	800c0fe <__ssvfiscanf_r+0x1da>
 800c0c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c0c8:	4621      	mov	r1, r4
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	4798      	blx	r3
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	f43f af68 	beq.w	800bfa4 <__ssvfiscanf_r+0x80>
 800c0d4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	f040 808d 	bne.w	800c1f6 <__ssvfiscanf_r+0x2d2>
 800c0dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0e0:	e08f      	b.n	800c202 <__ssvfiscanf_r+0x2de>
 800c0e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c0e4:	f042 0220 	orr.w	r2, r2, #32
 800c0e8:	9241      	str	r2, [sp, #260]	; 0x104
 800c0ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c0ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0f0:	9241      	str	r2, [sp, #260]	; 0x104
 800c0f2:	2210      	movs	r2, #16
 800c0f4:	2b6f      	cmp	r3, #111	; 0x6f
 800c0f6:	9242      	str	r2, [sp, #264]	; 0x108
 800c0f8:	bf34      	ite	cc
 800c0fa:	2303      	movcc	r3, #3
 800c0fc:	2304      	movcs	r3, #4
 800c0fe:	9347      	str	r3, [sp, #284]	; 0x11c
 800c100:	6863      	ldr	r3, [r4, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	dd42      	ble.n	800c18c <__ssvfiscanf_r+0x268>
 800c106:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c108:	0659      	lsls	r1, r3, #25
 800c10a:	d404      	bmi.n	800c116 <__ssvfiscanf_r+0x1f2>
 800c10c:	6823      	ldr	r3, [r4, #0]
 800c10e:	781a      	ldrb	r2, [r3, #0]
 800c110:	5cba      	ldrb	r2, [r7, r2]
 800c112:	0712      	lsls	r2, r2, #28
 800c114:	d441      	bmi.n	800c19a <__ssvfiscanf_r+0x276>
 800c116:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c118:	2b02      	cmp	r3, #2
 800c11a:	dc50      	bgt.n	800c1be <__ssvfiscanf_r+0x29a>
 800c11c:	466b      	mov	r3, sp
 800c11e:	4622      	mov	r2, r4
 800c120:	a941      	add	r1, sp, #260	; 0x104
 800c122:	4630      	mov	r0, r6
 800c124:	f000 f876 	bl	800c214 <_scanf_chars>
 800c128:	2801      	cmp	r0, #1
 800c12a:	d06e      	beq.n	800c20a <__ssvfiscanf_r+0x2e6>
 800c12c:	2802      	cmp	r0, #2
 800c12e:	f47f af20 	bne.w	800bf72 <__ssvfiscanf_r+0x4e>
 800c132:	e7cf      	b.n	800c0d4 <__ssvfiscanf_r+0x1b0>
 800c134:	220a      	movs	r2, #10
 800c136:	e7dd      	b.n	800c0f4 <__ssvfiscanf_r+0x1d0>
 800c138:	2300      	movs	r3, #0
 800c13a:	9342      	str	r3, [sp, #264]	; 0x108
 800c13c:	2303      	movs	r3, #3
 800c13e:	e7de      	b.n	800c0fe <__ssvfiscanf_r+0x1da>
 800c140:	2308      	movs	r3, #8
 800c142:	9342      	str	r3, [sp, #264]	; 0x108
 800c144:	2304      	movs	r3, #4
 800c146:	e7da      	b.n	800c0fe <__ssvfiscanf_r+0x1da>
 800c148:	4629      	mov	r1, r5
 800c14a:	4640      	mov	r0, r8
 800c14c:	f000 f9b4 	bl	800c4b8 <__sccl>
 800c150:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c156:	9341      	str	r3, [sp, #260]	; 0x104
 800c158:	4605      	mov	r5, r0
 800c15a:	2301      	movs	r3, #1
 800c15c:	e7cf      	b.n	800c0fe <__ssvfiscanf_r+0x1da>
 800c15e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c164:	9341      	str	r3, [sp, #260]	; 0x104
 800c166:	2300      	movs	r3, #0
 800c168:	e7c9      	b.n	800c0fe <__ssvfiscanf_r+0x1da>
 800c16a:	2302      	movs	r3, #2
 800c16c:	e7c7      	b.n	800c0fe <__ssvfiscanf_r+0x1da>
 800c16e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c170:	06c3      	lsls	r3, r0, #27
 800c172:	f53f aefe 	bmi.w	800bf72 <__ssvfiscanf_r+0x4e>
 800c176:	9b00      	ldr	r3, [sp, #0]
 800c178:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c17a:	1d19      	adds	r1, r3, #4
 800c17c:	9100      	str	r1, [sp, #0]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f010 0f01 	tst.w	r0, #1
 800c184:	bf14      	ite	ne
 800c186:	801a      	strhne	r2, [r3, #0]
 800c188:	601a      	streq	r2, [r3, #0]
 800c18a:	e6f2      	b.n	800bf72 <__ssvfiscanf_r+0x4e>
 800c18c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c18e:	4621      	mov	r1, r4
 800c190:	4630      	mov	r0, r6
 800c192:	4798      	blx	r3
 800c194:	2800      	cmp	r0, #0
 800c196:	d0b6      	beq.n	800c106 <__ssvfiscanf_r+0x1e2>
 800c198:	e79c      	b.n	800c0d4 <__ssvfiscanf_r+0x1b0>
 800c19a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c19c:	3201      	adds	r2, #1
 800c19e:	9245      	str	r2, [sp, #276]	; 0x114
 800c1a0:	6862      	ldr	r2, [r4, #4]
 800c1a2:	3a01      	subs	r2, #1
 800c1a4:	2a00      	cmp	r2, #0
 800c1a6:	6062      	str	r2, [r4, #4]
 800c1a8:	dd02      	ble.n	800c1b0 <__ssvfiscanf_r+0x28c>
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	e7ad      	b.n	800c10c <__ssvfiscanf_r+0x1e8>
 800c1b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1b2:	4621      	mov	r1, r4
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	4798      	blx	r3
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d0a7      	beq.n	800c10c <__ssvfiscanf_r+0x1e8>
 800c1bc:	e78a      	b.n	800c0d4 <__ssvfiscanf_r+0x1b0>
 800c1be:	2b04      	cmp	r3, #4
 800c1c0:	dc0e      	bgt.n	800c1e0 <__ssvfiscanf_r+0x2bc>
 800c1c2:	466b      	mov	r3, sp
 800c1c4:	4622      	mov	r2, r4
 800c1c6:	a941      	add	r1, sp, #260	; 0x104
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	f000 f87d 	bl	800c2c8 <_scanf_i>
 800c1ce:	e7ab      	b.n	800c128 <__ssvfiscanf_r+0x204>
 800c1d0:	0800be71 	.word	0x0800be71
 800c1d4:	0800beeb 	.word	0x0800beeb
 800c1d8:	0800cbc1 	.word	0x0800cbc1
 800c1dc:	0800cba1 	.word	0x0800cba1
 800c1e0:	4b0b      	ldr	r3, [pc, #44]	; (800c210 <__ssvfiscanf_r+0x2ec>)
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f43f aec5 	beq.w	800bf72 <__ssvfiscanf_r+0x4e>
 800c1e8:	466b      	mov	r3, sp
 800c1ea:	4622      	mov	r2, r4
 800c1ec:	a941      	add	r1, sp, #260	; 0x104
 800c1ee:	4630      	mov	r0, r6
 800c1f0:	f3af 8000 	nop.w
 800c1f4:	e798      	b.n	800c128 <__ssvfiscanf_r+0x204>
 800c1f6:	89a3      	ldrh	r3, [r4, #12]
 800c1f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c1fc:	bf18      	it	ne
 800c1fe:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800c202:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c20a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c20c:	e7f9      	b.n	800c202 <__ssvfiscanf_r+0x2de>
 800c20e:	bf00      	nop
 800c210:	00000000 	.word	0x00000000

0800c214 <_scanf_chars>:
 800c214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c218:	4615      	mov	r5, r2
 800c21a:	688a      	ldr	r2, [r1, #8]
 800c21c:	4680      	mov	r8, r0
 800c21e:	460c      	mov	r4, r1
 800c220:	b932      	cbnz	r2, 800c230 <_scanf_chars+0x1c>
 800c222:	698a      	ldr	r2, [r1, #24]
 800c224:	2a00      	cmp	r2, #0
 800c226:	bf0c      	ite	eq
 800c228:	2201      	moveq	r2, #1
 800c22a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800c22e:	608a      	str	r2, [r1, #8]
 800c230:	6822      	ldr	r2, [r4, #0]
 800c232:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c2c4 <_scanf_chars+0xb0>
 800c236:	06d1      	lsls	r1, r2, #27
 800c238:	bf5f      	itttt	pl
 800c23a:	681a      	ldrpl	r2, [r3, #0]
 800c23c:	1d11      	addpl	r1, r2, #4
 800c23e:	6019      	strpl	r1, [r3, #0]
 800c240:	6816      	ldrpl	r6, [r2, #0]
 800c242:	2700      	movs	r7, #0
 800c244:	69a0      	ldr	r0, [r4, #24]
 800c246:	b188      	cbz	r0, 800c26c <_scanf_chars+0x58>
 800c248:	2801      	cmp	r0, #1
 800c24a:	d107      	bne.n	800c25c <_scanf_chars+0x48>
 800c24c:	682a      	ldr	r2, [r5, #0]
 800c24e:	7811      	ldrb	r1, [r2, #0]
 800c250:	6962      	ldr	r2, [r4, #20]
 800c252:	5c52      	ldrb	r2, [r2, r1]
 800c254:	b952      	cbnz	r2, 800c26c <_scanf_chars+0x58>
 800c256:	2f00      	cmp	r7, #0
 800c258:	d031      	beq.n	800c2be <_scanf_chars+0xaa>
 800c25a:	e022      	b.n	800c2a2 <_scanf_chars+0x8e>
 800c25c:	2802      	cmp	r0, #2
 800c25e:	d120      	bne.n	800c2a2 <_scanf_chars+0x8e>
 800c260:	682b      	ldr	r3, [r5, #0]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c268:	071b      	lsls	r3, r3, #28
 800c26a:	d41a      	bmi.n	800c2a2 <_scanf_chars+0x8e>
 800c26c:	6823      	ldr	r3, [r4, #0]
 800c26e:	06da      	lsls	r2, r3, #27
 800c270:	bf5e      	ittt	pl
 800c272:	682b      	ldrpl	r3, [r5, #0]
 800c274:	781b      	ldrbpl	r3, [r3, #0]
 800c276:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c27a:	682a      	ldr	r2, [r5, #0]
 800c27c:	686b      	ldr	r3, [r5, #4]
 800c27e:	3201      	adds	r2, #1
 800c280:	602a      	str	r2, [r5, #0]
 800c282:	68a2      	ldr	r2, [r4, #8]
 800c284:	3b01      	subs	r3, #1
 800c286:	3a01      	subs	r2, #1
 800c288:	606b      	str	r3, [r5, #4]
 800c28a:	3701      	adds	r7, #1
 800c28c:	60a2      	str	r2, [r4, #8]
 800c28e:	b142      	cbz	r2, 800c2a2 <_scanf_chars+0x8e>
 800c290:	2b00      	cmp	r3, #0
 800c292:	dcd7      	bgt.n	800c244 <_scanf_chars+0x30>
 800c294:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c298:	4629      	mov	r1, r5
 800c29a:	4640      	mov	r0, r8
 800c29c:	4798      	blx	r3
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d0d0      	beq.n	800c244 <_scanf_chars+0x30>
 800c2a2:	6823      	ldr	r3, [r4, #0]
 800c2a4:	f013 0310 	ands.w	r3, r3, #16
 800c2a8:	d105      	bne.n	800c2b6 <_scanf_chars+0xa2>
 800c2aa:	68e2      	ldr	r2, [r4, #12]
 800c2ac:	3201      	adds	r2, #1
 800c2ae:	60e2      	str	r2, [r4, #12]
 800c2b0:	69a2      	ldr	r2, [r4, #24]
 800c2b2:	b102      	cbz	r2, 800c2b6 <_scanf_chars+0xa2>
 800c2b4:	7033      	strb	r3, [r6, #0]
 800c2b6:	6923      	ldr	r3, [r4, #16]
 800c2b8:	443b      	add	r3, r7
 800c2ba:	6123      	str	r3, [r4, #16]
 800c2bc:	2000      	movs	r0, #0
 800c2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2c2:	bf00      	nop
 800c2c4:	0800cbc1 	.word	0x0800cbc1

0800c2c8 <_scanf_i>:
 800c2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2cc:	4698      	mov	r8, r3
 800c2ce:	4b76      	ldr	r3, [pc, #472]	; (800c4a8 <_scanf_i+0x1e0>)
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	4682      	mov	sl, r0
 800c2d4:	4616      	mov	r6, r2
 800c2d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c2da:	b087      	sub	sp, #28
 800c2dc:	ab03      	add	r3, sp, #12
 800c2de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c2e2:	4b72      	ldr	r3, [pc, #456]	; (800c4ac <_scanf_i+0x1e4>)
 800c2e4:	69a1      	ldr	r1, [r4, #24]
 800c2e6:	4a72      	ldr	r2, [pc, #456]	; (800c4b0 <_scanf_i+0x1e8>)
 800c2e8:	2903      	cmp	r1, #3
 800c2ea:	bf18      	it	ne
 800c2ec:	461a      	movne	r2, r3
 800c2ee:	68a3      	ldr	r3, [r4, #8]
 800c2f0:	9201      	str	r2, [sp, #4]
 800c2f2:	1e5a      	subs	r2, r3, #1
 800c2f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c2f8:	bf88      	it	hi
 800c2fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c2fe:	4627      	mov	r7, r4
 800c300:	bf82      	ittt	hi
 800c302:	eb03 0905 	addhi.w	r9, r3, r5
 800c306:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c30a:	60a3      	strhi	r3, [r4, #8]
 800c30c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c310:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c314:	bf98      	it	ls
 800c316:	f04f 0900 	movls.w	r9, #0
 800c31a:	6023      	str	r3, [r4, #0]
 800c31c:	463d      	mov	r5, r7
 800c31e:	f04f 0b00 	mov.w	fp, #0
 800c322:	6831      	ldr	r1, [r6, #0]
 800c324:	ab03      	add	r3, sp, #12
 800c326:	7809      	ldrb	r1, [r1, #0]
 800c328:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c32c:	2202      	movs	r2, #2
 800c32e:	f7f3 ff57 	bl	80001e0 <memchr>
 800c332:	b328      	cbz	r0, 800c380 <_scanf_i+0xb8>
 800c334:	f1bb 0f01 	cmp.w	fp, #1
 800c338:	d159      	bne.n	800c3ee <_scanf_i+0x126>
 800c33a:	6862      	ldr	r2, [r4, #4]
 800c33c:	b92a      	cbnz	r2, 800c34a <_scanf_i+0x82>
 800c33e:	6822      	ldr	r2, [r4, #0]
 800c340:	2308      	movs	r3, #8
 800c342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c346:	6063      	str	r3, [r4, #4]
 800c348:	6022      	str	r2, [r4, #0]
 800c34a:	6822      	ldr	r2, [r4, #0]
 800c34c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c350:	6022      	str	r2, [r4, #0]
 800c352:	68a2      	ldr	r2, [r4, #8]
 800c354:	1e51      	subs	r1, r2, #1
 800c356:	60a1      	str	r1, [r4, #8]
 800c358:	b192      	cbz	r2, 800c380 <_scanf_i+0xb8>
 800c35a:	6832      	ldr	r2, [r6, #0]
 800c35c:	1c51      	adds	r1, r2, #1
 800c35e:	6031      	str	r1, [r6, #0]
 800c360:	7812      	ldrb	r2, [r2, #0]
 800c362:	f805 2b01 	strb.w	r2, [r5], #1
 800c366:	6872      	ldr	r2, [r6, #4]
 800c368:	3a01      	subs	r2, #1
 800c36a:	2a00      	cmp	r2, #0
 800c36c:	6072      	str	r2, [r6, #4]
 800c36e:	dc07      	bgt.n	800c380 <_scanf_i+0xb8>
 800c370:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c374:	4631      	mov	r1, r6
 800c376:	4650      	mov	r0, sl
 800c378:	4790      	blx	r2
 800c37a:	2800      	cmp	r0, #0
 800c37c:	f040 8085 	bne.w	800c48a <_scanf_i+0x1c2>
 800c380:	f10b 0b01 	add.w	fp, fp, #1
 800c384:	f1bb 0f03 	cmp.w	fp, #3
 800c388:	d1cb      	bne.n	800c322 <_scanf_i+0x5a>
 800c38a:	6863      	ldr	r3, [r4, #4]
 800c38c:	b90b      	cbnz	r3, 800c392 <_scanf_i+0xca>
 800c38e:	230a      	movs	r3, #10
 800c390:	6063      	str	r3, [r4, #4]
 800c392:	6863      	ldr	r3, [r4, #4]
 800c394:	4947      	ldr	r1, [pc, #284]	; (800c4b4 <_scanf_i+0x1ec>)
 800c396:	6960      	ldr	r0, [r4, #20]
 800c398:	1ac9      	subs	r1, r1, r3
 800c39a:	f000 f88d 	bl	800c4b8 <__sccl>
 800c39e:	f04f 0b00 	mov.w	fp, #0
 800c3a2:	68a3      	ldr	r3, [r4, #8]
 800c3a4:	6822      	ldr	r2, [r4, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d03d      	beq.n	800c426 <_scanf_i+0x15e>
 800c3aa:	6831      	ldr	r1, [r6, #0]
 800c3ac:	6960      	ldr	r0, [r4, #20]
 800c3ae:	f891 c000 	ldrb.w	ip, [r1]
 800c3b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d035      	beq.n	800c426 <_scanf_i+0x15e>
 800c3ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c3be:	d124      	bne.n	800c40a <_scanf_i+0x142>
 800c3c0:	0510      	lsls	r0, r2, #20
 800c3c2:	d522      	bpl.n	800c40a <_scanf_i+0x142>
 800c3c4:	f10b 0b01 	add.w	fp, fp, #1
 800c3c8:	f1b9 0f00 	cmp.w	r9, #0
 800c3cc:	d003      	beq.n	800c3d6 <_scanf_i+0x10e>
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c3d4:	60a3      	str	r3, [r4, #8]
 800c3d6:	6873      	ldr	r3, [r6, #4]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	6073      	str	r3, [r6, #4]
 800c3de:	dd1b      	ble.n	800c418 <_scanf_i+0x150>
 800c3e0:	6833      	ldr	r3, [r6, #0]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	6033      	str	r3, [r6, #0]
 800c3e6:	68a3      	ldr	r3, [r4, #8]
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	60a3      	str	r3, [r4, #8]
 800c3ec:	e7d9      	b.n	800c3a2 <_scanf_i+0xda>
 800c3ee:	f1bb 0f02 	cmp.w	fp, #2
 800c3f2:	d1ae      	bne.n	800c352 <_scanf_i+0x8a>
 800c3f4:	6822      	ldr	r2, [r4, #0]
 800c3f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c3fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c3fe:	d1bf      	bne.n	800c380 <_scanf_i+0xb8>
 800c400:	2310      	movs	r3, #16
 800c402:	6063      	str	r3, [r4, #4]
 800c404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c408:	e7a2      	b.n	800c350 <_scanf_i+0x88>
 800c40a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c40e:	6022      	str	r2, [r4, #0]
 800c410:	780b      	ldrb	r3, [r1, #0]
 800c412:	f805 3b01 	strb.w	r3, [r5], #1
 800c416:	e7de      	b.n	800c3d6 <_scanf_i+0x10e>
 800c418:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c41c:	4631      	mov	r1, r6
 800c41e:	4650      	mov	r0, sl
 800c420:	4798      	blx	r3
 800c422:	2800      	cmp	r0, #0
 800c424:	d0df      	beq.n	800c3e6 <_scanf_i+0x11e>
 800c426:	6823      	ldr	r3, [r4, #0]
 800c428:	05db      	lsls	r3, r3, #23
 800c42a:	d50d      	bpl.n	800c448 <_scanf_i+0x180>
 800c42c:	42bd      	cmp	r5, r7
 800c42e:	d909      	bls.n	800c444 <_scanf_i+0x17c>
 800c430:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c434:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c438:	4632      	mov	r2, r6
 800c43a:	4650      	mov	r0, sl
 800c43c:	4798      	blx	r3
 800c43e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c442:	464d      	mov	r5, r9
 800c444:	42bd      	cmp	r5, r7
 800c446:	d02d      	beq.n	800c4a4 <_scanf_i+0x1dc>
 800c448:	6822      	ldr	r2, [r4, #0]
 800c44a:	f012 0210 	ands.w	r2, r2, #16
 800c44e:	d113      	bne.n	800c478 <_scanf_i+0x1b0>
 800c450:	702a      	strb	r2, [r5, #0]
 800c452:	6863      	ldr	r3, [r4, #4]
 800c454:	9e01      	ldr	r6, [sp, #4]
 800c456:	4639      	mov	r1, r7
 800c458:	4650      	mov	r0, sl
 800c45a:	47b0      	blx	r6
 800c45c:	6821      	ldr	r1, [r4, #0]
 800c45e:	f8d8 3000 	ldr.w	r3, [r8]
 800c462:	f011 0f20 	tst.w	r1, #32
 800c466:	d013      	beq.n	800c490 <_scanf_i+0x1c8>
 800c468:	1d1a      	adds	r2, r3, #4
 800c46a:	f8c8 2000 	str.w	r2, [r8]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	6018      	str	r0, [r3, #0]
 800c472:	68e3      	ldr	r3, [r4, #12]
 800c474:	3301      	adds	r3, #1
 800c476:	60e3      	str	r3, [r4, #12]
 800c478:	1bed      	subs	r5, r5, r7
 800c47a:	44ab      	add	fp, r5
 800c47c:	6925      	ldr	r5, [r4, #16]
 800c47e:	445d      	add	r5, fp
 800c480:	6125      	str	r5, [r4, #16]
 800c482:	2000      	movs	r0, #0
 800c484:	b007      	add	sp, #28
 800c486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c48a:	f04f 0b00 	mov.w	fp, #0
 800c48e:	e7ca      	b.n	800c426 <_scanf_i+0x15e>
 800c490:	1d1a      	adds	r2, r3, #4
 800c492:	f8c8 2000 	str.w	r2, [r8]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f011 0f01 	tst.w	r1, #1
 800c49c:	bf14      	ite	ne
 800c49e:	8018      	strhne	r0, [r3, #0]
 800c4a0:	6018      	streq	r0, [r3, #0]
 800c4a2:	e7e6      	b.n	800c472 <_scanf_i+0x1aa>
 800c4a4:	2001      	movs	r0, #1
 800c4a6:	e7ed      	b.n	800c484 <_scanf_i+0x1bc>
 800c4a8:	0800c948 	.word	0x0800c948
 800c4ac:	0800c715 	.word	0x0800c715
 800c4b0:	0800c62d 	.word	0x0800c62d
 800c4b4:	0800cbbe 	.word	0x0800cbbe

0800c4b8 <__sccl>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	780b      	ldrb	r3, [r1, #0]
 800c4bc:	4604      	mov	r4, r0
 800c4be:	2b5e      	cmp	r3, #94	; 0x5e
 800c4c0:	bf0b      	itete	eq
 800c4c2:	784b      	ldrbeq	r3, [r1, #1]
 800c4c4:	1c48      	addne	r0, r1, #1
 800c4c6:	1c88      	addeq	r0, r1, #2
 800c4c8:	2200      	movne	r2, #0
 800c4ca:	bf08      	it	eq
 800c4cc:	2201      	moveq	r2, #1
 800c4ce:	1e61      	subs	r1, r4, #1
 800c4d0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c4d4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c4d8:	42a9      	cmp	r1, r5
 800c4da:	d1fb      	bne.n	800c4d4 <__sccl+0x1c>
 800c4dc:	b90b      	cbnz	r3, 800c4e2 <__sccl+0x2a>
 800c4de:	3801      	subs	r0, #1
 800c4e0:	bd70      	pop	{r4, r5, r6, pc}
 800c4e2:	f082 0201 	eor.w	r2, r2, #1
 800c4e6:	54e2      	strb	r2, [r4, r3]
 800c4e8:	4605      	mov	r5, r0
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c4f0:	292d      	cmp	r1, #45	; 0x2d
 800c4f2:	d006      	beq.n	800c502 <__sccl+0x4a>
 800c4f4:	295d      	cmp	r1, #93	; 0x5d
 800c4f6:	d0f3      	beq.n	800c4e0 <__sccl+0x28>
 800c4f8:	b909      	cbnz	r1, 800c4fe <__sccl+0x46>
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	e7f0      	b.n	800c4e0 <__sccl+0x28>
 800c4fe:	460b      	mov	r3, r1
 800c500:	e7f1      	b.n	800c4e6 <__sccl+0x2e>
 800c502:	786e      	ldrb	r6, [r5, #1]
 800c504:	2e5d      	cmp	r6, #93	; 0x5d
 800c506:	d0fa      	beq.n	800c4fe <__sccl+0x46>
 800c508:	42b3      	cmp	r3, r6
 800c50a:	dcf8      	bgt.n	800c4fe <__sccl+0x46>
 800c50c:	3502      	adds	r5, #2
 800c50e:	4619      	mov	r1, r3
 800c510:	3101      	adds	r1, #1
 800c512:	428e      	cmp	r6, r1
 800c514:	5462      	strb	r2, [r4, r1]
 800c516:	dcfb      	bgt.n	800c510 <__sccl+0x58>
 800c518:	1af1      	subs	r1, r6, r3
 800c51a:	3901      	subs	r1, #1
 800c51c:	1c58      	adds	r0, r3, #1
 800c51e:	42b3      	cmp	r3, r6
 800c520:	bfa8      	it	ge
 800c522:	2100      	movge	r1, #0
 800c524:	1843      	adds	r3, r0, r1
 800c526:	e7e0      	b.n	800c4ea <__sccl+0x32>

0800c528 <_strtol_l.constprop.0>:
 800c528:	2b01      	cmp	r3, #1
 800c52a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c52e:	d001      	beq.n	800c534 <_strtol_l.constprop.0+0xc>
 800c530:	2b24      	cmp	r3, #36	; 0x24
 800c532:	d906      	bls.n	800c542 <_strtol_l.constprop.0+0x1a>
 800c534:	f7ff fa6a 	bl	800ba0c <__errno>
 800c538:	2316      	movs	r3, #22
 800c53a:	6003      	str	r3, [r0, #0]
 800c53c:	2000      	movs	r0, #0
 800c53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c542:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c628 <_strtol_l.constprop.0+0x100>
 800c546:	460d      	mov	r5, r1
 800c548:	462e      	mov	r6, r5
 800c54a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c54e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c552:	f017 0708 	ands.w	r7, r7, #8
 800c556:	d1f7      	bne.n	800c548 <_strtol_l.constprop.0+0x20>
 800c558:	2c2d      	cmp	r4, #45	; 0x2d
 800c55a:	d132      	bne.n	800c5c2 <_strtol_l.constprop.0+0x9a>
 800c55c:	782c      	ldrb	r4, [r5, #0]
 800c55e:	2701      	movs	r7, #1
 800c560:	1cb5      	adds	r5, r6, #2
 800c562:	2b00      	cmp	r3, #0
 800c564:	d05b      	beq.n	800c61e <_strtol_l.constprop.0+0xf6>
 800c566:	2b10      	cmp	r3, #16
 800c568:	d109      	bne.n	800c57e <_strtol_l.constprop.0+0x56>
 800c56a:	2c30      	cmp	r4, #48	; 0x30
 800c56c:	d107      	bne.n	800c57e <_strtol_l.constprop.0+0x56>
 800c56e:	782c      	ldrb	r4, [r5, #0]
 800c570:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c574:	2c58      	cmp	r4, #88	; 0x58
 800c576:	d14d      	bne.n	800c614 <_strtol_l.constprop.0+0xec>
 800c578:	786c      	ldrb	r4, [r5, #1]
 800c57a:	2310      	movs	r3, #16
 800c57c:	3502      	adds	r5, #2
 800c57e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c582:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c586:	f04f 0c00 	mov.w	ip, #0
 800c58a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c58e:	4666      	mov	r6, ip
 800c590:	fb03 8a19 	mls	sl, r3, r9, r8
 800c594:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c598:	f1be 0f09 	cmp.w	lr, #9
 800c59c:	d816      	bhi.n	800c5cc <_strtol_l.constprop.0+0xa4>
 800c59e:	4674      	mov	r4, lr
 800c5a0:	42a3      	cmp	r3, r4
 800c5a2:	dd24      	ble.n	800c5ee <_strtol_l.constprop.0+0xc6>
 800c5a4:	f1bc 0f00 	cmp.w	ip, #0
 800c5a8:	db1e      	blt.n	800c5e8 <_strtol_l.constprop.0+0xc0>
 800c5aa:	45b1      	cmp	r9, r6
 800c5ac:	d31c      	bcc.n	800c5e8 <_strtol_l.constprop.0+0xc0>
 800c5ae:	d101      	bne.n	800c5b4 <_strtol_l.constprop.0+0x8c>
 800c5b0:	45a2      	cmp	sl, r4
 800c5b2:	db19      	blt.n	800c5e8 <_strtol_l.constprop.0+0xc0>
 800c5b4:	fb06 4603 	mla	r6, r6, r3, r4
 800c5b8:	f04f 0c01 	mov.w	ip, #1
 800c5bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c5c0:	e7e8      	b.n	800c594 <_strtol_l.constprop.0+0x6c>
 800c5c2:	2c2b      	cmp	r4, #43	; 0x2b
 800c5c4:	bf04      	itt	eq
 800c5c6:	782c      	ldrbeq	r4, [r5, #0]
 800c5c8:	1cb5      	addeq	r5, r6, #2
 800c5ca:	e7ca      	b.n	800c562 <_strtol_l.constprop.0+0x3a>
 800c5cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c5d0:	f1be 0f19 	cmp.w	lr, #25
 800c5d4:	d801      	bhi.n	800c5da <_strtol_l.constprop.0+0xb2>
 800c5d6:	3c37      	subs	r4, #55	; 0x37
 800c5d8:	e7e2      	b.n	800c5a0 <_strtol_l.constprop.0+0x78>
 800c5da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c5de:	f1be 0f19 	cmp.w	lr, #25
 800c5e2:	d804      	bhi.n	800c5ee <_strtol_l.constprop.0+0xc6>
 800c5e4:	3c57      	subs	r4, #87	; 0x57
 800c5e6:	e7db      	b.n	800c5a0 <_strtol_l.constprop.0+0x78>
 800c5e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c5ec:	e7e6      	b.n	800c5bc <_strtol_l.constprop.0+0x94>
 800c5ee:	f1bc 0f00 	cmp.w	ip, #0
 800c5f2:	da05      	bge.n	800c600 <_strtol_l.constprop.0+0xd8>
 800c5f4:	2322      	movs	r3, #34	; 0x22
 800c5f6:	6003      	str	r3, [r0, #0]
 800c5f8:	4646      	mov	r6, r8
 800c5fa:	b942      	cbnz	r2, 800c60e <_strtol_l.constprop.0+0xe6>
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	e79e      	b.n	800c53e <_strtol_l.constprop.0+0x16>
 800c600:	b107      	cbz	r7, 800c604 <_strtol_l.constprop.0+0xdc>
 800c602:	4276      	negs	r6, r6
 800c604:	2a00      	cmp	r2, #0
 800c606:	d0f9      	beq.n	800c5fc <_strtol_l.constprop.0+0xd4>
 800c608:	f1bc 0f00 	cmp.w	ip, #0
 800c60c:	d000      	beq.n	800c610 <_strtol_l.constprop.0+0xe8>
 800c60e:	1e69      	subs	r1, r5, #1
 800c610:	6011      	str	r1, [r2, #0]
 800c612:	e7f3      	b.n	800c5fc <_strtol_l.constprop.0+0xd4>
 800c614:	2430      	movs	r4, #48	; 0x30
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1b1      	bne.n	800c57e <_strtol_l.constprop.0+0x56>
 800c61a:	2308      	movs	r3, #8
 800c61c:	e7af      	b.n	800c57e <_strtol_l.constprop.0+0x56>
 800c61e:	2c30      	cmp	r4, #48	; 0x30
 800c620:	d0a5      	beq.n	800c56e <_strtol_l.constprop.0+0x46>
 800c622:	230a      	movs	r3, #10
 800c624:	e7ab      	b.n	800c57e <_strtol_l.constprop.0+0x56>
 800c626:	bf00      	nop
 800c628:	0800cbc1 	.word	0x0800cbc1

0800c62c <_strtol_r>:
 800c62c:	f7ff bf7c 	b.w	800c528 <_strtol_l.constprop.0>

0800c630 <_strtoul_l.constprop.0>:
 800c630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c634:	4f36      	ldr	r7, [pc, #216]	; (800c710 <_strtoul_l.constprop.0+0xe0>)
 800c636:	4686      	mov	lr, r0
 800c638:	460d      	mov	r5, r1
 800c63a:	4628      	mov	r0, r5
 800c63c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c640:	5de6      	ldrb	r6, [r4, r7]
 800c642:	f016 0608 	ands.w	r6, r6, #8
 800c646:	d1f8      	bne.n	800c63a <_strtoul_l.constprop.0+0xa>
 800c648:	2c2d      	cmp	r4, #45	; 0x2d
 800c64a:	d12f      	bne.n	800c6ac <_strtoul_l.constprop.0+0x7c>
 800c64c:	782c      	ldrb	r4, [r5, #0]
 800c64e:	2601      	movs	r6, #1
 800c650:	1c85      	adds	r5, r0, #2
 800c652:	2b00      	cmp	r3, #0
 800c654:	d057      	beq.n	800c706 <_strtoul_l.constprop.0+0xd6>
 800c656:	2b10      	cmp	r3, #16
 800c658:	d109      	bne.n	800c66e <_strtoul_l.constprop.0+0x3e>
 800c65a:	2c30      	cmp	r4, #48	; 0x30
 800c65c:	d107      	bne.n	800c66e <_strtoul_l.constprop.0+0x3e>
 800c65e:	7828      	ldrb	r0, [r5, #0]
 800c660:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c664:	2858      	cmp	r0, #88	; 0x58
 800c666:	d149      	bne.n	800c6fc <_strtoul_l.constprop.0+0xcc>
 800c668:	786c      	ldrb	r4, [r5, #1]
 800c66a:	2310      	movs	r3, #16
 800c66c:	3502      	adds	r5, #2
 800c66e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c672:	2700      	movs	r7, #0
 800c674:	fbb8 f8f3 	udiv	r8, r8, r3
 800c678:	fb03 f908 	mul.w	r9, r3, r8
 800c67c:	ea6f 0909 	mvn.w	r9, r9
 800c680:	4638      	mov	r0, r7
 800c682:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c686:	f1bc 0f09 	cmp.w	ip, #9
 800c68a:	d814      	bhi.n	800c6b6 <_strtoul_l.constprop.0+0x86>
 800c68c:	4664      	mov	r4, ip
 800c68e:	42a3      	cmp	r3, r4
 800c690:	dd22      	ble.n	800c6d8 <_strtoul_l.constprop.0+0xa8>
 800c692:	2f00      	cmp	r7, #0
 800c694:	db1d      	blt.n	800c6d2 <_strtoul_l.constprop.0+0xa2>
 800c696:	4580      	cmp	r8, r0
 800c698:	d31b      	bcc.n	800c6d2 <_strtoul_l.constprop.0+0xa2>
 800c69a:	d101      	bne.n	800c6a0 <_strtoul_l.constprop.0+0x70>
 800c69c:	45a1      	cmp	r9, r4
 800c69e:	db18      	blt.n	800c6d2 <_strtoul_l.constprop.0+0xa2>
 800c6a0:	fb00 4003 	mla	r0, r0, r3, r4
 800c6a4:	2701      	movs	r7, #1
 800c6a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6aa:	e7ea      	b.n	800c682 <_strtoul_l.constprop.0+0x52>
 800c6ac:	2c2b      	cmp	r4, #43	; 0x2b
 800c6ae:	bf04      	itt	eq
 800c6b0:	782c      	ldrbeq	r4, [r5, #0]
 800c6b2:	1c85      	addeq	r5, r0, #2
 800c6b4:	e7cd      	b.n	800c652 <_strtoul_l.constprop.0+0x22>
 800c6b6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c6ba:	f1bc 0f19 	cmp.w	ip, #25
 800c6be:	d801      	bhi.n	800c6c4 <_strtoul_l.constprop.0+0x94>
 800c6c0:	3c37      	subs	r4, #55	; 0x37
 800c6c2:	e7e4      	b.n	800c68e <_strtoul_l.constprop.0+0x5e>
 800c6c4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c6c8:	f1bc 0f19 	cmp.w	ip, #25
 800c6cc:	d804      	bhi.n	800c6d8 <_strtoul_l.constprop.0+0xa8>
 800c6ce:	3c57      	subs	r4, #87	; 0x57
 800c6d0:	e7dd      	b.n	800c68e <_strtoul_l.constprop.0+0x5e>
 800c6d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c6d6:	e7e6      	b.n	800c6a6 <_strtoul_l.constprop.0+0x76>
 800c6d8:	2f00      	cmp	r7, #0
 800c6da:	da07      	bge.n	800c6ec <_strtoul_l.constprop.0+0xbc>
 800c6dc:	2322      	movs	r3, #34	; 0x22
 800c6de:	f8ce 3000 	str.w	r3, [lr]
 800c6e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6e6:	b932      	cbnz	r2, 800c6f6 <_strtoul_l.constprop.0+0xc6>
 800c6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6ec:	b106      	cbz	r6, 800c6f0 <_strtoul_l.constprop.0+0xc0>
 800c6ee:	4240      	negs	r0, r0
 800c6f0:	2a00      	cmp	r2, #0
 800c6f2:	d0f9      	beq.n	800c6e8 <_strtoul_l.constprop.0+0xb8>
 800c6f4:	b107      	cbz	r7, 800c6f8 <_strtoul_l.constprop.0+0xc8>
 800c6f6:	1e69      	subs	r1, r5, #1
 800c6f8:	6011      	str	r1, [r2, #0]
 800c6fa:	e7f5      	b.n	800c6e8 <_strtoul_l.constprop.0+0xb8>
 800c6fc:	2430      	movs	r4, #48	; 0x30
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1b5      	bne.n	800c66e <_strtoul_l.constprop.0+0x3e>
 800c702:	2308      	movs	r3, #8
 800c704:	e7b3      	b.n	800c66e <_strtoul_l.constprop.0+0x3e>
 800c706:	2c30      	cmp	r4, #48	; 0x30
 800c708:	d0a9      	beq.n	800c65e <_strtoul_l.constprop.0+0x2e>
 800c70a:	230a      	movs	r3, #10
 800c70c:	e7af      	b.n	800c66e <_strtoul_l.constprop.0+0x3e>
 800c70e:	bf00      	nop
 800c710:	0800cbc1 	.word	0x0800cbc1

0800c714 <_strtoul_r>:
 800c714:	f7ff bf8c 	b.w	800c630 <_strtoul_l.constprop.0>

0800c718 <__submore>:
 800c718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c71c:	460c      	mov	r4, r1
 800c71e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c724:	4299      	cmp	r1, r3
 800c726:	d11d      	bne.n	800c764 <__submore+0x4c>
 800c728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c72c:	f7ff f9ea 	bl	800bb04 <_malloc_r>
 800c730:	b918      	cbnz	r0, 800c73a <__submore+0x22>
 800c732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c73a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c73e:	63a3      	str	r3, [r4, #56]	; 0x38
 800c740:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c744:	6360      	str	r0, [r4, #52]	; 0x34
 800c746:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c74a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c74e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c752:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c756:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c75a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c75e:	6020      	str	r0, [r4, #0]
 800c760:	2000      	movs	r0, #0
 800c762:	e7e8      	b.n	800c736 <__submore+0x1e>
 800c764:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c766:	0077      	lsls	r7, r6, #1
 800c768:	463a      	mov	r2, r7
 800c76a:	f000 f80f 	bl	800c78c <_realloc_r>
 800c76e:	4605      	mov	r5, r0
 800c770:	2800      	cmp	r0, #0
 800c772:	d0de      	beq.n	800c732 <__submore+0x1a>
 800c774:	eb00 0806 	add.w	r8, r0, r6
 800c778:	4601      	mov	r1, r0
 800c77a:	4632      	mov	r2, r6
 800c77c:	4640      	mov	r0, r8
 800c77e:	f7ff f98b 	bl	800ba98 <memcpy>
 800c782:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c786:	f8c4 8000 	str.w	r8, [r4]
 800c78a:	e7e9      	b.n	800c760 <__submore+0x48>

0800c78c <_realloc_r>:
 800c78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c790:	4680      	mov	r8, r0
 800c792:	4614      	mov	r4, r2
 800c794:	460e      	mov	r6, r1
 800c796:	b921      	cbnz	r1, 800c7a2 <_realloc_r+0x16>
 800c798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c79c:	4611      	mov	r1, r2
 800c79e:	f7ff b9b1 	b.w	800bb04 <_malloc_r>
 800c7a2:	b92a      	cbnz	r2, 800c7b0 <_realloc_r+0x24>
 800c7a4:	f7ff fb18 	bl	800bdd8 <_free_r>
 800c7a8:	4625      	mov	r5, r4
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b0:	f000 f81b 	bl	800c7ea <_malloc_usable_size_r>
 800c7b4:	4284      	cmp	r4, r0
 800c7b6:	4607      	mov	r7, r0
 800c7b8:	d802      	bhi.n	800c7c0 <_realloc_r+0x34>
 800c7ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7be:	d812      	bhi.n	800c7e6 <_realloc_r+0x5a>
 800c7c0:	4621      	mov	r1, r4
 800c7c2:	4640      	mov	r0, r8
 800c7c4:	f7ff f99e 	bl	800bb04 <_malloc_r>
 800c7c8:	4605      	mov	r5, r0
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d0ed      	beq.n	800c7aa <_realloc_r+0x1e>
 800c7ce:	42bc      	cmp	r4, r7
 800c7d0:	4622      	mov	r2, r4
 800c7d2:	4631      	mov	r1, r6
 800c7d4:	bf28      	it	cs
 800c7d6:	463a      	movcs	r2, r7
 800c7d8:	f7ff f95e 	bl	800ba98 <memcpy>
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4640      	mov	r0, r8
 800c7e0:	f7ff fafa 	bl	800bdd8 <_free_r>
 800c7e4:	e7e1      	b.n	800c7aa <_realloc_r+0x1e>
 800c7e6:	4635      	mov	r5, r6
 800c7e8:	e7df      	b.n	800c7aa <_realloc_r+0x1e>

0800c7ea <_malloc_usable_size_r>:
 800c7ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7ee:	1f18      	subs	r0, r3, #4
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	bfbc      	itt	lt
 800c7f4:	580b      	ldrlt	r3, [r1, r0]
 800c7f6:	18c0      	addlt	r0, r0, r3
 800c7f8:	4770      	bx	lr
	...

0800c7fc <round>:
 800c7fc:	ec51 0b10 	vmov	r0, r1, d0
 800c800:	b570      	push	{r4, r5, r6, lr}
 800c802:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c806:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800c80a:	2c13      	cmp	r4, #19
 800c80c:	ee10 2a10 	vmov	r2, s0
 800c810:	460b      	mov	r3, r1
 800c812:	dc19      	bgt.n	800c848 <round+0x4c>
 800c814:	2c00      	cmp	r4, #0
 800c816:	da09      	bge.n	800c82c <round+0x30>
 800c818:	3401      	adds	r4, #1
 800c81a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c81e:	d103      	bne.n	800c828 <round+0x2c>
 800c820:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c824:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c828:	2200      	movs	r2, #0
 800c82a:	e028      	b.n	800c87e <round+0x82>
 800c82c:	4d15      	ldr	r5, [pc, #84]	; (800c884 <round+0x88>)
 800c82e:	4125      	asrs	r5, r4
 800c830:	ea01 0605 	and.w	r6, r1, r5
 800c834:	4332      	orrs	r2, r6
 800c836:	d00e      	beq.n	800c856 <round+0x5a>
 800c838:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c83c:	fa42 f404 	asr.w	r4, r2, r4
 800c840:	4423      	add	r3, r4
 800c842:	ea23 0305 	bic.w	r3, r3, r5
 800c846:	e7ef      	b.n	800c828 <round+0x2c>
 800c848:	2c33      	cmp	r4, #51	; 0x33
 800c84a:	dd07      	ble.n	800c85c <round+0x60>
 800c84c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c850:	d101      	bne.n	800c856 <round+0x5a>
 800c852:	f7f3 fd1b 	bl	800028c <__adddf3>
 800c856:	ec41 0b10 	vmov	d0, r0, r1
 800c85a:	bd70      	pop	{r4, r5, r6, pc}
 800c85c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800c860:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c864:	40f5      	lsrs	r5, r6
 800c866:	4228      	tst	r0, r5
 800c868:	d0f5      	beq.n	800c856 <round+0x5a>
 800c86a:	2101      	movs	r1, #1
 800c86c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c870:	fa01 f404 	lsl.w	r4, r1, r4
 800c874:	1912      	adds	r2, r2, r4
 800c876:	bf28      	it	cs
 800c878:	185b      	addcs	r3, r3, r1
 800c87a:	ea22 0205 	bic.w	r2, r2, r5
 800c87e:	4619      	mov	r1, r3
 800c880:	4610      	mov	r0, r2
 800c882:	e7e8      	b.n	800c856 <round+0x5a>
 800c884:	000fffff 	.word	0x000fffff

0800c888 <_init>:
 800c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88a:	bf00      	nop
 800c88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c88e:	bc08      	pop	{r3}
 800c890:	469e      	mov	lr, r3
 800c892:	4770      	bx	lr

0800c894 <_fini>:
 800c894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c896:	bf00      	nop
 800c898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c89a:	bc08      	pop	{r3}
 800c89c:	469e      	mov	lr, r3
 800c89e:	4770      	bx	lr
