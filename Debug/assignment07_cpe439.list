
assignment07_cpe439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c750  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800c8e0  0800c8e0  0001c8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd04  0800cd04  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd04  0800cd04  0001cd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd0c  0800cd0c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd0c  0800cd0c  0001cd0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd10  0800cd10  0001cd10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800cd14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e38  2000007c  0800cd90  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20005eb4  0800cd90  00025eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029565  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005cef  00000000  00000000  00049611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023a8  00000000  00000000  0004f300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002120  00000000  00000000  000516a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f640  00000000  00000000  000537c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a79f  00000000  00000000  00082e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110fd2  00000000  00000000  000ad5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001be579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bf0  00000000  00000000  001be5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c8c8 	.word	0x0800c8c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800c8c8 	.word	0x0800c8c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <TX_task>:

Packets packetdata;
Packets gmpacket;

void TX_task(void *argument)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	packetdata.message[0] = 2;
 8000d68:	4b44      	ldr	r3, [pc, #272]	; (8000e7c <TX_task+0x11c>)
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	701a      	strb	r2, [r3, #0]


	size_t xBytesSent;
	UART_escapes("[2J");
 8000d6e:	4844      	ldr	r0, [pc, #272]	; (8000e80 <TX_task+0x120>)
 8000d70:	f000 ff1c 	bl	8001bac <UART_escapes>
	uint8_t curraddress;
	xTXsem = xSemaphoreCreateBinary();
 8000d74:	2203      	movs	r2, #3
 8000d76:	2100      	movs	r1, #0
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f007 fb95 	bl	80084a8 <xQueueGenericCreate>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4a40      	ldr	r2, [pc, #256]	; (8000e84 <TX_task+0x124>)
 8000d82:	6013      	str	r3, [r2, #0]
	xTXorRXmutex = xSemaphoreCreateMutex();
 8000d84:	2001      	movs	r0, #1
 8000d86:	f007 fc06 	bl	8008596 <xQueueCreateMutex>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a3e      	ldr	r2, [pc, #248]	; (8000e88 <TX_task+0x128>)
 8000d8e:	6013      	str	r3, [r2, #0]
	xTXorRX = xSemaphoreCreateBinary();
 8000d90:	2203      	movs	r2, #3
 8000d92:	2100      	movs	r1, #0
 8000d94:	2001      	movs	r0, #1
 8000d96:	f007 fb87 	bl	80084a8 <xQueueGenericCreate>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a3b      	ldr	r2, [pc, #236]	; (8000e8c <TX_task+0x12c>)
 8000d9e:	6013      	str	r3, [r2, #0]

    if( xTXsem != NULL && xTXorRXmutex != NULL)
 8000da0:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <TX_task+0x124>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d064      	beq.n	8000e72 <TX_task+0x112>
 8000da8:	4b37      	ldr	r3, [pc, #220]	; (8000e88 <TX_task+0x128>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d060      	beq.n	8000e72 <TX_task+0x112>
    {
		for(;;)
		{
			if(DMorGM==2)
 8000db0:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <TX_task+0x130>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d108      	bne.n	8000dca <TX_task+0x6a>
			{
				UART_print("DM to: 0x");
 8000db8:	4836      	ldr	r0, [pc, #216]	; (8000e94 <TX_task+0x134>)
 8000dba:	f000 fe33 	bl	8001a24 <UART_print>
				UART_print(packetdata.address);
 8000dbe:	4836      	ldr	r0, [pc, #216]	; (8000e98 <TX_task+0x138>)
 8000dc0:	f000 fe30 	bl	8001a24 <UART_print>
				DMorGM=0;
 8000dc4:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <TX_task+0x130>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]

			}

			if(xSemaphoreTake( xTXsem, ( TickType_t ) 100 ) == pdTRUE )
 8000dca:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <TX_task+0x124>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2164      	movs	r1, #100	; 0x64
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f007 feff 	bl	8008bd4 <xQueueSemaphoreTake>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d1e9      	bne.n	8000db0 <TX_task+0x50>
			{

				do {

					/* Go to the ready state */
					if (g_xStatus.MC_STATE == MC_STATE_LOCK) {
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <TX_task+0x13c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b0f      	cmp	r3, #15
 8000de8:	d103      	bne.n	8000df2 <TX_task+0x92>
						SpiritCmdStrobeReady();
 8000dea:	2062      	movs	r0, #98	; 0x62
 8000dec:	f001 f806 	bl	8001dfc <SpiritCmdStrobeCommand>
 8000df0:	e002      	b.n	8000df8 <TX_task+0x98>
					} else {
						SpiritCmdStrobeSabort();
 8000df2:	2067      	movs	r0, #103	; 0x67
 8000df4:	f001 f802 	bl	8001dfc <SpiritCmdStrobeCommand>
					}

					/* Delay for state transition */
					for (volatile uint8_t i = 0; i != 0xFF; i++);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73bb      	strb	r3, [r7, #14]
 8000dfc:	e004      	b.n	8000e08 <TX_task+0xa8>
 8000dfe:	7bbb      	ldrb	r3, [r7, #14]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	3301      	adds	r3, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	73bb      	strb	r3, [r7, #14]
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2bff      	cmp	r3, #255	; 0xff
 8000e0e:	d1f6      	bne.n	8000dfe <TX_task+0x9e>

					/* Update the global status register variable */
					SpiritRefreshStatus();
 8000e10:	f003 f956 	bl	80040c0 <SpiritRefreshStatus>

				} while (g_xStatus.MC_STATE != MC_STATE_READY);
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <TX_task+0x13c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d1dc      	bne.n	8000ddc <TX_task+0x7c>

//				vTaskSuspend(RXmessage_Handler);
//				if(xSemaphoreTake( xTXorRXmutex, ( TickType_t ) 100 ) == pdTRUE )
//				{
				sscanf(packetdata.address, "%x", &curraddress);
 8000e22:	f107 030f 	add.w	r3, r7, #15
 8000e26:	461a      	mov	r2, r3
 8000e28:	491d      	ldr	r1, [pc, #116]	; (8000ea0 <TX_task+0x140>)
 8000e2a:	481b      	ldr	r0, [pc, #108]	; (8000e98 <TX_task+0x138>)
 8000e2c:	f00a ff78 	bl	800bd20 <siscanf>
			    SpiritPktCommonSetDestinationAddress(curraddress);
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fbba 	bl	80025ac <SpiritPktCommonSetDestinationAddress>

				xTxDoneFlag = READY;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <TX_task+0x144>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]

				// Send the payload
				SPSGRF_StartTx(packetdata.message, strlen(packetdata.message));
 8000e3e:	480f      	ldr	r0, [pc, #60]	; (8000e7c <TX_task+0x11c>)
 8000e40:	f7ff f9c6 	bl	80001d0 <strlen>
 8000e44:	4603      	mov	r3, r0
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480c      	ldr	r0, [pc, #48]	; (8000e7c <TX_task+0x11c>)
 8000e4c:	f000 fbf4 	bl	8001638 <SPSGRF_StartTx>
				while(!xTxDoneFlag);
 8000e50:	bf00      	nop
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <TX_task+0x144>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0fb      	beq.n	8000e52 <TX_task+0xf2>
				UART_print("Message Sent\n\r");
 8000e5a:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <TX_task+0x148>)
 8000e5c:	f000 fde2 	bl	8001a24 <UART_print>
				memset(&packetdata.message[1], '\0', PAYLOAD_SIZE-1);
 8000e60:	2263      	movs	r2, #99	; 0x63
 8000e62:	2100      	movs	r1, #0
 8000e64:	4811      	ldr	r0, [pc, #68]	; (8000eac <TX_task+0x14c>)
 8000e66:	f00a fe45 	bl	800baf4 <memset>
				xRxDoneFlag = S_RESET;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <TX_task+0x150>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
			if(DMorGM==2)
 8000e70:	e79e      	b.n	8000db0 <TX_task+0x50>
			}

		}

    }
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000a8 	.word	0x200000a8
 8000e80:	0800c8e0 	.word	0x0800c8e0
 8000e84:	2000009c 	.word	0x2000009c
 8000e88:	200000a0 	.word	0x200000a0
 8000e8c:	200000a4 	.word	0x200000a4
 8000e90:	20000120 	.word	0x20000120
 8000e94:	0800c8e4 	.word	0x0800c8e4
 8000e98:	2000010c 	.word	0x2000010c
 8000e9c:	2000026c 	.word	0x2000026c
 8000ea0:	0800c8f0 	.word	0x0800c8f0
 8000ea4:	20000121 	.word	0x20000121
 8000ea8:	0800c8f4 	.word	0x0800c8f4
 8000eac:	200000a9 	.word	0x200000a9
 8000eb0:	20000124 	.word	0x20000124

08000eb4 <RX_task>:

void RX_task(void *argument)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b09d      	sub	sp, #116	; 0x74
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	xpayLoad = xMessageBufferCreate(PAYLOAD_SIZE);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2064      	movs	r0, #100	; 0x64
 8000ec2:	f008 f919 	bl	80090f8 <xStreamBufferGenericCreate>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <RX_task+0x8c>)
 8000eca:	6013      	str	r3, [r2, #0]
//	if(xpayLoad!=NULL)
//	{
		size_t xBytesSent;
		volatile char payloadl[PAYLOAD_SIZE] = "";
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2260      	movs	r2, #96	; 0x60
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f00a fe0b 	bl	800baf4 <memset>
		for(;;)
		{



				xRxDoneFlag = READY;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <RX_task+0x90>)
 8000ee0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ee4:	601a      	str	r2, [r3, #0]
					SPSGRF_StartRx();
 8000ee6:	f000 fbc8 	bl	800167a <SPSGRF_StartRx>

					while (xRxDoneFlag == READY);
 8000eea:	bf00      	nop
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <RX_task+0x90>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef4:	d0fa      	beq.n	8000eec <RX_task+0x38>

					if(xRxDoneFlag == RX_DATA_READY)
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <RX_task+0x90>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d1ef      	bne.n	8000ede <RX_task+0x2a>
					{
					SPSGRF_GetRxData(payloadl);
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fbc2 	bl	800168c <SPSGRF_GetRxData>


					xBytesSent = xMessageBufferSend( xpayLoad,
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <RX_task+0x8c>)
 8000f0a:	681c      	ldr	r4, [r3, #0]
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff f95d 	bl	80001d0 <strlen>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f107 0108 	add.w	r1, r7, #8
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f008 f978 	bl	8009214 <xStreamBufferSend>
 8000f24:	66f8      	str	r0, [r7, #108]	; 0x6c
							( void * ) payloadl,
							strlen( payloadl), 100);

					if( xBytesSent != strlen( payloadl) )
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff f950 	bl	80001d0 <strlen>
					{
						/* The string could not be added to the message buffer because there was
		        not enough free space in the buffer. */
					}
					memset(payloadl, '\0', PAYLOAD_SIZE);
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f00a fddb 	bl	800baf4 <memset>
				xRxDoneFlag = READY;
 8000f3e:	e7ce      	b.n	8000ede <RX_task+0x2a>
 8000f40:	20000098 	.word	0x20000098
 8000f44:	20000124 	.word	0x20000124

08000f48 <print_task>:
		}

}

void print_task(void *argument)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0a0      	sub	sp, #128	; 0x80
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	size_t xBytesReceived;
	char ucRxData[PAYLOAD_SIZE]={'\0'};
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2260      	movs	r2, #96	; 0x60
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00a fdc9 	bl	800baf4 <memset>
	size_t xReceivedBytes;
	const TickType_t xBlockTime = pdMS_TO_TICKS( 20 );
 8000f62:	2314      	movs	r3, #20
 8000f64:	67fb      	str	r3, [r7, #124]	; 0x7c

	for(;;)
	{

		memset(ucRxData, '\0', PAYLOAD_SIZE);
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	2264      	movs	r2, #100	; 0x64
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f00a fdc0 	bl	800baf4 <memset>
		xReceivedBytes = xMessageBufferReceive( xpayLoad,
 8000f74:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <print_task+0xac>)
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	f107 0110 	add.w	r1, r7, #16
 8000f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f7e:	2264      	movs	r2, #100	; 0x64
 8000f80:	f008 fa3a 	bl	80093f8 <xStreamBufferReceive>
 8000f84:	67b8      	str	r0, [r7, #120]	; 0x78
		                                            ( void * ) ucRxData,
		                                            sizeof( ucRxData ),
		                                            xBlockTime );

		    if( xReceivedBytes > 0 && (ucRxData[0]==2 || ucRxData[0]==6))
 8000f86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0ec      	beq.n	8000f66 <print_task+0x1e>
 8000f8c:	7c3b      	ldrb	r3, [r7, #16]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d002      	beq.n	8000f98 <print_task+0x50>
 8000f92:	7c3b      	ldrb	r3, [r7, #16]
 8000f94:	2b06      	cmp	r3, #6
 8000f96:	d1e6      	bne.n	8000f66 <print_task+0x1e>
		    {
		    	if(ucRxData[0]==2) UART_print("DM from ");
 8000f98:	7c3b      	ldrb	r3, [r7, #16]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d102      	bne.n	8000fa4 <print_task+0x5c>
 8000f9e:	4816      	ldr	r0, [pc, #88]	; (8000ff8 <print_task+0xb0>)
 8000fa0:	f000 fd40 	bl	8001a24 <UART_print>
		    	if(ucRxData[0]==6) UART_print("GM from ");
 8000fa4:	7c3b      	ldrb	r3, [r7, #16]
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d102      	bne.n	8000fb0 <print_task+0x68>
 8000faa:	4814      	ldr	r0, [pc, #80]	; (8000ffc <print_task+0xb4>)
 8000fac:	f000 fd3a 	bl	8001a24 <UART_print>
		    	uint8_t sAddress = SpiritPktCommonGetReceivedSourceAddress();
 8000fb0:	f001 fb16 	bl	80025e0 <SpiritPktCommonGetReceivedSourceAddress>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		    	char sAddString[2];
		    	itoa(sAddress, sAddString, 16);
 8000fba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000fbe:	f107 010c 	add.w	r1, r7, #12
 8000fc2:	2210      	movs	r2, #16
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f00a fd83 	bl	800bad0 <itoa>
		    	UART_print("0x");
 8000fca:	480d      	ldr	r0, [pc, #52]	; (8001000 <print_task+0xb8>)
 8000fcc:	f000 fd2a 	bl	8001a24 <UART_print>
		    	UART_print(sAddString);
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 fd25 	bl	8001a24 <UART_print>
		    	UART_print(":");
 8000fda:	480a      	ldr	r0, [pc, #40]	; (8001004 <print_task+0xbc>)
 8000fdc:	f000 fd22 	bl	8001a24 <UART_print>

		    	UART_print(&ucRxData[1]);
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fd1c 	bl	8001a24 <UART_print>
		    	UART_print("\n");
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <print_task+0xc0>)
 8000fee:	f000 fd19 	bl	8001a24 <UART_print>
	{
 8000ff2:	e7b8      	b.n	8000f66 <print_task+0x1e>
 8000ff4:	20000098 	.word	0x20000098
 8000ff8:	0800c904 	.word	0x0800c904
 8000ffc:	0800c910 	.word	0x0800c910
 8001000:	0800c91c 	.word	0x0800c91c
 8001004:	0800c920 	.word	0x0800c920
 8001008:	0800c924 	.word	0x0800c924

0800100c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <MX_FREERTOS_Init+0x18>)
 8001012:	2100      	movs	r1, #0
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_FREERTOS_Init+0x1c>)
 8001016:	f006 ffd1 	bl	8007fbc <osThreadNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a03      	ldr	r2, [pc, #12]	; (800102c <MX_FREERTOS_Init+0x20>)
 800101e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	0800c994 	.word	0x0800c994
 8001028:	08001031 	.word	0x08001031
 800102c:	20000110 	.word	0x20000110

08001030 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001038:	2001      	movs	r0, #1
 800103a:	f007 f851 	bl	80080e0 <osDelay>
 800103e:	e7fb      	b.n	8001038 <StartDefaultTask+0x8>

08001040 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b44      	ldr	r3, [pc, #272]	; (8001168 <MX_GPIO_Init+0x128>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a43      	ldr	r2, [pc, #268]	; (8001168 <MX_GPIO_Init+0x128>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b41      	ldr	r3, [pc, #260]	; (8001168 <MX_GPIO_Init+0x128>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <MX_GPIO_Init+0x128>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a3d      	ldr	r2, [pc, #244]	; (8001168 <MX_GPIO_Init+0x128>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <MX_GPIO_Init+0x128>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b38      	ldr	r3, [pc, #224]	; (8001168 <MX_GPIO_Init+0x128>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a37      	ldr	r2, [pc, #220]	; (8001168 <MX_GPIO_Init+0x128>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b35      	ldr	r3, [pc, #212]	; (8001168 <MX_GPIO_Init+0x128>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b32      	ldr	r3, [pc, #200]	; (8001168 <MX_GPIO_Init+0x128>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a31      	ldr	r2, [pc, #196]	; (8001168 <MX_GPIO_Init+0x128>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <MX_GPIO_Init+0x128>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SDN_GPIO_Port, SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	f003 fcd4 	bl	8004a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	4828      	ldr	r0, [pc, #160]	; (800116c <MX_GPIO_Init+0x12c>)
 80010ca:	f003 fccf 	bl	8004a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4822      	ldr	r0, [pc, #136]	; (8001170 <MX_GPIO_Init+0x130>)
 80010e6:	f003 fb17 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	481c      	ldr	r0, [pc, #112]	; (8001170 <MX_GPIO_Init+0x130>)
 8001100:	f003 fb0a 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin;
 8001104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPIRIT1_SDN_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f003 fafa 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 8001124:	2340      	movs	r3, #64	; 0x40
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	480c      	ldr	r0, [pc, #48]	; (800116c <MX_GPIO_Init+0x12c>)
 800113c:	f003 faec 	bl	8004718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2105      	movs	r1, #5
 8001144:	2017      	movs	r0, #23
 8001146:	f003 faaf 	bl	80046a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800114a:	2017      	movs	r0, #23
 800114c:	f003 fac8 	bl	80046e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2105      	movs	r1, #5
 8001154:	2028      	movs	r0, #40	; 0x28
 8001156:	f003 faa7 	bl	80046a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800115a:	2028      	movs	r0, #40	; 0x28
 800115c:	f003 fac0 	bl	80046e0 <HAL_NVIC_EnableIRQ>

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021000 	.word	0x40021000
 800116c:	48000400 	.word	0x48000400
 8001170:	48000800 	.word	0x48000800

08001174 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b09c      	sub	sp, #112	; 0x70
 8001178:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */

	char payloadRX[PAYLOAD_SIZE] = "";
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2260      	movs	r2, #96	; 0x60
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f00a fcb5 	bl	800baf4 <memset>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800118a:	f003 f94d 	bl	8004428 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800118e:	f000 f85b 	bl	8001248 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001192:	f7ff ff55 	bl	8001040 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001196:	f000 f8ff 	bl	8001398 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 800119a:	f000 fba3 	bl	80018e4 <MX_USART2_UART_Init>
	UART_escapes("[H");
 800119e:	4821      	ldr	r0, [pc, #132]	; (8001224 <main+0xb0>)
 80011a0:	f000 fd04 	bl	8001bac <UART_escapes>
	/* USER CODE BEGIN 2 */

	SPSGRF_Init();
 80011a4:	f000 f996 	bl	80014d4 <SPSGRF_Init>
    SpiritPktCommonSetDestinationAddress(0xFF);
 80011a8:	20ff      	movs	r0, #255	; 0xff
 80011aa:	f001 f9ff 	bl	80025ac <SpiritPktCommonSetDestinationAddress>
	SpiritPktStackSetPayloadLength(PAYLOAD_SIZE);
 80011ae:	2064      	movs	r0, #100	; 0x64
 80011b0:	f001 fb6c 	bl	800288c <SpiritPktStackSetPayloadLength>
	//    SpiritPktBasicSetDestinationAddress(0x44);

	retVal = xTaskCreate(TX_task, "TX task", 5*configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+4, &TXmessage_Handler);
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <main+0xb4>)
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	2304      	movs	r3, #4
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2300      	movs	r3, #0
 80011be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80011c2:	491a      	ldr	r1, [pc, #104]	; (800122c <main+0xb8>)
 80011c4:	481a      	ldr	r0, [pc, #104]	; (8001230 <main+0xbc>)
 80011c6:	f008 fb7a 	bl	80098be <xTaskCreate>
 80011ca:	6678      	str	r0, [r7, #100]	; 0x64
	if(retVal!=pdPASS){while(1);}//task creation failed
 80011cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d000      	beq.n	80011d4 <main+0x60>
 80011d2:	e7fe      	b.n	80011d2 <main+0x5e>

	retVal = xTaskCreate(RX_task, "RX task", 2*configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+3, &RXmessage_Handler);
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <main+0xc0>)
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	2303      	movs	r3, #3
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2300      	movs	r3, #0
 80011de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e2:	4915      	ldr	r1, [pc, #84]	; (8001238 <main+0xc4>)
 80011e4:	4815      	ldr	r0, [pc, #84]	; (800123c <main+0xc8>)
 80011e6:	f008 fb6a 	bl	80098be <xTaskCreate>
 80011ea:	6678      	str	r0, [r7, #100]	; 0x64
	if(retVal!=pdPASS){while(1);}//task creation failed
 80011ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d000      	beq.n	80011f4 <main+0x80>
 80011f2:	e7fe      	b.n	80011f2 <main+0x7e>


	retVal = xTaskCreate(print_task, "TX task", 2*configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+3, &printmessage_Handler);
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <main+0xcc>)
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2303      	movs	r3, #3
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2300      	movs	r3, #0
 80011fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001202:	490a      	ldr	r1, [pc, #40]	; (800122c <main+0xb8>)
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <main+0xd0>)
 8001206:	f008 fb5a 	bl	80098be <xTaskCreate>
 800120a:	6678      	str	r0, [r7, #100]	; 0x64
	if(retVal!=pdPASS){while(1);}//task creation failed
 800120c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800120e:	2b01      	cmp	r3, #1
 8001210:	d000      	beq.n	8001214 <main+0xa0>
 8001212:	e7fe      	b.n	8001212 <main+0x9e>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001214:	f006 fe88 	bl	8007f28 <osKernelInitialize>
	MX_FREERTOS_Init();
 8001218:	f7ff fef8 	bl	800100c <MX_FREERTOS_Init>


	/* Start scheduler */
	osKernelStart();
 800121c:	f006 fea8 	bl	8007f70 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	while (1)
 8001220:	e7fe      	b.n	8001220 <main+0xac>
 8001222:	bf00      	nop
 8001224:	0800c934 	.word	0x0800c934
 8001228:	20000114 	.word	0x20000114
 800122c:	0800c938 	.word	0x0800c938
 8001230:	08000d61 	.word	0x08000d61
 8001234:	20000118 	.word	0x20000118
 8001238:	0800c940 	.word	0x0800c940
 800123c:	08000eb5 	.word	0x08000eb5
 8001240:	2000011c 	.word	0x2000011c
 8001244:	08000f49 	.word	0x08000f49

08001248 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b096      	sub	sp, #88	; 0x58
 800124c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	2244      	movs	r2, #68	; 0x44
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f00a fc4c 	bl	800baf4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	463b      	mov	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800126a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800126e:	f003 fc3b 	bl	8004ae8 <HAL_PWREx_ControlVoltageScaling>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001278:	f000 f888 	bl	800138c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127c:	2302      	movs	r3, #2
 800127e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001284:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001286:	2310      	movs	r3, #16
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128a:	2302      	movs	r3, #2
 800128c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800128e:	2302      	movs	r3, #2
 8001290:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001292:	2301      	movs	r3, #1
 8001294:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001296:	230a      	movs	r3, #10
 8001298:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800129a:	2307      	movs	r3, #7
 800129c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800129e:	2302      	movs	r3, #2
 80012a0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 fc72 	bl	8004b94 <HAL_RCC_OscConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0x72>
	{
		Error_Handler();
 80012b6:	f000 f869 	bl	800138c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ba:	230f      	movs	r3, #15
 80012bc:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012be:	2303      	movs	r3, #3
 80012c0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ce:	463b      	mov	r3, r7
 80012d0:	2104      	movs	r1, #4
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 f83a 	bl	800534c <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80012de:	f000 f855 	bl	800138c <Error_Handler>
	}
}
 80012e2:	bf00      	nop
 80012e4:	3758      	adds	r7, #88	; 0x58
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_GPIO_EXTI_Callback>:

///* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
	SpiritIrqs xIrqStatus;

	if (GPIO_Pin != SPIRIT1_GPIO3_Pin)
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	2b80      	cmp	r3, #128	; 0x80
 80012fa:	d12c      	bne.n	8001356 <HAL_GPIO_EXTI_Callback+0x6a>
	{
		return;
	}

	SpiritIrqGetStatus(&xIrqStatus);
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fe49 	bl	8001f98 <SpiritIrqGetStatus>
	if (xIrqStatus.IRQ_TX_DATA_SENT)
 8001306:	7b3b      	ldrb	r3, [r7, #12]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		xTxDoneFlag = S_SET;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_GPIO_EXTI_Callback+0x74>)
 8001314:	2201      	movs	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_READY)
 8001318:	7b3b      	ldrb	r3, [r7, #12]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <HAL_GPIO_EXTI_Callback+0x3e>
	{
		xRxDoneFlag = RX_DATA_READY;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_GPIO_EXTI_Callback+0x78>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_DISC)
 800132a:	7b3b      	ldrb	r3, [r7, #12]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <HAL_GPIO_EXTI_Callback+0x54>
	{
		SpiritCmdStrobeRx();
 8001336:	f001 f88f 	bl	8002458 <SpiritManagementWaCmdStrobeRx>
 800133a:	2061      	movs	r0, #97	; 0x61
 800133c:	f000 fd5e 	bl	8001dfc <SpiritCmdStrobeCommand>

	}
	if (xIrqStatus.IRQ_RX_TIMEOUT)
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d005      	beq.n	8001358 <HAL_GPIO_EXTI_Callback+0x6c>
		{
		xRxDoneFlag = RX_TIMEOUT;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_GPIO_EXTI_Callback+0x78>)
 800134e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	e000      	b.n	8001358 <HAL_GPIO_EXTI_Callback+0x6c>
		return;
 8001356:	bf00      	nop

		}

}
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000121 	.word	0x20000121
 8001364:	20000124 	.word	0x20000124

08001368 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800137a:	f003 f875 	bl	8004468 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40001000 	.word	0x40001000

0800138c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001394:	e7fe      	b.n	8001394 <Error_Handler+0x8>
	...

08001398 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_SPI1_Init+0x74>)
 800139e:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <MX_SPI1_Init+0x78>)
 80013a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_SPI1_Init+0x74>)
 80013a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_SPI1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_SPI1_Init+0x74>)
 80013b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_SPI1_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_SPI1_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_SPI1_Init+0x74>)
 80013c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_SPI1_Init+0x74>)
 80013ce:	2208      	movs	r2, #8
 80013d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_SPI1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_SPI1_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_SPI1_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_SPI1_Init+0x74>)
 80013e6:	2207      	movs	r2, #7
 80013e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_SPI1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_SPI1_Init+0x74>)
 80013f2:	2208      	movs	r2, #8
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_SPI1_Init+0x74>)
 80013f8:	f004 feba 	bl	8006170 <HAL_SPI_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001402:	f7ff ffc3 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000128 	.word	0x20000128
 8001410:	40013000 	.word	0x40013000

08001414 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a25      	ldr	r2, [pc, #148]	; (80014c8 <HAL_SPI_MspInit+0xb4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d144      	bne.n	80014c0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <HAL_SPI_MspInit+0xb8>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	4a24      	ldr	r2, [pc, #144]	; (80014cc <HAL_SPI_MspInit+0xb8>)
 800143c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001440:	6613      	str	r3, [r2, #96]	; 0x60
 8001442:	4b22      	ldr	r3, [pc, #136]	; (80014cc <HAL_SPI_MspInit+0xb8>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <HAL_SPI_MspInit+0xb8>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a1e      	ldr	r2, [pc, #120]	; (80014cc <HAL_SPI_MspInit+0xb8>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_SPI_MspInit+0xb8>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_SPI_MspInit+0xb8>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a18      	ldr	r2, [pc, #96]	; (80014cc <HAL_SPI_MspInit+0xb8>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_SPI_MspInit+0xb8>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800147e:	23c0      	movs	r3, #192	; 0xc0
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800148e:	2305      	movs	r3, #5
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149c:	f003 f93c 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014a0:	2308      	movs	r3, #8
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b0:	2305      	movs	r3, #5
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HAL_SPI_MspInit+0xbc>)
 80014bc:	f003 f92c 	bl	8004718 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	; 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40013000 	.word	0x40013000
 80014cc:	40021000 	.word	0x40021000
 80014d0:	48000400 	.word	0x48000400

080014d4 <SPSGRF_Init>:




void SPSGRF_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b090      	sub	sp, #64	; 0x40
 80014d8:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktStackInit xStackInit;
  PktStackAddressesInit xStackAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 80014da:	f002 fe13 	bl	8004104 <RadioSpiInit>

  // restart the radio
  SpiritEnterShutdown();
 80014de:	f002 ff89 	bl	80043f4 <RadioEnterShutdown>
  SpiritExitShutdown();
 80014e2:	f002 ff92 	bl	800440a <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 80014e6:	f000 ffe7 	bl	80024b8 <SpiritManagementWaExtraCurrent>

  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 80014ea:	2300      	movs	r3, #0
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	e004      	b.n	80014fa <SPSGRF_Init+0x26>
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	3301      	adds	r3, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	71fb      	strb	r3, [r7, #7]
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2bff      	cmp	r3, #255	; 0xff
 8001500:	d1f6      	bne.n	80014f0 <SPSGRF_Init+0x1c>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 8001502:	f002 fddd 	bl	80040c0 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 8001506:	4b46      	ldr	r3, [pc, #280]	; (8001620 <SPSGRF_Init+0x14c>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b03      	cmp	r3, #3
 8001512:	d1ea      	bne.n	80014ea <SPSGRF_Init+0x16>

  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 8001514:	2300      	movs	r3, #0
 8001516:	84bb      	strh	r3, [r7, #36]	; 0x24
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 8001518:	4b42      	ldr	r3, [pc, #264]	; (8001624 <SPSGRF_Init+0x150>)
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 800151c:	4b42      	ldr	r3, [pc, #264]	; (8001628 <SPSGRF_Init+0x154>)
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  xRadioInit.lDatarate = DATARATE;
 800152c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 8001532:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001536:	63bb      	str	r3, [r7, #56]	; 0x38
  xRadioInit.lBandwidth = BANDWIDTH;
 8001538:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <SPSGRF_Init+0x154>)
 800153a:	63fb      	str	r3, [r7, #60]	; 0x3c
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 800153c:	483b      	ldr	r0, [pc, #236]	; (800162c <SPSGRF_Init+0x158>)
 800153e:	f002 fc0d 	bl	8003d5c <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fa5a 	bl	8002a00 <SpiritRadioInit>

  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 800154c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8001630 <SPSGRF_Init+0x15c>
 8001550:	2007      	movs	r0, #7
 8001552:	f002 fa9f 	bl	8003a94 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 8001556:	2007      	movs	r0, #7
 8001558:	f002 faf2 	bl	8003b40 <SpiritRadioSetPALevelMaxIndex>

  // Configure packet handler to use the Basic packet format
  xStackInit.xPreambleLength = PREAMBLE_LENGTH;
 800155c:	2318      	movs	r3, #24
 800155e:	753b      	strb	r3, [r7, #20]
  xStackInit.xSyncLength = SYNC_LENGTH;
 8001560:	2306      	movs	r3, #6
 8001562:	757b      	strb	r3, [r7, #21]
  xStackInit.lSyncWords = SYNC_WORD;
 8001564:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 8001568:	61bb      	str	r3, [r7, #24]
  xStackInit.xFixVarLength = LENGTH_TYPE;
 800156a:	2301      	movs	r3, #1
 800156c:	773b      	strb	r3, [r7, #28]
  xStackInit.cPktLengthWidth = LENGTH_WIDTH;
 800156e:	2307      	movs	r3, #7
 8001570:	777b      	strb	r3, [r7, #29]
  xStackInit.xCrcMode = CRC_MODE;
 8001572:	2320      	movs	r3, #32
 8001574:	77bb      	strb	r3, [r7, #30]
  xStackInit.xControlLength = CONTROL_LENGTH;
 8001576:	2300      	movs	r3, #0
 8001578:	77fb      	strb	r3, [r7, #31]
  xStackInit.xFec = EN_FEC;
 800157a:	2300      	movs	r3, #0
 800157c:	f887 3020 	strb.w	r3, [r7, #32]
  xStackInit.xDataWhitening = EN_WHITENING;
 8001580:	2301      	movs	r3, #1
 8001582:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  SpiritPktStackInit(&xStackInit);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4618      	mov	r0, r3
 800158c:	f001 f840 	bl	8002610 <SpiritPktStackInit>

  // Configure destination address criteria for automatic packet filtering
  xStackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8001590:	2301      	movs	r3, #1
 8001592:	733b      	strb	r3, [r7, #12]
  xStackAddress.cMyAddress = MY_ADDRESS;
 8001594:	23de      	movs	r3, #222	; 0xde
 8001596:	737b      	strb	r3, [r7, #13]
  xStackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8001598:	2301      	movs	r3, #1
 800159a:	73bb      	strb	r3, [r7, #14]
  xStackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 800159c:	23ed      	movs	r3, #237	; 0xed
 800159e:	73fb      	strb	r3, [r7, #15]
  xStackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 80015a0:	2301      	movs	r3, #1
 80015a2:	743b      	strb	r3, [r7, #16]
  xStackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 80015a4:	23ff      	movs	r3, #255	; 0xff
 80015a6:	747b      	strb	r3, [r7, #17]
  SpiritPktStackAddressesInit(&xStackAddress);
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4618      	mov	r0, r3
 80015ae:	f001 f8ff 	bl	80027b0 <SpiritPktStackAddressesInit>

  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 80015b2:	2302      	movs	r3, #2
 80015b4:	723b      	strb	r3, [r7, #8]
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	727b      	strb	r3, [r7, #9]
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 80015ba:	2300      	movs	r3, #0
 80015bc:	72bb      	strb	r3, [r7, #10]
  SpiritGpioInit(&xGpioInit);
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fc32 	bl	8001e2c <SpiritGpioInit>

  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f000 fc53 	bl	8001e74 <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 80015ce:	2101      	movs	r1, #1
 80015d0:	2004      	movs	r0, #4
 80015d2:	f000 fc7b 	bl	8001ecc <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 80015d6:	2101      	movs	r1, #1
 80015d8:	2001      	movs	r0, #1
 80015da:	f000 fc77 	bl	8001ecc <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 80015de:	2101      	movs	r1, #1
 80015e0:	2002      	movs	r0, #2
 80015e2:	f000 fc73 	bl	8001ecc <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 80015e6:	2101      	movs	r1, #1
 80015e8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80015ec:	f000 fc6e 	bl	8001ecc <SpiritIrq>
  SpiritIrqClearStatus();
 80015f0:	f000 fd04 	bl	8001ffc <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f001 f9af 	bl	8002958 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 80015fa:	2001      	movs	r0, #1
 80015fc:	f001 f974 	bl	80028e8 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8001600:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8001604:	f001 f9dc 	bl	80029c0 <SpiritQiSetRssiThresholddBm>

  // Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
  SpiritTimerSetRxTimeoutMs(RECEIVE_TIMEOUT);
 8001608:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001634 <SPSGRF_Init+0x160>
 800160c:	f002 fbb6 	bl	8003d7c <SpiritTimerSetRxTimeoutMs>
#else
  SET_INFINITE_RX_TIMEOUT();
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 8001610:	2002      	movs	r0, #2
 8001612:	f002 fd0d 	bl	8004030 <SpiritTimerSetRxTimeoutStopCondition>
}
 8001616:	bf00      	nop
 8001618:	3740      	adds	r7, #64	; 0x40
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000026c 	.word	0x2000026c
 8001624:	3689cac0 	.word	0x3689cac0
 8001628:	000186a0 	.word	0x000186a0
 800162c:	02faf080 	.word	0x02faf080
 8001630:	4139999a 	.word	0x4139999a
 8001634:	44fa0000 	.word	0x44fa0000

08001638 <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 8001644:	2072      	movs	r0, #114	; 0x72
 8001646:	f000 fbd9 	bl	8001dfc <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	2b60      	cmp	r3, #96	; 0x60
 800164e:	bf28      	it	cs
 8001650:	2360      	movcs	r3, #96	; 0x60
 8001652:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fe3b 	bl	80042d4 <RadioSpiWriteFifo>
  SpiritPktStackSetPayloadLength(txLen);
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	b29b      	uxth	r3, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f001 f912 	bl	800288c <SpiritPktStackSetPayloadLength>
  SpiritCmdStrobeTx();
 8001668:	f000 febe 	bl	80023e8 <SpiritManagementWaCmdStrobeTx>
 800166c:	2060      	movs	r0, #96	; 0x60
 800166e:	f000 fbc5 	bl	8001dfc <SpiritCmdStrobeCommand>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 800167e:	f000 feeb 	bl	8002458 <SpiritManagementWaCmdStrobeRx>
 8001682:	2061      	movs	r0, #97	; 0x61
 8001684:	f000 fbba 	bl	8001dfc <SpiritCmdStrobeCommand>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}

0800168c <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 8001694:	f000 fcca 	bl	800202c <SpiritLinearFifoReadNumElementsRxFifo>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 fe5f 	bl	8004364 <RadioSpiReadFifo>

  return len;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_MspInit+0x4c>)
 80016b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ba:	4a10      	ldr	r2, [pc, #64]	; (80016fc <HAL_MspInit+0x4c>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6613      	str	r3, [r2, #96]	; 0x60
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_MspInit+0x4c>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_MspInit+0x4c>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_MspInit+0x4c>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6593      	str	r3, [r2, #88]	; 0x58
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_MspInit+0x4c>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	210f      	movs	r1, #15
 80016ea:	f06f 0001 	mvn.w	r0, #1
 80016ee:	f002 ffdb 	bl	80046a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08e      	sub	sp, #56	; 0x38
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_InitTick+0xe0>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	4a33      	ldr	r2, [pc, #204]	; (80017e0 <HAL_InitTick+0xe0>)
 8001714:	f043 0310 	orr.w	r3, r3, #16
 8001718:	6593      	str	r3, [r2, #88]	; 0x58
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_InitTick+0xe0>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001726:	f107 0210 	add.w	r2, r7, #16
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f003 ffcf 	bl	80056d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	2b00      	cmp	r3, #0
 800173e:	d103      	bne.n	8001748 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001740:	f003 ff9c 	bl	800567c <HAL_RCC_GetPCLK1Freq>
 8001744:	6378      	str	r0, [r7, #52]	; 0x34
 8001746:	e004      	b.n	8001752 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001748:	f003 ff98 	bl	800567c <HAL_RCC_GetPCLK1Freq>
 800174c:	4603      	mov	r3, r0
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001754:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <HAL_InitTick+0xe4>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	0c9b      	lsrs	r3, r3, #18
 800175c:	3b01      	subs	r3, #1
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001760:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_InitTick+0xe8>)
 8001762:	4a22      	ldr	r2, [pc, #136]	; (80017ec <HAL_InitTick+0xec>)
 8001764:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_InitTick+0xe8>)
 8001768:	f240 32e7 	movw	r2, #999	; 0x3e7
 800176c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800176e:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <HAL_InitTick+0xe8>)
 8001770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001772:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <HAL_InitTick+0xe8>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_InitTick+0xe8>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_InitTick+0xe8>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001786:	4818      	ldr	r0, [pc, #96]	; (80017e8 <HAL_InitTick+0xe8>)
 8001788:	f005 fc02 	bl	8006f90 <HAL_TIM_Base_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001792:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001796:	2b00      	cmp	r3, #0
 8001798:	d11b      	bne.n	80017d2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800179a:	4813      	ldr	r0, [pc, #76]	; (80017e8 <HAL_InitTick+0xe8>)
 800179c:	f005 fc5a 	bl	8007054 <HAL_TIM_Base_Start_IT>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80017a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d111      	bne.n	80017d2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017ae:	2036      	movs	r0, #54	; 0x36
 80017b0:	f002 ff96 	bl	80046e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b0f      	cmp	r3, #15
 80017b8:	d808      	bhi.n	80017cc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017ba:	2200      	movs	r2, #0
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	2036      	movs	r0, #54	; 0x36
 80017c0:	f002 ff72 	bl	80046a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c4:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <HAL_InitTick+0xf0>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e002      	b.n	80017d2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3738      	adds	r7, #56	; 0x38
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	431bde83 	.word	0x431bde83
 80017e8:	2000018c 	.word	0x2000018c
 80017ec:	40001000 	.word	0x40001000
 80017f0:	2000000c 	.word	0x2000000c

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler+0x4>

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 8001824:	2080      	movs	r0, #128	; 0x80
 8001826:	f003 f939 	bl	8004a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}

0800182e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001832:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001836:	f003 f931 	bl	8004a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <TIM6_DAC_IRQHandler+0x10>)
 8001846:	f005 fc75 	bl	8007134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000018c 	.word	0x2000018c

08001854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800185c:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <_sbrk+0x5c>)
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <_sbrk+0x60>)
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <_sbrk+0x64>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <_sbrk+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	429a      	cmp	r2, r3
 8001882:	d207      	bcs.n	8001894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001884:	f00a f8e2 	bl	800ba4c <__errno>
 8001888:	4603      	mov	r3, r0
 800188a:	220c      	movs	r2, #12
 800188c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001892:	e009      	b.n	80018a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <_sbrk+0x64>)
 80018a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20018000 	.word	0x20018000
 80018b4:	00000400 	.word	0x00000400
 80018b8:	200001d8 	.word	0x200001d8
 80018bc:	20005eb8 	.word	0x20005eb8

080018c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <SystemInit+0x20>)
 80018c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <SystemInit+0x20>)
 80018cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <MX_USART2_UART_Init>:
uint8_t newaddresscount;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
	  huart2.Instance = USART2;
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <MX_USART2_UART_Init+0x5c>)
 80018ea:	4a16      	ldr	r2, [pc, #88]	; (8001944 <MX_USART2_UART_Init+0x60>)
 80018ec:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <MX_USART2_UART_Init+0x5c>)
 80018f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f4:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <MX_USART2_UART_Init+0x5c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <MX_USART2_UART_Init+0x5c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <MX_USART2_UART_Init+0x5c>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <MX_USART2_UART_Init+0x5c>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_USART2_UART_Init+0x5c>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <MX_USART2_UART_Init+0x5c>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_USART2_UART_Init+0x5c>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <MX_USART2_UART_Init+0x5c>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 8001926:	b662      	cpsie	i
}
 8001928:	bf00      	nop
	  __enable_irq();

  if (HAL_UART_Init(&huart2) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_USART2_UART_Init+0x5c>)
 800192c:	f005 fe02 	bl	8007534 <HAL_UART_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001936:	f7ff fd29 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200001dc 	.word	0x200001dc
 8001944:	40004400 	.word	0x40004400

08001948 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b0ac      	sub	sp, #176	; 0xb0
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2288      	movs	r2, #136	; 0x88
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f00a f8c3 	bl	800baf4 <memset>
  if(uartHandle->Instance==USART2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a29      	ldr	r2, [pc, #164]	; (8001a18 <HAL_UART_MspInit+0xd0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d14b      	bne.n	8001a10 <HAL_UART_MspInit+0xc8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001978:	2302      	movs	r3, #2
 800197a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800197c:	2300      	movs	r3, #0
 800197e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4618      	mov	r0, r3
 8001986:	f003 ff37 	bl	80057f8 <HAL_RCCEx_PeriphCLKConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001990:	f7ff fcfc 	bl	800138c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_UART_MspInit+0xd4>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001998:	4a20      	ldr	r2, [pc, #128]	; (8001a1c <HAL_UART_MspInit+0xd4>)
 800199a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199e:	6593      	str	r3, [r2, #88]	; 0x58
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <HAL_UART_MspInit+0xd4>)
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_UART_MspInit+0xd4>)
 80019ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b0:	4a1a      	ldr	r2, [pc, #104]	; (8001a1c <HAL_UART_MspInit+0xd4>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_UART_MspInit+0xd4>)
 80019ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019c4:	230c      	movs	r3, #12
 80019c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019dc:	2307      	movs	r3, #7
 80019de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019e6:	4619      	mov	r1, r3
 80019e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ec:	f002 fe94 	bl	8004718 <HAL_GPIO_Init>
    __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_UART_MspInit+0xd8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_UART_MspInit+0xd8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0220 	orr.w	r2, r2, #32
 80019fe:	601a      	str	r2, [r3, #0]
    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2105      	movs	r1, #5
 8001a04:	2026      	movs	r0, #38	; 0x26
 8001a06:	f002 fe4f 	bl	80046a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a0a:	2026      	movs	r0, #38	; 0x26
 8001a0c:	f002 fe68 	bl	80046e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a10:	bf00      	nop
 8001a12:	37b0      	adds	r7, #176	; 0xb0
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40004400 	.word	0x40004400
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	200001dc 	.word	0x200001dc

08001a24 <UART_print>:
}

/* USER CODE BEGIN 1 */

void UART_print(char *outputstring)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	81fb      	strh	r3, [r7, #14]
 8001a30:	e010      	b.n	8001a54 <UART_print+0x30>
	{
		while(!(USART2->ISR & USART_ISR_TXE)); //Transmit data register empty, using negation since value of 0 means data has not been transferred
 8001a32:	bf00      	nop
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <UART_print+0x48>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f9      	beq.n	8001a34 <UART_print+0x10>

		USART2->TDR = outputstring[currchar];
 8001a40:	89fb      	ldrh	r3, [r7, #14]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <UART_print+0x48>)
 8001a4a:	b292      	uxth	r2, r2
 8001a4c:	851a      	strh	r2, [r3, #40]	; 0x28
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 8001a4e:	89fb      	ldrh	r3, [r7, #14]
 8001a50:	3301      	adds	r3, #1
 8001a52:	81fb      	strh	r3, [r7, #14]
 8001a54:	89fc      	ldrh	r4, [r7, #14]
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7fe fbba 	bl	80001d0 <strlen>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	429c      	cmp	r4, r3
 8001a60:	d3e7      	bcc.n	8001a32 <UART_print+0xe>
	}

}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	40004400 	.word	0x40004400

08001a70 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]


	uint8_t RX = USART2->RDR;
 8001a7a:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <USART2_IRQHandler+0x114>)
 8001a7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	73fb      	strb	r3, [r7, #15]
	char tempstr[6]={'\0'};
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	2300      	movs	r3, #0
 8001a88:	80bb      	strh	r3, [r7, #4]
	switch(RX)
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	2b4a      	cmp	r3, #74	; 0x4a
 8001a8e:	d00a      	beq.n	8001aa6 <USART2_IRQHandler+0x36>
 8001a90:	2b4a      	cmp	r3, #74	; 0x4a
 8001a92:	dc28      	bgt.n	8001ae6 <USART2_IRQHandler+0x76>
 8001a94:	2b47      	cmp	r3, #71	; 0x47
 8001a96:	d01a      	beq.n	8001ace <USART2_IRQHandler+0x5e>
 8001a98:	2b47      	cmp	r3, #71	; 0x47
 8001a9a:	dc24      	bgt.n	8001ae6 <USART2_IRQHandler+0x76>
 8001a9c:	2b24      	cmp	r3, #36	; 0x24
 8001a9e:	d00f      	beq.n	8001ac0 <USART2_IRQHandler+0x50>
 8001aa0:	2b44      	cmp	r3, #68	; 0x44
 8001aa2:	d004      	beq.n	8001aae <USART2_IRQHandler+0x3e>
 8001aa4:	e01f      	b.n	8001ae6 <USART2_IRQHandler+0x76>
	{

			break;
		case 'J':
			UART_escapes("[2J"); //clear everything
 8001aa6:	4838      	ldr	r0, [pc, #224]	; (8001b88 <USART2_IRQHandler+0x118>)
 8001aa8:	f000 f880 	bl	8001bac <UART_escapes>
			break;
 8001aac:	e066      	b.n	8001b7c <USART2_IRQHandler+0x10c>


		case 'D':
			packetdata.message[0] = 2;
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <USART2_IRQHandler+0x11c>)
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	701a      	strb	r2, [r3, #0]
			DMorGM =1;
 8001ab4:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <USART2_IRQHandler+0x120>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
			UART_escapes("[s");
 8001aba:	4836      	ldr	r0, [pc, #216]	; (8001b94 <USART2_IRQHandler+0x124>)
 8001abc:	f000 f876 	bl	8001bac <UART_escapes>
		case '$':
			newaddressflag = 1;
 8001ac0:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <USART2_IRQHandler+0x128>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
			UART_print("Enter Address");
 8001ac6:	4835      	ldr	r0, [pc, #212]	; (8001b9c <USART2_IRQHandler+0x12c>)
 8001ac8:	f7ff ffac 	bl	8001a24 <UART_print>
			break;
 8001acc:	e056      	b.n	8001b7c <USART2_IRQHandler+0x10c>
		case 'G':
				packetdata.message[0] = 6;
 8001ace:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <USART2_IRQHandler+0x11c>)
 8001ad0:	2206      	movs	r2, #6
 8001ad2:	701a      	strb	r2, [r3, #0]
				packetdata.address[0] = 'F';//hardcoding broadcast address
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <USART2_IRQHandler+0x11c>)
 8001ad6:	2246      	movs	r2, #70	; 0x46
 8001ad8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				packetdata.address[1] = 'F';
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <USART2_IRQHandler+0x11c>)
 8001ade:	2246      	movs	r2, #70	; 0x46
 8001ae0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			break;
 8001ae4:	e04a      	b.n	8001b7c <USART2_IRQHandler+0x10c>
		default:


			if(newaddressflag)
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <USART2_IRQHandler+0x128>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d01f      	beq.n	8001b2e <USART2_IRQHandler+0xbe>
			{

				packetdata.address[newaddresscount] = RX;
 8001aee:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <USART2_IRQHandler+0x130>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <USART2_IRQHandler+0x11c>)
 8001af6:	4413      	add	r3, r2
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				++newaddresscount;
 8001afe:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <USART2_IRQHandler+0x130>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	3301      	adds	r3, #1
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <USART2_IRQHandler+0x130>)
 8001b08:	701a      	strb	r2, [r3, #0]
				USART2->TDR=RX;
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <USART2_IRQHandler+0x114>)
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	b292      	uxth	r2, r2
 8001b10:	851a      	strh	r2, [r3, #40]	; 0x28
				if(newaddresscount == 2)
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <USART2_IRQHandler+0x130>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d12f      	bne.n	8001b7a <USART2_IRQHandler+0x10a>
				{

					DMorGM=2;
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <USART2_IRQHandler+0x120>)
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	701a      	strb	r2, [r3, #0]
					newaddressflag = 0;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <USART2_IRQHandler+0x128>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
					newaddresscount = 0;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <USART2_IRQHandler+0x130>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]



				}
			}
				break;
 8001b2c:	e025      	b.n	8001b7a <USART2_IRQHandler+0x10a>
				packetdata.message[count] = RX;
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <USART2_IRQHandler+0x134>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	4619      	mov	r1, r3
 8001b34:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <USART2_IRQHandler+0x11c>)
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	5453      	strb	r3, [r2, r1]
				++count;
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <USART2_IRQHandler+0x134>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <USART2_IRQHandler+0x134>)
 8001b44:	801a      	strh	r2, [r3, #0]
				while(!(USART2->ISR & USART_ISR_TXE));
 8001b46:	bf00      	nop
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <USART2_IRQHandler+0x114>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f9      	beq.n	8001b48 <USART2_IRQHandler+0xd8>
				USART2->TDR=RX;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <USART2_IRQHandler+0x114>)
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	b292      	uxth	r2, r2
 8001b5a:	851a      	strh	r2, [r3, #40]	; 0x28
				if(RX == '\r') {
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	2b0d      	cmp	r3, #13
 8001b60:	d10b      	bne.n	8001b7a <USART2_IRQHandler+0x10a>
					count = 1;
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <USART2_IRQHandler+0x134>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	801a      	strh	r2, [r3, #0]
					xSemaphoreGiveFromISR( xTXsem, &xHigherPriorityTaskWoken );
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <USART2_IRQHandler+0x138>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	4619      	mov	r1, r3
 8001b74:	4610      	mov	r0, r2
 8001b76:	f006 fec0 	bl	80088fa <xQueueGiveFromISR>
				break;
 8001b7a:	bf00      	nop
	}
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40004400 	.word	0x40004400
 8001b88:	0800c948 	.word	0x0800c948
 8001b8c:	200000a8 	.word	0x200000a8
 8001b90:	20000120 	.word	0x20000120
 8001b94:	0800c94c 	.word	0x0800c94c
 8001b98:	20000260 	.word	0x20000260
 8001b9c:	0800c950 	.word	0x0800c950
 8001ba0:	20000261 	.word	0x20000261
 8001ba4:	20000004 	.word	0x20000004
 8001ba8:	2000009c 	.word	0x2000009c

08001bac <UART_escapes>:

void UART_escapes(char *escstring)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & USART_ISR_TXE));//do not advance until receiving transmit flag
 8001bb4:	bf00      	nop
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <UART_escapes+0x2c>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f9      	beq.n	8001bb6 <UART_escapes+0xa>
	USART2->TDR = (0x1B);  // ESC
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <UART_escapes+0x2c>)
 8001bc4:	221b      	movs	r2, #27
 8001bc6:	851a      	strh	r2, [r3, #40]	; 0x28
	UART_print(escstring);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff2b 	bl	8001a24 <UART_print>

}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40004400 	.word	0x40004400

08001bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001be0:	f7ff fe6e 	bl	80018c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be4:	480c      	ldr	r0, [pc, #48]	; (8001c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001be6:	490d      	ldr	r1, [pc, #52]	; (8001c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001be8:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <LoopForever+0xe>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bfc:	4c0a      	ldr	r4, [pc, #40]	; (8001c28 <LoopForever+0x16>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f009 ff25 	bl	800ba58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c0e:	f7ff fab1 	bl	8001174 <main>

08001c12 <LoopForever>:

LoopForever:
    b LoopForever
 8001c12:	e7fe      	b.n	8001c12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c1c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001c20:	0800cd14 	.word	0x0800cd14
  ldr r2, =_sbss
 8001c24:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001c28:	20005eb4 	.word	0x20005eb4

08001c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC1_2_IRQHandler>
	...

08001c30 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001c3a:	f107 030f 	add.w	r3, r7, #15
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2101      	movs	r1, #1
 8001c42:	2050      	movs	r0, #80	; 0x50
 8001c44:	f002 faba 	bl	80041bc <RadioSpiReadRegisters>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <SpiritCalibrationVco+0x6c>)
 8001c4c:	b212      	sxth	r2, r2
 8001c4e:	4611      	mov	r1, r2
 8001c50:	7019      	strb	r1, [r3, #0]
 8001c52:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c56:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d105      	bne.n	8001c6a <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e004      	b.n	8001c74 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	f023 0302 	bic.w	r3, r3, #2
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001c74:	f107 030f 	add.w	r3, r7, #15
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	2050      	movs	r0, #80	; 0x50
 8001c7e:	f002 fa51 	bl	8004124 <RadioSpiWriteRegisters>
 8001c82:	4602      	mov	r2, r0
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <SpiritCalibrationVco+0x6c>)
 8001c86:	b212      	sxth	r2, r2
 8001c88:	4611      	mov	r1, r2
 8001c8a:	7019      	strb	r1, [r3, #0]
 8001c8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c90:	705a      	strb	r2, [r3, #1]

}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000026c 	.word	0x2000026c

08001ca0 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001ca6:	1dfb      	adds	r3, r7, #7
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2101      	movs	r1, #1
 8001cac:	20e5      	movs	r0, #229	; 0xe5
 8001cae:	f002 fa85 	bl	80041bc <RadioSpiReadRegisters>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <SpiritCalibrationGetVcoCalData+0x34>)
 8001cb6:	b212      	sxth	r2, r2
 8001cb8:	4611      	mov	r1, r2
 8001cba:	7019      	strb	r1, [r3, #0]
 8001cbc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cc0:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cc8:	b2db      	uxtb	r3, r3

}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000026c 	.word	0x2000026c

08001cd8 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001ce2:	f107 030f 	add.w	r3, r7, #15
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2101      	movs	r1, #1
 8001cea:	206e      	movs	r0, #110	; 0x6e
 8001cec:	f002 fa66 	bl	80041bc <RadioSpiReadRegisters>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001cf4:	b212      	sxth	r2, r2
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	7019      	strb	r1, [r3, #0]
 8001cfa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cfe:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001d14:	f107 030f 	add.w	r3, r7, #15
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	206e      	movs	r0, #110	; 0x6e
 8001d1e:	f002 fa01 	bl	8004124 <RadioSpiWriteRegisters>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001d26:	b212      	sxth	r2, r2
 8001d28:	4611      	mov	r1, r2
 8001d2a:	7019      	strb	r1, [r3, #0]
 8001d2c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d30:	705a      	strb	r2, [r3, #1]

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000026c 	.word	0x2000026c

08001d40 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001d4a:	f107 030f 	add.w	r3, r7, #15
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2101      	movs	r1, #1
 8001d52:	206f      	movs	r0, #111	; 0x6f
 8001d54:	f002 fa32 	bl	80041bc <RadioSpiReadRegisters>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001d5c:	b212      	sxth	r2, r2
 8001d5e:	4611      	mov	r1, r2
 8001d60:	7019      	strb	r1, [r3, #0]
 8001d62:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d66:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001d7c:	f107 030f 	add.w	r3, r7, #15
 8001d80:	461a      	mov	r2, r3
 8001d82:	2101      	movs	r1, #1
 8001d84:	206f      	movs	r0, #111	; 0x6f
 8001d86:	f002 f9cd 	bl	8004124 <RadioSpiWriteRegisters>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001d8e:	b212      	sxth	r2, r2
 8001d90:	4611      	mov	r1, r2
 8001d92:	7019      	strb	r1, [r3, #0]
 8001d94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d98:	705a      	strb	r2, [r3, #1]

}
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2000026c 	.word	0x2000026c

08001da8 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001db2:	f107 030f 	add.w	r3, r7, #15
 8001db6:	461a      	mov	r2, r3
 8001db8:	2101      	movs	r1, #1
 8001dba:	209e      	movs	r0, #158	; 0x9e
 8001dbc:	f002 f9fe 	bl	80041bc <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	f023 0306 	bic.w	r3, r3, #6
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	f043 0302 	orr.w	r3, r3, #2
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e004      	b.n	8001de6 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001de6:	f107 030f 	add.w	r3, r7, #15
 8001dea:	461a      	mov	r2, r3
 8001dec:	2101      	movs	r1, #1
 8001dee:	209e      	movs	r0, #158	; 0x9e
 8001df0:	f002 f998 	bl	8004124 <RadioSpiWriteRegisters>
  
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f002 fa23 	bl	8004254 <RadioSpiCommandStrobes>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <SpiritCmdStrobeCommand+0x2c>)
 8001e12:	b212      	sxth	r2, r2
 8001e14:	4611      	mov	r1, r2
 8001e16:	7019      	strb	r1, [r3, #0]
 8001e18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e1c:	705a      	strb	r2, [r3, #1]
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000026c 	.word	0x2000026c

08001e2c <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	785a      	ldrb	r2, [r3, #1]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	789b      	ldrb	r3, [r3, #2]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	f107 020f 	add.w	r2, r7, #15
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 f967 	bl	8004124 <RadioSpiWriteRegisters>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <SpiritGpioInit+0x44>)
 8001e5a:	b212      	sxth	r2, r2
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	7019      	strb	r1, [r3, #0]
 8001e60:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e64:	705a      	strb	r2, [r3, #1]

}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000026c 	.word	0x2000026c

08001e74 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00c      	beq.n	8001ea0 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8001e86:	f107 0308 	add.w	r3, r7, #8
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f009 fe30 	bl	800baf4 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	461a      	mov	r2, r3
 8001e98:	f107 0308 	add.w	r3, r7, #8
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	2090      	movs	r0, #144	; 0x90
 8001eaa:	f002 f93b 	bl	8004124 <RadioSpiWriteRegisters>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SpiritIrqDeInit+0x54>)
 8001eb2:	b212      	sxth	r2, r2
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	7019      	strb	r1, [r3, #0]
 8001eb8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ebc:	705a      	strb	r2, [r3, #1]
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	2000026c 	.word	0x2000026c

08001ecc <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2104      	movs	r1, #4
 8001ee4:	2090      	movs	r0, #144	; 0x90
 8001ee6:	f002 f969 	bl	80041bc <RadioSpiReadRegisters>
 8001eea:	4602      	mov	r2, r0
 8001eec:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <SpiritIrq+0xc8>)
 8001eee:	b212      	sxth	r2, r2
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	7019      	strb	r1, [r3, #0]
 8001ef4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ef8:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	74fb      	strb	r3, [r7, #19]
 8001efe:	e011      	b.n	8001f24 <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	3318      	adds	r3, #24
 8001f04:	443b      	add	r3, r7
 8001f06:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	f1c3 0303 	rsb	r3, r3, #3
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001f1e:	7cfb      	ldrb	r3, [r7, #19]
 8001f20:	3301      	adds	r3, #1
 8001f22:	74fb      	strb	r3, [r7, #19]
 8001f24:	7cfb      	ldrb	r3, [r7, #19]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d9ea      	bls.n	8001f00 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4013      	ands	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e003      	b.n	8001f44 <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	74bb      	strb	r3, [r7, #18]
 8001f48:	e00e      	b.n	8001f68 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8001f4a:	7cbb      	ldrb	r3, [r7, #18]
 8001f4c:	f1c3 0303 	rsb	r3, r3, #3
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	40da      	lsrs	r2, r3
 8001f56:	7cbb      	ldrb	r3, [r7, #18]
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	3318      	adds	r3, #24
 8001f5c:	443b      	add	r3, r7
 8001f5e:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8001f62:	7cbb      	ldrb	r3, [r7, #18]
 8001f64:	3301      	adds	r3, #1
 8001f66:	74bb      	strb	r3, [r7, #18]
 8001f68:	7cbb      	ldrb	r3, [r7, #18]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d9ed      	bls.n	8001f4a <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	461a      	mov	r2, r3
 8001f74:	2104      	movs	r1, #4
 8001f76:	2090      	movs	r0, #144	; 0x90
 8001f78:	f002 f8d4 	bl	8004124 <RadioSpiWriteRegisters>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SpiritIrq+0xc8>)
 8001f80:	b212      	sxth	r2, r2
 8001f82:	4611      	mov	r1, r2
 8001f84:	7019      	strb	r1, [r3, #0]
 8001f86:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f8a:	705a      	strb	r2, [r3, #1]

}
 8001f8c:	bf00      	nop
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	2000026c 	.word	0x2000026c

08001f98 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2104      	movs	r1, #4
 8001fac:	20fa      	movs	r0, #250	; 0xfa
 8001fae:	f002 f905 	bl	80041bc <RadioSpiReadRegisters>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <SpiritIrqGetStatus+0x60>)
 8001fb6:	b212      	sxth	r2, r2
 8001fb8:	4611      	mov	r1, r2
 8001fba:	7019      	strb	r1, [r3, #0]
 8001fbc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fc0:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	74fb      	strb	r3, [r7, #19]
 8001fc6:	e00e      	b.n	8001fe6 <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8001fc8:	7cfb      	ldrb	r3, [r7, #19]
 8001fca:	f1c3 0303 	rsb	r3, r3, #3
 8001fce:	3318      	adds	r3, #24
 8001fd0:	443b      	add	r3, r7
 8001fd2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	74fb      	strb	r3, [r7, #19]
 8001fe6:	7cfb      	ldrb	r3, [r7, #19]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d9ed      	bls.n	8001fc8 <SpiritIrqGetStatus+0x30>
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000026c 	.word	0x2000026c

08001ffc <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	461a      	mov	r2, r3
 8002006:	2104      	movs	r1, #4
 8002008:	20fa      	movs	r0, #250	; 0xfa
 800200a:	f002 f8d7 	bl	80041bc <RadioSpiReadRegisters>
 800200e:	4602      	mov	r2, r0
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <SpiritIrqClearStatus+0x2c>)
 8002012:	b212      	sxth	r2, r2
 8002014:	4611      	mov	r1, r2
 8002016:	7019      	strb	r1, [r3, #0]
 8002018:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800201c:	705a      	strb	r2, [r3, #1]

}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000026c 	.word	0x2000026c

0800202c <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	461a      	mov	r2, r3
 8002036:	2101      	movs	r1, #1
 8002038:	20e7      	movs	r0, #231	; 0xe7
 800203a:	f002 f8bf 	bl	80041bc <RadioSpiReadRegisters>
 800203e:	4602      	mov	r2, r0
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 8002042:	b212      	sxth	r2, r2
 8002044:	4611      	mov	r1, r2
 8002046:	7019      	strb	r1, [r3, #0]
 8002048:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800204c:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002054:	b2db      	uxtb	r3, r3

}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000026c 	.word	0x2000026c

08002064 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8002064:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002068:	b08a      	sub	sp, #40	; 0x28
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a70      	ldr	r2, [pc, #448]	; (8002234 <SpiritManagementSetFrequencyBase+0x1d0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d307      	bcc.n	8002086 <SpiritManagementSetFrequencyBase+0x22>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a6f      	ldr	r2, [pc, #444]	; (8002238 <SpiritManagementSetFrequencyBase+0x1d4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d803      	bhi.n	8002086 <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 800207e:	2300      	movs	r3, #0
 8002080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002084:	e01a      	b.n	80020bc <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a6c      	ldr	r2, [pc, #432]	; (800223c <SpiritManagementSetFrequencyBase+0x1d8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d907      	bls.n	800209e <SpiritManagementSetFrequencyBase+0x3a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a6b      	ldr	r2, [pc, #428]	; (8002240 <SpiritManagementSetFrequencyBase+0x1dc>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d803      	bhi.n	800209e <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8002096:	2301      	movs	r3, #1
 8002098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800209c:	e00e      	b.n	80020bc <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a68      	ldr	r2, [pc, #416]	; (8002244 <SpiritManagementSetFrequencyBase+0x1e0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d907      	bls.n	80020b6 <SpiritManagementSetFrequencyBase+0x52>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a67      	ldr	r2, [pc, #412]	; (8002248 <SpiritManagementSetFrequencyBase+0x1e4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d803      	bhi.n	80020b6 <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 80020ae:	2302      	movs	r3, #2
 80020b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020b4:	e002      	b.n	80020bc <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 80020b6:	2303      	movs	r3, #3
 80020b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 80020bc:	f000 ffde 	bl	800307c <SpiritRadioGetFrequencyOffset>
 80020c0:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80020c2:	f000 ffbb 	bl	800303c <SpiritRadioGetChannelSpace>
 80020c6:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80020c8:	f000 ffa0 	bl	800300c <SpiritRadioGetChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80020d0:	6a3a      	ldr	r2, [r7, #32]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	441a      	add	r2, r3
 80020d6:	7efb      	ldrb	r3, [r7, #27]
 80020d8:	69f9      	ldr	r1, [r7, #28]
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80020e2:	f001 fdbb 	bl	8003c5c <SpiritRadioGetRefDiv>
 80020e6:	4603      	mov	r3, r0
 80020e8:	3301      	adds	r3, #1
 80020ea:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 80020ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d83a      	bhi.n	800216a <SpiritManagementSetFrequencyBase+0x106>
 80020f4:	a201      	add	r2, pc, #4	; (adr r2, 80020fc <SpiritManagementSetFrequencyBase+0x98>)
 80020f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fa:	bf00      	nop
 80020fc:	08002155 	.word	0x08002155
 8002100:	0800213d 	.word	0x0800213d
 8002104:	08002125 	.word	0x08002125
 8002108:	0800210d 	.word	0x0800210d
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	4a4f      	ldr	r2, [pc, #316]	; (800224c <SpiritManagementSetFrequencyBase+0x1e8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d803      	bhi.n	800211c <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002114:	2000      	movs	r0, #0
 8002116:	f7ff fe47 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800211a:	e026      	b.n	800216a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 800211c:	2001      	movs	r0, #1
 800211e:	f7ff fe43 	bl	8001da8 <SpiritCalibrationSelectVco>
    break;
 8002122:	e022      	b.n	800216a <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	4a4a      	ldr	r2, [pc, #296]	; (8002250 <SpiritManagementSetFrequencyBase+0x1ec>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d803      	bhi.n	8002134 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800212c:	2000      	movs	r0, #0
 800212e:	f7ff fe3b 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002132:	e01a      	b.n	800216a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002134:	2001      	movs	r0, #1
 8002136:	f7ff fe37 	bl	8001da8 <SpiritCalibrationSelectVco>
    break;
 800213a:	e016      	b.n	800216a <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4a45      	ldr	r2, [pc, #276]	; (8002254 <SpiritManagementSetFrequencyBase+0x1f0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d803      	bhi.n	800214c <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002144:	2000      	movs	r0, #0
 8002146:	f7ff fe2f 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800214a:	e00e      	b.n	800216a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 800214c:	2001      	movs	r0, #1
 800214e:	f7ff fe2b 	bl	8001da8 <SpiritCalibrationSelectVco>
    break;
 8002152:	e00a      	b.n	800216a <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	4a40      	ldr	r2, [pc, #256]	; (8002258 <SpiritManagementSetFrequencyBase+0x1f4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d803      	bhi.n	8002164 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff fe23 	bl	8001da8 <SpiritCalibrationSelectVco>
 8002162:	e002      	b.n	800216a <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002164:	2001      	movs	r0, #1
 8002166:	f7ff fe1f 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f000 fe66 	bl	8002e3c <SpiritRadioSearchWCP>
 8002170:	4603      	mov	r3, r0
 8002172:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7fe f9c5 	bl	8000504 <__aeabi_ui2d>
 800217a:	4604      	mov	r4, r0
 800217c:	460d      	mov	r5, r1
 800217e:	7cfb      	ldrb	r3, [r7, #19]
 8002180:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002184:	4935      	ldr	r1, [pc, #212]	; (800225c <SpiritManagementSetFrequencyBase+0x1f8>)
 8002186:	5c8a      	ldrb	r2, [r1, r2]
 8002188:	fb02 f303 	mul.w	r3, r2, r3
 800218c:	049b      	lsls	r3, r3, #18
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f9c8 	bl	8000524 <__aeabi_i2d>
 8002194:	4680      	mov	r8, r0
 8002196:	4689      	mov	r9, r1
 8002198:	f001 fdd4 	bl	8003d44 <SpiritRadioGetXtalFrequency>
 800219c:	4603      	mov	r3, r0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f9b0 	bl	8000504 <__aeabi_ui2d>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4640      	mov	r0, r8
 80021aa:	4649      	mov	r1, r9
 80021ac:	f7fe fb4e 	bl	800084c <__aeabi_ddiv>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4620      	mov	r0, r4
 80021b6:	4629      	mov	r1, r5
 80021b8:	f7fe fa1e 	bl	80005f8 <__aeabi_dmul>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f7fe fc2a 	bl	8000a1c <__aeabi_d2uiz>
 80021c8:	4603      	mov	r3, r0
 80021ca:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	0d5b      	lsrs	r3, r3, #21
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	7cbb      	ldrb	r3, [r7, #18]
 80021da:	015b      	lsls	r3, r3, #5
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	0b5b      	lsrs	r3, r3, #13
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002200:	4917      	ldr	r1, [pc, #92]	; (8002260 <SpiritManagementSetFrequencyBase+0x1fc>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	4313      	orrs	r3, r2
 8002206:	b2db      	uxtb	r3, r3
 8002208:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	461a      	mov	r2, r3
 8002210:	2104      	movs	r1, #4
 8002212:	2008      	movs	r0, #8
 8002214:	f001 ff86 	bl	8004124 <RadioSpiWriteRegisters>
 8002218:	4602      	mov	r2, r0
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <SpiritManagementSetFrequencyBase+0x200>)
 800221c:	b212      	sxth	r2, r2
 800221e:	4611      	mov	r1, r2
 8002220:	7019      	strb	r1, [r3, #0]
 8002222:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002226:	705a      	strb	r2, [r3, #1]
}
 8002228:	bf00      	nop
 800222a:	3728      	adds	r7, #40	; 0x28
 800222c:	46bd      	mov	sp, r7
 800222e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002232:	bf00      	nop
 8002234:	2e5f5680 	.word	0x2e5f5680
 8002238:	390c2fe0 	.word	0x390c2fe0
 800223c:	1701e47f 	.word	0x1701e47f
 8002240:	1c146a60 	.word	0x1c146a60
 8002244:	11d260bf 	.word	0x11d260bf
 8002248:	14ced7e0 	.word	0x14ced7e0
 800224c:	099cf4e1 	.word	0x099cf4e1
 8002250:	1339e9c3 	.word	0x1339e9c3
 8002254:	19a28d05 	.word	0x19a28d05
 8002258:	33451a0a 	.word	0x33451a0a
 800225c:	0800ca04 	.word	0x0800ca04
 8002260:	0800ca00 	.word	0x0800ca00
 8002264:	2000026c 	.word	0x2000026c

08002268 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8002276:	f001 fd65 	bl	8003d44 <SpiritRadioGetXtalFrequency>
 800227a:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 800227c:	2300      	movs	r3, #0
 800227e:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4a57      	ldr	r2, [pc, #348]	; (80023e0 <SpiritManagementWaVcoCalibration+0x178>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d90f      	bls.n	80022a8 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002288:	f001 fce8 	bl	8003c5c <SpiritRadioGetRefDiv>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10a      	bne.n	80022a8 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 8002296:	f001 f853 	bl	8003340 <SpiritRadioGetFrequencyBase>
 800229a:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 800229c:	2001      	movs	r0, #1
 800229e:	f001 fcad 	bl	8003bfc <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff fede 	bl	8002064 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 80022a8:	f001 f84a 	bl	8003340 <SpiritRadioGetFrequencyBase>
 80022ac:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 80022ae:	2325      	movs	r3, #37	; 0x25
 80022b0:	707b      	strb	r3, [r7, #1]
 80022b2:	1c7b      	adds	r3, r7, #1
 80022b4:	461a      	mov	r2, r3
 80022b6:	2101      	movs	r1, #1
 80022b8:	20a1      	movs	r0, #161	; 0xa1
 80022ba:	f001 ff33 	bl	8004124 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 80022be:	2001      	movs	r0, #1
 80022c0:	f7ff fcb6 	bl	8001c30 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 80022c4:	f001 fefc 	bl	80040c0 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 80022c8:	4b46      	ldr	r3, [pc, #280]	; (80023e4 <SpiritManagementWaVcoCalibration+0x17c>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b40      	cmp	r3, #64	; 0x40
 80022d4:	d10d      	bne.n	80022f2 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 80022d6:	2301      	movs	r3, #1
 80022d8:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 80022da:	2062      	movs	r0, #98	; 0x62
 80022dc:	f7ff fd8e 	bl	8001dfc <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 80022e0:	f001 feee 	bl	80040c0 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80022e4:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <SpiritManagementWaVcoCalibration+0x17c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d1f6      	bne.n	80022e0 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80022f2:	2066      	movs	r0, #102	; 0x66
 80022f4:	f7ff fd82 	bl	8001dfc <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80022fc:	f001 fee0 	bl	80040c0 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002300:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <SpiritManagementWaVcoCalibration+0x17c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b13      	cmp	r3, #19
 800230c:	d106      	bne.n	800231c <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 800230e:	7b7b      	ldrb	r3, [r7, #13]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	737a      	strb	r2, [r7, #13]
 8002314:	2b05      	cmp	r3, #5
 8002316:	d101      	bne.n	800231c <SpiritManagementWaVcoCalibration+0xb4>
 8002318:	2301      	movs	r3, #1
 800231a:	e05d      	b.n	80023d8 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 800231c:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <SpiritManagementWaVcoCalibration+0x17c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b0f      	cmp	r3, #15
 8002328:	d1e8      	bne.n	80022fc <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 800232a:	f7ff fcb9 	bl	8001ca0 <SpiritCalibrationGetVcoCalData>
 800232e:	4603      	mov	r3, r0
 8002330:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 8002332:	2062      	movs	r0, #98	; 0x62
 8002334:	f7ff fd62 	bl	8001dfc <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002338:	f001 fec2 	bl	80040c0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <SpiritManagementWaVcoCalibration+0x17c>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b03      	cmp	r3, #3
 8002348:	d1f6      	bne.n	8002338 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 800234a:	2065      	movs	r0, #101	; 0x65
 800234c:	f7ff fd56 	bl	8001dfc <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002350:	2300      	movs	r3, #0
 8002352:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002354:	f001 feb4 	bl	80040c0 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <SpiritManagementWaVcoCalibration+0x17c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b13      	cmp	r3, #19
 8002364:	d106      	bne.n	8002374 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 8002366:	7b7b      	ldrb	r3, [r7, #13]
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	737a      	strb	r2, [r7, #13]
 800236c:	2b05      	cmp	r3, #5
 800236e:	d101      	bne.n	8002374 <SpiritManagementWaVcoCalibration+0x10c>
 8002370:	2301      	movs	r3, #1
 8002372:	e031      	b.n	80023d8 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <SpiritManagementWaVcoCalibration+0x17c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b0f      	cmp	r3, #15
 8002380:	d1e8      	bne.n	8002354 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8002382:	f7ff fc8d 	bl	8001ca0 <SpiritCalibrationGetVcoCalData>
 8002386:	4603      	mov	r3, r0
 8002388:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 800238a:	2062      	movs	r0, #98	; 0x62
 800238c:	f7ff fd36 	bl	8001dfc <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002390:	f001 fe96 	bl	80040c0 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <SpiritManagementWaVcoCalibration+0x17c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d1f6      	bne.n	8002390 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 80023a2:	7bbb      	ldrb	r3, [r7, #14]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d102      	bne.n	80023ae <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 80023a8:	2063      	movs	r0, #99	; 0x63
 80023aa:	f7ff fd27 	bl	8001dfc <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7ff fc3e 	bl	8001c30 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 80023ba:	2000      	movs	r0, #0
 80023bc:	f001 fc1e 	bl	8003bfc <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff fe4f 	bl	8002064 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fc85 	bl	8001cd8 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 80023ce:	78bb      	ldrb	r3, [r7, #2]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fcb5 	bl	8001d40 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	01c9c380 	.word	0x01c9c380
 80023e4:	2000026c 	.word	0x2000026c

080023e8 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <SpiritManagementWaCmdStrobeTx+0x60>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d023      	beq.n	8002440 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <SpiritManagementWaCmdStrobeTx+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a14      	ldr	r2, [pc, #80]	; (8002450 <SpiritManagementWaCmdStrobeTx+0x68>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d908      	bls.n	8002414 <SpiritManagementWaCmdStrobeTx+0x2c>
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <SpiritManagementWaCmdStrobeTx+0x64>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a13      	ldr	r2, [pc, #76]	; (8002454 <SpiritManagementWaCmdStrobeTx+0x6c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d803      	bhi.n	8002414 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 800240c:	20c0      	movs	r0, #192	; 0xc0
 800240e:	f001 fb6b 	bl	8003ae8 <SpiritRadioSetPACwc>
 8002412:	e002      	b.n	800241a <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 8002414:	2000      	movs	r0, #0
 8002416:	f001 fb67 	bl	8003ae8 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 800241a:	2311      	movs	r3, #17
 800241c:	71fb      	strb	r3, [r7, #7]
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	461a      	mov	r2, r3
 8002422:	2101      	movs	r1, #1
 8002424:	20a9      	movs	r0, #169	; 0xa9
 8002426:	f001 fe7d 	bl	8004124 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 800242a:	2320      	movs	r3, #32
 800242c:	71fb      	strb	r3, [r7, #7]
 800242e:	1dfb      	adds	r3, r7, #7
 8002430:	461a      	mov	r2, r3
 8002432:	2101      	movs	r1, #1
 8002434:	20a5      	movs	r0, #165	; 0xa5
 8002436:	f001 fe75 	bl	8004124 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 800243a:	4b03      	ldr	r3, [pc, #12]	; (8002448 <SpiritManagementWaCmdStrobeTx+0x60>)
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
  }
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000006 	.word	0x20000006
 800244c:	20000264 	.word	0x20000264
 8002450:	08f0d17f 	.word	0x08f0d17f
 8002454:	1c03a180 	.word	0x1c03a180

08002458 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d00d      	beq.n	8002484 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002468:	2398      	movs	r3, #152	; 0x98
 800246a:	71fb      	strb	r3, [r7, #7]
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	461a      	mov	r2, r3
 8002470:	2101      	movs	r1, #1
 8002472:	20a5      	movs	r0, #165	; 0xa5
 8002474:	f001 fe56 	bl	8004124 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002478:	2000      	movs	r0, #0
 800247a:	f001 fb35 	bl	8003ae8 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 800247e:	4b03      	ldr	r3, [pc, #12]	; (800248c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
  }
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000006 	.word	0x20000006

08002490 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <SpiritManagementWaTRxFcMem+0x20>)
 800249a:	2202      	movs	r2, #2
 800249c:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <SpiritManagementWaTRxFcMem+0x24>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	20000006 	.word	0x20000006
 80024b4:	20000264 	.word	0x20000264

080024b8 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 80024be:	23ca      	movs	r3, #202	; 0xca
 80024c0:	71fb      	strb	r3, [r7, #7]
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	461a      	mov	r2, r3
 80024c6:	2101      	movs	r1, #1
 80024c8:	20b2      	movs	r0, #178	; 0xb2
 80024ca:	f001 fe2b 	bl	8004124 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80024ce:	2304      	movs	r3, #4
 80024d0:	71fb      	strb	r3, [r7, #7]
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	461a      	mov	r2, r3
 80024d6:	2101      	movs	r1, #1
 80024d8:	20a8      	movs	r0, #168	; 0xa8
 80024da:	f001 fe23 	bl	8004124 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 80024de:	1dfb      	adds	r3, r7, #7
 80024e0:	461a      	mov	r2, r3
 80024e2:	2101      	movs	r1, #1
 80024e4:	20a8      	movs	r0, #168	; 0xa8
 80024e6:	f001 fe69 	bl	80041bc <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80024ea:	2300      	movs	r3, #0
 80024ec:	71fb      	strb	r3, [r7, #7]
 80024ee:	1dfb      	adds	r3, r7, #7
 80024f0:	461a      	mov	r2, r3
 80024f2:	2101      	movs	r1, #1
 80024f4:	20a8      	movs	r0, #168	; 0xa8
 80024f6:	f001 fe15 	bl	8004124 <RadioSpiWriteRegisters>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 800250a:	1dfb      	adds	r3, r7, #7
 800250c:	461a      	mov	r2, r3
 800250e:	2101      	movs	r1, #1
 8002510:	2030      	movs	r0, #48	; 0x30
 8002512:	f001 fe53 	bl	80041bc <RadioSpiReadRegisters>
 8002516:	4602      	mov	r2, r0
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <SpiritPktCommonGetControlLength+0x34>)
 800251a:	b212      	sxth	r2, r2
 800251c:	4611      	mov	r1, r2
 800251e:	7019      	strb	r1, [r3, #0]
 8002520:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002524:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	b2db      	uxtb	r3, r3

}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000026c 	.word	0x2000026c

0800253c <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002546:	f107 030f 	add.w	r3, r7, #15
 800254a:	461a      	mov	r2, r3
 800254c:	2101      	movs	r1, #1
 800254e:	204f      	movs	r0, #79	; 0x4f
 8002550:	f001 fe34 	bl	80041bc <RadioSpiReadRegisters>
 8002554:	4602      	mov	r2, r0
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002558:	b212      	sxth	r2, r2
 800255a:	4611      	mov	r1, r2
 800255c:	7019      	strb	r1, [r3, #0]
 800255e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002562:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d105      	bne.n	8002576 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	b2db      	uxtb	r3, r3
 8002572:	73fb      	strb	r3, [r7, #15]
 8002574:	e004      	b.n	8002580 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002580:	f107 030f 	add.w	r3, r7, #15
 8002584:	461a      	mov	r2, r3
 8002586:	2101      	movs	r1, #1
 8002588:	204f      	movs	r0, #79	; 0x4f
 800258a:	f001 fdcb 	bl	8004124 <RadioSpiWriteRegisters>
 800258e:	4602      	mov	r2, r0
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002592:	b212      	sxth	r2, r2
 8002594:	4611      	mov	r1, r2
 8002596:	7019      	strb	r1, [r3, #0]
 8002598:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800259c:	705a      	strb	r2, [r3, #1]

}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	2000026c 	.word	0x2000026c

080025ac <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 80025b6:	1dfb      	adds	r3, r7, #7
 80025b8:	461a      	mov	r2, r3
 80025ba:	2101      	movs	r1, #1
 80025bc:	204b      	movs	r0, #75	; 0x4b
 80025be:	f001 fdb1 	bl	8004124 <RadioSpiWriteRegisters>
 80025c2:	4602      	mov	r2, r0
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <SpiritPktCommonSetDestinationAddress+0x30>)
 80025c6:	b212      	sxth	r2, r2
 80025c8:	4611      	mov	r1, r2
 80025ca:	7019      	strb	r1, [r3, #0]
 80025cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025d0:	705a      	strb	r2, [r3, #1]

}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000026c 	.word	0x2000026c

080025e0 <SpiritPktCommonGetReceivedSourceAddress>:
 * @brief  Returns the source address of the received packet.
 * @param  None.
 * @retval uint8_t Source address of the received packet.
 */
uint8_t SpiritPktCommonGetReceivedSourceAddress(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD1 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD1_BASE, 1, &tempRegValue);
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	461a      	mov	r2, r3
 80025ea:	2101      	movs	r1, #1
 80025ec:	20d2      	movs	r0, #210	; 0xd2
 80025ee:	f001 fde5 	bl	80041bc <RadioSpiReadRegisters>
 80025f2:	4602      	mov	r2, r0
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <SpiritPktCommonGetReceivedSourceAddress+0x2c>)
 80025f6:	b212      	sxth	r2, r2
 80025f8:	4611      	mov	r1, r2
 80025fa:	7019      	strb	r1, [r3, #0]
 80025fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002600:	705a      	strb	r2, [r3, #1]

  /* Returns value */
  return tempRegValue;
 8002602:	79fb      	ldrb	r3, [r7, #7]

}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	2000026c 	.word	0x2000026c

08002610 <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002618:	f107 0308 	add.w	r3, r7, #8
 800261c:	461a      	mov	r2, r3
 800261e:	2101      	movs	r1, #1
 8002620:	2051      	movs	r0, #81	; 0x51
 8002622:	f001 fdcb 	bl	80041bc <RadioSpiReadRegisters>
 8002626:	4602      	mov	r2, r0
 8002628:	4b60      	ldr	r3, [pc, #384]	; (80027ac <SpiritPktStackInit+0x19c>)
 800262a:	b212      	sxth	r2, r2
 800262c:	4611      	mov	r1, r2
 800262e:	7019      	strb	r1, [r3, #0]
 8002630:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002634:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8002636:	7a3b      	ldrb	r3, [r7, #8]
 8002638:	f023 0320 	bic.w	r3, r3, #32
 800263c:	b2db      	uxtb	r3, r3
 800263e:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002640:	7a3b      	ldrb	r3, [r7, #8]
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 800264a:	f107 0308 	add.w	r3, r7, #8
 800264e:	461a      	mov	r2, r3
 8002650:	2101      	movs	r1, #1
 8002652:	2051      	movs	r0, #81	; 0x51
 8002654:	f001 fd66 	bl	8004124 <RadioSpiWriteRegisters>
 8002658:	4602      	mov	r2, r0
 800265a:	4b54      	ldr	r3, [pc, #336]	; (80027ac <SpiritPktStackInit+0x19c>)
 800265c:	b212      	sxth	r2, r2
 800265e:	4611      	mov	r1, r2
 8002660:	7019      	strb	r1, [r3, #0]
 8002662:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002666:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002668:	f107 0308 	add.w	r3, r7, #8
 800266c:	461a      	mov	r2, r3
 800266e:	2101      	movs	r1, #1
 8002670:	204f      	movs	r0, #79	; 0x4f
 8002672:	f001 fda3 	bl	80041bc <RadioSpiReadRegisters>
 8002676:	4602      	mov	r2, r0
 8002678:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <SpiritPktStackInit+0x19c>)
 800267a:	b212      	sxth	r2, r2
 800267c:	4611      	mov	r1, r2
 800267e:	7019      	strb	r1, [r3, #0]
 8002680:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002684:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8002686:	7a3b      	ldrb	r3, [r7, #8]
 8002688:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800268c:	b2db      	uxtb	r3, r3
 800268e:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	461a      	mov	r2, r3
 8002696:	2101      	movs	r1, #1
 8002698:	204f      	movs	r0, #79	; 0x4f
 800269a:	f001 fd43 	bl	8004124 <RadioSpiWriteRegisters>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b42      	ldr	r3, [pc, #264]	; (80027ac <SpiritPktStackInit+0x19c>)
 80026a2:	b212      	sxth	r2, r2
 80026a4:	4611      	mov	r1, r2
 80026a6:	7019      	strb	r1, [r3, #0]
 80026a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026ac:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	7adb      	ldrb	r3, [r3, #11]
 80026b2:	f043 0310 	orr.w	r3, r3, #16
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7a5b      	ldrb	r3, [r3, #9]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <SpiritPktStackInit+0xb8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7a5b      	ldrb	r3, [r3, #9]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	785b      	ldrb	r3, [r3, #1]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 80026e8:	4313      	orrs	r3, r2
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7a9b      	ldrb	r3, [r3, #10]
 80026f2:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7b5b      	ldrb	r3, [r3, #13]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d104      	bne.n	8002706 <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 80026fc:	7afb      	ldrb	r3, [r7, #11]
 80026fe:	f043 0310 	orr.w	r3, r3, #16
 8002702:	b2db      	uxtb	r3, r3
 8002704:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	7b1b      	ldrb	r3, [r3, #12]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d104      	bne.n	8002718 <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 800270e:	7afb      	ldrb	r3, [r7, #11]
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002718:	f107 0308 	add.w	r3, r7, #8
 800271c:	461a      	mov	r2, r3
 800271e:	2104      	movs	r1, #4
 8002720:	2030      	movs	r0, #48	; 0x30
 8002722:	f001 fcff 	bl	8004124 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	e01d      	b.n	8002768 <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	785b      	ldrb	r3, [r3, #1]
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f1c3 0303 	rsb	r3, r3, #3
 800273a:	429a      	cmp	r2, r3
 800273c:	da06      	bge.n	800274c <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	3310      	adds	r3, #16
 8002742:	443b      	add	r3, r7
 8002744:	2200      	movs	r2, #0
 8002746:	f803 2c08 	strb.w	r2, [r3, #-8]
 800274a:	e00a      	b.n	8002762 <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	40da      	lsrs	r2, r3
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	3310      	adds	r3, #16
 800275c:	443b      	add	r3, r7
 800275e:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	3301      	adds	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d9de      	bls.n	800272c <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7a9b      	ldrb	r3, [r3, #10]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d103      	bne.n	800277e <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 8002776:	2000      	movs	r0, #0
 8002778:	f7ff fee0 	bl	800253c <SpiritPktCommonFilterOnCrc>
 800277c:	e002      	b.n	8002784 <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 800277e:	2001      	movs	r0, #1
 8002780:	f7ff fedc 	bl	800253c <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002784:	f107 0308 	add.w	r3, r7, #8
 8002788:	461a      	mov	r2, r3
 800278a:	2104      	movs	r1, #4
 800278c:	2036      	movs	r0, #54	; 0x36
 800278e:	f001 fcc9 	bl	8004124 <RadioSpiWriteRegisters>
 8002792:	4602      	mov	r2, r0
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <SpiritPktStackInit+0x19c>)
 8002796:	b212      	sxth	r2, r2
 8002798:	4611      	mov	r1, r2
 800279a:	7019      	strb	r1, [r3, #0]
 800279c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027a0:	705a      	strb	r2, [r3, #1]

}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	2000026c 	.word	0x2000026c

080027b0 <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	461a      	mov	r2, r3
 80027be:	2101      	movs	r1, #1
 80027c0:	204f      	movs	r0, #79	; 0x4f
 80027c2:	f001 fcfb 	bl	80041bc <RadioSpiReadRegisters>
 80027c6:	4602      	mov	r2, r0
 80027c8:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <SpiritPktStackAddressesInit+0xd8>)
 80027ca:	b212      	sxth	r2, r2
 80027cc:	4611      	mov	r1, r2
 80027ce:	7019      	strb	r1, [r3, #0]
 80027d0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027d4:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d105      	bne.n	80027ea <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80027de:	7b3b      	ldrb	r3, [r7, #12]
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	733b      	strb	r3, [r7, #12]
 80027e8:	e004      	b.n	80027f4 <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80027ea:	7b3b      	ldrb	r3, [r7, #12]
 80027ec:	f023 0308 	bic.w	r3, r3, #8
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	789b      	ldrb	r3, [r3, #2]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80027fc:	7b3b      	ldrb	r3, [r7, #12]
 80027fe:	f043 0304 	orr.w	r3, r3, #4
 8002802:	b2db      	uxtb	r3, r3
 8002804:	733b      	strb	r3, [r7, #12]
 8002806:	e004      	b.n	8002812 <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002808:	7b3b      	ldrb	r3, [r7, #12]
 800280a:	f023 0304 	bic.w	r3, r3, #4
 800280e:	b2db      	uxtb	r3, r3
 8002810:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	791b      	ldrb	r3, [r3, #4]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d105      	bne.n	8002826 <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 800281a:	7b3b      	ldrb	r3, [r7, #12]
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	b2db      	uxtb	r3, r3
 8002822:	733b      	strb	r3, [r7, #12]
 8002824:	e004      	b.n	8002830 <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002826:	7b3b      	ldrb	r3, [r7, #12]
 8002828:	f023 0302 	bic.w	r3, r3, #2
 800282c:	b2db      	uxtb	r3, r3
 800282e:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	461a      	mov	r2, r3
 8002836:	2101      	movs	r1, #1
 8002838:	204f      	movs	r0, #79	; 0x4f
 800283a:	f001 fc73 	bl	8004124 <RadioSpiWriteRegisters>
 800283e:	4602      	mov	r2, r0
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <SpiritPktStackAddressesInit+0xd8>)
 8002842:	b212      	sxth	r2, r2
 8002844:	4611      	mov	r1, r2
 8002846:	7019      	strb	r1, [r3, #0]
 8002848:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800284c:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	795b      	ldrb	r3, [r3, #5]
 8002852:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	78db      	ldrb	r3, [r3, #3]
 8002858:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	785b      	ldrb	r3, [r3, #1]
 800285e:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002860:	f107 030c 	add.w	r3, r7, #12
 8002864:	461a      	mov	r2, r3
 8002866:	2103      	movs	r1, #3
 8002868:	204c      	movs	r0, #76	; 0x4c
 800286a:	f001 fc5b 	bl	8004124 <RadioSpiWriteRegisters>
 800286e:	4602      	mov	r2, r0
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <SpiritPktStackAddressesInit+0xd8>)
 8002872:	b212      	sxth	r2, r2
 8002874:	4611      	mov	r1, r2
 8002876:	7019      	strb	r1, [r3, #0]
 8002878:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800287c:	705a      	strb	r2, [r3, #1]
  
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2000026c 	.word	0x2000026c

0800288c <SpiritPktStackSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter can be any value of uint16_t.
 * @retval None.
 */
void SpiritPktStackSetPayloadLength(uint16_t nPayloadLength)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];

  /* Computes the oversize (address + control) size */
  uint16_t overSize = 2 + (uint16_t) SpiritPktStackGetControlLength();
 8002896:	f7ff fe35 	bl	8002504 <SpiritPktCommonGetControlLength>
 800289a:	4603      	mov	r3, r0
 800289c:	b29b      	uxth	r3, r3
 800289e:	3302      	adds	r3, #2
 80028a0:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from lPayloadLength */
  tempRegValue[1]=STACK_BUILD_PCKTLEN0(nPayloadLength+overSize);
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	89fb      	ldrh	r3, [r7, #14]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from lPayloadLength */
  tempRegValue[0]=STACK_BUILD_PCKTLEN1(nPayloadLength+overSize);
 80028b0:	88fa      	ldrh	r2, [r7, #6]
 80028b2:	89fb      	ldrh	r3, [r7, #14]
 80028b4:	4413      	add	r3, r2
 80028b6:	121b      	asrs	r3, r3, #8
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	733b      	strb	r3, [r7, #12]

  /* Writes the value on the PCKTLENx registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	461a      	mov	r2, r3
 80028c2:	2102      	movs	r1, #2
 80028c4:	2034      	movs	r0, #52	; 0x34
 80028c6:	f001 fc2d 	bl	8004124 <RadioSpiWriteRegisters>
 80028ca:	4602      	mov	r2, r0
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <SpiritPktStackSetPayloadLength+0x58>)
 80028ce:	b212      	sxth	r2, r2
 80028d0:	4611      	mov	r1, r2
 80028d2:	7019      	strb	r1, [r3, #0]
 80028d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028d8:	705a      	strb	r2, [r3, #1]

}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	2000026c 	.word	0x2000026c

080028e8 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 80028f2:	f107 030f 	add.w	r3, r7, #15
 80028f6:	461a      	mov	r2, r3
 80028f8:	2101      	movs	r1, #1
 80028fa:	203a      	movs	r0, #58	; 0x3a
 80028fc:	f001 fc5e 	bl	80041bc <RadioSpiReadRegisters>
 8002900:	4602      	mov	r2, r0
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <SpiritQiSqiCheck+0x6c>)
 8002904:	b212      	sxth	r2, r2
 8002906:	4611      	mov	r1, r2
 8002908:	7019      	strb	r1, [r3, #0]
 800290a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800290e:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d105      	bne.n	8002922 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	b2db      	uxtb	r3, r3
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	e004      	b.n	800292c <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	f023 0302 	bic.w	r3, r3, #2
 8002928:	b2db      	uxtb	r3, r3
 800292a:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 800292c:	f107 030f 	add.w	r3, r7, #15
 8002930:	461a      	mov	r2, r3
 8002932:	2101      	movs	r1, #1
 8002934:	203a      	movs	r0, #58	; 0x3a
 8002936:	f001 fbf5 	bl	8004124 <RadioSpiWriteRegisters>
 800293a:	4602      	mov	r2, r0
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <SpiritQiSqiCheck+0x6c>)
 800293e:	b212      	sxth	r2, r2
 8002940:	4611      	mov	r1, r2
 8002942:	7019      	strb	r1, [r3, #0]
 8002944:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002948:	705a      	strb	r2, [r3, #1]

}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	2000026c 	.word	0x2000026c

08002958 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002962:	f107 030f 	add.w	r3, r7, #15
 8002966:	461a      	mov	r2, r3
 8002968:	2101      	movs	r1, #1
 800296a:	203a      	movs	r0, #58	; 0x3a
 800296c:	f001 fc26 	bl	80041bc <RadioSpiReadRegisters>
 8002970:	4602      	mov	r2, r0
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <SpiritQiSetSqiThreshold+0x64>)
 8002974:	b212      	sxth	r2, r2
 8002976:	4611      	mov	r1, r2
 8002978:	7019      	strb	r1, [r3, #0]
 800297a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800297e:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002986:	b2db      	uxtb	r3, r3
 8002988:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4313      	orrs	r3, r2
 8002990:	b2db      	uxtb	r3, r3
 8002992:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002994:	f107 030f 	add.w	r3, r7, #15
 8002998:	461a      	mov	r2, r3
 800299a:	2101      	movs	r1, #1
 800299c:	203a      	movs	r0, #58	; 0x3a
 800299e:	f001 fbc1 	bl	8004124 <RadioSpiWriteRegisters>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <SpiritQiSetSqiThreshold+0x64>)
 80029a6:	b212      	sxth	r2, r2
 80029a8:	4611      	mov	r1, r2
 80029aa:	7019      	strb	r1, [r3, #0]
 80029ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029b0:	705a      	strb	r2, [r3, #1]

}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	2000026c 	.word	0x2000026c

080029c0 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3382      	adds	r3, #130	; 0x82
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 80029d4:	f107 030f 	add.w	r3, r7, #15
 80029d8:	461a      	mov	r2, r3
 80029da:	2101      	movs	r1, #1
 80029dc:	2022      	movs	r0, #34	; 0x22
 80029de:	f001 fba1 	bl	8004124 <RadioSpiWriteRegisters>
 80029e2:	4602      	mov	r2, r0
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <SpiritQiSetRssiThresholddBm+0x3c>)
 80029e6:	b212      	sxth	r2, r2
 80029e8:	4611      	mov	r1, r2
 80029ea:	7019      	strb	r1, [r3, #0]
 80029ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029f0:	705a      	strb	r2, [r3, #1]

}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	2000026c 	.word	0x2000026c

08002a00 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	; 0x30
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002a08:	23a0      	movs	r3, #160	; 0xa0
 8002a0a:	747b      	strb	r3, [r7, #17]
 8002a0c:	f107 0311 	add.w	r3, r7, #17
 8002a10:	461a      	mov	r2, r3
 8002a12:	2101      	movs	r1, #1
 8002a14:	209f      	movs	r0, #159	; 0x9f
 8002a16:	f001 fb85 	bl	8004124 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a20:	ee07 3a90 	vmov	s15, r3
 8002a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	ee07 3a90 	vmov	s15, r3
 8002a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a38:	eddf 6aae 	vldr	s13, [pc, #696]	; 8002cf4 <SpiritRadioInit+0x2f4>
 8002a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a44:	ee17 3a90 	vmov	r3, s15
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002a4a:	2063      	movs	r0, #99	; 0x63
 8002a4c:	f001 fc02 	bl	8004254 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002a50:	2300      	movs	r3, #0
 8002a52:	73bb      	strb	r3, [r7, #14]
 8002a54:	e004      	b.n	8002a60 <SpiritRadioInit+0x60>
 8002a56:	7bbb      	ldrb	r3, [r7, #14]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	73bb      	strb	r3, [r7, #14]
 8002a60:	7bbb      	ldrb	r3, [r7, #14]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2bff      	cmp	r3, #255	; 0xff
 8002a66:	d1f6      	bne.n	8002a56 <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002a68:	f001 fb2a 	bl	80040c0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002a6c:	4ba2      	ldr	r3, [pc, #648]	; (8002cf8 <SpiritRadioInit+0x2f8>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d1ea      	bne.n	8002a50 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002a7a:	4ba0      	ldr	r3, [pc, #640]	; (8002cfc <SpiritRadioInit+0x2fc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4aa0      	ldr	r2, [pc, #640]	; (8002d00 <SpiritRadioInit+0x300>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d803      	bhi.n	8002a8c <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f001 f90b 	bl	8003ca0 <SpiritRadioSetDigDiv>
 8002a8a:	e002      	b.n	8002a92 <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f001 f907 	bl	8003ca0 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002a92:	2062      	movs	r0, #98	; 0x62
 8002a94:	f001 fbde 	bl	8004254 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	737b      	strb	r3, [r7, #13]
 8002a9c:	e004      	b.n	8002aa8 <SpiritRadioInit+0xa8>
 8002a9e:	7b7b      	ldrb	r3, [r7, #13]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	737b      	strb	r3, [r7, #13]
 8002aa8:	7b7b      	ldrb	r3, [r7, #13]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2bff      	cmp	r3, #255	; 0xff
 8002aae:	d1f6      	bne.n	8002a9e <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002ab0:	f001 fb06 	bl	80040c0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002ab4:	4b90      	ldr	r3, [pc, #576]	; (8002cf8 <SpiritRadioInit+0x2f8>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d1ea      	bne.n	8002a98 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac4:	ee07 3a90 	vmov	s15, r3
 8002ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002acc:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8002d04 <SpiritRadioInit+0x304>
 8002ad0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ad4:	4b89      	ldr	r3, [pc, #548]	; (8002cfc <SpiritRadioInit+0x2fc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	ee07 3a90 	vmov	s15, r3
 8002adc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ae8:	ee17 3a90 	vmov	r3, s15
 8002aec:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002aee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002afe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	025a      	lsls	r2, r3, #9
 8002b0a:	4b7c      	ldr	r3, [pc, #496]	; (8002cfc <SpiritRadioInit+0x2fc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	3301      	adds	r3, #1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fcb5 	bl	8002490 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002b26:	f107 0310 	add.w	r3, r7, #16
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	20a3      	movs	r0, #163	; 0xa3
 8002b30:	f001 fb44 	bl	80041bc <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002b34:	7c3b      	ldrb	r3, [r7, #16]
 8002b36:	f023 0302 	bic.w	r3, r3, #2
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	743b      	strb	r3, [r7, #16]
 8002b3e:	f107 0310 	add.w	r3, r7, #16
 8002b42:	461a      	mov	r2, r3
 8002b44:	2101      	movs	r1, #1
 8002b46:	20a3      	movs	r0, #163	; 0xa3
 8002b48:	f001 faec 	bl	8004124 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f107 0216 	add.w	r2, r7, #22
 8002b54:	f107 0117 	add.w	r1, r7, #23
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fc3d 	bl	80033d8 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7b5a      	ldrb	r2, [r3, #13]
 8002b66:	7dbb      	ldrb	r3, [r7, #22]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002b6e:	f107 0310 	add.w	r3, r7, #16
 8002b72:	461a      	mov	r2, r3
 8002b74:	2101      	movs	r1, #1
 8002b76:	201c      	movs	r0, #28
 8002b78:	f001 fb20 	bl	80041bc <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f107 0214 	add.w	r2, r7, #20
 8002b84:	f107 0115 	add.w	r1, r7, #21
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fdbd 	bl	8003708 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002b8e:	7d3b      	ldrb	r3, [r7, #20]
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	b25a      	sxtb	r2, r3
 8002b94:	7c3b      	ldrb	r3, [r7, #16]
 8002b96:	b25b      	sxtb	r3, r3
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	b25b      	sxtb	r3, r3
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	b25a      	sxtb	r2, r3
 8002ba2:	7d7b      	ldrb	r3, [r7, #21]
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	b25b      	sxtb	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f107 0212 	add.w	r2, r7, #18
 8002bb6:	f107 0113 	add.w	r1, r7, #19
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fcbe 	bl	800353c <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002bc0:	7cfb      	ldrb	r3, [r7, #19]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	b25a      	sxtb	r2, r3
 8002bc6:	7cbb      	ldrb	r3, [r7, #18]
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	b25b      	sxtb	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002bd2:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <SpiritRadioInit+0x2fc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0b1b      	lsrs	r3, r3, #12
 8002bd8:	ee07 3a90 	vmov	s15, r3
 8002bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002be0:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002d08 <SpiritRadioInit+0x308>
 8002be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002be8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002d0c <SpiritRadioInit+0x30c>
 8002bec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bf0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002bf4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c00:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c08:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	dd09      	ble.n	8002c2a <SpiritRadioInit+0x22a>
 8002c16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c1e:	edc7 7a00 	vstr	s15, [r7]
 8002c22:	783b      	ldrb	r3, [r7, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	e006      	b.n	8002c38 <SpiritRadioInit+0x238>
 8002c2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c32:	edc7 7a00 	vstr	s15, [r7]
 8002c36:	783b      	ldrb	r3, [r7, #0]
 8002c38:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002c3a:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <SpiritRadioInit+0x2fc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a30      	ldr	r2, [pc, #192]	; (8002d00 <SpiritRadioInit+0x300>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d802      	bhi.n	8002c4a <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	777b      	strb	r3, [r7, #29]
 8002c48:	e033      	b.n	8002cb2 <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	; (8002cfc <SpiritRadioInit+0x2fc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	0b5b      	lsrs	r3, r3, #13
 8002c50:	ee07 3a90 	vmov	s15, r3
 8002c54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c58:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002d08 <SpiritRadioInit+0x308>
 8002c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c60:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002d0c <SpiritRadioInit+0x30c>
 8002c64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c68:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002c6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c78:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8c:	dd09      	ble.n	8002ca2 <SpiritRadioInit+0x2a2>
 8002c8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c96:	edc7 7a00 	vstr	s15, [r7]
 8002c9a:	783b      	ldrb	r3, [r7, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	e006      	b.n	8002cb0 <SpiritRadioInit+0x2b0>
 8002ca2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002caa:	edc7 7a00 	vstr	s15, [r7]
 8002cae:	783b      	ldrb	r3, [r7, #0]
 8002cb0:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002cb2:	f107 030f 	add.w	r3, r7, #15
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2101      	movs	r1, #1
 8002cba:	2007      	movs	r0, #7
 8002cbc:	f001 fa32 	bl	8004124 <RadioSpiWriteRegisters>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <SpiritRadioInit+0x2f8>)
 8002cc4:	b212      	sxth	r2, r2
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	7019      	strb	r1, [r3, #0]
 8002cca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002cce:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <SpiritRadioInit+0x2fc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <SpiritRadioInit+0x310>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d91e      	bls.n	8002d18 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <SpiritRadioInit+0x2fc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <SpiritRadioInit+0x314>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	bf8c      	ite	hi
 8002ce4:	2301      	movhi	r3, #1
 8002ce6:	2300      	movls	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f86c 	bl	8002dc8 <SpiritRadioSetXtalFlag>
 8002cf0:	e01d      	b.n	8002d2e <SpiritRadioInit+0x32e>
 8002cf2:	bf00      	nop
 8002cf4:	49742400 	.word	0x49742400
 8002cf8:	2000026c 	.word	0x2000026c
 8002cfc:	20000268 	.word	0x20000268
 8002d00:	01c9c37f 	.word	0x01c9c37f
 8002d04:	48800000 	.word	0x48800000
 8002d08:	49afd520 	.word	0x49afd520
 8002d0c:	42800000 	.word	0x42800000
 8002d10:	01c9c380 	.word	0x01c9c380
 8002d14:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002d18:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <SpiritRadioInit+0x3bc>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a28      	ldr	r2, [pc, #160]	; (8002dc0 <SpiritRadioInit+0x3c0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	bf8c      	ite	hi
 8002d22:	2301      	movhi	r3, #1
 8002d24:	2300      	movls	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 f84d 	bl	8002dc8 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	330c      	adds	r3, #12
 8002d32:	461a      	mov	r2, r3
 8002d34:	2101      	movs	r1, #1
 8002d36:	206c      	movs	r0, #108	; 0x6c
 8002d38:	f001 f9f4 	bl	8004124 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	461a      	mov	r2, r3
 8002d42:	2104      	movs	r1, #4
 8002d44:	200c      	movs	r0, #12
 8002d46:	f001 f9ed 	bl	8004124 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002d4a:	f107 0318 	add.w	r3, r7, #24
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2104      	movs	r1, #4
 8002d52:	201a      	movs	r0, #26
 8002d54:	f001 f9e6 	bl	8004124 <RadioSpiWriteRegisters>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <SpiritRadioInit+0x3c4>)
 8002d5c:	b212      	sxth	r2, r2
 8002d5e:	4611      	mov	r1, r2
 8002d60:	7019      	strb	r1, [r3, #0]
 8002d62:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d66:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f000 ff15 	bl	8003b98 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002d72:	23e3      	movs	r3, #227	; 0xe3
 8002d74:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002d76:	f107 031c 	add.w	r3, r7, #28
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	2099      	movs	r0, #153	; 0x99
 8002d80:	f001 f9d0 	bl	8004124 <RadioSpiWriteRegisters>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <SpiritRadioInit+0x3c4>)
 8002d88:	b212      	sxth	r2, r2
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	7019      	strb	r1, [r3, #0]
 8002d8e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d92:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002d94:	2322      	movs	r3, #34	; 0x22
 8002d96:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002d98:	f107 031c 	add.w	r3, r7, #28
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2101      	movs	r1, #1
 8002da0:	20bc      	movs	r0, #188	; 0xbc
 8002da2:	f001 f9bf 	bl	8004124 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f9aa 	bl	8003104 <SpiritRadioSetFrequencyBase>
 8002db0:	4603      	mov	r3, r0
  
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3730      	adds	r7, #48	; 0x30
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000268 	.word	0x20000268
 8002dc0:	017d783f 	.word	0x017d783f
 8002dc4:	2000026c 	.word	0x2000026c

08002dc8 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002dd6:	f107 030f 	add.w	r3, r7, #15
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2101      	movs	r1, #1
 8002dde:	2001      	movs	r0, #1
 8002de0:	f001 f9ec 	bl	80041bc <RadioSpiReadRegisters>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <SpiritRadioSetXtalFlag+0x70>)
 8002de8:	b212      	sxth	r2, r2
 8002dea:	4611      	mov	r1, r2
 8002dec:	7019      	strb	r1, [r3, #0]
 8002dee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002df2:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d105      	bne.n	8002e06 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	e004      	b.n	8002e10 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002e10:	f107 030f 	add.w	r3, r7, #15
 8002e14:	461a      	mov	r2, r3
 8002e16:	2101      	movs	r1, #1
 8002e18:	2001      	movs	r0, #1
 8002e1a:	f001 f983 	bl	8004124 <RadioSpiWriteRegisters>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <SpiritRadioSetXtalFlag+0x70>)
 8002e22:	b212      	sxth	r2, r2
 8002e24:	4611      	mov	r1, r2
 8002e26:	7019      	strb	r1, [r3, #0]
 8002e28:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e2c:	705a      	strb	r2, [r3, #1]
  
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	2000026c 	.word	0x2000026c

08002e3c <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a3a      	ldr	r2, [pc, #232]	; (8002f3c <SpiritRadioSearchWCP+0x100>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d306      	bcc.n	8002e66 <SpiritRadioSearchWCP+0x2a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a39      	ldr	r2, [pc, #228]	; (8002f40 <SpiritRadioSearchWCP+0x104>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d802      	bhi.n	8002e66 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002e60:	2306      	movs	r3, #6
 8002e62:	73bb      	strb	r3, [r7, #14]
 8002e64:	e01f      	b.n	8002ea6 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a36      	ldr	r2, [pc, #216]	; (8002f44 <SpiritRadioSearchWCP+0x108>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d906      	bls.n	8002e7c <SpiritRadioSearchWCP+0x40>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a35      	ldr	r2, [pc, #212]	; (8002f48 <SpiritRadioSearchWCP+0x10c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d802      	bhi.n	8002e7c <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8002e76:	230c      	movs	r3, #12
 8002e78:	73bb      	strb	r3, [r7, #14]
 8002e7a:	e014      	b.n	8002ea6 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a33      	ldr	r2, [pc, #204]	; (8002f4c <SpiritRadioSearchWCP+0x110>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d906      	bls.n	8002e92 <SpiritRadioSearchWCP+0x56>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a32      	ldr	r2, [pc, #200]	; (8002f50 <SpiritRadioSearchWCP+0x114>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d802      	bhi.n	8002e92 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	73bb      	strb	r3, [r7, #14]
 8002e90:	e009      	b.n	8002ea6 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a2f      	ldr	r2, [pc, #188]	; (8002f54 <SpiritRadioSearchWCP+0x118>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d905      	bls.n	8002ea6 <SpiritRadioSearchWCP+0x6a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a2e      	ldr	r2, [pc, #184]	; (8002f58 <SpiritRadioSearchWCP+0x11c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d801      	bhi.n	8002ea6 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2c      	ldr	r2, [pc, #176]	; (8002f5c <SpiritRadioSearchWCP+0x120>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	099b      	lsrs	r3, r3, #6
 8002eb0:	7bba      	ldrb	r2, [r7, #14]
 8002eb2:	fb02 f303 	mul.w	r3, r2, r3
 8002eb6:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8002eb8:	f241 631f 	movw	r3, #5663	; 0x161f
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d302      	bcc.n	8002ed2 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8002ecc:	230f      	movs	r3, #15
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	e023      	b.n	8002f1a <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	e005      	b.n	8002ee4 <SpiritRadioSearchWCP+0xa8>
 8002ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee8:	2b0e      	cmp	r3, #14
 8002eea:	dc0c      	bgt.n	8002f06 <SpiritRadioSearchWCP+0xca>
 8002eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	; (8002f60 <SpiritRadioSearchWCP+0x124>)
 8002ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002efc:	fb02 f303 	mul.w	r3, r2, r3
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d8e8      	bhi.n	8002ed8 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8002f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <SpiritRadioSearchWCP+0xde>
      i--;
 8002f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8002f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1e:	425a      	negs	r2, r3
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	f002 0207 	and.w	r2, r2, #7
 8002f28:	bf58      	it	pl
 8002f2a:	4253      	negpl	r3, r2
 8002f2c:	b25b      	sxtb	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
  
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	2e5f5680 	.word	0x2e5f5680
 8002f40:	390c2fe0 	.word	0x390c2fe0
 8002f44:	1701e47f 	.word	0x1701e47f
 8002f48:	1c146a60 	.word	0x1c146a60
 8002f4c:	11d260bf 	.word	0x11d260bf
 8002f50:	14ced7e0 	.word	0x14ced7e0
 8002f54:	08e18f3f 	.word	0x08e18f3f
 8002f58:	0a6fd060 	.word	0x0a6fd060
 8002f5c:	10624dd3 	.word	0x10624dd3
 8002f60:	0800cac4 	.word	0x0800cac4

08002f64 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2104      	movs	r1, #4
 8002f70:	2008      	movs	r0, #8
 8002f72:	f001 f923 	bl	80041bc <RadioSpiReadRegisters>
 8002f76:	4602      	mov	r2, r0
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <SpiritRadioGetSynthWord+0x48>)
 8002f7a:	b212      	sxth	r2, r2
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	7019      	strb	r1, [r3, #0]
 8002f80:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f84:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002f86:	793b      	ldrb	r3, [r7, #4]
 8002f88:	055b      	lsls	r3, r3, #21
 8002f8a:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 8002f8e:	797b      	ldrb	r3, [r7, #5]
 8002f90:	035b      	lsls	r3, r3, #13
 8002f92:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002f94:	79bb      	ldrb	r3, [r7, #6]
 8002f96:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002f98:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002f9a:	79fa      	ldrb	r2, [r7, #7]
 8002f9c:	08d2      	lsrs	r2, r2, #3
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	4413      	add	r3, r2
  
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	2000026c 	.word	0x2000026c

08002fb0 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2101      	movs	r1, #1
 8002fbc:	200b      	movs	r0, #11
 8002fbe:	f001 f8fd 	bl	80041bc <RadioSpiReadRegisters>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b10      	ldr	r3, [pc, #64]	; (8003008 <SpiritRadioGetBand+0x58>)
 8002fc6:	b212      	sxth	r2, r2
 8002fc8:	4611      	mov	r1, r2
 8002fca:	7019      	strb	r1, [r3, #0]
 8002fcc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fd0:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e00e      	b.n	8002ffe <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d101      	bne.n	8002fee <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e007      	b.n	8002ffe <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d101      	bne.n	8002ffc <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e000      	b.n	8002ffe <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8002ffc:	2303      	movs	r3, #3
  }
  
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	2000026c 	.word	0x2000026c

0800300c <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8003012:	1dfb      	adds	r3, r7, #7
 8003014:	461a      	mov	r2, r3
 8003016:	2101      	movs	r1, #1
 8003018:	206c      	movs	r0, #108	; 0x6c
 800301a:	f001 f8cf 	bl	80041bc <RadioSpiReadRegisters>
 800301e:	4602      	mov	r2, r0
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <SpiritRadioGetChannel+0x2c>)
 8003022:	b212      	sxth	r2, r2
 8003024:	4611      	mov	r1, r2
 8003026:	7019      	strb	r1, [r3, #0]
 8003028:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800302c:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 800302e:	79fb      	ldrb	r3, [r7, #7]
  
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	2000026c 	.word	0x2000026c

0800303c <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8003042:	1dfb      	adds	r3, r7, #7
 8003044:	461a      	mov	r2, r3
 8003046:	2101      	movs	r1, #1
 8003048:	200c      	movs	r0, #12
 800304a:	f001 f8b7 	bl	80041bc <RadioSpiReadRegisters>
 800304e:	4602      	mov	r2, r0
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <SpiritRadioGetChannelSpace+0x38>)
 8003052:	b212      	sxth	r2, r2
 8003054:	4611      	mov	r1, r2
 8003056:	7019      	strb	r1, [r3, #0]
 8003058:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800305c:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	461a      	mov	r2, r3
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <SpiritRadioGetChannelSpace+0x3c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	0bdb      	lsrs	r3, r3, #15
  
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	2000026c 	.word	0x2000026c
 8003078:	20000268 	.word	0x20000268

0800307c <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8003082:	1d3b      	adds	r3, r7, #4
 8003084:	461a      	mov	r2, r3
 8003086:	2102      	movs	r1, #2
 8003088:	200e      	movs	r0, #14
 800308a:	f001 f897 	bl	80041bc <RadioSpiReadRegisters>
 800308e:	4602      	mov	r2, r0
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <SpiritRadioGetFrequencyOffset+0x80>)
 8003092:	b212      	sxth	r2, r2
 8003094:	4611      	mov	r1, r2
 8003096:	7019      	strb	r1, [r3, #0]
 8003098:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800309c:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 800309e:	793b      	ldrb	r3, [r7, #4]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	797b      	ldrb	r3, [r7, #5]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 80030b0:	887b      	ldrh	r3, [r7, #2]
 80030b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80030c0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	e004      	b.n	80030d4 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 80030ca:	887b      	ldrh	r3, [r7, #2]
 80030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 80030d4:	1cbb      	adds	r3, r7, #2
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 80030da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030de:	4a08      	ldr	r2, [pc, #32]	; (8003100 <SpiritRadioGetFrequencyOffset+0x84>)
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	da03      	bge.n	80030f2 <SpiritRadioGetFrequencyOffset+0x76>
 80030ea:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 80030ee:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80030f2:	149b      	asrs	r3, r3, #18
  
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	2000026c 	.word	0x2000026c
 8003100:	20000268 	.word	0x20000268

08003104 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8003104:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003108:	b08a      	sub	sp, #40	; 0x28
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 800310e:	2300      	movs	r3, #0
 8003110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a79      	ldr	r2, [pc, #484]	; (80032fc <SpiritRadioSetFrequencyBase+0x1f8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d307      	bcc.n	800312c <SpiritRadioSetFrequencyBase+0x28>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a78      	ldr	r2, [pc, #480]	; (8003300 <SpiritRadioSetFrequencyBase+0x1fc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d803      	bhi.n	800312c <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800312a:	e022      	b.n	8003172 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a75      	ldr	r2, [pc, #468]	; (8003304 <SpiritRadioSetFrequencyBase+0x200>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d907      	bls.n	8003144 <SpiritRadioSetFrequencyBase+0x40>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a74      	ldr	r2, [pc, #464]	; (8003308 <SpiritRadioSetFrequencyBase+0x204>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d803      	bhi.n	8003144 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003142:	e016      	b.n	8003172 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a71      	ldr	r2, [pc, #452]	; (800330c <SpiritRadioSetFrequencyBase+0x208>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d907      	bls.n	800315c <SpiritRadioSetFrequencyBase+0x58>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a70      	ldr	r2, [pc, #448]	; (8003310 <SpiritRadioSetFrequencyBase+0x20c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d803      	bhi.n	800315c <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8003154:	2302      	movs	r3, #2
 8003156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800315a:	e00a      	b.n	8003172 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a6d      	ldr	r2, [pc, #436]	; (8003314 <SpiritRadioSetFrequencyBase+0x210>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d906      	bls.n	8003172 <SpiritRadioSetFrequencyBase+0x6e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a6c      	ldr	r2, [pc, #432]	; (8003318 <SpiritRadioSetFrequencyBase+0x214>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d802      	bhi.n	8003172 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 800316c:	2303      	movs	r3, #3
 800316e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8003172:	f7ff ff83 	bl	800307c <SpiritRadioGetFrequencyOffset>
 8003176:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8003178:	f7ff ff60 	bl	800303c <SpiritRadioGetChannelSpace>
 800317c:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800317e:	f7ff ff45 	bl	800300c <SpiritRadioGetChannel>
 8003182:	4603      	mov	r3, r0
 8003184:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8003186:	6a3a      	ldr	r2, [r7, #32]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	441a      	add	r2, r3
 800318c:	7efb      	ldrb	r3, [r7, #27]
 800318e:	69f9      	ldr	r1, [r7, #28]
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8003198:	f000 fd60 	bl	8003c5c <SpiritRadioGetRefDiv>
 800319c:	4603      	mov	r3, r0
 800319e:	3301      	adds	r3, #1
 80031a0:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 80031a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d839      	bhi.n	800321e <SpiritRadioSetFrequencyBase+0x11a>
 80031aa:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <SpiritRadioSetFrequencyBase+0xac>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	08003209 	.word	0x08003209
 80031b4:	080031f1 	.word	0x080031f1
 80031b8:	080031d9 	.word	0x080031d9
 80031bc:	080031c1 	.word	0x080031c1
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	4a56      	ldr	r2, [pc, #344]	; (800331c <SpiritRadioSetFrequencyBase+0x218>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d803      	bhi.n	80031d0 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fe fded 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80031ce:	e026      	b.n	800321e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80031d0:	2001      	movs	r0, #1
 80031d2:	f7fe fde9 	bl	8001da8 <SpiritCalibrationSelectVco>
    break;
 80031d6:	e022      	b.n	800321e <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	4a51      	ldr	r2, [pc, #324]	; (8003320 <SpiritRadioSetFrequencyBase+0x21c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d803      	bhi.n	80031e8 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7fe fde1 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80031e6:	e01a      	b.n	800321e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80031e8:	2001      	movs	r0, #1
 80031ea:	f7fe fddd 	bl	8001da8 <SpiritCalibrationSelectVco>
    break;
 80031ee:	e016      	b.n	800321e <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	4a4c      	ldr	r2, [pc, #304]	; (8003324 <SpiritRadioSetFrequencyBase+0x220>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d803      	bhi.n	8003200 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7fe fdd5 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80031fe:	e00e      	b.n	800321e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003200:	2001      	movs	r0, #1
 8003202:	f7fe fdd1 	bl	8001da8 <SpiritCalibrationSelectVco>
    break;
 8003206:	e00a      	b.n	800321e <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	4a47      	ldr	r2, [pc, #284]	; (8003328 <SpiritRadioSetFrequencyBase+0x224>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d803      	bhi.n	8003218 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003210:	2000      	movs	r0, #0
 8003212:	f7fe fdc9 	bl	8001da8 <SpiritCalibrationSelectVco>
 8003216:	e002      	b.n	800321e <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003218:	2001      	movs	r0, #1
 800321a:	f7fe fdc5 	bl	8001da8 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800321e:	6978      	ldr	r0, [r7, #20]
 8003220:	f7ff fe0c 	bl	8002e3c <SpiritRadioSearchWCP>
 8003224:	4603      	mov	r3, r0
 8003226:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800322c:	4a3f      	ldr	r2, [pc, #252]	; (800332c <SpiritRadioSetFrequencyBase+0x228>)
 800322e:	5cd3      	ldrb	r3, [r2, r3]
 8003230:	461a      	mov	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd f963 	bl	8000504 <__aeabi_ui2d>
 800323e:	4604      	mov	r4, r0
 8003240:	460d      	mov	r5, r1
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	049b      	lsls	r3, r3, #18
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd f96c 	bl	8000524 <__aeabi_i2d>
 800324c:	4680      	mov	r8, r0
 800324e:	4689      	mov	r9, r1
 8003250:	4b37      	ldr	r3, [pc, #220]	; (8003330 <SpiritRadioSetFrequencyBase+0x22c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd f955 	bl	8000504 <__aeabi_ui2d>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4640      	mov	r0, r8
 8003260:	4649      	mov	r1, r9
 8003262:	f7fd faf3 	bl	800084c <__aeabi_ddiv>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4620      	mov	r0, r4
 800326c:	4629      	mov	r1, r5
 800326e:	f7fd f9c3 	bl	80005f8 <__aeabi_dmul>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4610      	mov	r0, r2
 8003278:	4619      	mov	r1, r3
 800327a:	f7fd fbcf 	bl	8000a1c <__aeabi_d2uiz>
 800327e:	4603      	mov	r3, r0
 8003280:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	0d5b      	lsrs	r3, r3, #21
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	b2da      	uxtb	r2, r3
 800328e:	7cbb      	ldrb	r3, [r7, #18]
 8003290:	015b      	lsls	r3, r3, #5
 8003292:	b2db      	uxtb	r3, r3
 8003294:	4313      	orrs	r3, r2
 8003296:	b2db      	uxtb	r3, r3
 8003298:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	0b5b      	lsrs	r3, r3, #13
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b6:	491f      	ldr	r1, [pc, #124]	; (8003334 <SpiritRadioSetFrequencyBase+0x230>)
 80032b8:	5ccb      	ldrb	r3, [r1, r3]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80032c0:	f107 0308 	add.w	r3, r7, #8
 80032c4:	461a      	mov	r2, r3
 80032c6:	2104      	movs	r1, #4
 80032c8:	2008      	movs	r0, #8
 80032ca:	f000 ff2b 	bl	8004124 <RadioSpiWriteRegisters>
 80032ce:	4602      	mov	r2, r0
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <SpiritRadioSetFrequencyBase+0x234>)
 80032d2:	b212      	sxth	r2, r2
 80032d4:	4611      	mov	r1, r2
 80032d6:	7019      	strb	r1, [r3, #0]
 80032d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80032dc:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 80032de:	4b17      	ldr	r3, [pc, #92]	; (800333c <SpiritRadioSetFrequencyBase+0x238>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d103      	bne.n	80032ee <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 80032e6:	f7fe ffbf 	bl	8002268 <SpiritManagementWaVcoCalibration>
 80032ea:	4603      	mov	r3, r0
 80032ec:	e000      	b.n	80032f0 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3728      	adds	r7, #40	; 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032fa:	bf00      	nop
 80032fc:	2e5f5680 	.word	0x2e5f5680
 8003300:	390c2fe0 	.word	0x390c2fe0
 8003304:	1701e47f 	.word	0x1701e47f
 8003308:	1c146a60 	.word	0x1c146a60
 800330c:	11d260bf 	.word	0x11d260bf
 8003310:	14ced7e0 	.word	0x14ced7e0
 8003314:	08e18f3f 	.word	0x08e18f3f
 8003318:	0a6fd060 	.word	0x0a6fd060
 800331c:	099cf4e1 	.word	0x099cf4e1
 8003320:	1339e9c3 	.word	0x1339e9c3
 8003324:	19a28d05 	.word	0x19a28d05
 8003328:	33451a0a 	.word	0x33451a0a
 800332c:	0800ca08 	.word	0x0800ca08
 8003330:	20000268 	.word	0x20000268
 8003334:	0800ca0c 	.word	0x0800ca0c
 8003338:	2000026c 	.word	0x2000026c
 800333c:	20000007 	.word	0x20000007

08003340 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003340:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8003348:	f7ff fe0c 	bl	8002f64 <SpiritRadioGetSynthWord>
 800334c:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 800334e:	f7ff fe2f 	bl	8002fb0 <SpiritRadioGetBand>
 8003352:	4603      	mov	r3, r0
 8003354:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8003356:	f000 fc81 	bl	8003c5c <SpiritRadioGetRefDiv>
 800335a:	4603      	mov	r3, r0
 800335c:	3301      	adds	r3, #1
 800335e:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fd f8cf 	bl	8000504 <__aeabi_ui2d>
 8003366:	4604      	mov	r4, r0
 8003368:	460d      	mov	r5, r1
 800336a:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <SpiritRadioGetFrequencyBase+0x90>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd f8c8 	bl	8000504 <__aeabi_ui2d>
 8003374:	4680      	mov	r8, r0
 8003376:	4689      	mov	r9, r1
 8003378:	78bb      	ldrb	r3, [r7, #2]
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	4915      	ldr	r1, [pc, #84]	; (80033d4 <SpiritRadioGetFrequencyBase+0x94>)
 800337e:	5c8a      	ldrb	r2, [r1, r2]
 8003380:	fb02 f303 	mul.w	r3, r2, r3
 8003384:	049b      	lsls	r3, r3, #18
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f8cc 	bl	8000524 <__aeabi_i2d>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4640      	mov	r0, r8
 8003392:	4649      	mov	r1, r9
 8003394:	f7fd fa5a 	bl	800084c <__aeabi_ddiv>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4620      	mov	r0, r4
 800339e:	4629      	mov	r1, r5
 80033a0:	f7fd f92a 	bl	80005f8 <__aeabi_dmul>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	ec43 2b17 	vmov	d7, r2, r3
 80033ac:	eeb0 0a47 	vmov.f32	s0, s14
 80033b0:	eef0 0a67 	vmov.f32	s1, s15
 80033b4:	f009 fa42 	bl	800c83c <round>
 80033b8:	ec53 2b10 	vmov	r2, r3, d0
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	f7fd fb2c 	bl	8000a1c <__aeabi_d2uiz>
 80033c4:	4603      	mov	r3, r0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033d0:	20000268 	.word	0x20000268
 80033d4:	0800ca08 	.word	0x0800ca08

080033d8 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 80033e8:	230f      	movs	r3, #15
 80033ea:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 80033f0:	f000 fc86 	bl	8003d00 <SpiritRadioGetDigDiv>
 80033f4:	4603      	mov	r3, r0
 80033f6:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 80033f8:	e015      	b.n	8003426 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 80033fa:	4b4f      	ldr	r3, [pc, #316]	; (8003538 <SpiritRadioSearchDatarateME+0x160>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003402:	f1c3 0114 	rsb	r1, r3, #20
 8003406:	7ebb      	ldrb	r3, [r7, #26]
 8003408:	440b      	add	r3, r1
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	429a      	cmp	r2, r3
 8003412:	d302      	bcc.n	800341a <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 8003414:	2301      	movs	r3, #1
 8003416:	763b      	strb	r3, [r7, #24]
 8003418:	e005      	b.n	8003426 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 800341a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b2db      	uxtb	r3, r3
 8003424:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8003426:	7e3b      	ldrb	r3, [r7, #24]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <SpiritRadioSearchDatarateME+0x5e>
 800342e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003432:	2b00      	cmp	r3, #0
 8003434:	dae1      	bge.n	80033fa <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 8003436:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800343a:	2b00      	cmp	r3, #0
 800343c:	da01      	bge.n	8003442 <SpiritRadioSearchDatarateME+0x6a>
 800343e:	2300      	movs	r3, #0
 8003440:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 8003442:	7ffa      	ldrb	r2, [r7, #31]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003448:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800344c:	f1c3 0317 	rsb	r3, r3, #23
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	409a      	lsls	r2, r3
 8003454:	4b38      	ldr	r3, [pc, #224]	; (8003538 <SpiritRadioSearchDatarateME+0x160>)
 8003456:	6819      	ldr	r1, [r3, #0]
 8003458:	7ebb      	ldrb	r3, [r7, #26]
 800345a:	3305      	adds	r3, #5
 800345c:	fa21 f303 	lsr.w	r3, r1, r3
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8003466:	2300      	movs	r3, #0
 8003468:	77bb      	strb	r3, [r7, #30]
 800346a:	e031      	b.n	80034d0 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 800346c:	7e7a      	ldrb	r2, [r7, #25]
 800346e:	7fbb      	ldrb	r3, [r7, #30]
 8003470:	4413      	add	r3, r2
 8003472:	2b01      	cmp	r3, #1
 8003474:	d021      	beq.n	80034ba <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	b29a      	uxth	r2, r3
 800347a:	7e7b      	ldrb	r3, [r7, #25]
 800347c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8003480:	7fbb      	ldrb	r3, [r7, #30]
 8003482:	440b      	add	r3, r1
 8003484:	3b01      	subs	r3, #1
 8003486:	4618      	mov	r0, r3
 8003488:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <SpiritRadioSearchDatarateME+0x160>)
 800348a:	6819      	ldr	r1, [r3, #0]
 800348c:	7ebb      	ldrb	r3, [r7, #26]
 800348e:	3305      	adds	r3, #5
 8003490:	fa21 f303 	lsr.w	r3, r1, r3
 8003494:	fb03 f100 	mul.w	r1, r3, r0
 8003498:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800349c:	f1c3 0317 	rsb	r3, r3, #23
 80034a0:	fa21 f303 	lsr.w	r3, r1, r3
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	7fbb      	ldrb	r3, [r7, #30]
 80034ac:	b212      	sxth	r2, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	3320      	adds	r3, #32
 80034b2:	443b      	add	r3, r7
 80034b4:	f823 2c10 	strh.w	r2, [r3, #-16]
 80034b8:	e007      	b.n	80034ca <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 80034ba:	7fbb      	ldrb	r3, [r7, #30]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	3320      	adds	r3, #32
 80034c0:	443b      	add	r3, r7
 80034c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80034c6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 80034ca:	7fbb      	ldrb	r3, [r7, #30]
 80034cc:	3301      	adds	r3, #1
 80034ce:	77bb      	strb	r3, [r7, #30]
 80034d0:	7fbb      	ldrb	r3, [r7, #30]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d9ca      	bls.n	800346c <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 80034d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034da:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 80034dc:	2300      	movs	r3, #0
 80034de:	76fb      	strb	r3, [r7, #27]
 80034e0:	e021      	b.n	8003526 <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 80034e2:	7efb      	ldrb	r3, [r7, #27]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	3320      	adds	r3, #32
 80034e8:	443b      	add	r3, r7
 80034ea:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bfb8      	it	lt
 80034f2:	425b      	neglt	r3, r3
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	8bba      	ldrh	r2, [r7, #28]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d911      	bls.n	8003520 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 80034fc:	7efb      	ldrb	r3, [r7, #27]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	3320      	adds	r3, #32
 8003502:	443b      	add	r3, r7
 8003504:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	bfb8      	it	lt
 800350c:	425b      	neglt	r3, r3
 800350e:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003510:	7e7a      	ldrb	r2, [r7, #25]
 8003512:	7efb      	ldrb	r3, [r7, #27]
 8003514:	4413      	add	r3, r2
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b2da      	uxtb	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003520:	7efb      	ldrb	r3, [r7, #27]
 8003522:	3301      	adds	r3, #1
 8003524:	76fb      	strb	r3, [r7, #27]
 8003526:	7efb      	ldrb	r3, [r7, #27]
 8003528:	2b02      	cmp	r3, #2
 800352a:	d9da      	bls.n	80034e2 <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000268 	.word	0x20000268

0800353c <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 800354e:	f000 fbd7 	bl	8003d00 <SpiritRadioGetDigDiv>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003558:	2302      	movs	r3, #2
 800355a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800355e:	e002      	b.n	8003566 <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8003566:	4b63      	ldr	r3, [pc, #396]	; (80036f4 <SpiritRadioSearchChannelBwME+0x1b8>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	4a61      	ldr	r2, [pc, #388]	; (80036f8 <SpiritRadioSearchChannelBwME+0x1bc>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 800357c:	2300      	movs	r3, #0
 800357e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003582:	e006      	b.n	8003592 <SpiritRadioSearchChannelBwME+0x56>
 8003584:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3301      	adds	r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003592:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003596:	2b59      	cmp	r3, #89	; 0x59
 8003598:	dc0f      	bgt.n	80035ba <SpiritRadioSearchChannelBwME+0x7e>
 800359a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800359e:	4a57      	ldr	r2, [pc, #348]	; (80036fc <SpiritRadioSearchChannelBwME+0x1c0>)
 80035a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035a4:	461a      	mov	r2, r3
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fb02 f303 	mul.w	r3, r2, r3
 80035ac:	4a54      	ldr	r2, [pc, #336]	; (8003700 <SpiritRadioSearchChannelBwME+0x1c4>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	0adb      	lsrs	r3, r3, #11
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d3e4      	bcc.n	8003584 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 80035ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d077      	beq.n	80036b2 <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 80035c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035c6:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80035ce:	e03a      	b.n	8003646 <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 80035d0:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80035d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035d8:	4413      	add	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	dc06      	bgt.n	80035ec <SpiritRadioSearchChannelBwME+0xb0>
 80035de:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80035e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035e6:	4413      	add	r3, r2
 80035e8:	2b5a      	cmp	r3, #90	; 0x5a
 80035ea:	dc1e      	bgt.n	800362a <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	f997 101b 	ldrsb.w	r1, [r7, #27]
 80035f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035f8:	440b      	add	r3, r1
 80035fa:	3b01      	subs	r3, #1
 80035fc:	493f      	ldr	r1, [pc, #252]	; (80036fc <SpiritRadioSearchChannelBwME+0x1c0>)
 80035fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003602:	4619      	mov	r1, r3
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	493d      	ldr	r1, [pc, #244]	; (8003700 <SpiritRadioSearchChannelBwME+0x1c4>)
 800360c:	fba1 1303 	umull	r1, r3, r1, r3
 8003610:	0adb      	lsrs	r3, r3, #11
 8003612:	b29b      	uxth	r3, r3
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	b29a      	uxth	r2, r3
 8003618:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800361c:	b212      	sxth	r2, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	3328      	adds	r3, #40	; 0x28
 8003622:	443b      	add	r3, r7
 8003624:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003628:	e008      	b.n	800363c <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 800362a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	3328      	adds	r3, #40	; 0x28
 8003632:	443b      	add	r3, r7
 8003634:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003638:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 800363c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003640:	3301      	adds	r3, #1
 8003642:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003646:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800364a:	2b02      	cmp	r3, #2
 800364c:	d9c0      	bls.n	80035d0 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 800364e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003652:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003654:	2300      	movs	r3, #0
 8003656:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800365a:	e026      	b.n	80036aa <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 800365c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	3328      	adds	r3, #40	; 0x28
 8003664:	443b      	add	r3, r7
 8003666:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800366a:	2b00      	cmp	r3, #0
 800366c:	bfb8      	it	lt
 800366e:	425b      	neglt	r3, r3
 8003670:	b29b      	uxth	r3, r3
 8003672:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003674:	429a      	cmp	r2, r3
 8003676:	d913      	bls.n	80036a0 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003678:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	3328      	adds	r3, #40	; 0x28
 8003680:	443b      	add	r3, r7
 8003682:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	bfb8      	it	lt
 800368a:	425b      	neglt	r3, r3
 800368c:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 800368e:	7efa      	ldrb	r2, [r7, #27]
 8003690:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003694:	4413      	add	r3, r2
 8003696:	b2db      	uxtb	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b2db      	uxtb	r3, r3
 800369c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 80036a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80036a4:	3301      	adds	r3, #1
 80036a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80036aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d9d4      	bls.n	800365c <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 80036b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036b6:	4a13      	ldr	r2, [pc, #76]	; (8003704 <SpiritRadioSearchChannelBwME+0x1c8>)
 80036b8:	fb82 1203 	smull	r1, r2, r2, r3
 80036bc:	1052      	asrs	r2, r2, #1
 80036be:	17db      	asrs	r3, r3, #31
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	b25b      	sxtb	r3, r3
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 80036ca:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 80036ce:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <SpiritRadioSearchChannelBwME+0x1c8>)
 80036d0:	fb83 1302 	smull	r1, r3, r3, r2
 80036d4:	1059      	asrs	r1, r3, #1
 80036d6:	17d3      	asrs	r3, r2, #31
 80036d8:	1ac9      	subs	r1, r1, r3
 80036da:	460b      	mov	r3, r1
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	b25b      	sxtb	r3, r3
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	701a      	strb	r2, [r3, #0]
  
}
 80036ea:	bf00      	nop
 80036ec:	3728      	adds	r7, #40	; 0x28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000268 	.word	0x20000268
 80036f8:	51eb851f 	.word	0x51eb851f
 80036fc:	0800ca10 	.word	0x0800ca10
 8003700:	c9a633fd 	.word	0xc9a633fd
 8003704:	38e38e39 	.word	0x38e38e39

08003708 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003708:	b5b0      	push	{r4, r5, r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003714:	2300      	movs	r3, #0
 8003716:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003718:	4b53      	ldr	r3, [pc, #332]	; (8003868 <SpiritRadioSearchFreqDevME+0x160>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	ee07 3a90 	vmov	s15, r3
 8003720:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003724:	eddf 6a51 	vldr	s13, [pc, #324]	; 800386c <SpiritRadioSearchFreqDevME+0x164>
 8003728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800372c:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003730:	2300      	movs	r3, #0
 8003732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003736:	e028      	b.n	800378a <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800373c:	2201      	movs	r2, #1
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	4618      	mov	r0, r3
 8003744:	f7fc feee 	bl	8000524 <__aeabi_i2d>
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	4b48      	ldr	r3, [pc, #288]	; (8003870 <SpiritRadioSearchFreqDevME+0x168>)
 800374e:	f7fc ff53 	bl	80005f8 <__aeabi_dmul>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4610      	mov	r0, r2
 8003758:	4619      	mov	r1, r3
 800375a:	f7fd f95f 	bl	8000a1c <__aeabi_d2uiz>
 800375e:	ee07 0a90 	vmov	s15, r0
 8003762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003766:	edd7 7a06 	vldr	s15, [r7, #24]
 800376a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003772:	ee17 3a90 	vmov	r3, s15
 8003776:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	429a      	cmp	r2, r3
 800377e:	d309      	bcc.n	8003794 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003784:	3301      	adds	r3, #1
 8003786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800378a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800378e:	2b09      	cmp	r3, #9
 8003790:	d9d2      	bls.n	8003738 <SpiritRadioSearchFreqDevME+0x30>
 8003792:	e000      	b.n	8003796 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003794:	bf00      	nop
  }
  (*pcE) = i;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800379c:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 800379e:	2300      	movs	r3, #0
 80037a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80037a4:	e043      	b.n	800382e <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 80037aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fc feb8 	bl	8000524 <__aeabi_i2d>
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <SpiritRadioSearchFreqDevME+0x16c>)
 80037ba:	f7fc fd67 	bl	800028c <__adddf3>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037ce:	f7fd f83d 	bl	800084c <__aeabi_ddiv>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4614      	mov	r4, r2
 80037d8:	461d      	mov	r5, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	2301      	movs	r3, #1
 80037e2:	4093      	lsls	r3, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fc fe9d 	bl	8000524 <__aeabi_i2d>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4620      	mov	r0, r4
 80037f0:	4629      	mov	r1, r5
 80037f2:	f7fc ff01 	bl	80005f8 <__aeabi_dmul>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4610      	mov	r0, r2
 80037fc:	4619      	mov	r1, r3
 80037fe:	f7fd f90d 	bl	8000a1c <__aeabi_d2uiz>
 8003802:	ee07 0a90 	vmov	s15, r0
 8003806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800380a:	edd7 7a06 	vldr	s15, [r7, #24]
 800380e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003816:	ee17 3a90 	vmov	r3, s15
 800381a:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	429a      	cmp	r2, r3
 8003822:	d309      	bcc.n	8003838 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003828:	3301      	adds	r3, #1
 800382a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800382e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003832:	2b07      	cmp	r3, #7
 8003834:	d9b7      	bls.n	80037a6 <SpiritRadioSearchFreqDevME+0x9e>
 8003836:	e000      	b.n	800383a <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003838:	bf00      	nop
  }
  
  (*pcM)=i;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003840:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	1ad2      	subs	r2, r2, r3
 8003848:	69f9      	ldr	r1, [r7, #28]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1acb      	subs	r3, r1, r3
 800384e:	429a      	cmp	r2, r3
 8003850:	d205      	bcs.n	800385e <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	3b01      	subs	r3, #1
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	701a      	strb	r2, [r3, #0]
  
}
 800385e:	bf00      	nop
 8003860:	3728      	adds	r7, #40	; 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bdb0      	pop	{r4, r5, r7, pc}
 8003866:	bf00      	nop
 8003868:	20000268 	.word	0x20000268
 800386c:	48800000 	.word	0x48800000
 8003870:	401e0000 	.word	0x401e0000
 8003874:	40200000 	.word	0x40200000

08003878 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003884:	2300      	movs	r3, #0
 8003886:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 8003888:	2300      	movs	r3, #0
 800388a:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a74      	ldr	r2, [pc, #464]	; (8003a60 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d30c      	bcc.n	80038ae <SpiritRadioGetdBm2Reg+0x36>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4a73      	ldr	r2, [pc, #460]	; (8003a64 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d808      	bhi.n	80038ae <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 800389c:	2300      	movs	r3, #0
 800389e:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a71      	ldr	r2, [pc, #452]	; (8003a68 <SpiritRadioGetdBm2Reg+0x1f0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d822      	bhi.n	80038ee <SpiritRadioGetdBm2Reg+0x76>
 80038a8:	2301      	movs	r3, #1
 80038aa:	75fb      	strb	r3, [r7, #23]
 80038ac:	e01f      	b.n	80038ee <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a6e      	ldr	r2, [pc, #440]	; (8003a6c <SpiritRadioGetdBm2Reg+0x1f4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d906      	bls.n	80038c4 <SpiritRadioGetdBm2Reg+0x4c>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4a6d      	ldr	r2, [pc, #436]	; (8003a70 <SpiritRadioGetdBm2Reg+0x1f8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d802      	bhi.n	80038c4 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 80038be:	2302      	movs	r3, #2
 80038c0:	75fb      	strb	r3, [r7, #23]
 80038c2:	e014      	b.n	80038ee <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4a6b      	ldr	r2, [pc, #428]	; (8003a74 <SpiritRadioGetdBm2Reg+0x1fc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d906      	bls.n	80038da <SpiritRadioGetdBm2Reg+0x62>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a6a      	ldr	r2, [pc, #424]	; (8003a78 <SpiritRadioGetdBm2Reg+0x200>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d802      	bhi.n	80038da <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 80038d4:	2303      	movs	r3, #3
 80038d6:	75fb      	strb	r3, [r7, #23]
 80038d8:	e009      	b.n	80038ee <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4a67      	ldr	r2, [pc, #412]	; (8003a7c <SpiritRadioGetdBm2Reg+0x204>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d905      	bls.n	80038ee <SpiritRadioGetdBm2Reg+0x76>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4a66      	ldr	r2, [pc, #408]	; (8003a80 <SpiritRadioGetdBm2Reg+0x208>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d801      	bhi.n	80038ee <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 80038ea:	2304      	movs	r3, #4
 80038ec:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 80038f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80038f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fe:	dd2f      	ble.n	8003960 <SpiritRadioGetdBm2Reg+0xe8>
 8003900:	7dfa      	ldrb	r2, [r7, #23]
 8003902:	4960      	ldr	r1, [pc, #384]	; (8003a84 <SpiritRadioGetdBm2Reg+0x20c>)
 8003904:	4613      	mov	r3, r2
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4413      	add	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	440b      	add	r3, r1
 800390e:	3308      	adds	r3, #8
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8003918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800391c:	7dfa      	ldrb	r2, [r7, #23]
 800391e:	4959      	ldr	r1, [pc, #356]	; (8003a84 <SpiritRadioGetdBm2Reg+0x20c>)
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	440b      	add	r3, r1
 800392a:	330c      	adds	r3, #12
 800392c:	ed93 6a00 	vldr	s12, [r3]
 8003930:	7dfa      	ldrb	r2, [r7, #23]
 8003932:	4954      	ldr	r1, [pc, #336]	; (8003a84 <SpiritRadioGetdBm2Reg+0x20c>)
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	440b      	add	r3, r1
 800393e:	3308      	adds	r3, #8
 8003940:	edd3 6a00 	vldr	s13, [r3]
 8003944:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800394c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003958:	dd02      	ble.n	8003960 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 800395a:	2300      	movs	r3, #0
 800395c:	75bb      	strb	r3, [r7, #22]
 800395e:	e035      	b.n	80039cc <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003960:	edd7 7a02 	vldr	s15, [r7, #8]
 8003964:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396c:	d82e      	bhi.n	80039cc <SpiritRadioGetdBm2Reg+0x154>
 800396e:	7dfa      	ldrb	r2, [r7, #23]
 8003970:	4944      	ldr	r1, [pc, #272]	; (8003a84 <SpiritRadioGetdBm2Reg+0x20c>)
 8003972:	4613      	mov	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	440b      	add	r3, r1
 800397c:	3308      	adds	r3, #8
 800397e:	edd3 7a00 	vldr	s15, [r3]
 8003982:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003a88 <SpiritRadioGetdBm2Reg+0x210>
 8003986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398a:	7dfa      	ldrb	r2, [r7, #23]
 800398c:	493d      	ldr	r1, [pc, #244]	; (8003a84 <SpiritRadioGetdBm2Reg+0x20c>)
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	440b      	add	r3, r1
 8003998:	330c      	adds	r3, #12
 800399a:	ed93 6a00 	vldr	s12, [r3]
 800399e:	7dfa      	ldrb	r2, [r7, #23]
 80039a0:	4938      	ldr	r1, [pc, #224]	; (8003a84 <SpiritRadioGetdBm2Reg+0x20c>)
 80039a2:	4613      	mov	r3, r2
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	440b      	add	r3, r1
 80039ac:	3308      	adds	r3, #8
 80039ae:	edd3 6a00 	vldr	s13, [r3]
 80039b2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80039b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80039be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c6:	d501      	bpl.n	80039cc <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 80039c8:	2302      	movs	r3, #2
 80039ca:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 80039cc:	7dfa      	ldrb	r2, [r7, #23]
 80039ce:	7dbb      	ldrb	r3, [r7, #22]
 80039d0:	0059      	lsls	r1, r3, #1
 80039d2:	482c      	ldr	r0, [pc, #176]	; (8003a84 <SpiritRadioGetdBm2Reg+0x20c>)
 80039d4:	4613      	mov	r3, r2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4413      	add	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	440b      	add	r3, r1
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4403      	add	r3, r0
 80039e2:	ed93 7a00 	vldr	s14, [r3]
 80039e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80039ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039ee:	7dfa      	ldrb	r2, [r7, #23]
 80039f0:	7dbb      	ldrb	r3, [r7, #22]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	1c59      	adds	r1, r3, #1
 80039f6:	4823      	ldr	r0, [pc, #140]	; (8003a84 <SpiritRadioGetdBm2Reg+0x20c>)
 80039f8:	4613      	mov	r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	4413      	add	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	440b      	add	r3, r1
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4403      	add	r3, r0
 8003a06:	edd3 7a00 	vldr	s15, [r3]
 8003a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a0e:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8003a12:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a22:	d503      	bpl.n	8003a2c <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8003a24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	e00a      	b.n	8003a42 <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 8003a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a30:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003a8c <SpiritRadioGetdBm2Reg+0x214>
 8003a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3c:	dd01      	ble.n	8003a42 <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 8003a3e:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <SpiritRadioGetdBm2Reg+0x218>)
 8003a40:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8003a42:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a4a:	edc7 7a01 	vstr	s15, [r7, #4]
 8003a4e:	793b      	ldrb	r3, [r7, #4]
 8003a50:	b2db      	uxtb	r3, r3
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	2e5f5680 	.word	0x2e5f5680
 8003a64:	390c2fe0 	.word	0x390c2fe0
 8003a68:	35a4e8ff 	.word	0x35a4e8ff
 8003a6c:	1701e47f 	.word	0x1701e47f
 8003a70:	1c146a60 	.word	0x1c146a60
 8003a74:	11d260bf 	.word	0x11d260bf
 8003a78:	14ced7e0 	.word	0x14ced7e0
 8003a7c:	08e18f3f 	.word	0x08e18f3f
 8003a80:	0a6fd060 	.word	0x0a6fd060
 8003a84:	0800cae4 	.word	0x0800cae4
 8003a88:	42200000 	.word	0x42200000
 8003a8c:	42b40000 	.word	0x42b40000
 8003a90:	42b40000 	.word	0x42b40000

08003a94 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	ed87 0a00 	vstr	s0, [r7]
 8003aa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003aa2:	f7ff fc4d 	bl	8003340 <SpiritRadioGetFrequencyBase>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	ed97 0a00 	vldr	s0, [r7]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fee3 	bl	8003878 <SpiritRadioGetdBm2Reg>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	f1c3 0317 	rsb	r3, r3, #23
 8003abc:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8003abe:	f107 020e 	add.w	r2, r7, #14
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fb2c 	bl	8004124 <RadioSpiWriteRegisters>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <SpiritRadioSetPALeveldBm+0x50>)
 8003ad0:	b212      	sxth	r2, r2
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	7019      	strb	r1, [r3, #0]
 8003ad6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ada:	705a      	strb	r2, [r3, #1]
  
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	2000026c 	.word	0x2000026c

08003ae8 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003af2:	f107 030f 	add.w	r3, r7, #15
 8003af6:	461a      	mov	r2, r3
 8003af8:	2101      	movs	r1, #1
 8003afa:	2018      	movs	r0, #24
 8003afc:	f000 fb5e 	bl	80041bc <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003b14:	f107 030f 	add.w	r3, r7, #15
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	2018      	movs	r0, #24
 8003b1e:	f000 fb01 	bl	8004124 <RadioSpiWriteRegisters>
 8003b22:	4602      	mov	r2, r0
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <SpiritRadioSetPACwc+0x54>)
 8003b26:	b212      	sxth	r2, r2
 8003b28:	4611      	mov	r1, r2
 8003b2a:	7019      	strb	r1, [r3, #0]
 8003b2c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b30:	705a      	strb	r2, [r3, #1]
  
}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	2000026c 	.word	0x2000026c

08003b40 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003b4a:	f107 030f 	add.w	r3, r7, #15
 8003b4e:	461a      	mov	r2, r3
 8003b50:	2101      	movs	r1, #1
 8003b52:	2018      	movs	r0, #24
 8003b54:	f000 fb32 	bl	80041bc <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	f023 0307 	bic.w	r3, r3, #7
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8003b62:	7bfa      	ldrb	r2, [r7, #15]
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003b6c:	f107 030f 	add.w	r3, r7, #15
 8003b70:	461a      	mov	r2, r3
 8003b72:	2101      	movs	r1, #1
 8003b74:	2018      	movs	r0, #24
 8003b76:	f000 fad5 	bl	8004124 <RadioSpiWriteRegisters>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003b7e:	b212      	sxth	r2, r2
 8003b80:	4611      	mov	r1, r2
 8003b82:	7019      	strb	r1, [r3, #0]
 8003b84:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b88:	705a      	strb	r2, [r3, #1]
  
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	2000026c 	.word	0x2000026c

08003b98 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003ba6:	f107 030f 	add.w	r3, r7, #15
 8003baa:	461a      	mov	r2, r3
 8003bac:	2101      	movs	r1, #1
 8003bae:	201e      	movs	r0, #30
 8003bb0:	f000 fb04 	bl	80041bc <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d105      	bne.n	8003bc6 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	73fb      	strb	r3, [r7, #15]
 8003bc4:	e004      	b.n	8003bd0 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003bd0:	f107 030f 	add.w	r3, r7, #15
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	201e      	movs	r0, #30
 8003bda:	f000 faa3 	bl	8004124 <RadioSpiWriteRegisters>
 8003bde:	4602      	mov	r2, r0
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <SpiritRadioAFCFreezeOnSync+0x60>)
 8003be2:	b212      	sxth	r2, r2
 8003be4:	4611      	mov	r1, r2
 8003be6:	7019      	strb	r1, [r3, #0]
 8003be8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003bec:	705a      	strb	r2, [r3, #1]
  
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	2000026c 	.word	0x2000026c

08003bfc <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003c06:	f107 030f 	add.w	r3, r7, #15
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	209e      	movs	r0, #158	; 0x9e
 8003c10:	f000 fad4 	bl	80041bc <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	73fb      	strb	r3, [r7, #15]
 8003c24:	e004      	b.n	8003c30 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003c30:	f107 030f 	add.w	r3, r7, #15
 8003c34:	461a      	mov	r2, r3
 8003c36:	2101      	movs	r1, #1
 8003c38:	209e      	movs	r0, #158	; 0x9e
 8003c3a:	f000 fa73 	bl	8004124 <RadioSpiWriteRegisters>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <SpiritRadioSetRefDiv+0x5c>)
 8003c42:	b212      	sxth	r2, r2
 8003c44:	4611      	mov	r1, r2
 8003c46:	7019      	strb	r1, [r3, #0]
 8003c48:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c4c:	705a      	strb	r2, [r3, #1]
  
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	2000026c 	.word	0x2000026c

08003c5c <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003c62:	1dfb      	adds	r3, r7, #7
 8003c64:	461a      	mov	r2, r3
 8003c66:	2101      	movs	r1, #1
 8003c68:	209e      	movs	r0, #158	; 0x9e
 8003c6a:	f000 faa7 	bl	80041bc <RadioSpiReadRegisters>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <SpiritRadioGetRefDiv+0x40>)
 8003c72:	b212      	sxth	r2, r2
 8003c74:	4611      	mov	r1, r2
 8003c76:	7019      	strb	r1, [r3, #0]
 8003c78:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c7c:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	09db      	lsrs	r3, r3, #7
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003c90:	2300      	movs	r3, #0
  }
  
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	2000026c 	.word	0x2000026c

08003ca0 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003caa:	f107 030f 	add.w	r3, r7, #15
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	20b4      	movs	r0, #180	; 0xb4
 8003cb4:	f000 fa82 	bl	80041bc <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d105      	bne.n	8003cca <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	f023 0308 	bic.w	r3, r3, #8
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	73fb      	strb	r3, [r7, #15]
 8003cc8:	e004      	b.n	8003cd4 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	f043 0308 	orr.w	r3, r3, #8
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003cd4:	f107 030f 	add.w	r3, r7, #15
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2101      	movs	r1, #1
 8003cdc:	20b4      	movs	r0, #180	; 0xb4
 8003cde:	f000 fa21 	bl	8004124 <RadioSpiWriteRegisters>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <SpiritRadioSetDigDiv+0x5c>)
 8003ce6:	b212      	sxth	r2, r2
 8003ce8:	4611      	mov	r1, r2
 8003cea:	7019      	strb	r1, [r3, #0]
 8003cec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003cf0:	705a      	strb	r2, [r3, #1]
  
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	2000026c 	.word	0x2000026c

08003d00 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003d06:	1dfb      	adds	r3, r7, #7
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	20b4      	movs	r0, #180	; 0xb4
 8003d0e:	f000 fa55 	bl	80041bc <RadioSpiReadRegisters>
 8003d12:	4602      	mov	r2, r0
 8003d14:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <SpiritRadioGetDigDiv+0x40>)
 8003d16:	b212      	sxth	r2, r2
 8003d18:	4611      	mov	r1, r2
 8003d1a:	7019      	strb	r1, [r3, #0]
 8003d1c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d20:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	08db      	lsrs	r3, r3, #3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e000      	b.n	8003d36 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003d34:	2301      	movs	r3, #1
  }
  
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	2000026c 	.word	0x2000026c

08003d44 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <SpiritRadioGetXtalFrequency+0x14>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20000268 	.word	0x20000268

08003d5c <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8003d64:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <SpiritRadioSetXtalFrequency+0x1c>)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6013      	str	r3, [r2, #0]
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000268 	.word	0x20000268

08003d7c <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 8003d86:	f107 020c 	add.w	r2, r7, #12
 8003d8a:	f107 030c 	add.w	r3, r7, #12
 8003d8e:	3301      	adds	r3, #1
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	ed97 0a01 	vldr	s0, [r7, #4]
 8003d98:	f000 f816 	bl	8003dc8 <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 8003d9c:	f107 030c 	add.w	r3, r7, #12
 8003da0:	461a      	mov	r2, r3
 8003da2:	2102      	movs	r1, #2
 8003da4:	2053      	movs	r0, #83	; 0x53
 8003da6:	f000 f9bd 	bl	8004124 <RadioSpiWriteRegisters>
 8003daa:	4602      	mov	r2, r0
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <SpiritTimerSetRxTimeoutMs+0x48>)
 8003dae:	b212      	sxth	r2, r2
 8003db0:	4611      	mov	r1, r2
 8003db2:	7019      	strb	r1, [r3, #0]
 8003db4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003db8:	705a      	strb	r2, [r3, #1]

}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	2000026c 	.word	0x2000026c

08003dc8 <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	ed87 0a03 	vstr	s0, [r7, #12]
 8003dd2:	60b8      	str	r0, [r7, #8]
 8003dd4:	6079      	str	r1, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 8003dd6:	f7ff ffb5 	bl	8003d44 <SpiritRadioGetXtalFrequency>
 8003dda:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	4a91      	ldr	r2, [pc, #580]	; (8004024 <SpiritTimerComputeRxTimeoutValues+0x25c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d902      	bls.n	8003dea <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	ee07 3a90 	vmov	s15, r3
 8003df0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003df4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003df8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dfc:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8004028 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e08:	ee17 3a90 	vmov	r3, s15
 8003e0c:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	f64f 5201 	movw	r2, #64769	; 0xfd01
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d906      	bls.n	8003e26 <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	22ff      	movs	r2, #255	; 0xff
 8003e1c:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	22ff      	movs	r2, #255	; 0xff
 8003e22:	701a      	strb	r2, [r3, #0]
    return;
 8003e24:	e0fa      	b.n	800401c <SpiritTimerComputeRxTimeoutValues+0x254>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	4a80      	ldr	r2, [pc, #512]	; (800402c <SpiritTimerComputeRxTimeoutValues+0x264>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	09db      	lsrs	r3, r3, #7
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	3302      	adds	r3, #2
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	ee07 3a90 	vmov	s15, r3
 8003e54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	ee07 3a90 	vmov	s15, r3
 8003e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e68:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8004028 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003e6c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8e:	dd1d      	ble.n	8003ecc <SpiritTimerComputeRxTimeoutValues+0x104>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	ee07 3a90 	vmov	s15, r3
 8003ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eac:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004028 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003eb0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ec2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eca:	e01e      	b.n	8003f0a <SpiritTimerComputeRxTimeoutValues+0x142>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	ee07 3a90 	vmov	s15, r3
 8003ed4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	ee07 3a90 	vmov	s15, r3
 8003ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004028 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003eec:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f06:	eef1 7a67 	vneg.f32	s15, s15
 8003f0a:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if((*pcCounter)<=254)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2bff      	cmp	r3, #255	; 0xff
 8003f14:	d06e      	beq.n	8003ff4 <SpiritTimerComputeRxTimeoutValues+0x22c>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	ee07 3a90 	vmov	s15, r3
 8003f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	ee07 3a90 	vmov	s15, r3
 8003f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f34:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004028 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003f38:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5a:	dd1e      	ble.n	8003f9a <SpiritTimerComputeRxTimeoutValues+0x1d2>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	3301      	adds	r3, #1
 8003f62:	ee07 3a90 	vmov	s15, r3
 8003f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004028 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003f7e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f90:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f98:	e01f      	b.n	8003fda <SpiritTimerComputeRxTimeoutValues+0x212>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	ee07 3a90 	vmov	s15, r3
 8003fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004028 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003fbc:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fce:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fd6:	eef1 7a67 	vneg.f32	s15, s15
 8003fda:	ed97 7a05 	vldr	s14, [r7, #20]
 8003fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe6:	d505      	bpl.n	8003ff4 <SpiritTimerComputeRxTimeoutValues+0x22c>
      (*pcCounter)=(*pcCounter)+1;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d906      	bls.n	8004016 <SpiritTimerComputeRxTimeoutValues+0x24e>
    (*pcCounter)--;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	3b01      	subs	r3, #1
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e002      	b.n	800401c <SpiritTimerComputeRxTimeoutValues+0x254>
  else
    (*pcCounter)=1;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
}
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	01c9c380 	.word	0x01c9c380
 8004028:	4993b480 	.word	0x4993b480
 800402c:	80808081 	.word	0x80808081

08004030 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 800403a:	f107 030c 	add.w	r3, r7, #12
 800403e:	461a      	mov	r2, r3
 8004040:	2102      	movs	r1, #2
 8004042:	204f      	movs	r0, #79	; 0x4f
 8004044:	f000 f8ba 	bl	80041bc <RadioSpiReadRegisters>
 8004048:	4602      	mov	r2, r0
 800404a:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 800404c:	b212      	sxth	r2, r2
 800404e:	4611      	mov	r1, r2
 8004050:	7019      	strb	r1, [r3, #0]
 8004052:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004056:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8004058:	7b3b      	ldrb	r3, [r7, #12]
 800405a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800405e:	b2db      	uxtb	r3, r3
 8004060:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8004062:	7b3b      	ldrb	r3, [r7, #12]
 8004064:	b25a      	sxtb	r2, r3
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	b25b      	sxtb	r3, r3
 800406c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004070:	b25b      	sxtb	r3, r3
 8004072:	4313      	orrs	r3, r2
 8004074:	b25b      	sxtb	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 800407a:	7b7b      	ldrb	r3, [r7, #13]
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	b2db      	uxtb	r3, r3
 8004082:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8004084:	7b7b      	ldrb	r3, [r7, #13]
 8004086:	b25a      	sxtb	r2, r3
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	015b      	lsls	r3, r3, #5
 800408c:	b25b      	sxtb	r3, r3
 800408e:	4313      	orrs	r3, r2
 8004090:	b25b      	sxtb	r3, r3
 8004092:	b2db      	uxtb	r3, r3
 8004094:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004096:	f107 030c 	add.w	r3, r7, #12
 800409a:	461a      	mov	r2, r3
 800409c:	2102      	movs	r1, #2
 800409e:	204f      	movs	r0, #79	; 0x4f
 80040a0:	f000 f840 	bl	8004124 <RadioSpiWriteRegisters>
 80040a4:	4602      	mov	r2, r0
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 80040a8:	b212      	sxth	r2, r2
 80040aa:	4611      	mov	r1, r2
 80040ac:	7019      	strb	r1, [r3, #0]
 80040ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80040b2:	705a      	strb	r2, [r3, #1]

}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	2000026c 	.word	0x2000026c

080040c0 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	461a      	mov	r2, r3
 80040ca:	2102      	movs	r1, #2
 80040cc:	20c0      	movs	r0, #192	; 0xc0
 80040ce:	f000 f875 	bl	80041bc <RadioSpiReadRegisters>
 80040d2:	4603      	mov	r3, r0
 80040d4:	4a09      	ldr	r2, [pc, #36]	; (80040fc <SpiritRefreshStatus+0x3c>)
 80040d6:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 80040d8:	4b08      	ldr	r3, [pc, #32]	; (80040fc <SpiritRefreshStatus+0x3c>)
 80040da:	781a      	ldrb	r2, [r3, #0]
 80040dc:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 80040de:	429a      	cmp	r2, r3
 80040e0:	d1f1      	bne.n	80040c6 <SpiritRefreshStatus+0x6>
 80040e2:	4b07      	ldr	r3, [pc, #28]	; (8004100 <SpiritRefreshStatus+0x40>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d1ea      	bne.n	80040c6 <SpiritRefreshStatus+0x6>

}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	2000026c 	.word	0x2000026c
 8004100:	2000026d 	.word	0x2000026d

08004104 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <RadioSpiInit+0x1c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <RadioSpiInit+0x16>
  {
    Error_Handler();
 8004116:	f7fd f939 	bl	800138c <Error_Handler>
  }
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000008 	.word	0x20000008

08004124 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af02      	add	r7, sp, #8
 800412a:	4603      	mov	r3, r0
 800412c:	603a      	str	r2, [r7, #0]
 800412e:	71fb      	strb	r3, [r7, #7]
 8004130:	460b      	mov	r3, r1
 8004132:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 8004134:	2300      	movs	r3, #0
 8004136:	743b      	strb	r3, [r7, #16]
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800413c:	2017      	movs	r0, #23
 800413e:	f000 fadd 	bl	80046fc <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 8004142:	2200      	movs	r2, #0
 8004144:	2140      	movs	r1, #64	; 0x40
 8004146:	481b      	ldr	r0, [pc, #108]	; (80041b4 <RadioSpiWriteRegisters+0x90>)
 8004148:	f000 fc90 	bl	8004a6c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800414c:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <RadioSpiWriteRegisters+0x94>)
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	f107 020c 	add.w	r2, r7, #12
 8004154:	f107 0110 	add.w	r1, r7, #16
 8004158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	2302      	movs	r3, #2
 8004160:	f002 fb47 	bl	80067f2 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004164:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <RadioSpiWriteRegisters+0x94>)
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	79bb      	ldrb	r3, [r7, #6]
 800416a:	b29a      	uxth	r2, r3
 800416c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004170:	6839      	ldr	r1, [r7, #0]
 8004172:	f002 f8a0 	bl	80062b6 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004176:	2201      	movs	r2, #1
 8004178:	2140      	movs	r1, #64	; 0x40
 800417a:	480e      	ldr	r0, [pc, #56]	; (80041b4 <RadioSpiWriteRegisters+0x90>)
 800417c:	f000 fc76 	bl	8004a6c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004180:	2017      	movs	r0, #23
 8004182:	f000 faad 	bl	80046e0 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004186:	f107 0308 	add.w	r3, r7, #8
 800418a:	3301      	adds	r3, #1
 800418c:	7b3a      	ldrb	r2, [r7, #12]
 800418e:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004190:	f107 0308 	add.w	r3, r7, #8
 8004194:	7b7a      	ldrb	r2, [r7, #13]
 8004196:	701a      	strb	r2, [r3, #0]

  return status;
 8004198:	893b      	ldrh	r3, [r7, #8]
 800419a:	82bb      	strh	r3, [r7, #20]
 800419c:	2300      	movs	r3, #0
 800419e:	7d3a      	ldrb	r2, [r7, #20]
 80041a0:	f362 0307 	bfi	r3, r2, #0, #8
 80041a4:	7d7a      	ldrb	r2, [r7, #21]
 80041a6:	f362 230f 	bfi	r3, r2, #8, #8

}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	48000400 	.word	0x48000400
 80041b8:	20000008 	.word	0x20000008

080041bc <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	4603      	mov	r3, r0
 80041c4:	603a      	str	r2, [r7, #0]
 80041c6:	71fb      	strb	r3, [r7, #7]
 80041c8:	460b      	mov	r3, r1
 80041ca:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 80041cc:	2301      	movs	r3, #1
 80041ce:	743b      	strb	r3, [r7, #16]
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80041d4:	2017      	movs	r0, #23
 80041d6:	f000 fa91 	bl	80046fc <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80041da:	2200      	movs	r2, #0
 80041dc:	2140      	movs	r1, #64	; 0x40
 80041de:	481b      	ldr	r0, [pc, #108]	; (800424c <RadioSpiReadRegisters+0x90>)
 80041e0:	f000 fc44 	bl	8004a6c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80041e4:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <RadioSpiReadRegisters+0x94>)
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	f107 020c 	add.w	r2, r7, #12
 80041ec:	f107 0110 	add.w	r1, r7, #16
 80041f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	2302      	movs	r3, #2
 80041f8:	f002 fafb 	bl	80067f2 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80041fc:	4b14      	ldr	r3, [pc, #80]	; (8004250 <RadioSpiReadRegisters+0x94>)
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	79bb      	ldrb	r3, [r7, #6]
 8004202:	b29a      	uxth	r2, r3
 8004204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004208:	6839      	ldr	r1, [r7, #0]
 800420a:	f002 f9c2 	bl	8006592 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800420e:	2201      	movs	r2, #1
 8004210:	2140      	movs	r1, #64	; 0x40
 8004212:	480e      	ldr	r0, [pc, #56]	; (800424c <RadioSpiReadRegisters+0x90>)
 8004214:	f000 fc2a 	bl	8004a6c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004218:	2017      	movs	r0, #23
 800421a:	f000 fa61 	bl	80046e0 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800421e:	f107 0308 	add.w	r3, r7, #8
 8004222:	3301      	adds	r3, #1
 8004224:	7b3a      	ldrb	r2, [r7, #12]
 8004226:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004228:	f107 0308 	add.w	r3, r7, #8
 800422c:	7b7a      	ldrb	r2, [r7, #13]
 800422e:	701a      	strb	r2, [r3, #0]

  return status;
 8004230:	893b      	ldrh	r3, [r7, #8]
 8004232:	82bb      	strh	r3, [r7, #20]
 8004234:	2300      	movs	r3, #0
 8004236:	7d3a      	ldrb	r2, [r7, #20]
 8004238:	f362 0307 	bfi	r3, r2, #0, #8
 800423c:	7d7a      	ldrb	r2, [r7, #21]
 800423e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	48000400 	.word	0x48000400
 8004250:	20000008 	.word	0x20000008

08004254 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af02      	add	r7, sp, #8
 800425a:	4603      	mov	r3, r0
 800425c:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 800425e:	2380      	movs	r3, #128	; 0x80
 8004260:	743b      	strb	r3, [r7, #16]
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004266:	2017      	movs	r0, #23
 8004268:	f000 fa48 	bl	80046fc <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800426c:	2200      	movs	r2, #0
 800426e:	2140      	movs	r1, #64	; 0x40
 8004270:	4816      	ldr	r0, [pc, #88]	; (80042cc <RadioSpiCommandStrobes+0x78>)
 8004272:	f000 fbfb 	bl	8004a6c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004276:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <RadioSpiCommandStrobes+0x7c>)
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	f107 020c 	add.w	r2, r7, #12
 800427e:	f107 0110 	add.w	r1, r7, #16
 8004282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	2302      	movs	r3, #2
 800428a:	f002 fab2 	bl	80067f2 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800428e:	2201      	movs	r2, #1
 8004290:	2140      	movs	r1, #64	; 0x40
 8004292:	480e      	ldr	r0, [pc, #56]	; (80042cc <RadioSpiCommandStrobes+0x78>)
 8004294:	f000 fbea 	bl	8004a6c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004298:	2017      	movs	r0, #23
 800429a:	f000 fa21 	bl	80046e0 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800429e:	f107 0308 	add.w	r3, r7, #8
 80042a2:	3301      	adds	r3, #1
 80042a4:	7b3a      	ldrb	r2, [r7, #12]
 80042a6:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80042a8:	f107 0308 	add.w	r3, r7, #8
 80042ac:	7b7a      	ldrb	r2, [r7, #13]
 80042ae:	701a      	strb	r2, [r3, #0]

  return status;
 80042b0:	893b      	ldrh	r3, [r7, #8]
 80042b2:	82bb      	strh	r3, [r7, #20]
 80042b4:	2300      	movs	r3, #0
 80042b6:	7d3a      	ldrb	r2, [r7, #20]
 80042b8:	f362 0307 	bfi	r3, r2, #0, #8
 80042bc:	7d7a      	ldrb	r2, [r7, #21]
 80042be:	f362 230f 	bfi	r3, r2, #8, #8
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	48000400 	.word	0x48000400
 80042d0:	20000008 	.word	0x20000008

080042d4 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af02      	add	r7, sp, #8
 80042da:	4603      	mov	r3, r0
 80042dc:	6039      	str	r1, [r7, #0]
 80042de:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 80042e0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80042e4:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80042e6:	2017      	movs	r0, #23
 80042e8:	f000 fa08 	bl	80046fc <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80042ec:	2200      	movs	r2, #0
 80042ee:	2140      	movs	r1, #64	; 0x40
 80042f0:	481a      	ldr	r0, [pc, #104]	; (800435c <RadioSpiWriteFifo+0x88>)
 80042f2:	f000 fbbb 	bl	8004a6c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80042f6:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <RadioSpiWriteFifo+0x8c>)
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	f107 020c 	add.w	r2, r7, #12
 80042fe:	f107 0110 	add.w	r1, r7, #16
 8004302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	2302      	movs	r3, #2
 800430a:	f002 fa72 	bl	80067f2 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800430e:	4b14      	ldr	r3, [pc, #80]	; (8004360 <RadioSpiWriteFifo+0x8c>)
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	b29a      	uxth	r2, r3
 8004316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800431a:	6839      	ldr	r1, [r7, #0]
 800431c:	f001 ffcb 	bl	80062b6 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004320:	2201      	movs	r2, #1
 8004322:	2140      	movs	r1, #64	; 0x40
 8004324:	480d      	ldr	r0, [pc, #52]	; (800435c <RadioSpiWriteFifo+0x88>)
 8004326:	f000 fba1 	bl	8004a6c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800432a:	2017      	movs	r0, #23
 800432c:	f000 f9d8 	bl	80046e0 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004330:	f107 0308 	add.w	r3, r7, #8
 8004334:	3301      	adds	r3, #1
 8004336:	7b3a      	ldrb	r2, [r7, #12]
 8004338:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 800433a:	f107 0308 	add.w	r3, r7, #8
 800433e:	7b7a      	ldrb	r2, [r7, #13]
 8004340:	701a      	strb	r2, [r3, #0]

  return status;
 8004342:	893b      	ldrh	r3, [r7, #8]
 8004344:	82bb      	strh	r3, [r7, #20]
 8004346:	2300      	movs	r3, #0
 8004348:	7d3a      	ldrb	r2, [r7, #20]
 800434a:	f362 0307 	bfi	r3, r2, #0, #8
 800434e:	7d7a      	ldrb	r2, [r7, #21]
 8004350:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	48000400 	.word	0x48000400
 8004360:	20000008 	.word	0x20000008

08004364 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af02      	add	r7, sp, #8
 800436a:	4603      	mov	r3, r0
 800436c:	6039      	str	r1, [r7, #0]
 800436e:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 8004370:	f64f 7301 	movw	r3, #65281	; 0xff01
 8004374:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004376:	2017      	movs	r0, #23
 8004378:	f000 f9c0 	bl	80046fc <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800437c:	2200      	movs	r2, #0
 800437e:	2140      	movs	r1, #64	; 0x40
 8004380:	481a      	ldr	r0, [pc, #104]	; (80043ec <RadioSpiReadFifo+0x88>)
 8004382:	f000 fb73 	bl	8004a6c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004386:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <RadioSpiReadFifo+0x8c>)
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	f107 020c 	add.w	r2, r7, #12
 800438e:	f107 0110 	add.w	r1, r7, #16
 8004392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	2302      	movs	r3, #2
 800439a:	f002 fa2a 	bl	80067f2 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800439e:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <RadioSpiReadFifo+0x8c>)
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043aa:	6839      	ldr	r1, [r7, #0]
 80043ac:	f002 f8f1 	bl	8006592 <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 80043b0:	2201      	movs	r2, #1
 80043b2:	2140      	movs	r1, #64	; 0x40
 80043b4:	480d      	ldr	r0, [pc, #52]	; (80043ec <RadioSpiReadFifo+0x88>)
 80043b6:	f000 fb59 	bl	8004a6c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80043ba:	2017      	movs	r0, #23
 80043bc:	f000 f990 	bl	80046e0 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80043c0:	f107 0308 	add.w	r3, r7, #8
 80043c4:	3301      	adds	r3, #1
 80043c6:	7b3a      	ldrb	r2, [r7, #12]
 80043c8:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80043ca:	f107 0308 	add.w	r3, r7, #8
 80043ce:	7b7a      	ldrb	r2, [r7, #13]
 80043d0:	701a      	strb	r2, [r3, #0]

  return status;
 80043d2:	893b      	ldrh	r3, [r7, #8]
 80043d4:	82bb      	strh	r3, [r7, #20]
 80043d6:	2300      	movs	r3, #0
 80043d8:	7d3a      	ldrb	r2, [r7, #20]
 80043da:	f362 0307 	bfi	r3, r2, #0, #8
 80043de:	7d7a      	ldrb	r2, [r7, #21]
 80043e0:	f362 230f 	bfi	r3, r2, #8, #8
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	48000400 	.word	0x48000400
 80043f0:	20000008 	.word	0x20000008

080043f4 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 80043f8:	2201      	movs	r2, #1
 80043fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004402:	f000 fb33 	bl	8004a6c <HAL_GPIO_WritePin>
}
 8004406:	bf00      	nop
 8004408:	bd80      	pop	{r7, pc}

0800440a <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 800440e:	2200      	movs	r2, #0
 8004410:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004418:	f000 fb28 	bl	8004a6c <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 800441c:	2001      	movs	r0, #1
 800441e:	f000 f843 	bl	80044a8 <HAL_Delay>
}
 8004422:	bf00      	nop
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004432:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <HAL_Init+0x3c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a0b      	ldr	r2, [pc, #44]	; (8004464 <HAL_Init+0x3c>)
 8004438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800443e:	2003      	movs	r0, #3
 8004440:	f000 f927 	bl	8004692 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004444:	200f      	movs	r0, #15
 8004446:	f7fd f95b 	bl	8001700 <HAL_InitTick>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	71fb      	strb	r3, [r7, #7]
 8004454:	e001      	b.n	800445a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004456:	f7fd f92b 	bl	80016b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800445a:	79fb      	ldrb	r3, [r7, #7]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40022000 	.word	0x40022000

08004468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_IncTick+0x20>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <HAL_IncTick+0x24>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4413      	add	r3, r2
 8004478:	4a04      	ldr	r2, [pc, #16]	; (800448c <HAL_IncTick+0x24>)
 800447a:	6013      	str	r3, [r2, #0]
}
 800447c:	bf00      	nop
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000010 	.word	0x20000010
 800448c:	20000270 	.word	0x20000270

08004490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return uwTick;
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <HAL_GetTick+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000270 	.word	0x20000270

080044a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044b0:	f7ff ffee 	bl	8004490 <HAL_GetTick>
 80044b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c0:	d005      	beq.n	80044ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_Delay+0x44>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044ce:	bf00      	nop
 80044d0:	f7ff ffde 	bl	8004490 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d8f7      	bhi.n	80044d0 <HAL_Delay+0x28>
  {
  }
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000010 	.word	0x20000010

080044f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <__NVIC_SetPriorityGrouping+0x44>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800450c:	4013      	ands	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800451c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004522:	4a04      	ldr	r2, [pc, #16]	; (8004534 <__NVIC_SetPriorityGrouping+0x44>)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	60d3      	str	r3, [r2, #12]
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <__NVIC_GetPriorityGrouping+0x18>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	0a1b      	lsrs	r3, r3, #8
 8004542:	f003 0307 	and.w	r3, r3, #7
}
 8004546:	4618      	mov	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	2b00      	cmp	r3, #0
 8004564:	db0b      	blt.n	800457e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	f003 021f 	and.w	r2, r3, #31
 800456c:	4907      	ldr	r1, [pc, #28]	; (800458c <__NVIC_EnableIRQ+0x38>)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2001      	movs	r0, #1
 8004576:	fa00 f202 	lsl.w	r2, r0, r2
 800457a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	e000e100 	.word	0xe000e100

08004590 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	db12      	blt.n	80045c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	f003 021f 	and.w	r2, r3, #31
 80045a8:	490a      	ldr	r1, [pc, #40]	; (80045d4 <__NVIC_DisableIRQ+0x44>)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	2001      	movs	r0, #1
 80045b2:	fa00 f202 	lsl.w	r2, r0, r2
 80045b6:	3320      	adds	r3, #32
 80045b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045bc:	f3bf 8f4f 	dsb	sy
}
 80045c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80045c2:	f3bf 8f6f 	isb	sy
}
 80045c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	e000e100 	.word	0xe000e100

080045d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	6039      	str	r1, [r7, #0]
 80045e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	db0a      	blt.n	8004602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	490c      	ldr	r1, [pc, #48]	; (8004624 <__NVIC_SetPriority+0x4c>)
 80045f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f6:	0112      	lsls	r2, r2, #4
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	440b      	add	r3, r1
 80045fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004600:	e00a      	b.n	8004618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	4908      	ldr	r1, [pc, #32]	; (8004628 <__NVIC_SetPriority+0x50>)
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	3b04      	subs	r3, #4
 8004610:	0112      	lsls	r2, r2, #4
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	440b      	add	r3, r1
 8004616:	761a      	strb	r2, [r3, #24]
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	e000e100 	.word	0xe000e100
 8004628:	e000ed00 	.word	0xe000ed00

0800462c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800462c:	b480      	push	{r7}
 800462e:	b089      	sub	sp, #36	; 0x24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f1c3 0307 	rsb	r3, r3, #7
 8004646:	2b04      	cmp	r3, #4
 8004648:	bf28      	it	cs
 800464a:	2304      	movcs	r3, #4
 800464c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3304      	adds	r3, #4
 8004652:	2b06      	cmp	r3, #6
 8004654:	d902      	bls.n	800465c <NVIC_EncodePriority+0x30>
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3b03      	subs	r3, #3
 800465a:	e000      	b.n	800465e <NVIC_EncodePriority+0x32>
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43da      	mvns	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	401a      	ands	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004674:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	fa01 f303 	lsl.w	r3, r1, r3
 800467e:	43d9      	mvns	r1, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004684:	4313      	orrs	r3, r2
         );
}
 8004686:	4618      	mov	r0, r3
 8004688:	3724      	adds	r7, #36	; 0x24
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff ff28 	bl	80044f0 <__NVIC_SetPriorityGrouping>
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046ba:	f7ff ff3d 	bl	8004538 <__NVIC_GetPriorityGrouping>
 80046be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	6978      	ldr	r0, [r7, #20]
 80046c6:	f7ff ffb1 	bl	800462c <NVIC_EncodePriority>
 80046ca:	4602      	mov	r2, r0
 80046cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d0:	4611      	mov	r1, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff ff80 	bl	80045d8 <__NVIC_SetPriority>
}
 80046d8:	bf00      	nop
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff ff30 	bl	8004554 <__NVIC_EnableIRQ>
}
 80046f4:	bf00      	nop
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff ff40 	bl	8004590 <__NVIC_DisableIRQ>
}
 8004710:	bf00      	nop
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004726:	e17f      	b.n	8004a28 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	2101      	movs	r1, #1
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	fa01 f303 	lsl.w	r3, r1, r3
 8004734:	4013      	ands	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8171 	beq.w	8004a22 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d005      	beq.n	8004758 <HAL_GPIO_Init+0x40>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d130      	bne.n	80047ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	2203      	movs	r2, #3
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4013      	ands	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800478e:	2201      	movs	r2, #1
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4013      	ands	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	091b      	lsrs	r3, r3, #4
 80047a4:	f003 0201 	and.w	r2, r3, #1
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d118      	bne.n	80047f8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80047cc:	2201      	movs	r2, #1
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	43db      	mvns	r3, r3
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4013      	ands	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	08db      	lsrs	r3, r3, #3
 80047e2:	f003 0201 	and.w	r2, r3, #1
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	2b03      	cmp	r3, #3
 8004802:	d017      	beq.n	8004834 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	2203      	movs	r2, #3
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	43db      	mvns	r3, r3
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4013      	ands	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d123      	bne.n	8004888 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	08da      	lsrs	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3208      	adds	r2, #8
 8004848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800484c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	220f      	movs	r2, #15
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	43db      	mvns	r3, r3
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4013      	ands	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	08da      	lsrs	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3208      	adds	r2, #8
 8004882:	6939      	ldr	r1, [r7, #16]
 8004884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	2203      	movs	r2, #3
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4013      	ands	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 0203 	and.w	r2, r3, #3
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80ac 	beq.w	8004a22 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ca:	4b5f      	ldr	r3, [pc, #380]	; (8004a48 <HAL_GPIO_Init+0x330>)
 80048cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ce:	4a5e      	ldr	r2, [pc, #376]	; (8004a48 <HAL_GPIO_Init+0x330>)
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	6613      	str	r3, [r2, #96]	; 0x60
 80048d6:	4b5c      	ldr	r3, [pc, #368]	; (8004a48 <HAL_GPIO_Init+0x330>)
 80048d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	60bb      	str	r3, [r7, #8]
 80048e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80048e2:	4a5a      	ldr	r2, [pc, #360]	; (8004a4c <HAL_GPIO_Init+0x334>)
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	3302      	adds	r3, #2
 80048ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	220f      	movs	r2, #15
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43db      	mvns	r3, r3
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4013      	ands	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800490c:	d025      	beq.n	800495a <HAL_GPIO_Init+0x242>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a4f      	ldr	r2, [pc, #316]	; (8004a50 <HAL_GPIO_Init+0x338>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01f      	beq.n	8004956 <HAL_GPIO_Init+0x23e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a4e      	ldr	r2, [pc, #312]	; (8004a54 <HAL_GPIO_Init+0x33c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d019      	beq.n	8004952 <HAL_GPIO_Init+0x23a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a4d      	ldr	r2, [pc, #308]	; (8004a58 <HAL_GPIO_Init+0x340>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <HAL_GPIO_Init+0x236>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a4c      	ldr	r2, [pc, #304]	; (8004a5c <HAL_GPIO_Init+0x344>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00d      	beq.n	800494a <HAL_GPIO_Init+0x232>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a4b      	ldr	r2, [pc, #300]	; (8004a60 <HAL_GPIO_Init+0x348>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <HAL_GPIO_Init+0x22e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a4a      	ldr	r2, [pc, #296]	; (8004a64 <HAL_GPIO_Init+0x34c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d101      	bne.n	8004942 <HAL_GPIO_Init+0x22a>
 800493e:	2306      	movs	r3, #6
 8004940:	e00c      	b.n	800495c <HAL_GPIO_Init+0x244>
 8004942:	2307      	movs	r3, #7
 8004944:	e00a      	b.n	800495c <HAL_GPIO_Init+0x244>
 8004946:	2305      	movs	r3, #5
 8004948:	e008      	b.n	800495c <HAL_GPIO_Init+0x244>
 800494a:	2304      	movs	r3, #4
 800494c:	e006      	b.n	800495c <HAL_GPIO_Init+0x244>
 800494e:	2303      	movs	r3, #3
 8004950:	e004      	b.n	800495c <HAL_GPIO_Init+0x244>
 8004952:	2302      	movs	r3, #2
 8004954:	e002      	b.n	800495c <HAL_GPIO_Init+0x244>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <HAL_GPIO_Init+0x244>
 800495a:	2300      	movs	r3, #0
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	f002 0203 	and.w	r2, r2, #3
 8004962:	0092      	lsls	r2, r2, #2
 8004964:	4093      	lsls	r3, r2
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800496c:	4937      	ldr	r1, [pc, #220]	; (8004a4c <HAL_GPIO_Init+0x334>)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	089b      	lsrs	r3, r3, #2
 8004972:	3302      	adds	r3, #2
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800497a:	4b3b      	ldr	r3, [pc, #236]	; (8004a68 <HAL_GPIO_Init+0x350>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	43db      	mvns	r3, r3
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4013      	ands	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800499e:	4a32      	ldr	r2, [pc, #200]	; (8004a68 <HAL_GPIO_Init+0x350>)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049a4:	4b30      	ldr	r3, [pc, #192]	; (8004a68 <HAL_GPIO_Init+0x350>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4013      	ands	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049c8:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <HAL_GPIO_Init+0x350>)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80049ce:	4b26      	ldr	r3, [pc, #152]	; (8004a68 <HAL_GPIO_Init+0x350>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	43db      	mvns	r3, r3
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4013      	ands	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049f2:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <HAL_GPIO_Init+0x350>)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80049f8:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <HAL_GPIO_Init+0x350>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	43db      	mvns	r3, r3
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4013      	ands	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a1c:	4a12      	ldr	r2, [pc, #72]	; (8004a68 <HAL_GPIO_Init+0x350>)
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	3301      	adds	r3, #1
 8004a26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f47f ae78 	bne.w	8004728 <HAL_GPIO_Init+0x10>
  }
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	48000400 	.word	0x48000400
 8004a54:	48000800 	.word	0x48000800
 8004a58:	48000c00 	.word	0x48000c00
 8004a5c:	48001000 	.word	0x48001000
 8004a60:	48001400 	.word	0x48001400
 8004a64:	48001800 	.word	0x48001800
 8004a68:	40010400 	.word	0x40010400

08004a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a7c:	787b      	ldrb	r3, [r7, #1]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a82:	887a      	ldrh	r2, [r7, #2]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a88:	e002      	b.n	8004a90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a8a:	887a      	ldrh	r2, [r7, #2]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004aa6:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aa8:	695a      	ldr	r2, [r3, #20]
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d006      	beq.n	8004ac0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ab2:	4a05      	ldr	r2, [pc, #20]	; (8004ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ab4:	88fb      	ldrh	r3, [r7, #6]
 8004ab6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ab8:	88fb      	ldrh	r3, [r7, #6]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fc fc16 	bl	80012ec <HAL_GPIO_EXTI_Callback>
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40010400 	.word	0x40010400

08004acc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ad0:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40007000 	.word	0x40007000

08004ae8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af6:	d130      	bne.n	8004b5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004af8:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b04:	d038      	beq.n	8004b78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b06:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b0e:	4a1e      	ldr	r2, [pc, #120]	; (8004b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b16:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2232      	movs	r2, #50	; 0x32
 8004b1c:	fb02 f303 	mul.w	r3, r2, r3
 8004b20:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	0c9b      	lsrs	r3, r3, #18
 8004b28:	3301      	adds	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b2c:	e002      	b.n	8004b34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b34:	4b14      	ldr	r3, [pc, #80]	; (8004b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b40:	d102      	bne.n	8004b48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f2      	bne.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b48:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b54:	d110      	bne.n	8004b78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e00f      	b.n	8004b7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b66:	d007      	beq.n	8004b78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b68:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b70:	4a05      	ldr	r2, [pc, #20]	; (8004b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40007000 	.word	0x40007000
 8004b8c:	20000000 	.word	0x20000000
 8004b90:	431bde83 	.word	0x431bde83

08004b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e3ca      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba6:	4b97      	ldr	r3, [pc, #604]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bb0:	4b94      	ldr	r3, [pc, #592]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 80e4 	beq.w	8004d90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <HAL_RCC_OscConfig+0x4a>
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b0c      	cmp	r3, #12
 8004bd2:	f040 808b 	bne.w	8004cec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	f040 8087 	bne.w	8004cec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bde:	4b89      	ldr	r3, [pc, #548]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x62>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e3a2      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1a      	ldr	r2, [r3, #32]
 8004bfa:	4b82      	ldr	r3, [pc, #520]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d004      	beq.n	8004c10 <HAL_RCC_OscConfig+0x7c>
 8004c06:	4b7f      	ldr	r3, [pc, #508]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c0e:	e005      	b.n	8004c1c <HAL_RCC_OscConfig+0x88>
 8004c10:	4b7c      	ldr	r3, [pc, #496]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d223      	bcs.n	8004c68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fd87 	bl	8005738 <RCC_SetFlashLatencyFromMSIRange>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e383      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c34:	4b73      	ldr	r3, [pc, #460]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a72      	ldr	r2, [pc, #456]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c3a:	f043 0308 	orr.w	r3, r3, #8
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	4b70      	ldr	r3, [pc, #448]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	496d      	ldr	r1, [pc, #436]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c52:	4b6c      	ldr	r3, [pc, #432]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	4968      	ldr	r1, [pc, #416]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	604b      	str	r3, [r1, #4]
 8004c66:	e025      	b.n	8004cb4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c68:	4b66      	ldr	r3, [pc, #408]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a65      	ldr	r2, [pc, #404]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c6e:	f043 0308 	orr.w	r3, r3, #8
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	4b63      	ldr	r3, [pc, #396]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	4960      	ldr	r1, [pc, #384]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c86:	4b5f      	ldr	r3, [pc, #380]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	495b      	ldr	r1, [pc, #364]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d109      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fd47 	bl	8005738 <RCC_SetFlashLatencyFromMSIRange>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e343      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cb4:	f000 fc4a 	bl	800554c <HAL_RCC_GetSysClockFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b52      	ldr	r3, [pc, #328]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	091b      	lsrs	r3, r3, #4
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	4950      	ldr	r1, [pc, #320]	; (8004e08 <HAL_RCC_OscConfig+0x274>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd0:	4a4e      	ldr	r2, [pc, #312]	; (8004e0c <HAL_RCC_OscConfig+0x278>)
 8004cd2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cd4:	4b4e      	ldr	r3, [pc, #312]	; (8004e10 <HAL_RCC_OscConfig+0x27c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fc fd11 	bl	8001700 <HAL_InitTick>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d052      	beq.n	8004d8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	e327      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d032      	beq.n	8004d5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cf4:	4b43      	ldr	r3, [pc, #268]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a42      	ldr	r2, [pc, #264]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d00:	f7ff fbc6 	bl	8004490 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d08:	f7ff fbc2 	bl	8004490 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e310      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d1a:	4b3a      	ldr	r3, [pc, #232]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d26:	4b37      	ldr	r3, [pc, #220]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a36      	ldr	r2, [pc, #216]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d2c:	f043 0308 	orr.w	r3, r3, #8
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	4b34      	ldr	r3, [pc, #208]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	4931      	ldr	r1, [pc, #196]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d44:	4b2f      	ldr	r3, [pc, #188]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	492c      	ldr	r1, [pc, #176]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	604b      	str	r3, [r1, #4]
 8004d58:	e01a      	b.n	8004d90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d5a:	4b2a      	ldr	r3, [pc, #168]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a29      	ldr	r2, [pc, #164]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d60:	f023 0301 	bic.w	r3, r3, #1
 8004d64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d66:	f7ff fb93 	bl	8004490 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d6e:	f7ff fb8f 	bl	8004490 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e2dd      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d80:	4b20      	ldr	r3, [pc, #128]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f0      	bne.n	8004d6e <HAL_RCC_OscConfig+0x1da>
 8004d8c:	e000      	b.n	8004d90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d074      	beq.n	8004e86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d005      	beq.n	8004dae <HAL_RCC_OscConfig+0x21a>
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b0c      	cmp	r3, #12
 8004da6:	d10e      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d10b      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dae:	4b15      	ldr	r3, [pc, #84]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d064      	beq.n	8004e84 <HAL_RCC_OscConfig+0x2f0>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d160      	bne.n	8004e84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e2ba      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dce:	d106      	bne.n	8004dde <HAL_RCC_OscConfig+0x24a>
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a0b      	ldr	r2, [pc, #44]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	e026      	b.n	8004e2c <HAL_RCC_OscConfig+0x298>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004de6:	d115      	bne.n	8004e14 <HAL_RCC_OscConfig+0x280>
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a05      	ldr	r2, [pc, #20]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004dee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	4b03      	ldr	r3, [pc, #12]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a02      	ldr	r2, [pc, #8]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	e014      	b.n	8004e2c <HAL_RCC_OscConfig+0x298>
 8004e02:	bf00      	nop
 8004e04:	40021000 	.word	0x40021000
 8004e08:	0800c9b8 	.word	0x0800c9b8
 8004e0c:	20000000 	.word	0x20000000
 8004e10:	2000000c 	.word	0x2000000c
 8004e14:	4ba0      	ldr	r3, [pc, #640]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a9f      	ldr	r2, [pc, #636]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	4b9d      	ldr	r3, [pc, #628]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a9c      	ldr	r2, [pc, #624]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d013      	beq.n	8004e5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7ff fb2c 	bl	8004490 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e3c:	f7ff fb28 	bl	8004490 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b64      	cmp	r3, #100	; 0x64
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e276      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e4e:	4b92      	ldr	r3, [pc, #584]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x2a8>
 8004e5a:	e014      	b.n	8004e86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7ff fb18 	bl	8004490 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e64:	f7ff fb14 	bl	8004490 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b64      	cmp	r3, #100	; 0x64
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e262      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e76:	4b88      	ldr	r3, [pc, #544]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x2d0>
 8004e82:	e000      	b.n	8004e86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d060      	beq.n	8004f54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x310>
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b0c      	cmp	r3, #12
 8004e9c:	d119      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d116      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ea4:	4b7c      	ldr	r3, [pc, #496]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <HAL_RCC_OscConfig+0x328>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e23f      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebc:	4b76      	ldr	r3, [pc, #472]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	061b      	lsls	r3, r3, #24
 8004eca:	4973      	ldr	r1, [pc, #460]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ed0:	e040      	b.n	8004f54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d023      	beq.n	8004f22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eda:	4b6f      	ldr	r3, [pc, #444]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a6e      	ldr	r2, [pc, #440]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee6:	f7ff fad3 	bl	8004490 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eee:	f7ff facf 	bl	8004490 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e21d      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f00:	4b65      	ldr	r3, [pc, #404]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f0      	beq.n	8004eee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0c:	4b62      	ldr	r3, [pc, #392]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	061b      	lsls	r3, r3, #24
 8004f1a:	495f      	ldr	r1, [pc, #380]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	604b      	str	r3, [r1, #4]
 8004f20:	e018      	b.n	8004f54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f22:	4b5d      	ldr	r3, [pc, #372]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a5c      	ldr	r2, [pc, #368]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2e:	f7ff faaf 	bl	8004490 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f36:	f7ff faab 	bl	8004490 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e1f9      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f48:	4b53      	ldr	r3, [pc, #332]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1f0      	bne.n	8004f36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d03c      	beq.n	8004fda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01c      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f68:	4b4b      	ldr	r3, [pc, #300]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6e:	4a4a      	ldr	r2, [pc, #296]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f78:	f7ff fa8a 	bl	8004490 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f80:	f7ff fa86 	bl	8004490 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e1d4      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f92:	4b41      	ldr	r3, [pc, #260]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0ef      	beq.n	8004f80 <HAL_RCC_OscConfig+0x3ec>
 8004fa0:	e01b      	b.n	8004fda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fa2:	4b3d      	ldr	r3, [pc, #244]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fa8:	4a3b      	ldr	r2, [pc, #236]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004faa:	f023 0301 	bic.w	r3, r3, #1
 8004fae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb2:	f7ff fa6d 	bl	8004490 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fba:	f7ff fa69 	bl	8004490 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e1b7      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fcc:	4b32      	ldr	r3, [pc, #200]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1ef      	bne.n	8004fba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 80a6 	beq.w	8005134 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fec:	4b2a      	ldr	r3, [pc, #168]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10d      	bne.n	8005014 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff8:	4b27      	ldr	r3, [pc, #156]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffc:	4a26      	ldr	r2, [pc, #152]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8004ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005002:	6593      	str	r3, [r2, #88]	; 0x58
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005010:	2301      	movs	r3, #1
 8005012:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005014:	4b21      	ldr	r3, [pc, #132]	; (800509c <HAL_RCC_OscConfig+0x508>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d118      	bne.n	8005052 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005020:	4b1e      	ldr	r3, [pc, #120]	; (800509c <HAL_RCC_OscConfig+0x508>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1d      	ldr	r2, [pc, #116]	; (800509c <HAL_RCC_OscConfig+0x508>)
 8005026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800502c:	f7ff fa30 	bl	8004490 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005034:	f7ff fa2c 	bl	8004490 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e17a      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005046:	4b15      	ldr	r3, [pc, #84]	; (800509c <HAL_RCC_OscConfig+0x508>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f0      	beq.n	8005034 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d108      	bne.n	800506c <HAL_RCC_OscConfig+0x4d8>
 800505a:	4b0f      	ldr	r3, [pc, #60]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005060:	4a0d      	ldr	r2, [pc, #52]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800506a:	e029      	b.n	80050c0 <HAL_RCC_OscConfig+0x52c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b05      	cmp	r3, #5
 8005072:	d115      	bne.n	80050a0 <HAL_RCC_OscConfig+0x50c>
 8005074:	4b08      	ldr	r3, [pc, #32]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507a:	4a07      	ldr	r2, [pc, #28]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 800507c:	f043 0304 	orr.w	r3, r3, #4
 8005080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005084:	4b04      	ldr	r3, [pc, #16]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 8005086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508a:	4a03      	ldr	r2, [pc, #12]	; (8005098 <HAL_RCC_OscConfig+0x504>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005094:	e014      	b.n	80050c0 <HAL_RCC_OscConfig+0x52c>
 8005096:	bf00      	nop
 8005098:	40021000 	.word	0x40021000
 800509c:	40007000 	.word	0x40007000
 80050a0:	4b9c      	ldr	r3, [pc, #624]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a6:	4a9b      	ldr	r2, [pc, #620]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050b0:	4b98      	ldr	r3, [pc, #608]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	4a97      	ldr	r2, [pc, #604]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80050b8:	f023 0304 	bic.w	r3, r3, #4
 80050bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d016      	beq.n	80050f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c8:	f7ff f9e2 	bl	8004490 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ce:	e00a      	b.n	80050e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d0:	f7ff f9de 	bl	8004490 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	f241 3288 	movw	r2, #5000	; 0x1388
 80050de:	4293      	cmp	r3, r2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e12a      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e6:	4b8b      	ldr	r3, [pc, #556]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0ed      	beq.n	80050d0 <HAL_RCC_OscConfig+0x53c>
 80050f4:	e015      	b.n	8005122 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f6:	f7ff f9cb 	bl	8004490 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050fc:	e00a      	b.n	8005114 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fe:	f7ff f9c7 	bl	8004490 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	; 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e113      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005114:	4b7f      	ldr	r3, [pc, #508]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1ed      	bne.n	80050fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005122:	7ffb      	ldrb	r3, [r7, #31]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d105      	bne.n	8005134 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005128:	4b7a      	ldr	r3, [pc, #488]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 800512a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512c:	4a79      	ldr	r2, [pc, #484]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 800512e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005132:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80fe 	beq.w	800533a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	2b02      	cmp	r3, #2
 8005144:	f040 80d0 	bne.w	80052e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005148:	4b72      	ldr	r3, [pc, #456]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f003 0203 	and.w	r2, r3, #3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	429a      	cmp	r2, r3
 800515a:	d130      	bne.n	80051be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	3b01      	subs	r3, #1
 8005168:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800516a:	429a      	cmp	r2, r3
 800516c:	d127      	bne.n	80051be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005178:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800517a:	429a      	cmp	r2, r3
 800517c:	d11f      	bne.n	80051be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005188:	2a07      	cmp	r2, #7
 800518a:	bf14      	ite	ne
 800518c:	2201      	movne	r2, #1
 800518e:	2200      	moveq	r2, #0
 8005190:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005192:	4293      	cmp	r3, r2
 8005194:	d113      	bne.n	80051be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	3b01      	subs	r3, #1
 80051a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d109      	bne.n	80051be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	3b01      	subs	r3, #1
 80051b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d06e      	beq.n	800529c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b0c      	cmp	r3, #12
 80051c2:	d069      	beq.n	8005298 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051c4:	4b53      	ldr	r3, [pc, #332]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80051d0:	4b50      	ldr	r3, [pc, #320]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0ad      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051e0:	4b4c      	ldr	r3, [pc, #304]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a4b      	ldr	r2, [pc, #300]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80051e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051ec:	f7ff f950 	bl	8004490 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f4:	f7ff f94c 	bl	8004490 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e09a      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005206:	4b43      	ldr	r3, [pc, #268]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f0      	bne.n	80051f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005212:	4b40      	ldr	r3, [pc, #256]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	4b40      	ldr	r3, [pc, #256]	; (8005318 <HAL_RCC_OscConfig+0x784>)
 8005218:	4013      	ands	r3, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005222:	3a01      	subs	r2, #1
 8005224:	0112      	lsls	r2, r2, #4
 8005226:	4311      	orrs	r1, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800522c:	0212      	lsls	r2, r2, #8
 800522e:	4311      	orrs	r1, r2
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005234:	0852      	lsrs	r2, r2, #1
 8005236:	3a01      	subs	r2, #1
 8005238:	0552      	lsls	r2, r2, #21
 800523a:	4311      	orrs	r1, r2
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005240:	0852      	lsrs	r2, r2, #1
 8005242:	3a01      	subs	r2, #1
 8005244:	0652      	lsls	r2, r2, #25
 8005246:	4311      	orrs	r1, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800524c:	0912      	lsrs	r2, r2, #4
 800524e:	0452      	lsls	r2, r2, #17
 8005250:	430a      	orrs	r2, r1
 8005252:	4930      	ldr	r1, [pc, #192]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 8005254:	4313      	orrs	r3, r2
 8005256:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005258:	4b2e      	ldr	r3, [pc, #184]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a2d      	ldr	r2, [pc, #180]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 800525e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005262:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005264:	4b2b      	ldr	r3, [pc, #172]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	4a2a      	ldr	r2, [pc, #168]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 800526a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800526e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005270:	f7ff f90e 	bl	8004490 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005278:	f7ff f90a 	bl	8004490 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e058      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800528a:	4b22      	ldr	r3, [pc, #136]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005296:	e050      	b.n	800533a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e04f      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800529c:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d148      	bne.n	800533a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052a8:	4b1a      	ldr	r3, [pc, #104]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a19      	ldr	r2, [pc, #100]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80052ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052b4:	4b17      	ldr	r3, [pc, #92]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4a16      	ldr	r2, [pc, #88]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80052ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052c0:	f7ff f8e6 	bl	8004490 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c8:	f7ff f8e2 	bl	8004490 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e030      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052da:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0x734>
 80052e6:	e028      	b.n	800533a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d023      	beq.n	8005336 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ee:	4b09      	ldr	r3, [pc, #36]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a08      	ldr	r2, [pc, #32]	; (8005314 <HAL_RCC_OscConfig+0x780>)
 80052f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7ff f8c9 	bl	8004490 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005300:	e00c      	b.n	800531c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005302:	f7ff f8c5 	bl	8004490 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d905      	bls.n	800531c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e013      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
 8005314:	40021000 	.word	0x40021000
 8005318:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <HAL_RCC_OscConfig+0x7b0>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ec      	bne.n	8005302 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005328:	4b06      	ldr	r3, [pc, #24]	; (8005344 <HAL_RCC_OscConfig+0x7b0>)
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	4905      	ldr	r1, [pc, #20]	; (8005344 <HAL_RCC_OscConfig+0x7b0>)
 800532e:	4b06      	ldr	r3, [pc, #24]	; (8005348 <HAL_RCC_OscConfig+0x7b4>)
 8005330:	4013      	ands	r3, r2
 8005332:	60cb      	str	r3, [r1, #12]
 8005334:	e001      	b.n	800533a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40021000 	.word	0x40021000
 8005348:	feeefffc 	.word	0xfeeefffc

0800534c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e0e7      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005360:	4b75      	ldr	r3, [pc, #468]	; (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d910      	bls.n	8005390 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536e:	4b72      	ldr	r3, [pc, #456]	; (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f023 0207 	bic.w	r2, r3, #7
 8005376:	4970      	ldr	r1, [pc, #448]	; (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800537e:	4b6e      	ldr	r3, [pc, #440]	; (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d001      	beq.n	8005390 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0cf      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d010      	beq.n	80053be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	4b66      	ldr	r3, [pc, #408]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d908      	bls.n	80053be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ac:	4b63      	ldr	r3, [pc, #396]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4960      	ldr	r1, [pc, #384]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d04c      	beq.n	8005464 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d107      	bne.n	80053e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053d2:	4b5a      	ldr	r3, [pc, #360]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d121      	bne.n	8005422 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e0a6      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d107      	bne.n	80053fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ea:	4b54      	ldr	r3, [pc, #336]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d115      	bne.n	8005422 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e09a      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d107      	bne.n	8005412 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005402:	4b4e      	ldr	r3, [pc, #312]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e08e      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005412:	4b4a      	ldr	r3, [pc, #296]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e086      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005422:	4b46      	ldr	r3, [pc, #280]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f023 0203 	bic.w	r2, r3, #3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	4943      	ldr	r1, [pc, #268]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005430:	4313      	orrs	r3, r2
 8005432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005434:	f7ff f82c 	bl	8004490 <HAL_GetTick>
 8005438:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543a:	e00a      	b.n	8005452 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800543c:	f7ff f828 	bl	8004490 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	; 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e06e      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005452:	4b3a      	ldr	r3, [pc, #232]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 020c 	and.w	r2, r3, #12
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	429a      	cmp	r2, r3
 8005462:	d1eb      	bne.n	800543c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d010      	beq.n	8005492 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	4b31      	ldr	r3, [pc, #196]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800547c:	429a      	cmp	r2, r3
 800547e:	d208      	bcs.n	8005492 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005480:	4b2e      	ldr	r3, [pc, #184]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	492b      	ldr	r1, [pc, #172]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 800548e:	4313      	orrs	r3, r2
 8005490:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005492:	4b29      	ldr	r3, [pc, #164]	; (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d210      	bcs.n	80054c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a0:	4b25      	ldr	r3, [pc, #148]	; (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f023 0207 	bic.w	r2, r3, #7
 80054a8:	4923      	ldr	r1, [pc, #140]	; (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b0:	4b21      	ldr	r3, [pc, #132]	; (8005538 <HAL_RCC_ClockConfig+0x1ec>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d001      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e036      	b.n	8005530 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d008      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ce:	4b1b      	ldr	r3, [pc, #108]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	4918      	ldr	r1, [pc, #96]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d009      	beq.n	8005500 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ec:	4b13      	ldr	r3, [pc, #76]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4910      	ldr	r1, [pc, #64]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005500:	f000 f824 	bl	800554c <HAL_RCC_GetSysClockFreq>
 8005504:	4602      	mov	r2, r0
 8005506:	4b0d      	ldr	r3, [pc, #52]	; (800553c <HAL_RCC_ClockConfig+0x1f0>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	091b      	lsrs	r3, r3, #4
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	490b      	ldr	r1, [pc, #44]	; (8005540 <HAL_RCC_ClockConfig+0x1f4>)
 8005512:	5ccb      	ldrb	r3, [r1, r3]
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	fa22 f303 	lsr.w	r3, r2, r3
 800551c:	4a09      	ldr	r2, [pc, #36]	; (8005544 <HAL_RCC_ClockConfig+0x1f8>)
 800551e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005520:	4b09      	ldr	r3, [pc, #36]	; (8005548 <HAL_RCC_ClockConfig+0x1fc>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f7fc f8eb 	bl	8001700 <HAL_InitTick>
 800552a:	4603      	mov	r3, r0
 800552c:	72fb      	strb	r3, [r7, #11]

  return status;
 800552e:	7afb      	ldrb	r3, [r7, #11]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40022000 	.word	0x40022000
 800553c:	40021000 	.word	0x40021000
 8005540:	0800c9b8 	.word	0x0800c9b8
 8005544:	20000000 	.word	0x20000000
 8005548:	2000000c 	.word	0x2000000c

0800554c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800554c:	b480      	push	{r7}
 800554e:	b089      	sub	sp, #36	; 0x24
 8005550:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	2300      	movs	r3, #0
 8005558:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800555a:	4b3e      	ldr	r3, [pc, #248]	; (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005564:	4b3b      	ldr	r3, [pc, #236]	; (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x34>
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2b0c      	cmp	r3, #12
 8005578:	d121      	bne.n	80055be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d11e      	bne.n	80055be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005580:	4b34      	ldr	r3, [pc, #208]	; (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d107      	bne.n	800559c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800558c:	4b31      	ldr	r3, [pc, #196]	; (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 800558e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	61fb      	str	r3, [r7, #28]
 800559a:	e005      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800559c:	4b2d      	ldr	r3, [pc, #180]	; (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	091b      	lsrs	r3, r3, #4
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055a8:	4a2b      	ldr	r2, [pc, #172]	; (8005658 <HAL_RCC_GetSysClockFreq+0x10c>)
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10d      	bne.n	80055d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055bc:	e00a      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d102      	bne.n	80055ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055c4:	4b25      	ldr	r3, [pc, #148]	; (800565c <HAL_RCC_GetSysClockFreq+0x110>)
 80055c6:	61bb      	str	r3, [r7, #24]
 80055c8:	e004      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d101      	bne.n	80055d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055d0:	4b23      	ldr	r3, [pc, #140]	; (8005660 <HAL_RCC_GetSysClockFreq+0x114>)
 80055d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b0c      	cmp	r3, #12
 80055d8:	d134      	bne.n	8005644 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055da:	4b1e      	ldr	r3, [pc, #120]	; (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d003      	beq.n	80055f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d003      	beq.n	80055f8 <HAL_RCC_GetSysClockFreq+0xac>
 80055f0:	e005      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055f2:	4b1a      	ldr	r3, [pc, #104]	; (800565c <HAL_RCC_GetSysClockFreq+0x110>)
 80055f4:	617b      	str	r3, [r7, #20]
      break;
 80055f6:	e005      	b.n	8005604 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055f8:	4b19      	ldr	r3, [pc, #100]	; (8005660 <HAL_RCC_GetSysClockFreq+0x114>)
 80055fa:	617b      	str	r3, [r7, #20]
      break;
 80055fc:	e002      	b.n	8005604 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	617b      	str	r3, [r7, #20]
      break;
 8005602:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005604:	4b13      	ldr	r3, [pc, #76]	; (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	3301      	adds	r3, #1
 8005610:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005612:	4b10      	ldr	r3, [pc, #64]	; (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	fb03 f202 	mul.w	r2, r3, r2
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	fbb2 f3f3 	udiv	r3, r2, r3
 8005628:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800562a:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <HAL_RCC_GetSysClockFreq+0x108>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	0e5b      	lsrs	r3, r3, #25
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	3301      	adds	r3, #1
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005642:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005644:	69bb      	ldr	r3, [r7, #24]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3724      	adds	r7, #36	; 0x24
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000
 8005658:	0800c9d0 	.word	0x0800c9d0
 800565c:	00f42400 	.word	0x00f42400
 8005660:	007a1200 	.word	0x007a1200

08005664 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005668:	4b03      	ldr	r3, [pc, #12]	; (8005678 <HAL_RCC_GetHCLKFreq+0x14>)
 800566a:	681b      	ldr	r3, [r3, #0]
}
 800566c:	4618      	mov	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20000000 	.word	0x20000000

0800567c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005680:	f7ff fff0 	bl	8005664 <HAL_RCC_GetHCLKFreq>
 8005684:	4602      	mov	r2, r0
 8005686:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	0a1b      	lsrs	r3, r3, #8
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	4904      	ldr	r1, [pc, #16]	; (80056a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005692:	5ccb      	ldrb	r3, [r1, r3]
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800569c:	4618      	mov	r0, r3
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40021000 	.word	0x40021000
 80056a4:	0800c9c8 	.word	0x0800c9c8

080056a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056ac:	f7ff ffda 	bl	8005664 <HAL_RCC_GetHCLKFreq>
 80056b0:	4602      	mov	r2, r0
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	0adb      	lsrs	r3, r3, #11
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	4904      	ldr	r1, [pc, #16]	; (80056d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056be:	5ccb      	ldrb	r3, [r1, r3]
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40021000 	.word	0x40021000
 80056d0:	0800c9c8 	.word	0x0800c9c8

080056d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	220f      	movs	r2, #15
 80056e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80056e4:	4b12      	ldr	r3, [pc, #72]	; (8005730 <HAL_RCC_GetClockConfig+0x5c>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 0203 	and.w	r2, r3, #3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80056f0:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <HAL_RCC_GetClockConfig+0x5c>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80056fc:	4b0c      	ldr	r3, [pc, #48]	; (8005730 <HAL_RCC_GetClockConfig+0x5c>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005708:	4b09      	ldr	r3, [pc, #36]	; (8005730 <HAL_RCC_GetClockConfig+0x5c>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	08db      	lsrs	r3, r3, #3
 800570e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005716:	4b07      	ldr	r3, [pc, #28]	; (8005734 <HAL_RCC_GetClockConfig+0x60>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0207 	and.w	r2, r3, #7
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	601a      	str	r2, [r3, #0]
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40021000 	.word	0x40021000
 8005734:	40022000 	.word	0x40022000

08005738 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005740:	2300      	movs	r3, #0
 8005742:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005744:	4b2a      	ldr	r3, [pc, #168]	; (80057f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005750:	f7ff f9bc 	bl	8004acc <HAL_PWREx_GetVoltageRange>
 8005754:	6178      	str	r0, [r7, #20]
 8005756:	e014      	b.n	8005782 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005758:	4b25      	ldr	r3, [pc, #148]	; (80057f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800575a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575c:	4a24      	ldr	r2, [pc, #144]	; (80057f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800575e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005762:	6593      	str	r3, [r2, #88]	; 0x58
 8005764:	4b22      	ldr	r3, [pc, #136]	; (80057f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005770:	f7ff f9ac 	bl	8004acc <HAL_PWREx_GetVoltageRange>
 8005774:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005776:	4b1e      	ldr	r3, [pc, #120]	; (80057f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577a:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800577c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005780:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005788:	d10b      	bne.n	80057a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b80      	cmp	r3, #128	; 0x80
 800578e:	d919      	bls.n	80057c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2ba0      	cmp	r3, #160	; 0xa0
 8005794:	d902      	bls.n	800579c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005796:	2302      	movs	r3, #2
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	e013      	b.n	80057c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800579c:	2301      	movs	r3, #1
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	e010      	b.n	80057c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b80      	cmp	r3, #128	; 0x80
 80057a6:	d902      	bls.n	80057ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80057a8:	2303      	movs	r3, #3
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	e00a      	b.n	80057c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b80      	cmp	r3, #128	; 0x80
 80057b2:	d102      	bne.n	80057ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057b4:	2302      	movs	r3, #2
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	e004      	b.n	80057c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b70      	cmp	r3, #112	; 0x70
 80057be:	d101      	bne.n	80057c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057c0:	2301      	movs	r3, #1
 80057c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f023 0207 	bic.w	r2, r3, #7
 80057cc:	4909      	ldr	r1, [pc, #36]	; (80057f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80057d4:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d001      	beq.n	80057e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40021000 	.word	0x40021000
 80057f4:	40022000 	.word	0x40022000

080057f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005800:	2300      	movs	r3, #0
 8005802:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005804:	2300      	movs	r3, #0
 8005806:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005810:	2b00      	cmp	r3, #0
 8005812:	d041      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005818:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800581c:	d02a      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800581e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005822:	d824      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005824:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005828:	d008      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800582a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800582e:	d81e      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005838:	d010      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800583a:	e018      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800583c:	4b86      	ldr	r3, [pc, #536]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4a85      	ldr	r2, [pc, #532]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005846:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005848:	e015      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3304      	adds	r3, #4
 800584e:	2100      	movs	r1, #0
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fabb 	bl	8005dcc <RCCEx_PLLSAI1_Config>
 8005856:	4603      	mov	r3, r0
 8005858:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800585a:	e00c      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3320      	adds	r3, #32
 8005860:	2100      	movs	r1, #0
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fba6 	bl	8005fb4 <RCCEx_PLLSAI2_Config>
 8005868:	4603      	mov	r3, r0
 800586a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800586c:	e003      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	74fb      	strb	r3, [r7, #19]
      break;
 8005872:	e000      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005876:	7cfb      	ldrb	r3, [r7, #19]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10b      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800587c:	4b76      	ldr	r3, [pc, #472]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800588a:	4973      	ldr	r1, [pc, #460]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005892:	e001      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005894:	7cfb      	ldrb	r3, [r7, #19]
 8005896:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d041      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058ac:	d02a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80058ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058b2:	d824      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058b8:	d008      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058be:	d81e      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80058c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058c8:	d010      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058ca:	e018      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058cc:	4b62      	ldr	r3, [pc, #392]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4a61      	ldr	r2, [pc, #388]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058d8:	e015      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3304      	adds	r3, #4
 80058de:	2100      	movs	r1, #0
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fa73 	bl	8005dcc <RCCEx_PLLSAI1_Config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058ea:	e00c      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3320      	adds	r3, #32
 80058f0:	2100      	movs	r1, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fb5e 	bl	8005fb4 <RCCEx_PLLSAI2_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058fc:	e003      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	74fb      	strb	r3, [r7, #19]
      break;
 8005902:	e000      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005906:	7cfb      	ldrb	r3, [r7, #19]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800590c:	4b52      	ldr	r3, [pc, #328]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005912:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800591a:	494f      	ldr	r1, [pc, #316]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005922:	e001      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005924:	7cfb      	ldrb	r3, [r7, #19]
 8005926:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80a0 	beq.w	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005936:	2300      	movs	r3, #0
 8005938:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800593a:	4b47      	ldr	r3, [pc, #284]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800593c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800594a:	2300      	movs	r3, #0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00d      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005950:	4b41      	ldr	r3, [pc, #260]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005954:	4a40      	ldr	r2, [pc, #256]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800595a:	6593      	str	r3, [r2, #88]	; 0x58
 800595c:	4b3e      	ldr	r3, [pc, #248]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800595e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005964:	60bb      	str	r3, [r7, #8]
 8005966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005968:	2301      	movs	r3, #1
 800596a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800596c:	4b3b      	ldr	r3, [pc, #236]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a3a      	ldr	r2, [pc, #232]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005976:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005978:	f7fe fd8a 	bl	8004490 <HAL_GetTick>
 800597c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800597e:	e009      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005980:	f7fe fd86 	bl	8004490 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d902      	bls.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	74fb      	strb	r3, [r7, #19]
        break;
 8005992:	e005      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005994:	4b31      	ldr	r3, [pc, #196]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0ef      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80059a0:	7cfb      	ldrb	r3, [r7, #19]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d15c      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059a6:	4b2c      	ldr	r3, [pc, #176]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01f      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d019      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059c4:	4b24      	ldr	r3, [pc, #144]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059d0:	4b21      	ldr	r3, [pc, #132]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d6:	4a20      	ldr	r2, [pc, #128]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059e0:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e6:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059f0:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d016      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a02:	f7fe fd45 	bl	8004490 <HAL_GetTick>
 8005a06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a08:	e00b      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a0a:	f7fe fd41 	bl	8004490 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d902      	bls.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	74fb      	strb	r3, [r7, #19]
            break;
 8005a20:	e006      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a22:	4b0d      	ldr	r3, [pc, #52]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0ec      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005a30:	7cfb      	ldrb	r3, [r7, #19]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10c      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a36:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a46:	4904      	ldr	r1, [pc, #16]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a4e:	e009      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a50:	7cfb      	ldrb	r3, [r7, #19]
 8005a52:	74bb      	strb	r3, [r7, #18]
 8005a54:	e006      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005a56:	bf00      	nop
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a64:	7c7b      	ldrb	r3, [r7, #17]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d105      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a6a:	4b9e      	ldr	r3, [pc, #632]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6e:	4a9d      	ldr	r2, [pc, #628]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a82:	4b98      	ldr	r3, [pc, #608]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a88:	f023 0203 	bic.w	r2, r3, #3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	4994      	ldr	r1, [pc, #592]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005aa4:	4b8f      	ldr	r3, [pc, #572]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aaa:	f023 020c 	bic.w	r2, r3, #12
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	498c      	ldr	r1, [pc, #560]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ac6:	4b87      	ldr	r3, [pc, #540]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	4983      	ldr	r1, [pc, #524]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ae8:	4b7e      	ldr	r3, [pc, #504]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	497b      	ldr	r1, [pc, #492]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b0a:	4b76      	ldr	r3, [pc, #472]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b18:	4972      	ldr	r1, [pc, #456]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b2c:	4b6d      	ldr	r3, [pc, #436]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b3a:	496a      	ldr	r1, [pc, #424]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b4e:	4b65      	ldr	r3, [pc, #404]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5c:	4961      	ldr	r1, [pc, #388]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b70:	4b5c      	ldr	r3, [pc, #368]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b7e:	4959      	ldr	r1, [pc, #356]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b92:	4b54      	ldr	r3, [pc, #336]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba0:	4950      	ldr	r1, [pc, #320]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bb4:	4b4b      	ldr	r3, [pc, #300]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc2:	4948      	ldr	r1, [pc, #288]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bd6:	4b43      	ldr	r3, [pc, #268]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be4:	493f      	ldr	r1, [pc, #252]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d028      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bf8:	4b3a      	ldr	r3, [pc, #232]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c06:	4937      	ldr	r1, [pc, #220]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c16:	d106      	bne.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c18:	4b32      	ldr	r3, [pc, #200]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	4a31      	ldr	r2, [pc, #196]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c22:	60d3      	str	r3, [r2, #12]
 8005c24:	e011      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c2e:	d10c      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3304      	adds	r3, #4
 8005c34:	2101      	movs	r1, #1
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 f8c8 	bl	8005dcc <RCCEx_PLLSAI1_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c40:	7cfb      	ldrb	r3, [r7, #19]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005c46:	7cfb      	ldrb	r3, [r7, #19]
 8005c48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d028      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c56:	4b23      	ldr	r3, [pc, #140]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c64:	491f      	ldr	r1, [pc, #124]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c74:	d106      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c76:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c80:	60d3      	str	r3, [r2, #12]
 8005c82:	e011      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c8c:	d10c      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3304      	adds	r3, #4
 8005c92:	2101      	movs	r1, #1
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 f899 	bl	8005dcc <RCCEx_PLLSAI1_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005ca4:	7cfb      	ldrb	r3, [r7, #19]
 8005ca6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d02b      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc2:	4908      	ldr	r1, [pc, #32]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cd2:	d109      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cd4:	4b03      	ldr	r3, [pc, #12]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	4a02      	ldr	r2, [pc, #8]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cde:	60d3      	str	r3, [r2, #12]
 8005ce0:	e014      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005ce2:	bf00      	nop
 8005ce4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cf0:	d10c      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 f867 	bl	8005dcc <RCCEx_PLLSAI1_Config>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d02:	7cfb      	ldrb	r3, [r7, #19]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005d08:	7cfb      	ldrb	r3, [r7, #19]
 8005d0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d02f      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d18:	4b2b      	ldr	r3, [pc, #172]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d26:	4928      	ldr	r1, [pc, #160]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d36:	d10d      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 f844 	bl	8005dcc <RCCEx_PLLSAI1_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d48:	7cfb      	ldrb	r3, [r7, #19]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d014      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d4e:	7cfb      	ldrb	r3, [r7, #19]
 8005d50:	74bb      	strb	r3, [r7, #18]
 8005d52:	e011      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d5c:	d10c      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3320      	adds	r3, #32
 8005d62:	2102      	movs	r1, #2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 f925 	bl	8005fb4 <RCCEx_PLLSAI2_Config>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d6e:	7cfb      	ldrb	r3, [r7, #19]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d74:	7cfb      	ldrb	r3, [r7, #19]
 8005d76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00a      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d84:	4b10      	ldr	r3, [pc, #64]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d92:	490d      	ldr	r1, [pc, #52]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00b      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005da6:	4b08      	ldr	r3, [pc, #32]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005db6:	4904      	ldr	r1, [pc, #16]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005dbe:	7cbb      	ldrb	r3, [r7, #18]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40021000 	.word	0x40021000

08005dcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005dda:	4b75      	ldr	r3, [pc, #468]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d018      	beq.n	8005e18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005de6:	4b72      	ldr	r3, [pc, #456]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f003 0203 	and.w	r2, r3, #3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d10d      	bne.n	8005e12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
       ||
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005dfe:	4b6c      	ldr	r3, [pc, #432]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	091b      	lsrs	r3, r3, #4
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
       ||
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d047      	beq.n	8005ea2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	73fb      	strb	r3, [r7, #15]
 8005e16:	e044      	b.n	8005ea2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d018      	beq.n	8005e52 <RCCEx_PLLSAI1_Config+0x86>
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d825      	bhi.n	8005e70 <RCCEx_PLLSAI1_Config+0xa4>
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d002      	beq.n	8005e2e <RCCEx_PLLSAI1_Config+0x62>
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d009      	beq.n	8005e40 <RCCEx_PLLSAI1_Config+0x74>
 8005e2c:	e020      	b.n	8005e70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e2e:	4b60      	ldr	r3, [pc, #384]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d11d      	bne.n	8005e76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e3e:	e01a      	b.n	8005e76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e40:	4b5b      	ldr	r3, [pc, #364]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d116      	bne.n	8005e7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e50:	e013      	b.n	8005e7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e52:	4b57      	ldr	r3, [pc, #348]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10f      	bne.n	8005e7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e5e:	4b54      	ldr	r3, [pc, #336]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e6e:	e006      	b.n	8005e7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	73fb      	strb	r3, [r7, #15]
      break;
 8005e74:	e004      	b.n	8005e80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e76:	bf00      	nop
 8005e78:	e002      	b.n	8005e80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e7a:	bf00      	nop
 8005e7c:	e000      	b.n	8005e80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10d      	bne.n	8005ea2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e86:	4b4a      	ldr	r3, [pc, #296]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6819      	ldr	r1, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	430b      	orrs	r3, r1
 8005e9c:	4944      	ldr	r1, [pc, #272]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d17d      	bne.n	8005fa4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ea8:	4b41      	ldr	r3, [pc, #260]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a40      	ldr	r2, [pc, #256]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb4:	f7fe faec 	bl	8004490 <HAL_GetTick>
 8005eb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005eba:	e009      	b.n	8005ed0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ebc:	f7fe fae8 	bl	8004490 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d902      	bls.n	8005ed0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	73fb      	strb	r3, [r7, #15]
        break;
 8005ece:	e005      	b.n	8005edc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ed0:	4b37      	ldr	r3, [pc, #220]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1ef      	bne.n	8005ebc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d160      	bne.n	8005fa4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d111      	bne.n	8005f0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ee8:	4b31      	ldr	r3, [pc, #196]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6892      	ldr	r2, [r2, #8]
 8005ef8:	0211      	lsls	r1, r2, #8
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68d2      	ldr	r2, [r2, #12]
 8005efe:	0912      	lsrs	r2, r2, #4
 8005f00:	0452      	lsls	r2, r2, #17
 8005f02:	430a      	orrs	r2, r1
 8005f04:	492a      	ldr	r1, [pc, #168]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	610b      	str	r3, [r1, #16]
 8005f0a:	e027      	b.n	8005f5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d112      	bne.n	8005f38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f12:	4b27      	ldr	r3, [pc, #156]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005f1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6892      	ldr	r2, [r2, #8]
 8005f22:	0211      	lsls	r1, r2, #8
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6912      	ldr	r2, [r2, #16]
 8005f28:	0852      	lsrs	r2, r2, #1
 8005f2a:	3a01      	subs	r2, #1
 8005f2c:	0552      	lsls	r2, r2, #21
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	491f      	ldr	r1, [pc, #124]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	610b      	str	r3, [r1, #16]
 8005f36:	e011      	b.n	8005f5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f38:	4b1d      	ldr	r3, [pc, #116]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6892      	ldr	r2, [r2, #8]
 8005f48:	0211      	lsls	r1, r2, #8
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6952      	ldr	r2, [r2, #20]
 8005f4e:	0852      	lsrs	r2, r2, #1
 8005f50:	3a01      	subs	r2, #1
 8005f52:	0652      	lsls	r2, r2, #25
 8005f54:	430a      	orrs	r2, r1
 8005f56:	4916      	ldr	r1, [pc, #88]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f5c:	4b14      	ldr	r3, [pc, #80]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a13      	ldr	r2, [pc, #76]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f68:	f7fe fa92 	bl	8004490 <HAL_GetTick>
 8005f6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f6e:	e009      	b.n	8005f84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f70:	f7fe fa8e 	bl	8004490 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d902      	bls.n	8005f84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	73fb      	strb	r3, [r7, #15]
          break;
 8005f82:	e005      	b.n	8005f90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0ef      	beq.n	8005f70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f96:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	4904      	ldr	r1, [pc, #16]	; (8005fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40021000 	.word	0x40021000

08005fb4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005fc2:	4b6a      	ldr	r3, [pc, #424]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d018      	beq.n	8006000 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005fce:	4b67      	ldr	r3, [pc, #412]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f003 0203 	and.w	r2, r3, #3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d10d      	bne.n	8005ffa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
       ||
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d009      	beq.n	8005ffa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005fe6:	4b61      	ldr	r3, [pc, #388]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	091b      	lsrs	r3, r3, #4
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
       ||
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d047      	beq.n	800608a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	73fb      	strb	r3, [r7, #15]
 8005ffe:	e044      	b.n	800608a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b03      	cmp	r3, #3
 8006006:	d018      	beq.n	800603a <RCCEx_PLLSAI2_Config+0x86>
 8006008:	2b03      	cmp	r3, #3
 800600a:	d825      	bhi.n	8006058 <RCCEx_PLLSAI2_Config+0xa4>
 800600c:	2b01      	cmp	r3, #1
 800600e:	d002      	beq.n	8006016 <RCCEx_PLLSAI2_Config+0x62>
 8006010:	2b02      	cmp	r3, #2
 8006012:	d009      	beq.n	8006028 <RCCEx_PLLSAI2_Config+0x74>
 8006014:	e020      	b.n	8006058 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006016:	4b55      	ldr	r3, [pc, #340]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d11d      	bne.n	800605e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006026:	e01a      	b.n	800605e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006028:	4b50      	ldr	r3, [pc, #320]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006030:	2b00      	cmp	r3, #0
 8006032:	d116      	bne.n	8006062 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006038:	e013      	b.n	8006062 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800603a:	4b4c      	ldr	r3, [pc, #304]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10f      	bne.n	8006066 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006046:	4b49      	ldr	r3, [pc, #292]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006056:	e006      	b.n	8006066 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
      break;
 800605c:	e004      	b.n	8006068 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800605e:	bf00      	nop
 8006060:	e002      	b.n	8006068 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006062:	bf00      	nop
 8006064:	e000      	b.n	8006068 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006066:	bf00      	nop
    }

    if(status == HAL_OK)
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10d      	bne.n	800608a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800606e:	4b3f      	ldr	r3, [pc, #252]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6819      	ldr	r1, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	3b01      	subs	r3, #1
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	430b      	orrs	r3, r1
 8006084:	4939      	ldr	r1, [pc, #228]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006086:	4313      	orrs	r3, r2
 8006088:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d167      	bne.n	8006160 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006090:	4b36      	ldr	r3, [pc, #216]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a35      	ldr	r2, [pc, #212]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800609a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800609c:	f7fe f9f8 	bl	8004490 <HAL_GetTick>
 80060a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060a2:	e009      	b.n	80060b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060a4:	f7fe f9f4 	bl	8004490 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d902      	bls.n	80060b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	73fb      	strb	r3, [r7, #15]
        break;
 80060b6:	e005      	b.n	80060c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060b8:	4b2c      	ldr	r3, [pc, #176]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1ef      	bne.n	80060a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d14a      	bne.n	8006160 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d111      	bne.n	80060f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060d0:	4b26      	ldr	r3, [pc, #152]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80060d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6892      	ldr	r2, [r2, #8]
 80060e0:	0211      	lsls	r1, r2, #8
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	68d2      	ldr	r2, [r2, #12]
 80060e6:	0912      	lsrs	r2, r2, #4
 80060e8:	0452      	lsls	r2, r2, #17
 80060ea:	430a      	orrs	r2, r1
 80060ec:	491f      	ldr	r1, [pc, #124]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	614b      	str	r3, [r1, #20]
 80060f2:	e011      	b.n	8006118 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060f4:	4b1d      	ldr	r3, [pc, #116]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80060fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6892      	ldr	r2, [r2, #8]
 8006104:	0211      	lsls	r1, r2, #8
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6912      	ldr	r2, [r2, #16]
 800610a:	0852      	lsrs	r2, r2, #1
 800610c:	3a01      	subs	r2, #1
 800610e:	0652      	lsls	r2, r2, #25
 8006110:	430a      	orrs	r2, r1
 8006112:	4916      	ldr	r1, [pc, #88]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006114:	4313      	orrs	r3, r2
 8006116:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006118:	4b14      	ldr	r3, [pc, #80]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a13      	ldr	r2, [pc, #76]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 800611e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006122:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006124:	f7fe f9b4 	bl	8004490 <HAL_GetTick>
 8006128:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800612a:	e009      	b.n	8006140 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800612c:	f7fe f9b0 	bl	8004490 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d902      	bls.n	8006140 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	73fb      	strb	r3, [r7, #15]
          break;
 800613e:	e005      	b.n	800614c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006140:	4b0a      	ldr	r3, [pc, #40]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0ef      	beq.n	800612c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006152:	4b06      	ldr	r3, [pc, #24]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006154:	695a      	ldr	r2, [r3, #20]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	4904      	ldr	r1, [pc, #16]	; (800616c <RCCEx_PLLSAI2_Config+0x1b8>)
 800615c:	4313      	orrs	r3, r2
 800615e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40021000 	.word	0x40021000

08006170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e095      	b.n	80062ae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	2b00      	cmp	r3, #0
 8006188:	d108      	bne.n	800619c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006192:	d009      	beq.n	80061a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	61da      	str	r2, [r3, #28]
 800619a:	e005      	b.n	80061a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fb f926 	bl	8001414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061e8:	d902      	bls.n	80061f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	e002      	b.n	80061f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80061fe:	d007      	beq.n	8006210 <HAL_SPI_Init+0xa0>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006208:	d002      	beq.n	8006210 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006248:	431a      	orrs	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	ea42 0103 	orr.w	r1, r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	0c1b      	lsrs	r3, r3, #16
 800626c:	f003 0204 	and.w	r2, r3, #4
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	f003 0310 	and.w	r3, r3, #16
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800628c:	ea42 0103 	orr.w	r1, r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b088      	sub	sp, #32
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	603b      	str	r3, [r7, #0]
 80062c2:	4613      	mov	r3, r2
 80062c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <HAL_SPI_Transmit+0x22>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e158      	b.n	800658a <HAL_SPI_Transmit+0x2d4>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062e0:	f7fe f8d6 	bl	8004490 <HAL_GetTick>
 80062e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d002      	beq.n	80062fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80062f6:	2302      	movs	r3, #2
 80062f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062fa:	e13d      	b.n	8006578 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <HAL_SPI_Transmit+0x52>
 8006302:	88fb      	ldrh	r3, [r7, #6]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d102      	bne.n	800630e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800630c:	e134      	b.n	8006578 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2203      	movs	r2, #3
 8006312:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	88fa      	ldrh	r2, [r7, #6]
 8006326:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006358:	d10f      	bne.n	800637a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006368:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006378:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006384:	2b40      	cmp	r3, #64	; 0x40
 8006386:	d007      	beq.n	8006398 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006396:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063a0:	d94b      	bls.n	800643a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <HAL_SPI_Transmit+0xfa>
 80063aa:	8afb      	ldrh	r3, [r7, #22]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d13e      	bne.n	800642e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	881a      	ldrh	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	1c9a      	adds	r2, r3, #2
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063d4:	e02b      	b.n	800642e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d112      	bne.n	800640a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	881a      	ldrh	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	1c9a      	adds	r2, r3, #2
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006408:	e011      	b.n	800642e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800640a:	f7fe f841 	bl	8004490 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d803      	bhi.n	8006422 <HAL_SPI_Transmit+0x16c>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006420:	d102      	bne.n	8006428 <HAL_SPI_Transmit+0x172>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d102      	bne.n	800642e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800642c:	e0a4      	b.n	8006578 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006432:	b29b      	uxth	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1ce      	bne.n	80063d6 <HAL_SPI_Transmit+0x120>
 8006438:	e07c      	b.n	8006534 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <HAL_SPI_Transmit+0x192>
 8006442:	8afb      	ldrh	r3, [r7, #22]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d170      	bne.n	800652a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b01      	cmp	r3, #1
 8006450:	d912      	bls.n	8006478 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	881a      	ldrh	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006462:	1c9a      	adds	r2, r3, #2
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800646c:	b29b      	uxth	r3, r3
 800646e:	3b02      	subs	r3, #2
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006476:	e058      	b.n	800652a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	330c      	adds	r3, #12
 8006482:	7812      	ldrb	r2, [r2, #0]
 8006484:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006494:	b29b      	uxth	r3, r3
 8006496:	3b01      	subs	r3, #1
 8006498:	b29a      	uxth	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800649e:	e044      	b.n	800652a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d12b      	bne.n	8006506 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d912      	bls.n	80064de <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	881a      	ldrh	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	1c9a      	adds	r2, r3, #2
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b02      	subs	r3, #2
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064dc:	e025      	b.n	800652a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	330c      	adds	r3, #12
 80064e8:	7812      	ldrb	r2, [r2, #0]
 80064ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006504:	e011      	b.n	800652a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006506:	f7fd ffc3 	bl	8004490 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d803      	bhi.n	800651e <HAL_SPI_Transmit+0x268>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800651c:	d102      	bne.n	8006524 <HAL_SPI_Transmit+0x26e>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d102      	bne.n	800652a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006528:	e026      	b.n	8006578 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800652e:	b29b      	uxth	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1b5      	bne.n	80064a0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 fce3 	bl	8006f04 <SPI_EndRxTxTransaction>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10a      	bne.n	8006568 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006552:	2300      	movs	r3, #0
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	77fb      	strb	r3, [r7, #31]
 8006574:	e000      	b.n	8006578 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006576:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006588:	7ffb      	ldrb	r3, [r7, #31]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3720      	adds	r7, #32
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b088      	sub	sp, #32
 8006596:	af02      	add	r7, sp, #8
 8006598:	60f8      	str	r0, [r7, #12]
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	603b      	str	r3, [r7, #0]
 800659e:	4613      	mov	r3, r2
 80065a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ae:	d112      	bne.n	80065d6 <HAL_SPI_Receive+0x44>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10e      	bne.n	80065d6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2204      	movs	r2, #4
 80065bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80065c0:	88fa      	ldrh	r2, [r7, #6]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	4613      	mov	r3, r2
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	68b9      	ldr	r1, [r7, #8]
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 f910 	bl	80067f2 <HAL_SPI_TransmitReceive>
 80065d2:	4603      	mov	r3, r0
 80065d4:	e109      	b.n	80067ea <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_SPI_Receive+0x52>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e102      	b.n	80067ea <HAL_SPI_Receive+0x258>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ec:	f7fd ff50 	bl	8004490 <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d002      	beq.n	8006604 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80065fe:	2302      	movs	r3, #2
 8006600:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006602:	e0e9      	b.n	80067d8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <HAL_SPI_Receive+0x7e>
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d102      	bne.n	8006616 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006614:	e0e0      	b.n	80067d8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2204      	movs	r2, #4
 800661a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	88fa      	ldrh	r2, [r7, #6]
 800662e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	88fa      	ldrh	r2, [r7, #6]
 8006636:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006660:	d908      	bls.n	8006674 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006670:	605a      	str	r2, [r3, #4]
 8006672:	e007      	b.n	8006684 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006682:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800668c:	d10f      	bne.n	80066ae <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800669c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b8:	2b40      	cmp	r3, #64	; 0x40
 80066ba:	d007      	beq.n	80066cc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066d4:	d867      	bhi.n	80067a6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80066d6:	e030      	b.n	800673a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d117      	bne.n	8006716 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f103 020c 	add.w	r2, r3, #12
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	7812      	ldrb	r2, [r2, #0]
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006708:	b29b      	uxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006714:	e011      	b.n	800673a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006716:	f7fd febb 	bl	8004490 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d803      	bhi.n	800672e <HAL_SPI_Receive+0x19c>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800672c:	d102      	bne.n	8006734 <HAL_SPI_Receive+0x1a2>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d102      	bne.n	800673a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006738:	e04e      	b.n	80067d8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1c8      	bne.n	80066d8 <HAL_SPI_Receive+0x146>
 8006746:	e034      	b.n	80067b2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b01      	cmp	r3, #1
 8006754:	d115      	bne.n	8006782 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	b292      	uxth	r2, r2
 8006762:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	1c9a      	adds	r2, r3, #2
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006780:	e011      	b.n	80067a6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006782:	f7fd fe85 	bl	8004490 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d803      	bhi.n	800679a <HAL_SPI_Receive+0x208>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006798:	d102      	bne.n	80067a0 <HAL_SPI_Receive+0x20e>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d102      	bne.n	80067a6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067a4:	e018      	b.n	80067d8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1ca      	bne.n	8006748 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fb4c 	bl	8006e54 <SPI_EndRxTransaction>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	75fb      	strb	r3, [r7, #23]
 80067d4:	e000      	b.n	80067d8 <HAL_SPI_Receive+0x246>
  }

error :
 80067d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b08a      	sub	sp, #40	; 0x28
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006800:	2301      	movs	r3, #1
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_SPI_TransmitReceive+0x26>
 8006814:	2302      	movs	r3, #2
 8006816:	e1fb      	b.n	8006c10 <HAL_SPI_TransmitReceive+0x41e>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006820:	f7fd fe36 	bl	8004490 <HAL_GetTick>
 8006824:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800682c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006834:	887b      	ldrh	r3, [r7, #2]
 8006836:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006838:	887b      	ldrh	r3, [r7, #2]
 800683a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800683c:	7efb      	ldrb	r3, [r7, #27]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d00e      	beq.n	8006860 <HAL_SPI_TransmitReceive+0x6e>
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006848:	d106      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d102      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x66>
 8006852:	7efb      	ldrb	r3, [r7, #27]
 8006854:	2b04      	cmp	r3, #4
 8006856:	d003      	beq.n	8006860 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006858:	2302      	movs	r3, #2
 800685a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800685e:	e1cd      	b.n	8006bfc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <HAL_SPI_TransmitReceive+0x80>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <HAL_SPI_TransmitReceive+0x80>
 800686c:	887b      	ldrh	r3, [r7, #2]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d103      	bne.n	800687a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006878:	e1c0      	b.n	8006bfc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b04      	cmp	r3, #4
 8006884:	d003      	beq.n	800688e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2205      	movs	r2, #5
 800688a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	887a      	ldrh	r2, [r7, #2]
 800689e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	887a      	ldrh	r2, [r7, #2]
 80068a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	887a      	ldrh	r2, [r7, #2]
 80068b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	887a      	ldrh	r2, [r7, #2]
 80068ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068d0:	d802      	bhi.n	80068d8 <HAL_SPI_TransmitReceive+0xe6>
 80068d2:	8a3b      	ldrh	r3, [r7, #16]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d908      	bls.n	80068ea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068e6:	605a      	str	r2, [r3, #4]
 80068e8:	e007      	b.n	80068fa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d007      	beq.n	8006918 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006916:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006920:	d97c      	bls.n	8006a1c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <HAL_SPI_TransmitReceive+0x13e>
 800692a:	8a7b      	ldrh	r3, [r7, #18]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d169      	bne.n	8006a04 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	881a      	ldrh	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	1c9a      	adds	r2, r3, #2
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006954:	e056      	b.n	8006a04 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b02      	cmp	r3, #2
 8006962:	d11b      	bne.n	800699c <HAL_SPI_TransmitReceive+0x1aa>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d016      	beq.n	800699c <HAL_SPI_TransmitReceive+0x1aa>
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	2b01      	cmp	r3, #1
 8006972:	d113      	bne.n	800699c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	881a      	ldrh	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	1c9a      	adds	r2, r3, #2
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d11c      	bne.n	80069e4 <HAL_SPI_TransmitReceive+0x1f2>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d016      	beq.n	80069e4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c0:	b292      	uxth	r2, r2
 80069c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	1c9a      	adds	r2, r3, #2
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069e0:	2301      	movs	r3, #1
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069e4:	f7fd fd54 	bl	8004490 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d807      	bhi.n	8006a04 <HAL_SPI_TransmitReceive+0x212>
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069fa:	d003      	beq.n	8006a04 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006a02:	e0fb      	b.n	8006bfc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1a3      	bne.n	8006956 <HAL_SPI_TransmitReceive+0x164>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d19d      	bne.n	8006956 <HAL_SPI_TransmitReceive+0x164>
 8006a1a:	e0df      	b.n	8006bdc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <HAL_SPI_TransmitReceive+0x23a>
 8006a24:	8a7b      	ldrh	r3, [r7, #18]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	f040 80cb 	bne.w	8006bc2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d912      	bls.n	8006a5c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	881a      	ldrh	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a46:	1c9a      	adds	r2, r3, #2
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	3b02      	subs	r3, #2
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a5a:	e0b2      	b.n	8006bc2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	330c      	adds	r3, #12
 8006a66:	7812      	ldrb	r2, [r2, #0]
 8006a68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a82:	e09e      	b.n	8006bc2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d134      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x30a>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d02f      	beq.n	8006afc <HAL_SPI_TransmitReceive+0x30a>
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d12c      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d912      	bls.n	8006ad2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	881a      	ldrh	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abc:	1c9a      	adds	r2, r3, #2
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b02      	subs	r3, #2
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ad0:	e012      	b.n	8006af8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	330c      	adds	r3, #12
 8006adc:	7812      	ldrb	r2, [r2, #0]
 8006ade:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d148      	bne.n	8006b9c <HAL_SPI_TransmitReceive+0x3aa>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d042      	beq.n	8006b9c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d923      	bls.n	8006b6a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68da      	ldr	r2, [r3, #12]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	b292      	uxth	r2, r2
 8006b2e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	1c9a      	adds	r2, r3, #2
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3b02      	subs	r3, #2
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d81f      	bhi.n	8006b98 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b66:	605a      	str	r2, [r3, #4]
 8006b68:	e016      	b.n	8006b98 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f103 020c 	add.w	r2, r3, #12
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	7812      	ldrb	r2, [r2, #0]
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b9c:	f7fd fc78 	bl	8004490 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d803      	bhi.n	8006bb4 <HAL_SPI_TransmitReceive+0x3c2>
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bb2:	d102      	bne.n	8006bba <HAL_SPI_TransmitReceive+0x3c8>
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d103      	bne.n	8006bc2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006bc0:	e01c      	b.n	8006bfc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f47f af5b 	bne.w	8006a84 <HAL_SPI_TransmitReceive+0x292>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f47f af54 	bne.w	8006a84 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bdc:	69fa      	ldr	r2, [r7, #28]
 8006bde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f98f 	bl	8006f04 <SPI_EndRxTxTransaction>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d006      	beq.n	8006bfa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	661a      	str	r2, [r3, #96]	; 0x60
 8006bf8:	e000      	b.n	8006bfc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006bfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3728      	adds	r7, #40	; 0x28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	4613      	mov	r3, r2
 8006c26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c28:	f7fd fc32 	bl	8004490 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	1a9b      	subs	r3, r3, r2
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	4413      	add	r3, r2
 8006c36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c38:	f7fd fc2a 	bl	8004490 <HAL_GetTick>
 8006c3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c3e:	4b39      	ldr	r3, [pc, #228]	; (8006d24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	015b      	lsls	r3, r3, #5
 8006c44:	0d1b      	lsrs	r3, r3, #20
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	fb02 f303 	mul.w	r3, r2, r3
 8006c4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c4e:	e054      	b.n	8006cfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c56:	d050      	beq.n	8006cfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c58:	f7fd fc1a 	bl	8004490 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d902      	bls.n	8006c6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d13d      	bne.n	8006cea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c86:	d111      	bne.n	8006cac <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c90:	d004      	beq.n	8006c9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9a:	d107      	bne.n	8006cac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006caa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb4:	d10f      	bne.n	8006cd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e017      	b.n	8006d1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4013      	ands	r3, r2
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	bf0c      	ite	eq
 8006d0a:	2301      	moveq	r3, #1
 8006d0c:	2300      	movne	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d19b      	bne.n	8006c50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3720      	adds	r7, #32
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20000000 	.word	0x20000000

08006d28 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	; 0x28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d3a:	f7fd fba9 	bl	8004490 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	1a9b      	subs	r3, r3, r2
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	4413      	add	r3, r2
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006d4a:	f7fd fba1 	bl	8004490 <HAL_GetTick>
 8006d4e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	330c      	adds	r3, #12
 8006d56:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d58:	4b3d      	ldr	r3, [pc, #244]	; (8006e50 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	00da      	lsls	r2, r3, #3
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	0d1b      	lsrs	r3, r3, #20
 8006d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6a:	fb02 f303 	mul.w	r3, r2, r3
 8006d6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d70:	e060      	b.n	8006e34 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d78:	d107      	bne.n	8006d8a <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d104      	bne.n	8006d8a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d90:	d050      	beq.n	8006e34 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d92:	f7fd fb7d 	bl	8004490 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d902      	bls.n	8006da8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d13d      	bne.n	8006e24 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006db6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dc0:	d111      	bne.n	8006de6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dca:	d004      	beq.n	8006dd6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd4:	d107      	bne.n	8006de6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dee:	d10f      	bne.n	8006e10 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e010      	b.n	8006e46 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d196      	bne.n	8006d72 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3728      	adds	r7, #40	; 0x28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000000 	.word	0x20000000

08006e54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af02      	add	r7, sp, #8
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e68:	d111      	bne.n	8006e8e <SPI_EndRxTransaction+0x3a>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e72:	d004      	beq.n	8006e7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e7c:	d107      	bne.n	8006e8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e8c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2200      	movs	r2, #0
 8006e96:	2180      	movs	r1, #128	; 0x80
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7ff febd 	bl	8006c18 <SPI_WaitFlagStateUntilTimeout>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea8:	f043 0220 	orr.w	r2, r3, #32
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e023      	b.n	8006efc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ebc:	d11d      	bne.n	8006efa <SPI_EndRxTransaction+0xa6>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec6:	d004      	beq.n	8006ed2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed0:	d113      	bne.n	8006efa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f7ff ff22 	bl	8006d28 <SPI_WaitFifoStateUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d007      	beq.n	8006efa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eee:	f043 0220 	orr.w	r2, r3, #32
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e000      	b.n	8006efc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af02      	add	r7, sp, #8
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f7ff ff03 	bl	8006d28 <SPI_WaitFifoStateUntilTimeout>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d007      	beq.n	8006f38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f2c:	f043 0220 	orr.w	r2, r3, #32
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e027      	b.n	8006f88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2180      	movs	r1, #128	; 0x80
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f7ff fe68 	bl	8006c18 <SPI_WaitFlagStateUntilTimeout>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d007      	beq.n	8006f5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f52:	f043 0220 	orr.w	r2, r3, #32
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e014      	b.n	8006f88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7ff fedc 	bl	8006d28 <SPI_WaitFifoStateUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f7a:	f043 0220 	orr.w	r2, r3, #32
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e000      	b.n	8006f88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e049      	b.n	8007036 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d106      	bne.n	8006fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f841 	bl	800703e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f000 f9f8 	bl	80073c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
	...

08007054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b01      	cmp	r3, #1
 8007066:	d001      	beq.n	800706c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e04f      	b.n	800710c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0201 	orr.w	r2, r2, #1
 8007082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a23      	ldr	r2, [pc, #140]	; (8007118 <HAL_TIM_Base_Start_IT+0xc4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d01d      	beq.n	80070ca <HAL_TIM_Base_Start_IT+0x76>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007096:	d018      	beq.n	80070ca <HAL_TIM_Base_Start_IT+0x76>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a1f      	ldr	r2, [pc, #124]	; (800711c <HAL_TIM_Base_Start_IT+0xc8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d013      	beq.n	80070ca <HAL_TIM_Base_Start_IT+0x76>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <HAL_TIM_Base_Start_IT+0xcc>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00e      	beq.n	80070ca <HAL_TIM_Base_Start_IT+0x76>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a1c      	ldr	r2, [pc, #112]	; (8007124 <HAL_TIM_Base_Start_IT+0xd0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d009      	beq.n	80070ca <HAL_TIM_Base_Start_IT+0x76>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a1b      	ldr	r2, [pc, #108]	; (8007128 <HAL_TIM_Base_Start_IT+0xd4>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d004      	beq.n	80070ca <HAL_TIM_Base_Start_IT+0x76>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a19      	ldr	r2, [pc, #100]	; (800712c <HAL_TIM_Base_Start_IT+0xd8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d115      	bne.n	80070f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	4b17      	ldr	r3, [pc, #92]	; (8007130 <HAL_TIM_Base_Start_IT+0xdc>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b06      	cmp	r3, #6
 80070da:	d015      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0xb4>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e2:	d011      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0201 	orr.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f4:	e008      	b.n	8007108 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0201 	orr.w	r2, r2, #1
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	e000      	b.n	800710a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007108:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	40012c00 	.word	0x40012c00
 800711c:	40000400 	.word	0x40000400
 8007120:	40000800 	.word	0x40000800
 8007124:	40000c00 	.word	0x40000c00
 8007128:	40013400 	.word	0x40013400
 800712c:	40014000 	.word	0x40014000
 8007130:	00010007 	.word	0x00010007

08007134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b02      	cmp	r3, #2
 8007148:	d122      	bne.n	8007190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b02      	cmp	r3, #2
 8007156:	d11b      	bne.n	8007190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0202 	mvn.w	r2, #2
 8007160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f905 	bl	8007386 <HAL_TIM_IC_CaptureCallback>
 800717c:	e005      	b.n	800718a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f8f7 	bl	8007372 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f908 	bl	800739a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0304 	and.w	r3, r3, #4
 800719a:	2b04      	cmp	r3, #4
 800719c:	d122      	bne.n	80071e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d11b      	bne.n	80071e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0204 	mvn.w	r2, #4
 80071b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2202      	movs	r2, #2
 80071ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f8db 	bl	8007386 <HAL_TIM_IC_CaptureCallback>
 80071d0:	e005      	b.n	80071de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f8cd 	bl	8007372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f8de 	bl	800739a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0308 	and.w	r3, r3, #8
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	d122      	bne.n	8007238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0308 	and.w	r3, r3, #8
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d11b      	bne.n	8007238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0208 	mvn.w	r2, #8
 8007208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2204      	movs	r2, #4
 800720e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f8b1 	bl	8007386 <HAL_TIM_IC_CaptureCallback>
 8007224:	e005      	b.n	8007232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f8a3 	bl	8007372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f8b4 	bl	800739a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f003 0310 	and.w	r3, r3, #16
 8007242:	2b10      	cmp	r3, #16
 8007244:	d122      	bne.n	800728c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f003 0310 	and.w	r3, r3, #16
 8007250:	2b10      	cmp	r3, #16
 8007252:	d11b      	bne.n	800728c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f06f 0210 	mvn.w	r2, #16
 800725c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2208      	movs	r2, #8
 8007262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f887 	bl	8007386 <HAL_TIM_IC_CaptureCallback>
 8007278:	e005      	b.n	8007286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f879 	bl	8007372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f88a 	bl	800739a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10e      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d107      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0201 	mvn.w	r2, #1
 80072b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7fa f858 	bl	8001368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c2:	2b80      	cmp	r3, #128	; 0x80
 80072c4:	d10e      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d0:	2b80      	cmp	r3, #128	; 0x80
 80072d2:	d107      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f914 	bl	800750c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f2:	d10e      	bne.n	8007312 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fe:	2b80      	cmp	r3, #128	; 0x80
 8007300:	d107      	bne.n	8007312 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800730a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f907 	bl	8007520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731c:	2b40      	cmp	r3, #64	; 0x40
 800731e:	d10e      	bne.n	800733e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732a:	2b40      	cmp	r3, #64	; 0x40
 800732c:	d107      	bne.n	800733e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f838 	bl	80073ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b20      	cmp	r3, #32
 800734a:	d10e      	bne.n	800736a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b20      	cmp	r3, #32
 8007358:	d107      	bne.n	800736a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f06f 0220 	mvn.w	r2, #32
 8007362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f8c7 	bl	80074f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800736a:	bf00      	nop
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
	...

080073c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a40      	ldr	r2, [pc, #256]	; (80074d8 <TIM_Base_SetConfig+0x114>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d013      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e2:	d00f      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a3d      	ldr	r2, [pc, #244]	; (80074dc <TIM_Base_SetConfig+0x118>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00b      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a3c      	ldr	r2, [pc, #240]	; (80074e0 <TIM_Base_SetConfig+0x11c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d007      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a3b      	ldr	r2, [pc, #236]	; (80074e4 <TIM_Base_SetConfig+0x120>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d003      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a3a      	ldr	r2, [pc, #232]	; (80074e8 <TIM_Base_SetConfig+0x124>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d108      	bne.n	8007416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a2f      	ldr	r2, [pc, #188]	; (80074d8 <TIM_Base_SetConfig+0x114>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d01f      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007424:	d01b      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a2c      	ldr	r2, [pc, #176]	; (80074dc <TIM_Base_SetConfig+0x118>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d017      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a2b      	ldr	r2, [pc, #172]	; (80074e0 <TIM_Base_SetConfig+0x11c>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d013      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a2a      	ldr	r2, [pc, #168]	; (80074e4 <TIM_Base_SetConfig+0x120>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d00f      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a29      	ldr	r2, [pc, #164]	; (80074e8 <TIM_Base_SetConfig+0x124>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00b      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a28      	ldr	r2, [pc, #160]	; (80074ec <TIM_Base_SetConfig+0x128>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d007      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a27      	ldr	r2, [pc, #156]	; (80074f0 <TIM_Base_SetConfig+0x12c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d003      	beq.n	800745e <TIM_Base_SetConfig+0x9a>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a26      	ldr	r2, [pc, #152]	; (80074f4 <TIM_Base_SetConfig+0x130>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d108      	bne.n	8007470 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	4313      	orrs	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a10      	ldr	r2, [pc, #64]	; (80074d8 <TIM_Base_SetConfig+0x114>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00f      	beq.n	80074bc <TIM_Base_SetConfig+0xf8>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a12      	ldr	r2, [pc, #72]	; (80074e8 <TIM_Base_SetConfig+0x124>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00b      	beq.n	80074bc <TIM_Base_SetConfig+0xf8>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a11      	ldr	r2, [pc, #68]	; (80074ec <TIM_Base_SetConfig+0x128>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d007      	beq.n	80074bc <TIM_Base_SetConfig+0xf8>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a10      	ldr	r2, [pc, #64]	; (80074f0 <TIM_Base_SetConfig+0x12c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d003      	beq.n	80074bc <TIM_Base_SetConfig+0xf8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a0f      	ldr	r2, [pc, #60]	; (80074f4 <TIM_Base_SetConfig+0x130>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d103      	bne.n	80074c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	691a      	ldr	r2, [r3, #16]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	615a      	str	r2, [r3, #20]
}
 80074ca:	bf00      	nop
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	40012c00 	.word	0x40012c00
 80074dc:	40000400 	.word	0x40000400
 80074e0:	40000800 	.word	0x40000800
 80074e4:	40000c00 	.word	0x40000c00
 80074e8:	40013400 	.word	0x40013400
 80074ec:	40014000 	.word	0x40014000
 80074f0:	40014400 	.word	0x40014400
 80074f4:	40014800 	.word	0x40014800

080074f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e040      	b.n	80075c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800754a:	2b00      	cmp	r3, #0
 800754c:	d106      	bne.n	800755c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7fa f9f6 	bl	8001948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2224      	movs	r2, #36	; 0x24
 8007560:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0201 	bic.w	r2, r2, #1
 8007570:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f82c 	bl	80075d0 <UART_SetConfig>
 8007578:	4603      	mov	r3, r0
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e022      	b.n	80075c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fad8 	bl	8007b40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800759e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0201 	orr.w	r2, r2, #1
 80075be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fb5f 	bl	8007c84 <UART_CheckIdleState>
 80075c6:	4603      	mov	r3, r0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075d4:	b08a      	sub	sp, #40	; 0x28
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	431a      	orrs	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	431a      	orrs	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	4ba4      	ldr	r3, [pc, #656]	; (8007890 <UART_SetConfig+0x2c0>)
 8007600:	4013      	ands	r3, r2
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	6812      	ldr	r2, [r2, #0]
 8007606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007608:	430b      	orrs	r3, r1
 800760a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a99      	ldr	r2, [pc, #612]	; (8007894 <UART_SetConfig+0x2c4>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d004      	beq.n	800763c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007638:	4313      	orrs	r3, r2
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764c:	430a      	orrs	r2, r1
 800764e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a90      	ldr	r2, [pc, #576]	; (8007898 <UART_SetConfig+0x2c8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d126      	bne.n	80076a8 <UART_SetConfig+0xd8>
 800765a:	4b90      	ldr	r3, [pc, #576]	; (800789c <UART_SetConfig+0x2cc>)
 800765c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007660:	f003 0303 	and.w	r3, r3, #3
 8007664:	2b03      	cmp	r3, #3
 8007666:	d81b      	bhi.n	80076a0 <UART_SetConfig+0xd0>
 8007668:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <UART_SetConfig+0xa0>)
 800766a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766e:	bf00      	nop
 8007670:	08007681 	.word	0x08007681
 8007674:	08007691 	.word	0x08007691
 8007678:	08007689 	.word	0x08007689
 800767c:	08007699 	.word	0x08007699
 8007680:	2301      	movs	r3, #1
 8007682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007686:	e116      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007688:	2302      	movs	r3, #2
 800768a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800768e:	e112      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007690:	2304      	movs	r3, #4
 8007692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007696:	e10e      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007698:	2308      	movs	r3, #8
 800769a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800769e:	e10a      	b.n	80078b6 <UART_SetConfig+0x2e6>
 80076a0:	2310      	movs	r3, #16
 80076a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076a6:	e106      	b.n	80078b6 <UART_SetConfig+0x2e6>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a7c      	ldr	r2, [pc, #496]	; (80078a0 <UART_SetConfig+0x2d0>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d138      	bne.n	8007724 <UART_SetConfig+0x154>
 80076b2:	4b7a      	ldr	r3, [pc, #488]	; (800789c <UART_SetConfig+0x2cc>)
 80076b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b8:	f003 030c 	and.w	r3, r3, #12
 80076bc:	2b0c      	cmp	r3, #12
 80076be:	d82d      	bhi.n	800771c <UART_SetConfig+0x14c>
 80076c0:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <UART_SetConfig+0xf8>)
 80076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c6:	bf00      	nop
 80076c8:	080076fd 	.word	0x080076fd
 80076cc:	0800771d 	.word	0x0800771d
 80076d0:	0800771d 	.word	0x0800771d
 80076d4:	0800771d 	.word	0x0800771d
 80076d8:	0800770d 	.word	0x0800770d
 80076dc:	0800771d 	.word	0x0800771d
 80076e0:	0800771d 	.word	0x0800771d
 80076e4:	0800771d 	.word	0x0800771d
 80076e8:	08007705 	.word	0x08007705
 80076ec:	0800771d 	.word	0x0800771d
 80076f0:	0800771d 	.word	0x0800771d
 80076f4:	0800771d 	.word	0x0800771d
 80076f8:	08007715 	.word	0x08007715
 80076fc:	2300      	movs	r3, #0
 80076fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007702:	e0d8      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007704:	2302      	movs	r3, #2
 8007706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800770a:	e0d4      	b.n	80078b6 <UART_SetConfig+0x2e6>
 800770c:	2304      	movs	r3, #4
 800770e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007712:	e0d0      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007714:	2308      	movs	r3, #8
 8007716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800771a:	e0cc      	b.n	80078b6 <UART_SetConfig+0x2e6>
 800771c:	2310      	movs	r3, #16
 800771e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007722:	e0c8      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a5e      	ldr	r2, [pc, #376]	; (80078a4 <UART_SetConfig+0x2d4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d125      	bne.n	800777a <UART_SetConfig+0x1aa>
 800772e:	4b5b      	ldr	r3, [pc, #364]	; (800789c <UART_SetConfig+0x2cc>)
 8007730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007734:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007738:	2b30      	cmp	r3, #48	; 0x30
 800773a:	d016      	beq.n	800776a <UART_SetConfig+0x19a>
 800773c:	2b30      	cmp	r3, #48	; 0x30
 800773e:	d818      	bhi.n	8007772 <UART_SetConfig+0x1a2>
 8007740:	2b20      	cmp	r3, #32
 8007742:	d00a      	beq.n	800775a <UART_SetConfig+0x18a>
 8007744:	2b20      	cmp	r3, #32
 8007746:	d814      	bhi.n	8007772 <UART_SetConfig+0x1a2>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <UART_SetConfig+0x182>
 800774c:	2b10      	cmp	r3, #16
 800774e:	d008      	beq.n	8007762 <UART_SetConfig+0x192>
 8007750:	e00f      	b.n	8007772 <UART_SetConfig+0x1a2>
 8007752:	2300      	movs	r3, #0
 8007754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007758:	e0ad      	b.n	80078b6 <UART_SetConfig+0x2e6>
 800775a:	2302      	movs	r3, #2
 800775c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007760:	e0a9      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007762:	2304      	movs	r3, #4
 8007764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007768:	e0a5      	b.n	80078b6 <UART_SetConfig+0x2e6>
 800776a:	2308      	movs	r3, #8
 800776c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007770:	e0a1      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007772:	2310      	movs	r3, #16
 8007774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007778:	e09d      	b.n	80078b6 <UART_SetConfig+0x2e6>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a4a      	ldr	r2, [pc, #296]	; (80078a8 <UART_SetConfig+0x2d8>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d125      	bne.n	80077d0 <UART_SetConfig+0x200>
 8007784:	4b45      	ldr	r3, [pc, #276]	; (800789c <UART_SetConfig+0x2cc>)
 8007786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800778a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800778e:	2bc0      	cmp	r3, #192	; 0xc0
 8007790:	d016      	beq.n	80077c0 <UART_SetConfig+0x1f0>
 8007792:	2bc0      	cmp	r3, #192	; 0xc0
 8007794:	d818      	bhi.n	80077c8 <UART_SetConfig+0x1f8>
 8007796:	2b80      	cmp	r3, #128	; 0x80
 8007798:	d00a      	beq.n	80077b0 <UART_SetConfig+0x1e0>
 800779a:	2b80      	cmp	r3, #128	; 0x80
 800779c:	d814      	bhi.n	80077c8 <UART_SetConfig+0x1f8>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <UART_SetConfig+0x1d8>
 80077a2:	2b40      	cmp	r3, #64	; 0x40
 80077a4:	d008      	beq.n	80077b8 <UART_SetConfig+0x1e8>
 80077a6:	e00f      	b.n	80077c8 <UART_SetConfig+0x1f8>
 80077a8:	2300      	movs	r3, #0
 80077aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ae:	e082      	b.n	80078b6 <UART_SetConfig+0x2e6>
 80077b0:	2302      	movs	r3, #2
 80077b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077b6:	e07e      	b.n	80078b6 <UART_SetConfig+0x2e6>
 80077b8:	2304      	movs	r3, #4
 80077ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077be:	e07a      	b.n	80078b6 <UART_SetConfig+0x2e6>
 80077c0:	2308      	movs	r3, #8
 80077c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077c6:	e076      	b.n	80078b6 <UART_SetConfig+0x2e6>
 80077c8:	2310      	movs	r3, #16
 80077ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ce:	e072      	b.n	80078b6 <UART_SetConfig+0x2e6>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a35      	ldr	r2, [pc, #212]	; (80078ac <UART_SetConfig+0x2dc>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d12a      	bne.n	8007830 <UART_SetConfig+0x260>
 80077da:	4b30      	ldr	r3, [pc, #192]	; (800789c <UART_SetConfig+0x2cc>)
 80077dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077e8:	d01a      	beq.n	8007820 <UART_SetConfig+0x250>
 80077ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077ee:	d81b      	bhi.n	8007828 <UART_SetConfig+0x258>
 80077f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077f4:	d00c      	beq.n	8007810 <UART_SetConfig+0x240>
 80077f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077fa:	d815      	bhi.n	8007828 <UART_SetConfig+0x258>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <UART_SetConfig+0x238>
 8007800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007804:	d008      	beq.n	8007818 <UART_SetConfig+0x248>
 8007806:	e00f      	b.n	8007828 <UART_SetConfig+0x258>
 8007808:	2300      	movs	r3, #0
 800780a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800780e:	e052      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007810:	2302      	movs	r3, #2
 8007812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007816:	e04e      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007818:	2304      	movs	r3, #4
 800781a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800781e:	e04a      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007820:	2308      	movs	r3, #8
 8007822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007826:	e046      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007828:	2310      	movs	r3, #16
 800782a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800782e:	e042      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a17      	ldr	r2, [pc, #92]	; (8007894 <UART_SetConfig+0x2c4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d13a      	bne.n	80078b0 <UART_SetConfig+0x2e0>
 800783a:	4b18      	ldr	r3, [pc, #96]	; (800789c <UART_SetConfig+0x2cc>)
 800783c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007840:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007844:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007848:	d01a      	beq.n	8007880 <UART_SetConfig+0x2b0>
 800784a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800784e:	d81b      	bhi.n	8007888 <UART_SetConfig+0x2b8>
 8007850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007854:	d00c      	beq.n	8007870 <UART_SetConfig+0x2a0>
 8007856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800785a:	d815      	bhi.n	8007888 <UART_SetConfig+0x2b8>
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <UART_SetConfig+0x298>
 8007860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007864:	d008      	beq.n	8007878 <UART_SetConfig+0x2a8>
 8007866:	e00f      	b.n	8007888 <UART_SetConfig+0x2b8>
 8007868:	2300      	movs	r3, #0
 800786a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800786e:	e022      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007870:	2302      	movs	r3, #2
 8007872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007876:	e01e      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007878:	2304      	movs	r3, #4
 800787a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800787e:	e01a      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007880:	2308      	movs	r3, #8
 8007882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007886:	e016      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007888:	2310      	movs	r3, #16
 800788a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800788e:	e012      	b.n	80078b6 <UART_SetConfig+0x2e6>
 8007890:	efff69f3 	.word	0xefff69f3
 8007894:	40008000 	.word	0x40008000
 8007898:	40013800 	.word	0x40013800
 800789c:	40021000 	.word	0x40021000
 80078a0:	40004400 	.word	0x40004400
 80078a4:	40004800 	.word	0x40004800
 80078a8:	40004c00 	.word	0x40004c00
 80078ac:	40005000 	.word	0x40005000
 80078b0:	2310      	movs	r3, #16
 80078b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a9f      	ldr	r2, [pc, #636]	; (8007b38 <UART_SetConfig+0x568>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d17a      	bne.n	80079b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078c4:	2b08      	cmp	r3, #8
 80078c6:	d824      	bhi.n	8007912 <UART_SetConfig+0x342>
 80078c8:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <UART_SetConfig+0x300>)
 80078ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ce:	bf00      	nop
 80078d0:	080078f5 	.word	0x080078f5
 80078d4:	08007913 	.word	0x08007913
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	08007913 	.word	0x08007913
 80078e0:	08007903 	.word	0x08007903
 80078e4:	08007913 	.word	0x08007913
 80078e8:	08007913 	.word	0x08007913
 80078ec:	08007913 	.word	0x08007913
 80078f0:	0800790b 	.word	0x0800790b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f4:	f7fd fec2 	bl	800567c <HAL_RCC_GetPCLK1Freq>
 80078f8:	61f8      	str	r0, [r7, #28]
        break;
 80078fa:	e010      	b.n	800791e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078fc:	4b8f      	ldr	r3, [pc, #572]	; (8007b3c <UART_SetConfig+0x56c>)
 80078fe:	61fb      	str	r3, [r7, #28]
        break;
 8007900:	e00d      	b.n	800791e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007902:	f7fd fe23 	bl	800554c <HAL_RCC_GetSysClockFreq>
 8007906:	61f8      	str	r0, [r7, #28]
        break;
 8007908:	e009      	b.n	800791e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800790a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800790e:	61fb      	str	r3, [r7, #28]
        break;
 8007910:	e005      	b.n	800791e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800791c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 80fb 	beq.w	8007b1c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	4613      	mov	r3, r2
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	4413      	add	r3, r2
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	429a      	cmp	r2, r3
 8007934:	d305      	bcc.n	8007942 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800793c:	69fa      	ldr	r2, [r7, #28]
 800793e:	429a      	cmp	r2, r3
 8007940:	d903      	bls.n	800794a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007948:	e0e8      	b.n	8007b1c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	2200      	movs	r2, #0
 800794e:	461c      	mov	r4, r3
 8007950:	4615      	mov	r5, r2
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	f04f 0300 	mov.w	r3, #0
 800795a:	022b      	lsls	r3, r5, #8
 800795c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007960:	0222      	lsls	r2, r4, #8
 8007962:	68f9      	ldr	r1, [r7, #12]
 8007964:	6849      	ldr	r1, [r1, #4]
 8007966:	0849      	lsrs	r1, r1, #1
 8007968:	2000      	movs	r0, #0
 800796a:	4688      	mov	r8, r1
 800796c:	4681      	mov	r9, r0
 800796e:	eb12 0a08 	adds.w	sl, r2, r8
 8007972:	eb43 0b09 	adc.w	fp, r3, r9
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	603b      	str	r3, [r7, #0]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007984:	4650      	mov	r0, sl
 8007986:	4659      	mov	r1, fp
 8007988:	f7f9 f868 	bl	8000a5c <__aeabi_uldivmod>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4613      	mov	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800799a:	d308      	bcc.n	80079ae <UART_SetConfig+0x3de>
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079a2:	d204      	bcs.n	80079ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	60da      	str	r2, [r3, #12]
 80079ac:	e0b6      	b.n	8007b1c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079b4:	e0b2      	b.n	8007b1c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079be:	d15e      	bne.n	8007a7e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80079c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	d828      	bhi.n	8007a1a <UART_SetConfig+0x44a>
 80079c8:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <UART_SetConfig+0x400>)
 80079ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ce:	bf00      	nop
 80079d0:	080079f5 	.word	0x080079f5
 80079d4:	080079fd 	.word	0x080079fd
 80079d8:	08007a05 	.word	0x08007a05
 80079dc:	08007a1b 	.word	0x08007a1b
 80079e0:	08007a0b 	.word	0x08007a0b
 80079e4:	08007a1b 	.word	0x08007a1b
 80079e8:	08007a1b 	.word	0x08007a1b
 80079ec:	08007a1b 	.word	0x08007a1b
 80079f0:	08007a13 	.word	0x08007a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f4:	f7fd fe42 	bl	800567c <HAL_RCC_GetPCLK1Freq>
 80079f8:	61f8      	str	r0, [r7, #28]
        break;
 80079fa:	e014      	b.n	8007a26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079fc:	f7fd fe54 	bl	80056a8 <HAL_RCC_GetPCLK2Freq>
 8007a00:	61f8      	str	r0, [r7, #28]
        break;
 8007a02:	e010      	b.n	8007a26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a04:	4b4d      	ldr	r3, [pc, #308]	; (8007b3c <UART_SetConfig+0x56c>)
 8007a06:	61fb      	str	r3, [r7, #28]
        break;
 8007a08:	e00d      	b.n	8007a26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a0a:	f7fd fd9f 	bl	800554c <HAL_RCC_GetSysClockFreq>
 8007a0e:	61f8      	str	r0, [r7, #28]
        break;
 8007a10:	e009      	b.n	8007a26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a16:	61fb      	str	r3, [r7, #28]
        break;
 8007a18:	e005      	b.n	8007a26 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d077      	beq.n	8007b1c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	005a      	lsls	r2, r3, #1
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	085b      	lsrs	r3, r3, #1
 8007a36:	441a      	add	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	2b0f      	cmp	r3, #15
 8007a46:	d916      	bls.n	8007a76 <UART_SetConfig+0x4a6>
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a4e:	d212      	bcs.n	8007a76 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	f023 030f 	bic.w	r3, r3, #15
 8007a58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	085b      	lsrs	r3, r3, #1
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	8afb      	ldrh	r3, [r7, #22]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	8afa      	ldrh	r2, [r7, #22]
 8007a72:	60da      	str	r2, [r3, #12]
 8007a74:	e052      	b.n	8007b1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a7c:	e04e      	b.n	8007b1c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a82:	2b08      	cmp	r3, #8
 8007a84:	d827      	bhi.n	8007ad6 <UART_SetConfig+0x506>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <UART_SetConfig+0x4bc>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007ab1 	.word	0x08007ab1
 8007a90:	08007ab9 	.word	0x08007ab9
 8007a94:	08007ac1 	.word	0x08007ac1
 8007a98:	08007ad7 	.word	0x08007ad7
 8007a9c:	08007ac7 	.word	0x08007ac7
 8007aa0:	08007ad7 	.word	0x08007ad7
 8007aa4:	08007ad7 	.word	0x08007ad7
 8007aa8:	08007ad7 	.word	0x08007ad7
 8007aac:	08007acf 	.word	0x08007acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ab0:	f7fd fde4 	bl	800567c <HAL_RCC_GetPCLK1Freq>
 8007ab4:	61f8      	str	r0, [r7, #28]
        break;
 8007ab6:	e014      	b.n	8007ae2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ab8:	f7fd fdf6 	bl	80056a8 <HAL_RCC_GetPCLK2Freq>
 8007abc:	61f8      	str	r0, [r7, #28]
        break;
 8007abe:	e010      	b.n	8007ae2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ac0:	4b1e      	ldr	r3, [pc, #120]	; (8007b3c <UART_SetConfig+0x56c>)
 8007ac2:	61fb      	str	r3, [r7, #28]
        break;
 8007ac4:	e00d      	b.n	8007ae2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ac6:	f7fd fd41 	bl	800554c <HAL_RCC_GetSysClockFreq>
 8007aca:	61f8      	str	r0, [r7, #28]
        break;
 8007acc:	e009      	b.n	8007ae2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ad2:	61fb      	str	r3, [r7, #28]
        break;
 8007ad4:	e005      	b.n	8007ae2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007ae0:	bf00      	nop
    }

    if (pclk != 0U)
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d019      	beq.n	8007b1c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	085a      	lsrs	r2, r3, #1
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	441a      	add	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	2b0f      	cmp	r3, #15
 8007b00:	d909      	bls.n	8007b16 <UART_SetConfig+0x546>
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b08:	d205      	bcs.n	8007b16 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	60da      	str	r2, [r3, #12]
 8007b14:	e002      	b.n	8007b1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3728      	adds	r7, #40	; 0x28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b36:	bf00      	nop
 8007b38:	40008000 	.word	0x40008000
 8007b3c:	00f42400 	.word	0x00f42400

08007b40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00a      	beq.n	8007b6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00a      	beq.n	8007bae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00a      	beq.n	8007bf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d01a      	beq.n	8007c56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c3e:	d10a      	bne.n	8007c56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	605a      	str	r2, [r3, #4]
  }
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af02      	add	r7, sp, #8
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c94:	f7fc fbfc 	bl	8004490 <HAL_GetTick>
 8007c98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0308 	and.w	r3, r3, #8
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d10e      	bne.n	8007cc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f82d 	bl	8007d16 <UART_WaitOnFlagUntilTimeout>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e023      	b.n	8007d0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d10e      	bne.n	8007cf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f817 	bl	8007d16 <UART_WaitOnFlagUntilTimeout>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e00d      	b.n	8007d0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b09c      	sub	sp, #112	; 0x70
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	603b      	str	r3, [r7, #0]
 8007d22:	4613      	mov	r3, r2
 8007d24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d26:	e0a5      	b.n	8007e74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d2e:	f000 80a1 	beq.w	8007e74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d32:	f7fc fbad 	bl	8004490 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d302      	bcc.n	8007d48 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d13e      	bne.n	8007dc6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d5c:	667b      	str	r3, [r7, #100]	; 0x64
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e6      	bne.n	8007d48 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3308      	adds	r3, #8
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8c:	f023 0301 	bic.w	r3, r3, #1
 8007d90:	663b      	str	r3, [r7, #96]	; 0x60
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3308      	adds	r3, #8
 8007d98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007da0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e5      	bne.n	8007d7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2220      	movs	r2, #32
 8007db2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2220      	movs	r2, #32
 8007db8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e067      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d04f      	beq.n	8007e74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de2:	d147      	bne.n	8007e74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	e853 3f00 	ldrex	r3, [r3]
 8007dfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e6      	bne.n	8007dee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3308      	adds	r3, #8
 8007e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f023 0301 	bic.w	r3, r3, #1
 8007e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e40:	623a      	str	r2, [r7, #32]
 8007e42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	69f9      	ldr	r1, [r7, #28]
 8007e46:	6a3a      	ldr	r2, [r7, #32]
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e5      	bne.n	8007e20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2220      	movs	r2, #32
 8007e58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e010      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	69da      	ldr	r2, [r3, #28]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	bf0c      	ite	eq
 8007e84:	2301      	moveq	r3, #1
 8007e86:	2300      	movne	r3, #0
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	79fb      	ldrb	r3, [r7, #7]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	f43f af4a 	beq.w	8007d28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3770      	adds	r7, #112	; 0x70
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <__NVIC_SetPriority>:
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	6039      	str	r1, [r7, #0]
 8007eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	db0a      	blt.n	8007eca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	490c      	ldr	r1, [pc, #48]	; (8007eec <__NVIC_SetPriority+0x4c>)
 8007eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ebe:	0112      	lsls	r2, r2, #4
 8007ec0:	b2d2      	uxtb	r2, r2
 8007ec2:	440b      	add	r3, r1
 8007ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ec8:	e00a      	b.n	8007ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	4908      	ldr	r1, [pc, #32]	; (8007ef0 <__NVIC_SetPriority+0x50>)
 8007ed0:	79fb      	ldrb	r3, [r7, #7]
 8007ed2:	f003 030f 	and.w	r3, r3, #15
 8007ed6:	3b04      	subs	r3, #4
 8007ed8:	0112      	lsls	r2, r2, #4
 8007eda:	b2d2      	uxtb	r2, r2
 8007edc:	440b      	add	r3, r1
 8007ede:	761a      	strb	r2, [r3, #24]
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	e000e100 	.word	0xe000e100
 8007ef0:	e000ed00 	.word	0xe000ed00

08007ef4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007ef8:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <SysTick_Handler+0x1c>)
 8007efa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007efc:	f002 fb00 	bl	800a500 <xTaskGetSchedulerState>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d001      	beq.n	8007f0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007f06:	f003 fb27 	bl	800b558 <xPortSysTickHandler>
  }
}
 8007f0a:	bf00      	nop
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	e000e010 	.word	0xe000e010

08007f14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f14:	b580      	push	{r7, lr}
 8007f16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f18:	2100      	movs	r1, #0
 8007f1a:	f06f 0004 	mvn.w	r0, #4
 8007f1e:	f7ff ffbf 	bl	8007ea0 <__NVIC_SetPriority>
#endif
}
 8007f22:	bf00      	nop
 8007f24:	bd80      	pop	{r7, pc}
	...

08007f28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f2e:	f3ef 8305 	mrs	r3, IPSR
 8007f32:	603b      	str	r3, [r7, #0]
  return(result);
 8007f34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f3a:	f06f 0305 	mvn.w	r3, #5
 8007f3e:	607b      	str	r3, [r7, #4]
 8007f40:	e00c      	b.n	8007f5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f42:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <osKernelInitialize+0x44>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d105      	bne.n	8007f56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f4a:	4b08      	ldr	r3, [pc, #32]	; (8007f6c <osKernelInitialize+0x44>)
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	607b      	str	r3, [r7, #4]
 8007f54:	e002      	b.n	8007f5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f5c:	687b      	ldr	r3, [r7, #4]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	20000274 	.word	0x20000274

08007f70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f76:	f3ef 8305 	mrs	r3, IPSR
 8007f7a:	603b      	str	r3, [r7, #0]
  return(result);
 8007f7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f82:	f06f 0305 	mvn.w	r3, #5
 8007f86:	607b      	str	r3, [r7, #4]
 8007f88:	e010      	b.n	8007fac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <osKernelStart+0x48>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d109      	bne.n	8007fa6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f92:	f7ff ffbf 	bl	8007f14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f96:	4b08      	ldr	r3, [pc, #32]	; (8007fb8 <osKernelStart+0x48>)
 8007f98:	2202      	movs	r2, #2
 8007f9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f9c:	f001 fe1e 	bl	8009bdc <vTaskStartScheduler>
      stat = osOK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	607b      	str	r3, [r7, #4]
 8007fa4:	e002      	b.n	8007fac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007faa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fac:	687b      	ldr	r3, [r7, #4]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000274 	.word	0x20000274

08007fbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b08e      	sub	sp, #56	; 0x38
 8007fc0:	af04      	add	r7, sp, #16
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fcc:	f3ef 8305 	mrs	r3, IPSR
 8007fd0:	617b      	str	r3, [r7, #20]
  return(result);
 8007fd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d17e      	bne.n	80080d6 <osThreadNew+0x11a>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d07b      	beq.n	80080d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007fde:	2380      	movs	r3, #128	; 0x80
 8007fe0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007fe2:	2318      	movs	r3, #24
 8007fe4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d045      	beq.n	8008082 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <osThreadNew+0x48>
        name = attr->name;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d008      	beq.n	800802a <osThreadNew+0x6e>
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	2b38      	cmp	r3, #56	; 0x38
 800801c:	d805      	bhi.n	800802a <osThreadNew+0x6e>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <osThreadNew+0x72>
        return (NULL);
 800802a:	2300      	movs	r3, #0
 800802c:	e054      	b.n	80080d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	089b      	lsrs	r3, r3, #2
 800803c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00e      	beq.n	8008064 <osThreadNew+0xa8>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	2bbb      	cmp	r3, #187	; 0xbb
 800804c:	d90a      	bls.n	8008064 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008052:	2b00      	cmp	r3, #0
 8008054:	d006      	beq.n	8008064 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <osThreadNew+0xa8>
        mem = 1;
 800805e:	2301      	movs	r3, #1
 8008060:	61bb      	str	r3, [r7, #24]
 8008062:	e010      	b.n	8008086 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10c      	bne.n	8008086 <osThreadNew+0xca>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d108      	bne.n	8008086 <osThreadNew+0xca>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <osThreadNew+0xca>
          mem = 0;
 800807c:	2300      	movs	r3, #0
 800807e:	61bb      	str	r3, [r7, #24]
 8008080:	e001      	b.n	8008086 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d110      	bne.n	80080ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008094:	9202      	str	r2, [sp, #8]
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	6a3a      	ldr	r2, [r7, #32]
 80080a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f001 fbae 	bl	8009804 <xTaskCreateStatic>
 80080a8:	4603      	mov	r3, r0
 80080aa:	613b      	str	r3, [r7, #16]
 80080ac:	e013      	b.n	80080d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d110      	bne.n	80080d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	f107 0310 	add.w	r3, r7, #16
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f001 fbf9 	bl	80098be <xTaskCreate>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d001      	beq.n	80080d6 <osThreadNew+0x11a>
            hTask = NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80080d6:	693b      	ldr	r3, [r7, #16]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3728      	adds	r7, #40	; 0x28
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080e8:	f3ef 8305 	mrs	r3, IPSR
 80080ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80080ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <osDelay+0x1c>
    stat = osErrorISR;
 80080f4:	f06f 0305 	mvn.w	r3, #5
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	e007      	b.n	800810c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d002      	beq.n	800810c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 fd34 	bl	8009b74 <vTaskDelay>
    }
  }

  return (stat);
 800810c:	68fb      	ldr	r3, [r7, #12]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4a07      	ldr	r2, [pc, #28]	; (8008144 <vApplicationGetIdleTaskMemory+0x2c>)
 8008128:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	4a06      	ldr	r2, [pc, #24]	; (8008148 <vApplicationGetIdleTaskMemory+0x30>)
 800812e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2280      	movs	r2, #128	; 0x80
 8008134:	601a      	str	r2, [r3, #0]
}
 8008136:	bf00      	nop
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	20000278 	.word	0x20000278
 8008148:	20000334 	.word	0x20000334

0800814c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4a07      	ldr	r2, [pc, #28]	; (8008178 <vApplicationGetTimerTaskMemory+0x2c>)
 800815c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	4a06      	ldr	r2, [pc, #24]	; (800817c <vApplicationGetTimerTaskMemory+0x30>)
 8008162:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f44f 7280 	mov.w	r2, #256	; 0x100
 800816a:	601a      	str	r2, [r3, #0]
}
 800816c:	bf00      	nop
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	20000534 	.word	0x20000534
 800817c:	200005f0 	.word	0x200005f0

08008180 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f103 0208 	add.w	r2, r3, #8
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008198:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f103 0208 	add.w	r2, r3, #8
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f103 0208 	add.w	r2, r3, #8
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081ce:	bf00      	nop
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081da:	b480      	push	{r7}
 80081dc:	b085      	sub	sp, #20
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	689a      	ldr	r2, [r3, #8]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	601a      	str	r2, [r3, #0]
}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008222:	b480      	push	{r7}
 8008224:	b085      	sub	sp, #20
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008238:	d103      	bne.n	8008242 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	e00c      	b.n	800825c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3308      	adds	r3, #8
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	e002      	b.n	8008250 <vListInsert+0x2e>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	429a      	cmp	r2, r3
 800825a:	d2f6      	bcs.n	800824a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	601a      	str	r2, [r3, #0]
}
 8008288:	bf00      	nop
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	6892      	ldr	r2, [r2, #8]
 80082aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	6852      	ldr	r2, [r2, #4]
 80082b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d103      	bne.n	80082c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	1e5a      	subs	r2, r3, #1
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10a      	bne.n	8008312 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008312:	f003 f88f 	bl	800b434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800831e:	68f9      	ldr	r1, [r7, #12]
 8008320:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008322:	fb01 f303 	mul.w	r3, r1, r3
 8008326:	441a      	add	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008342:	3b01      	subs	r3, #1
 8008344:	68f9      	ldr	r1, [r7, #12]
 8008346:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008348:	fb01 f303 	mul.w	r3, r1, r3
 800834c:	441a      	add	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	22ff      	movs	r2, #255	; 0xff
 8008356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	22ff      	movs	r2, #255	; 0xff
 800835e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d114      	bne.n	8008392 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01a      	beq.n	80083a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	3310      	adds	r3, #16
 8008374:	4618      	mov	r0, r3
 8008376:	f001 fecb 	bl	800a110 <xTaskRemoveFromEventList>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d012      	beq.n	80083a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008380:	4b0c      	ldr	r3, [pc, #48]	; (80083b4 <xQueueGenericReset+0xcc>)
 8008382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	e009      	b.n	80083a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	3310      	adds	r3, #16
 8008396:	4618      	mov	r0, r3
 8008398:	f7ff fef2 	bl	8008180 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3324      	adds	r3, #36	; 0x24
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff feed 	bl	8008180 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083a6:	f003 f875 	bl	800b494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083aa:	2301      	movs	r3, #1
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08e      	sub	sp, #56	; 0x38
 80083bc:	af02      	add	r7, sp, #8
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10a      	bne.n	80083fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083fa:	bf00      	nop
 80083fc:	e7fe      	b.n	80083fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <xQueueGenericCreateStatic+0x52>
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <xQueueGenericCreateStatic+0x56>
 800840a:	2301      	movs	r3, #1
 800840c:	e000      	b.n	8008410 <xQueueGenericCreateStatic+0x58>
 800840e:	2300      	movs	r3, #0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10a      	bne.n	800842a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	623b      	str	r3, [r7, #32]
}
 8008426:	bf00      	nop
 8008428:	e7fe      	b.n	8008428 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d102      	bne.n	8008436 <xQueueGenericCreateStatic+0x7e>
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <xQueueGenericCreateStatic+0x82>
 8008436:	2301      	movs	r3, #1
 8008438:	e000      	b.n	800843c <xQueueGenericCreateStatic+0x84>
 800843a:	2300      	movs	r3, #0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10a      	bne.n	8008456 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	61fb      	str	r3, [r7, #28]
}
 8008452:	bf00      	nop
 8008454:	e7fe      	b.n	8008454 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008456:	2350      	movs	r3, #80	; 0x50
 8008458:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2b50      	cmp	r3, #80	; 0x50
 800845e:	d00a      	beq.n	8008476 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	61bb      	str	r3, [r7, #24]
}
 8008472:	bf00      	nop
 8008474:	e7fe      	b.n	8008474 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008476:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800847c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00d      	beq.n	800849e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800848a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800848e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	4613      	mov	r3, r2
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	68b9      	ldr	r1, [r7, #8]
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 f83f 	bl	800851c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3730      	adds	r7, #48	; 0x30
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08a      	sub	sp, #40	; 0x28
 80084ac:	af02      	add	r7, sp, #8
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	4613      	mov	r3, r2
 80084b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10a      	bne.n	80084d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	613b      	str	r3, [r7, #16]
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	fb02 f303 	mul.w	r3, r2, r3
 80084da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	3350      	adds	r3, #80	; 0x50
 80084e0:	4618      	mov	r0, r3
 80084e2:	f003 f8c9 	bl	800b678 <pvPortMalloc>
 80084e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d011      	beq.n	8008512 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	3350      	adds	r3, #80	; 0x50
 80084f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008500:	79fa      	ldrb	r2, [r7, #7]
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	4613      	mov	r3, r2
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	68b9      	ldr	r1, [r7, #8]
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f000 f805 	bl	800851c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008512:	69bb      	ldr	r3, [r7, #24]
	}
 8008514:	4618      	mov	r0, r3
 8008516:	3720      	adds	r7, #32
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d103      	bne.n	8008538 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	e002      	b.n	800853e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800854a:	2101      	movs	r1, #1
 800854c:	69b8      	ldr	r0, [r7, #24]
 800854e:	f7ff fecb 	bl	80082e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	78fa      	ldrb	r2, [r7, #3]
 8008556:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800855a:	bf00      	nop
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00e      	beq.n	800858e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008582:	2300      	movs	r3, #0
 8008584:	2200      	movs	r2, #0
 8008586:	2100      	movs	r1, #0
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f81d 	bl	80085c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008596:	b580      	push	{r7, lr}
 8008598:	b086      	sub	sp, #24
 800859a:	af00      	add	r7, sp, #0
 800859c:	4603      	mov	r3, r0
 800859e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80085a0:	2301      	movs	r3, #1
 80085a2:	617b      	str	r3, [r7, #20]
 80085a4:	2300      	movs	r3, #0
 80085a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	461a      	mov	r2, r3
 80085ac:	6939      	ldr	r1, [r7, #16]
 80085ae:	6978      	ldr	r0, [r7, #20]
 80085b0:	f7ff ff7a 	bl	80084a8 <xQueueGenericCreate>
 80085b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f7ff ffd3 	bl	8008562 <prvInitialiseMutex>

		return xNewQueue;
 80085bc:	68fb      	ldr	r3, [r7, #12]
	}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08e      	sub	sp, #56	; 0x38
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
 80085d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80085d6:	2300      	movs	r3, #0
 80085d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10a      	bne.n	80085fa <xQueueGenericSend+0x32>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085f6:	bf00      	nop
 80085f8:	e7fe      	b.n	80085f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d103      	bne.n	8008608 <xQueueGenericSend+0x40>
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <xQueueGenericSend+0x44>
 8008608:	2301      	movs	r3, #1
 800860a:	e000      	b.n	800860e <xQueueGenericSend+0x46>
 800860c:	2300      	movs	r3, #0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10a      	bne.n	8008628 <xQueueGenericSend+0x60>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008624:	bf00      	nop
 8008626:	e7fe      	b.n	8008626 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2b02      	cmp	r3, #2
 800862c:	d103      	bne.n	8008636 <xQueueGenericSend+0x6e>
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008632:	2b01      	cmp	r3, #1
 8008634:	d101      	bne.n	800863a <xQueueGenericSend+0x72>
 8008636:	2301      	movs	r3, #1
 8008638:	e000      	b.n	800863c <xQueueGenericSend+0x74>
 800863a:	2300      	movs	r3, #0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10a      	bne.n	8008656 <xQueueGenericSend+0x8e>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	623b      	str	r3, [r7, #32]
}
 8008652:	bf00      	nop
 8008654:	e7fe      	b.n	8008654 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008656:	f001 ff53 	bl	800a500 <xTaskGetSchedulerState>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d102      	bne.n	8008666 <xQueueGenericSend+0x9e>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <xQueueGenericSend+0xa2>
 8008666:	2301      	movs	r3, #1
 8008668:	e000      	b.n	800866c <xQueueGenericSend+0xa4>
 800866a:	2300      	movs	r3, #0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10a      	bne.n	8008686 <xQueueGenericSend+0xbe>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	61fb      	str	r3, [r7, #28]
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008686:	f002 fed5 	bl	800b434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008692:	429a      	cmp	r2, r3
 8008694:	d302      	bcc.n	800869c <xQueueGenericSend+0xd4>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d129      	bne.n	80086f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086a2:	f000 fbbb 	bl	8008e1c <prvCopyDataToQueue>
 80086a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d010      	beq.n	80086d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	3324      	adds	r3, #36	; 0x24
 80086b4:	4618      	mov	r0, r3
 80086b6:	f001 fd2b 	bl	800a110 <xTaskRemoveFromEventList>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d013      	beq.n	80086e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80086c0:	4b3f      	ldr	r3, [pc, #252]	; (80087c0 <xQueueGenericSend+0x1f8>)
 80086c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	e00a      	b.n	80086e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80086d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d007      	beq.n	80086e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80086d8:	4b39      	ldr	r3, [pc, #228]	; (80087c0 <xQueueGenericSend+0x1f8>)
 80086da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80086e8:	f002 fed4 	bl	800b494 <vPortExitCritical>
				return pdPASS;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e063      	b.n	80087b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d103      	bne.n	80086fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086f6:	f002 fecd 	bl	800b494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	e05c      	b.n	80087b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008704:	f107 0314 	add.w	r3, r7, #20
 8008708:	4618      	mov	r0, r3
 800870a:	f001 fd8b 	bl	800a224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800870e:	2301      	movs	r3, #1
 8008710:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008712:	f002 febf 	bl	800b494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008716:	f001 fad1 	bl	8009cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800871a:	f002 fe8b 	bl	800b434 <vPortEnterCritical>
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008724:	b25b      	sxtb	r3, r3
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800872a:	d103      	bne.n	8008734 <xQueueGenericSend+0x16c>
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	2200      	movs	r2, #0
 8008730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800873a:	b25b      	sxtb	r3, r3
 800873c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008740:	d103      	bne.n	800874a <xQueueGenericSend+0x182>
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800874a:	f002 fea3 	bl	800b494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800874e:	1d3a      	adds	r2, r7, #4
 8008750:	f107 0314 	add.w	r3, r7, #20
 8008754:	4611      	mov	r1, r2
 8008756:	4618      	mov	r0, r3
 8008758:	f001 fd7a 	bl	800a250 <xTaskCheckForTimeOut>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d124      	bne.n	80087ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008764:	f000 fc52 	bl	800900c <prvIsQueueFull>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d018      	beq.n	80087a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	3310      	adds	r3, #16
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	4611      	mov	r1, r2
 8008776:	4618      	mov	r0, r3
 8008778:	f001 fc7a 	bl	800a070 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800877c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800877e:	f000 fbdd 	bl	8008f3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008782:	f001 faa9 	bl	8009cd8 <xTaskResumeAll>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	f47f af7c 	bne.w	8008686 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800878e:	4b0c      	ldr	r3, [pc, #48]	; (80087c0 <xQueueGenericSend+0x1f8>)
 8008790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	e772      	b.n	8008686 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087a2:	f000 fbcb 	bl	8008f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087a6:	f001 fa97 	bl	8009cd8 <xTaskResumeAll>
 80087aa:	e76c      	b.n	8008686 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80087ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087ae:	f000 fbc5 	bl	8008f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087b2:	f001 fa91 	bl	8009cd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80087b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3738      	adds	r7, #56	; 0x38
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	e000ed04 	.word	0xe000ed04

080087c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b090      	sub	sp, #64	; 0x40
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10a      	bne.n	80087f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d103      	bne.n	8008800 <xQueueGenericSendFromISR+0x3c>
 80087f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <xQueueGenericSendFromISR+0x40>
 8008800:	2301      	movs	r3, #1
 8008802:	e000      	b.n	8008806 <xQueueGenericSendFromISR+0x42>
 8008804:	2300      	movs	r3, #0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10a      	bne.n	8008820 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800881c:	bf00      	nop
 800881e:	e7fe      	b.n	800881e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d103      	bne.n	800882e <xQueueGenericSendFromISR+0x6a>
 8008826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882a:	2b01      	cmp	r3, #1
 800882c:	d101      	bne.n	8008832 <xQueueGenericSendFromISR+0x6e>
 800882e:	2301      	movs	r3, #1
 8008830:	e000      	b.n	8008834 <xQueueGenericSendFromISR+0x70>
 8008832:	2300      	movs	r3, #0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10a      	bne.n	800884e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883c:	f383 8811 	msr	BASEPRI, r3
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	623b      	str	r3, [r7, #32]
}
 800884a:	bf00      	nop
 800884c:	e7fe      	b.n	800884c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800884e:	f002 fed3 	bl	800b5f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008852:	f3ef 8211 	mrs	r2, BASEPRI
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	61fa      	str	r2, [r7, #28]
 8008868:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800886a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800886c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800886e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008876:	429a      	cmp	r2, r3
 8008878:	d302      	bcc.n	8008880 <xQueueGenericSendFromISR+0xbc>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b02      	cmp	r3, #2
 800887e:	d12f      	bne.n	80088e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	68b9      	ldr	r1, [r7, #8]
 8008894:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008896:	f000 fac1 	bl	8008e1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800889a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800889e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088a2:	d112      	bne.n	80088ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d016      	beq.n	80088da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ae:	3324      	adds	r3, #36	; 0x24
 80088b0:	4618      	mov	r0, r3
 80088b2:	f001 fc2d 	bl	800a110 <xTaskRemoveFromEventList>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00e      	beq.n	80088da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00b      	beq.n	80088da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	e007      	b.n	80088da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80088ce:	3301      	adds	r3, #1
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	b25a      	sxtb	r2, r3
 80088d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80088da:	2301      	movs	r3, #1
 80088dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80088de:	e001      	b.n	80088e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80088e0:	2300      	movs	r3, #0
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80088ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3740      	adds	r7, #64	; 0x40
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b08e      	sub	sp, #56	; 0x38
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10a      	bne.n	8008924 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	623b      	str	r3, [r7, #32]
}
 8008920:	bf00      	nop
 8008922:	e7fe      	b.n	8008922 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00a      	beq.n	8008942 <xQueueGiveFromISR+0x48>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	61fb      	str	r3, [r7, #28]
}
 800893e:	bf00      	nop
 8008940:	e7fe      	b.n	8008940 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d103      	bne.n	8008952 <xQueueGiveFromISR+0x58>
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <xQueueGiveFromISR+0x5c>
 8008952:	2301      	movs	r3, #1
 8008954:	e000      	b.n	8008958 <xQueueGiveFromISR+0x5e>
 8008956:	2300      	movs	r3, #0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <xQueueGiveFromISR+0x78>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	61bb      	str	r3, [r7, #24]
}
 800896e:	bf00      	nop
 8008970:	e7fe      	b.n	8008970 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008972:	f002 fe41 	bl	800b5f8 <vPortValidateInterruptPriority>
	__asm volatile
 8008976:	f3ef 8211 	mrs	r2, BASEPRI
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	617a      	str	r2, [r7, #20]
 800898c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800898e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008990:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008996:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800899e:	429a      	cmp	r2, r3
 80089a0:	d22b      	bcs.n	80089fa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ae:	1c5a      	adds	r2, r3, #1
 80089b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089bc:	d112      	bne.n	80089e4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d016      	beq.n	80089f4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c8:	3324      	adds	r3, #36	; 0x24
 80089ca:	4618      	mov	r0, r3
 80089cc:	f001 fba0 	bl	800a110 <xTaskRemoveFromEventList>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00e      	beq.n	80089f4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	2201      	movs	r2, #1
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	e007      	b.n	80089f4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089e8:	3301      	adds	r3, #1
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	b25a      	sxtb	r2, r3
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80089f4:	2301      	movs	r3, #1
 80089f6:	637b      	str	r3, [r7, #52]	; 0x34
 80089f8:	e001      	b.n	80089fe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	637b      	str	r3, [r7, #52]	; 0x34
 80089fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f383 8811 	msr	BASEPRI, r3
}
 8008a08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3738      	adds	r7, #56	; 0x38
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08c      	sub	sp, #48	; 0x30
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a20:	2300      	movs	r3, #0
 8008a22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10a      	bne.n	8008a44 <xQueueReceive+0x30>
	__asm volatile
 8008a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	623b      	str	r3, [r7, #32]
}
 8008a40:	bf00      	nop
 8008a42:	e7fe      	b.n	8008a42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d103      	bne.n	8008a52 <xQueueReceive+0x3e>
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <xQueueReceive+0x42>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e000      	b.n	8008a58 <xQueueReceive+0x44>
 8008a56:	2300      	movs	r3, #0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <xQueueReceive+0x5e>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	61fb      	str	r3, [r7, #28]
}
 8008a6e:	bf00      	nop
 8008a70:	e7fe      	b.n	8008a70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a72:	f001 fd45 	bl	800a500 <xTaskGetSchedulerState>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d102      	bne.n	8008a82 <xQueueReceive+0x6e>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <xQueueReceive+0x72>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e000      	b.n	8008a88 <xQueueReceive+0x74>
 8008a86:	2300      	movs	r3, #0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10a      	bne.n	8008aa2 <xQueueReceive+0x8e>
	__asm volatile
 8008a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	61bb      	str	r3, [r7, #24]
}
 8008a9e:	bf00      	nop
 8008aa0:	e7fe      	b.n	8008aa0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008aa2:	f002 fcc7 	bl	800b434 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d01f      	beq.n	8008af2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ab2:	68b9      	ldr	r1, [r7, #8]
 8008ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ab6:	f000 fa1b 	bl	8008ef0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	1e5a      	subs	r2, r3, #1
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00f      	beq.n	8008aea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008acc:	3310      	adds	r3, #16
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f001 fb1e 	bl	800a110 <xTaskRemoveFromEventList>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d007      	beq.n	8008aea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ada:	4b3d      	ldr	r3, [pc, #244]	; (8008bd0 <xQueueReceive+0x1bc>)
 8008adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008aea:	f002 fcd3 	bl	800b494 <vPortExitCritical>
				return pdPASS;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e069      	b.n	8008bc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d103      	bne.n	8008b00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008af8:	f002 fccc 	bl	800b494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008afc:	2300      	movs	r3, #0
 8008afe:	e062      	b.n	8008bc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b06:	f107 0310 	add.w	r3, r7, #16
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f001 fb8a 	bl	800a224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b10:	2301      	movs	r3, #1
 8008b12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b14:	f002 fcbe 	bl	800b494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b18:	f001 f8d0 	bl	8009cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b1c:	f002 fc8a 	bl	800b434 <vPortEnterCritical>
 8008b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b26:	b25b      	sxtb	r3, r3
 8008b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b2c:	d103      	bne.n	8008b36 <xQueueReceive+0x122>
 8008b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b3c:	b25b      	sxtb	r3, r3
 8008b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b42:	d103      	bne.n	8008b4c <xQueueReceive+0x138>
 8008b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b4c:	f002 fca2 	bl	800b494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b50:	1d3a      	adds	r2, r7, #4
 8008b52:	f107 0310 	add.w	r3, r7, #16
 8008b56:	4611      	mov	r1, r2
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f001 fb79 	bl	800a250 <xTaskCheckForTimeOut>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d123      	bne.n	8008bac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b66:	f000 fa3b 	bl	8008fe0 <prvIsQueueEmpty>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d017      	beq.n	8008ba0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	3324      	adds	r3, #36	; 0x24
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	4611      	mov	r1, r2
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f001 fa79 	bl	800a070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b80:	f000 f9dc 	bl	8008f3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b84:	f001 f8a8 	bl	8009cd8 <xTaskResumeAll>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d189      	bne.n	8008aa2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008b8e:	4b10      	ldr	r3, [pc, #64]	; (8008bd0 <xQueueReceive+0x1bc>)
 8008b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	e780      	b.n	8008aa2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ba2:	f000 f9cb 	bl	8008f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ba6:	f001 f897 	bl	8009cd8 <xTaskResumeAll>
 8008baa:	e77a      	b.n	8008aa2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bae:	f000 f9c5 	bl	8008f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bb2:	f001 f891 	bl	8009cd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bb8:	f000 fa12 	bl	8008fe0 <prvIsQueueEmpty>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f43f af6f 	beq.w	8008aa2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008bc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3730      	adds	r7, #48	; 0x30
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	e000ed04 	.word	0xe000ed04

08008bd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b08e      	sub	sp, #56	; 0x38
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008bde:	2300      	movs	r3, #0
 8008be0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008be6:	2300      	movs	r3, #0
 8008be8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10a      	bne.n	8008c06 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	623b      	str	r3, [r7, #32]
}
 8008c02:	bf00      	nop
 8008c04:	e7fe      	b.n	8008c04 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	61fb      	str	r3, [r7, #28]
}
 8008c20:	bf00      	nop
 8008c22:	e7fe      	b.n	8008c22 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c24:	f001 fc6c 	bl	800a500 <xTaskGetSchedulerState>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d102      	bne.n	8008c34 <xQueueSemaphoreTake+0x60>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <xQueueSemaphoreTake+0x64>
 8008c34:	2301      	movs	r3, #1
 8008c36:	e000      	b.n	8008c3a <xQueueSemaphoreTake+0x66>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10a      	bne.n	8008c54 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	61bb      	str	r3, [r7, #24]
}
 8008c50:	bf00      	nop
 8008c52:	e7fe      	b.n	8008c52 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c54:	f002 fbee 	bl	800b434 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d024      	beq.n	8008cae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	1e5a      	subs	r2, r3, #1
 8008c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d104      	bne.n	8008c7e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008c74:	f001 fdba 	bl	800a7ec <pvTaskIncrementMutexHeldCount>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00f      	beq.n	8008ca6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c88:	3310      	adds	r3, #16
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f001 fa40 	bl	800a110 <xTaskRemoveFromEventList>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d007      	beq.n	8008ca6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c96:	4b54      	ldr	r3, [pc, #336]	; (8008de8 <xQueueSemaphoreTake+0x214>)
 8008c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ca6:	f002 fbf5 	bl	800b494 <vPortExitCritical>
				return pdPASS;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e097      	b.n	8008dde <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d111      	bne.n	8008cd8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00a      	beq.n	8008cd0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	617b      	str	r3, [r7, #20]
}
 8008ccc:	bf00      	nop
 8008cce:	e7fe      	b.n	8008cce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008cd0:	f002 fbe0 	bl	800b494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	e082      	b.n	8008dde <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d106      	bne.n	8008cec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cde:	f107 030c 	add.w	r3, r7, #12
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f001 fa9e 	bl	800a224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cec:	f002 fbd2 	bl	800b494 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cf0:	f000 ffe4 	bl	8009cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cf4:	f002 fb9e 	bl	800b434 <vPortEnterCritical>
 8008cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cfe:	b25b      	sxtb	r3, r3
 8008d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d04:	d103      	bne.n	8008d0e <xQueueSemaphoreTake+0x13a>
 8008d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d14:	b25b      	sxtb	r3, r3
 8008d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d1a:	d103      	bne.n	8008d24 <xQueueSemaphoreTake+0x150>
 8008d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d24:	f002 fbb6 	bl	800b494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d28:	463a      	mov	r2, r7
 8008d2a:	f107 030c 	add.w	r3, r7, #12
 8008d2e:	4611      	mov	r1, r2
 8008d30:	4618      	mov	r0, r3
 8008d32:	f001 fa8d 	bl	800a250 <xTaskCheckForTimeOut>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d132      	bne.n	8008da2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d3e:	f000 f94f 	bl	8008fe0 <prvIsQueueEmpty>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d026      	beq.n	8008d96 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d109      	bne.n	8008d64 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008d50:	f002 fb70 	bl	800b434 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f001 fbef 	bl	800a53c <xTaskPriorityInherit>
 8008d5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008d60:	f002 fb98 	bl	800b494 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d66:	3324      	adds	r3, #36	; 0x24
 8008d68:	683a      	ldr	r2, [r7, #0]
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f001 f97f 	bl	800a070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d74:	f000 f8e2 	bl	8008f3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d78:	f000 ffae 	bl	8009cd8 <xTaskResumeAll>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f47f af68 	bne.w	8008c54 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008d84:	4b18      	ldr	r3, [pc, #96]	; (8008de8 <xQueueSemaphoreTake+0x214>)
 8008d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	e75e      	b.n	8008c54 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d98:	f000 f8d0 	bl	8008f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d9c:	f000 ff9c 	bl	8009cd8 <xTaskResumeAll>
 8008da0:	e758      	b.n	8008c54 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008da2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008da4:	f000 f8ca 	bl	8008f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008da8:	f000 ff96 	bl	8009cd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dae:	f000 f917 	bl	8008fe0 <prvIsQueueEmpty>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f43f af4d 	beq.w	8008c54 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00d      	beq.n	8008ddc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008dc0:	f002 fb38 	bl	800b434 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dc6:	f000 f811 	bl	8008dec <prvGetDisinheritPriorityAfterTimeout>
 8008dca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f001 fc88 	bl	800a6e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008dd8:	f002 fb5c 	bl	800b494 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ddc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3738      	adds	r7, #56	; 0x38
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	e000ed04 	.word	0xe000ed04

08008dec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d006      	beq.n	8008e0a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008e06:	60fb      	str	r3, [r7, #12]
 8008e08:	e001      	b.n	8008e0e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
	}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10d      	bne.n	8008e56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d14d      	bne.n	8008ede <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f001 fbe0 	bl	800a60c <xTaskPriorityDisinherit>
 8008e4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	609a      	str	r2, [r3, #8]
 8008e54:	e043      	b.n	8008ede <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d119      	bne.n	8008e90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6858      	ldr	r0, [r3, #4]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e64:	461a      	mov	r2, r3
 8008e66:	68b9      	ldr	r1, [r7, #8]
 8008e68:	f002 fe36 	bl	800bad8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e74:	441a      	add	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d32b      	bcc.n	8008ede <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	605a      	str	r2, [r3, #4]
 8008e8e:	e026      	b.n	8008ede <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	68d8      	ldr	r0, [r3, #12]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e98:	461a      	mov	r2, r3
 8008e9a:	68b9      	ldr	r1, [r7, #8]
 8008e9c:	f002 fe1c 	bl	800bad8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	68da      	ldr	r2, [r3, #12]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea8:	425b      	negs	r3, r3
 8008eaa:	441a      	add	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d207      	bcs.n	8008ecc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	689a      	ldr	r2, [r3, #8]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec4:	425b      	negs	r3, r3
 8008ec6:	441a      	add	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d105      	bne.n	8008ede <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d002      	beq.n	8008ede <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ee6:	697b      	ldr	r3, [r7, #20]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d018      	beq.n	8008f34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0a:	441a      	add	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68da      	ldr	r2, [r3, #12]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d303      	bcc.n	8008f24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68d9      	ldr	r1, [r3, #12]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	6838      	ldr	r0, [r7, #0]
 8008f30:	f002 fdd2 	bl	800bad8 <memcpy>
	}
}
 8008f34:	bf00      	nop
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f44:	f002 fa76 	bl	800b434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f50:	e011      	b.n	8008f76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d012      	beq.n	8008f80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	3324      	adds	r3, #36	; 0x24
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 f8d6 	bl	800a110 <xTaskRemoveFromEventList>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f6a:	f001 f9d3 	bl	800a314 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	3b01      	subs	r3, #1
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	dce9      	bgt.n	8008f52 <prvUnlockQueue+0x16>
 8008f7e:	e000      	b.n	8008f82 <prvUnlockQueue+0x46>
					break;
 8008f80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	22ff      	movs	r2, #255	; 0xff
 8008f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008f8a:	f002 fa83 	bl	800b494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f8e:	f002 fa51 	bl	800b434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f9a:	e011      	b.n	8008fc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d012      	beq.n	8008fca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3310      	adds	r3, #16
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f001 f8b1 	bl	800a110 <xTaskRemoveFromEventList>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008fb4:	f001 f9ae 	bl	800a314 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	dce9      	bgt.n	8008f9c <prvUnlockQueue+0x60>
 8008fc8:	e000      	b.n	8008fcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008fca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	22ff      	movs	r2, #255	; 0xff
 8008fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008fd4:	f002 fa5e 	bl	800b494 <vPortExitCritical>
}
 8008fd8:	bf00      	nop
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fe8:	f002 fa24 	bl	800b434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d102      	bne.n	8008ffa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	e001      	b.n	8008ffe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ffe:	f002 fa49 	bl	800b494 <vPortExitCritical>

	return xReturn;
 8009002:	68fb      	ldr	r3, [r7, #12]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009014:	f002 fa0e 	bl	800b434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009020:	429a      	cmp	r2, r3
 8009022:	d102      	bne.n	800902a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009024:	2301      	movs	r3, #1
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	e001      	b.n	800902e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800902a:	2300      	movs	r3, #0
 800902c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800902e:	f002 fa31 	bl	800b494 <vPortExitCritical>

	return xReturn;
 8009032:	68fb      	ldr	r3, [r7, #12]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009046:	2300      	movs	r3, #0
 8009048:	60fb      	str	r3, [r7, #12]
 800904a:	e014      	b.n	8009076 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800904c:	4a0f      	ldr	r2, [pc, #60]	; (800908c <vQueueAddToRegistry+0x50>)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10b      	bne.n	8009070 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009058:	490c      	ldr	r1, [pc, #48]	; (800908c <vQueueAddToRegistry+0x50>)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009062:	4a0a      	ldr	r2, [pc, #40]	; (800908c <vQueueAddToRegistry+0x50>)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	4413      	add	r3, r2
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800906e:	e006      	b.n	800907e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3301      	adds	r3, #1
 8009074:	60fb      	str	r3, [r7, #12]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b07      	cmp	r3, #7
 800907a:	d9e7      	bls.n	800904c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800907c:	bf00      	nop
 800907e:	bf00      	nop
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	200009f0 	.word	0x200009f0

08009090 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80090a0:	f002 f9c8 	bl	800b434 <vPortEnterCritical>
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090aa:	b25b      	sxtb	r3, r3
 80090ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090b0:	d103      	bne.n	80090ba <vQueueWaitForMessageRestricted+0x2a>
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090c0:	b25b      	sxtb	r3, r3
 80090c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090c6:	d103      	bne.n	80090d0 <vQueueWaitForMessageRestricted+0x40>
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090d0:	f002 f9e0 	bl	800b494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d106      	bne.n	80090ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	3324      	adds	r3, #36	; 0x24
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	68b9      	ldr	r1, [r7, #8]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 ffe7 	bl	800a0b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80090ea:	6978      	ldr	r0, [r7, #20]
 80090ec:	f7ff ff26 	bl	8008f3c <prvUnlockQueue>
	}
 80090f0:	bf00      	nop
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08c      	sub	sp, #48	; 0x30
 80090fc:	af02      	add	r7, sp, #8
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d110      	bne.n	800912c <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800910a:	2301      	movs	r3, #1
 800910c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b04      	cmp	r3, #4
 8009114:	d81b      	bhi.n	800914e <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	61fb      	str	r3, [r7, #28]
}
 8009128:	bf00      	nop
 800912a:	e7fe      	b.n	800912a <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10a      	bne.n	800914e <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	61bb      	str	r3, [r7, #24]
}
 800914a:	bf00      	nop
 800914c:	e7fe      	b.n	800914c <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	429a      	cmp	r2, r3
 8009154:	d90a      	bls.n	800916c <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8009156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915a:	f383 8811 	msr	BASEPRI, r3
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	617b      	str	r3, [r7, #20]
}
 8009168:	bf00      	nop
 800916a:	e7fe      	b.n	800916a <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8009172:	2301      	movs	r3, #1
 8009174:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	3301      	adds	r3, #1
 800917a:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3324      	adds	r3, #36	; 0x24
 8009180:	4618      	mov	r0, r3
 8009182:	f002 fa79 	bl	800b678 <pvPortMalloc>
 8009186:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00a      	beq.n	80091a4 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	6a38      	ldr	r0, [r7, #32]
 80091a0:	f000 fafd 	bl	800979e <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80091a4:	6a3b      	ldr	r3, [r7, #32]
	}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3728      	adds	r7, #40	; 0x28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80091ae:	b480      	push	{r7}
 80091b0:	b087      	sub	sp, #28
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10a      	bne.n	80091d6 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	60fb      	str	r3, [r7, #12]
}
 80091d2:	bf00      	nop
 80091d4:	e7fe      	b.n	80091d4 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	689a      	ldr	r2, [r3, #8]
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4413      	add	r3, r2
 80091e0:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d304      	bcc.n	8009206 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8009206:	697b      	ldr	r3, [r7, #20]
}
 8009208:	4618      	mov	r0, r3
 800920a:	371c      	adds	r7, #28
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b090      	sub	sp, #64	; 0x40
 8009218:	af02      	add	r7, sp, #8
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10a      	bne.n	800924a <xStreamBufferSend+0x36>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009246:	bf00      	nop
 8009248:	e7fe      	b.n	8009248 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800924a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10a      	bne.n	8009266 <xStreamBufferSend+0x52>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	623b      	str	r3, [r7, #32]
}
 8009262:	bf00      	nop
 8009264:	e7fe      	b.n	8009264 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009268:	7f1b      	ldrb	r3, [r3, #28]
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	2b00      	cmp	r3, #0
 8009270:	d011      	beq.n	8009296 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009274:	3304      	adds	r3, #4
 8009276:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8009278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	429a      	cmp	r2, r3
 800927e:	d80a      	bhi.n	8009296 <xStreamBufferSend+0x82>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	61fb      	str	r3, [r7, #28]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d03e      	beq.n	800931a <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800929c:	f107 0310 	add.w	r3, r7, #16
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 ff99 	bl	800a1d8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 80092a6:	f002 f8c5 	bl	800b434 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80092aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092ac:	f7ff ff7f 	bl	80091ae <xStreamBufferSpacesAvailable>
 80092b0:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 80092b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d217      	bcs.n	80092ea <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 80092ba:	2000      	movs	r0, #0
 80092bc:	f001 fbc8 	bl	800aa50 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00a      	beq.n	80092de <xStreamBufferSend+0xca>
	__asm volatile
 80092c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	61bb      	str	r3, [r7, #24]
}
 80092da:	bf00      	nop
 80092dc:	e7fe      	b.n	80092dc <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 80092de:	f001 f8ff 	bl	800a4e0 <xTaskGetCurrentTaskHandle>
 80092e2:	4602      	mov	r2, r0
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e6:	615a      	str	r2, [r3, #20]
 80092e8:	e002      	b.n	80092f0 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 80092ea:	f002 f8d3 	bl	800b494 <vPortExitCritical>
					break;
 80092ee:	e014      	b.n	800931a <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 80092f0:	f002 f8d0 	bl	800b494 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2200      	movs	r2, #0
 80092f8:	2100      	movs	r1, #0
 80092fa:	2000      	movs	r0, #0
 80092fc:	f001 fa8a 	bl	800a814 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009302:	2200      	movs	r2, #0
 8009304:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8009306:	463a      	mov	r2, r7
 8009308:	f107 0310 	add.w	r3, r7, #16
 800930c:	4611      	mov	r1, r2
 800930e:	4618      	mov	r0, r3
 8009310:	f000 ff9e 	bl	800a250 <xTaskCheckForTimeOut>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d0c5      	beq.n	80092a6 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800931a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931c:	2b00      	cmp	r3, #0
 800931e:	d103      	bne.n	8009328 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009320:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009322:	f7ff ff44 	bl	80091ae <xStreamBufferSpacesAvailable>
 8009326:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8009328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	68b9      	ldr	r1, [r7, #8]
 8009332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009334:	f000 f823 	bl	800937e <prvWriteMessageToBuffer>
 8009338:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	2b00      	cmp	r3, #0
 800933e:	d019      	beq.n	8009374 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8009340:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009342:	f000 fa0c 	bl	800975e <prvBytesInBuffer>
 8009346:	4602      	mov	r2, r0
 8009348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	429a      	cmp	r2, r3
 800934e:	d311      	bcc.n	8009374 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8009350:	f000 fcb4 	bl	8009cbc <vTaskSuspendAll>
 8009354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d009      	beq.n	8009370 <xStreamBufferSend+0x15c>
 800935c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935e:	6918      	ldr	r0, [r3, #16]
 8009360:	2300      	movs	r3, #0
 8009362:	2200      	movs	r2, #0
 8009364:	2100      	movs	r1, #0
 8009366:	f001 fab5 	bl	800a8d4 <xTaskGenericNotify>
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	2200      	movs	r2, #0
 800936e:	611a      	str	r2, [r3, #16]
 8009370:	f000 fcb2 	bl	8009cd8 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8009374:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009376:	4618      	mov	r0, r3
 8009378:	3738      	adds	r7, #56	; 0x38
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b086      	sub	sp, #24
 8009382:	af00      	add	r7, sp, #0
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	607a      	str	r2, [r7, #4]
 800938a:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d102      	bne.n	8009398 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8009392:	2300      	movs	r3, #0
 8009394:	617b      	str	r3, [r7, #20]
 8009396:	e01d      	b.n	80093d4 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	7f1b      	ldrb	r3, [r3, #28]
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d108      	bne.n	80093b6 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80093a4:	2301      	movs	r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	4293      	cmp	r3, r2
 80093ae:	bf28      	it	cs
 80093b0:	4613      	movcs	r3, r2
 80093b2:	607b      	str	r3, [r7, #4]
 80093b4:	e00e      	b.n	80093d4 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d308      	bcc.n	80093d0 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80093be:	2301      	movs	r3, #1
 80093c0:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80093c2:	1d3b      	adds	r3, r7, #4
 80093c4:	2204      	movs	r2, #4
 80093c6:	4619      	mov	r1, r3
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 f8dc 	bl	8009586 <prvWriteBytesToBuffer>
 80093ce:	e001      	b.n	80093d4 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80093d0:	2300      	movs	r3, #0
 80093d2:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d007      	beq.n	80093ea <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	461a      	mov	r2, r3
 80093de:	68b9      	ldr	r1, [r7, #8]
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 f8d0 	bl	8009586 <prvWriteBytesToBuffer>
 80093e6:	6138      	str	r0, [r7, #16]
 80093e8:	e001      	b.n	80093ee <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80093ee:	693b      	ldr	r3, [r7, #16]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08e      	sub	sp, #56	; 0x38
 80093fc:	af02      	add	r7, sp, #8
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
 8009404:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800940a:	2300      	movs	r3, #0
 800940c:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10a      	bne.n	800942a <xStreamBufferReceive+0x32>
	__asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	61fb      	str	r3, [r7, #28]
}
 8009426:	bf00      	nop
 8009428:	e7fe      	b.n	8009428 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800942a:	6a3b      	ldr	r3, [r7, #32]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10a      	bne.n	8009446 <xStreamBufferReceive+0x4e>
	__asm volatile
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	61bb      	str	r3, [r7, #24]
}
 8009442:	bf00      	nop
 8009444:	e7fe      	b.n	8009444 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	7f1b      	ldrb	r3, [r3, #28]
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009452:	2304      	movs	r3, #4
 8009454:	627b      	str	r3, [r7, #36]	; 0x24
 8009456:	e001      	b.n	800945c <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8009458:	2300      	movs	r3, #0
 800945a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d034      	beq.n	80094cc <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8009462:	f001 ffe7 	bl	800b434 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009466:	6a38      	ldr	r0, [r7, #32]
 8009468:	f000 f979 	bl	800975e <prvBytesInBuffer>
 800946c:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800946e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009472:	429a      	cmp	r2, r3
 8009474:	d816      	bhi.n	80094a4 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8009476:	2000      	movs	r0, #0
 8009478:	f001 faea 	bl	800aa50 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00a      	beq.n	800949a <xStreamBufferReceive+0xa2>
	__asm volatile
 8009484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	617b      	str	r3, [r7, #20]
}
 8009496:	bf00      	nop
 8009498:	e7fe      	b.n	8009498 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800949a:	f001 f821 	bl	800a4e0 <xTaskGetCurrentTaskHandle>
 800949e:	4602      	mov	r2, r0
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80094a4:	f001 fff6 	bl	800b494 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80094a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d811      	bhi.n	80094d4 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	2200      	movs	r2, #0
 80094b4:	2100      	movs	r1, #0
 80094b6:	2000      	movs	r0, #0
 80094b8:	f001 f9ac 	bl	800a814 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	2200      	movs	r2, #0
 80094c0:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80094c2:	6a38      	ldr	r0, [r7, #32]
 80094c4:	f000 f94b 	bl	800975e <prvBytesInBuffer>
 80094c8:	62b8      	str	r0, [r7, #40]	; 0x28
 80094ca:	e003      	b.n	80094d4 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80094cc:	6a38      	ldr	r0, [r7, #32]
 80094ce:	f000 f946 	bl	800975e <prvBytesInBuffer>
 80094d2:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80094d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d8:	429a      	cmp	r2, r3
 80094da:	d91d      	bls.n	8009518 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	68b9      	ldr	r1, [r7, #8]
 80094e6:	6a38      	ldr	r0, [r7, #32]
 80094e8:	f000 f81b 	bl	8009522 <prvReadMessageFromBuffer>
 80094ec:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80094ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d011      	beq.n	8009518 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80094f4:	f000 fbe2 	bl	8009cbc <vTaskSuspendAll>
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	695b      	ldr	r3, [r3, #20]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d009      	beq.n	8009514 <xStreamBufferReceive+0x11c>
 8009500:	6a3b      	ldr	r3, [r7, #32]
 8009502:	6958      	ldr	r0, [r3, #20]
 8009504:	2300      	movs	r3, #0
 8009506:	2200      	movs	r2, #0
 8009508:	2100      	movs	r1, #0
 800950a:	f001 f9e3 	bl	800a8d4 <xTaskGenericNotify>
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	2200      	movs	r2, #0
 8009512:	615a      	str	r2, [r3, #20]
 8009514:	f000 fbe0 	bl	8009cd8 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8009518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800951a:	4618      	mov	r0, r3
 800951c:	3730      	adds	r7, #48	; 0x30
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b088      	sub	sp, #32
 8009526:	af00      	add	r7, sp, #0
 8009528:	60f8      	str	r0, [r7, #12]
 800952a:	60b9      	str	r1, [r7, #8]
 800952c:	607a      	str	r2, [r7, #4]
 800952e:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8009530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009532:	2b00      	cmp	r3, #0
 8009534:	d019      	beq.n	800956a <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800953c:	f107 0110 	add.w	r1, r7, #16
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 f890 	bl	800966a <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8009556:	69fa      	ldr	r2, [r7, #28]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	429a      	cmp	r2, r3
 800955c:	d907      	bls.n	800956e <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	69ba      	ldr	r2, [r7, #24]
 8009562:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	61fb      	str	r3, [r7, #28]
 8009568:	e001      	b.n	800956e <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	69fa      	ldr	r2, [r7, #28]
 8009572:	68b9      	ldr	r1, [r7, #8]
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 f878 	bl	800966a <prvReadBytesFromBuffer>
 800957a:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800957c:	697b      	ldr	r3, [r7, #20]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3720      	adds	r7, #32
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b08a      	sub	sp, #40	; 0x28
 800958a:	af00      	add	r7, sp, #0
 800958c:	60f8      	str	r0, [r7, #12]
 800958e:	60b9      	str	r1, [r7, #8]
 8009590:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10a      	bne.n	80095ae <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8009598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959c:	f383 8811 	msr	BASEPRI, r3
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	61fb      	str	r3, [r7, #28]
}
 80095aa:	bf00      	nop
 80095ac:	e7fe      	b.n	80095ac <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	689a      	ldr	r2, [r3, #8]
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	4293      	cmp	r3, r2
 80095c0:	bf28      	it	cs
 80095c2:	4613      	movcs	r3, r2
 80095c4:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80095c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095c8:	6a3b      	ldr	r3, [r7, #32]
 80095ca:	441a      	add	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d90a      	bls.n	80095ea <prvWriteBytesToBuffer+0x64>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	61bb      	str	r3, [r7, #24]
}
 80095e6:	bf00      	nop
 80095e8:	e7fe      	b.n	80095e8 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	699a      	ldr	r2, [r3, #24]
 80095ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f0:	4413      	add	r3, r2
 80095f2:	6a3a      	ldr	r2, [r7, #32]
 80095f4:	68b9      	ldr	r1, [r7, #8]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f002 fa6e 	bl	800bad8 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	429a      	cmp	r2, r3
 8009602:	d91c      	bls.n	800963e <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	6a3b      	ldr	r3, [r7, #32]
 8009608:	1ad2      	subs	r2, r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	429a      	cmp	r2, r3
 8009610:	d90a      	bls.n	8009628 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8009612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009616:	f383 8811 	msr	BASEPRI, r3
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	617b      	str	r3, [r7, #20]
}
 8009624:	bf00      	nop
 8009626:	e7fe      	b.n	8009626 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6998      	ldr	r0, [r3, #24]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	6a3b      	ldr	r3, [r7, #32]
 8009630:	18d1      	adds	r1, r2, r3
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	461a      	mov	r2, r3
 800963a:	f002 fa4d 	bl	800bad8 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800963e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4413      	add	r3, r2
 8009644:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800964c:	429a      	cmp	r2, r3
 800964e:	d304      	bcc.n	800965a <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800965e:	605a      	str	r2, [r3, #4]

	return xCount;
 8009660:	687b      	ldr	r3, [r7, #4]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3728      	adds	r7, #40	; 0x28
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b08a      	sub	sp, #40	; 0x28
 800966e:	af00      	add	r7, sp, #0
 8009670:	60f8      	str	r0, [r7, #12]
 8009672:	60b9      	str	r1, [r7, #8]
 8009674:	607a      	str	r2, [r7, #4]
 8009676:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	4293      	cmp	r3, r2
 800967e:	bf28      	it	cs
 8009680:	4613      	movcs	r3, r2
 8009682:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d064      	beq.n	8009754 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	6a3a      	ldr	r2, [r7, #32]
 800969a:	4293      	cmp	r3, r2
 800969c:	bf28      	it	cs
 800969e:	4613      	movcs	r3, r2
 80096a0:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80096a2:	69fa      	ldr	r2, [r7, #28]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d90a      	bls.n	80096c0 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	61bb      	str	r3, [r7, #24]
}
 80096bc:	bf00      	nop
 80096be:	e7fe      	b.n	80096be <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80096c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	441a      	add	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d90a      	bls.n	80096e4 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	617b      	str	r3, [r7, #20]
}
 80096e0:	bf00      	nop
 80096e2:	e7fe      	b.n	80096e2 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	699a      	ldr	r2, [r3, #24]
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ea:	4413      	add	r3, r2
 80096ec:	69fa      	ldr	r2, [r7, #28]
 80096ee:	4619      	mov	r1, r3
 80096f0:	68b8      	ldr	r0, [r7, #8]
 80096f2:	f002 f9f1 	bl	800bad8 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80096f6:	6a3a      	ldr	r2, [r7, #32]
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d919      	bls.n	8009732 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80096fe:	6a3a      	ldr	r2, [r7, #32]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	429a      	cmp	r2, r3
 8009704:	d90a      	bls.n	800971c <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	613b      	str	r3, [r7, #16]
}
 8009718:	bf00      	nop
 800971a:	e7fe      	b.n	800971a <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	18d0      	adds	r0, r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6999      	ldr	r1, [r3, #24]
 8009726:	6a3a      	ldr	r2, [r7, #32]
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	461a      	mov	r2, r3
 800972e:	f002 f9d3 	bl	800bad8 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8009732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	4413      	add	r3, r2
 8009738:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009740:	429a      	cmp	r2, r3
 8009742:	d304      	bcc.n	800974e <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009752:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8009754:	6a3b      	ldr	r3, [r7, #32]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3728      	adds	r7, #40	; 0x28
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800975e:	b480      	push	{r7}
 8009760:	b085      	sub	sp, #20
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689a      	ldr	r2, [r3, #8]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	4413      	add	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	429a      	cmp	r2, r3
 8009784:	d304      	bcc.n	8009790 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8009790:	68fb      	ldr	r3, [r7, #12]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3714      	adds	r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr

0800979e <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b086      	sub	sp, #24
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	607a      	str	r2, [r7, #4]
 80097aa:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80097ac:	2355      	movs	r3, #85	; 0x55
 80097ae:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	6979      	ldr	r1, [r7, #20]
 80097b4:	68b8      	ldr	r0, [r7, #8]
 80097b6:	f002 f99d 	bl	800baf4 <memset>
 80097ba:	4602      	mov	r2, r0
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	4293      	cmp	r3, r2
 80097c0:	d00a      	beq.n	80097d8 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	613b      	str	r3, [r7, #16]
}
 80097d4:	bf00      	nop
 80097d6:	e7fe      	b.n	80097d6 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80097d8:	2224      	movs	r2, #36	; 0x24
 80097da:	2100      	movs	r1, #0
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f002 f989 	bl	800baf4 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80097fa:	771a      	strb	r2, [r3, #28]
}
 80097fc:	bf00      	nop
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009804:	b580      	push	{r7, lr}
 8009806:	b08e      	sub	sp, #56	; 0x38
 8009808:	af04      	add	r7, sp, #16
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10a      	bne.n	800982e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	623b      	str	r3, [r7, #32]
}
 800982a:	bf00      	nop
 800982c:	e7fe      	b.n	800982c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800982e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10a      	bne.n	800984a <xTaskCreateStatic+0x46>
	__asm volatile
 8009834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009838:	f383 8811 	msr	BASEPRI, r3
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	61fb      	str	r3, [r7, #28]
}
 8009846:	bf00      	nop
 8009848:	e7fe      	b.n	8009848 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800984a:	23bc      	movs	r3, #188	; 0xbc
 800984c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	2bbc      	cmp	r3, #188	; 0xbc
 8009852:	d00a      	beq.n	800986a <xTaskCreateStatic+0x66>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	61bb      	str	r3, [r7, #24]
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800986a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986e:	2b00      	cmp	r3, #0
 8009870:	d01e      	beq.n	80098b0 <xTaskCreateStatic+0xac>
 8009872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009874:	2b00      	cmp	r3, #0
 8009876:	d01b      	beq.n	80098b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009880:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	2202      	movs	r2, #2
 8009886:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800988a:	2300      	movs	r3, #0
 800988c:	9303      	str	r3, [sp, #12]
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	9302      	str	r3, [sp, #8]
 8009892:	f107 0314 	add.w	r3, r7, #20
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	68b9      	ldr	r1, [r7, #8]
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 f850 	bl	8009948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098aa:	f000 f8f3 	bl	8009a94 <prvAddNewTaskToReadyList>
 80098ae:	e001      	b.n	80098b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80098b0:	2300      	movs	r3, #0
 80098b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80098b4:	697b      	ldr	r3, [r7, #20]
	}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3728      	adds	r7, #40	; 0x28
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b08c      	sub	sp, #48	; 0x30
 80098c2:	af04      	add	r7, sp, #16
 80098c4:	60f8      	str	r0, [r7, #12]
 80098c6:	60b9      	str	r1, [r7, #8]
 80098c8:	603b      	str	r3, [r7, #0]
 80098ca:	4613      	mov	r3, r2
 80098cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80098ce:	88fb      	ldrh	r3, [r7, #6]
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4618      	mov	r0, r3
 80098d4:	f001 fed0 	bl	800b678 <pvPortMalloc>
 80098d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00e      	beq.n	80098fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80098e0:	20bc      	movs	r0, #188	; 0xbc
 80098e2:	f001 fec9 	bl	800b678 <pvPortMalloc>
 80098e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	697a      	ldr	r2, [r7, #20]
 80098f2:	631a      	str	r2, [r3, #48]	; 0x30
 80098f4:	e005      	b.n	8009902 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098f6:	6978      	ldr	r0, [r7, #20]
 80098f8:	f001 ff8a 	bl	800b810 <vPortFree>
 80098fc:	e001      	b.n	8009902 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d017      	beq.n	8009938 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009910:	88fa      	ldrh	r2, [r7, #6]
 8009912:	2300      	movs	r3, #0
 8009914:	9303      	str	r3, [sp, #12]
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	9302      	str	r3, [sp, #8]
 800991a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	68b9      	ldr	r1, [r7, #8]
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 f80e 	bl	8009948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800992c:	69f8      	ldr	r0, [r7, #28]
 800992e:	f000 f8b1 	bl	8009a94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009932:	2301      	movs	r3, #1
 8009934:	61bb      	str	r3, [r7, #24]
 8009936:	e002      	b.n	800993e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800993c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800993e:	69bb      	ldr	r3, [r7, #24]
	}
 8009940:	4618      	mov	r0, r3
 8009942:	3720      	adds	r7, #32
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009958:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	461a      	mov	r2, r3
 8009960:	21a5      	movs	r1, #165	; 0xa5
 8009962:	f002 f8c7 	bl	800baf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009970:	3b01      	subs	r3, #1
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	f023 0307 	bic.w	r3, r3, #7
 800997e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	f003 0307 	and.w	r3, r3, #7
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00a      	beq.n	80099a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	617b      	str	r3, [r7, #20]
}
 800999c:	bf00      	nop
 800999e:	e7fe      	b.n	800999e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d01f      	beq.n	80099e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099a6:	2300      	movs	r3, #0
 80099a8:	61fb      	str	r3, [r7, #28]
 80099aa:	e012      	b.n	80099d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	4413      	add	r3, r2
 80099b2:	7819      	ldrb	r1, [r3, #0]
 80099b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	4413      	add	r3, r2
 80099ba:	3334      	adds	r3, #52	; 0x34
 80099bc:	460a      	mov	r2, r1
 80099be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	4413      	add	r3, r2
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d006      	beq.n	80099da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	3301      	adds	r3, #1
 80099d0:	61fb      	str	r3, [r7, #28]
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	2b0f      	cmp	r3, #15
 80099d6:	d9e9      	bls.n	80099ac <prvInitialiseNewTask+0x64>
 80099d8:	e000      	b.n	80099dc <prvInitialiseNewTask+0x94>
			{
				break;
 80099da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099e4:	e003      	b.n	80099ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	2b37      	cmp	r3, #55	; 0x37
 80099f2:	d901      	bls.n	80099f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099f4:	2337      	movs	r3, #55	; 0x37
 80099f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a06:	2200      	movs	r2, #0
 8009a08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0c:	3304      	adds	r3, #4
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fbd6 	bl	80081c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a16:	3318      	adds	r3, #24
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7fe fbd1 	bl	80081c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a46:	3354      	adds	r3, #84	; 0x54
 8009a48:	2260      	movs	r2, #96	; 0x60
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f002 f851 	bl	800baf4 <memset>
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	4a0c      	ldr	r2, [pc, #48]	; (8009a88 <prvInitialiseNewTask+0x140>)
 8009a56:	659a      	str	r2, [r3, #88]	; 0x58
 8009a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5a:	4a0c      	ldr	r2, [pc, #48]	; (8009a8c <prvInitialiseNewTask+0x144>)
 8009a5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a60:	4a0b      	ldr	r2, [pc, #44]	; (8009a90 <prvInitialiseNewTask+0x148>)
 8009a62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a64:	683a      	ldr	r2, [r7, #0]
 8009a66:	68f9      	ldr	r1, [r7, #12]
 8009a68:	69b8      	ldr	r0, [r7, #24]
 8009a6a:	f001 fbb9 	bl	800b1e0 <pxPortInitialiseStack>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a80:	bf00      	nop
 8009a82:	3720      	adds	r7, #32
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	0800cb7c 	.word	0x0800cb7c
 8009a8c:	0800cb9c 	.word	0x0800cb9c
 8009a90:	0800cb5c 	.word	0x0800cb5c

08009a94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a9c:	f001 fcca 	bl	800b434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009aa0:	4b2d      	ldr	r3, [pc, #180]	; (8009b58 <prvAddNewTaskToReadyList+0xc4>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	4a2c      	ldr	r2, [pc, #176]	; (8009b58 <prvAddNewTaskToReadyList+0xc4>)
 8009aa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009aaa:	4b2c      	ldr	r3, [pc, #176]	; (8009b5c <prvAddNewTaskToReadyList+0xc8>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d109      	bne.n	8009ac6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ab2:	4a2a      	ldr	r2, [pc, #168]	; (8009b5c <prvAddNewTaskToReadyList+0xc8>)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ab8:	4b27      	ldr	r3, [pc, #156]	; (8009b58 <prvAddNewTaskToReadyList+0xc4>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d110      	bne.n	8009ae2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ac0:	f000 fc4c 	bl	800a35c <prvInitialiseTaskLists>
 8009ac4:	e00d      	b.n	8009ae2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ac6:	4b26      	ldr	r3, [pc, #152]	; (8009b60 <prvAddNewTaskToReadyList+0xcc>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d109      	bne.n	8009ae2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ace:	4b23      	ldr	r3, [pc, #140]	; (8009b5c <prvAddNewTaskToReadyList+0xc8>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d802      	bhi.n	8009ae2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009adc:	4a1f      	ldr	r2, [pc, #124]	; (8009b5c <prvAddNewTaskToReadyList+0xc8>)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ae2:	4b20      	ldr	r3, [pc, #128]	; (8009b64 <prvAddNewTaskToReadyList+0xd0>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	4a1e      	ldr	r2, [pc, #120]	; (8009b64 <prvAddNewTaskToReadyList+0xd0>)
 8009aea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009aec:	4b1d      	ldr	r3, [pc, #116]	; (8009b64 <prvAddNewTaskToReadyList+0xd0>)
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af8:	4b1b      	ldr	r3, [pc, #108]	; (8009b68 <prvAddNewTaskToReadyList+0xd4>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d903      	bls.n	8009b08 <prvAddNewTaskToReadyList+0x74>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b04:	4a18      	ldr	r2, [pc, #96]	; (8009b68 <prvAddNewTaskToReadyList+0xd4>)
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4a15      	ldr	r2, [pc, #84]	; (8009b6c <prvAddNewTaskToReadyList+0xd8>)
 8009b16:	441a      	add	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4610      	mov	r0, r2
 8009b20:	f7fe fb5b 	bl	80081da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009b24:	f001 fcb6 	bl	800b494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b28:	4b0d      	ldr	r3, [pc, #52]	; (8009b60 <prvAddNewTaskToReadyList+0xcc>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00e      	beq.n	8009b4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b30:	4b0a      	ldr	r3, [pc, #40]	; (8009b5c <prvAddNewTaskToReadyList+0xc8>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d207      	bcs.n	8009b4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b3e:	4b0c      	ldr	r3, [pc, #48]	; (8009b70 <prvAddNewTaskToReadyList+0xdc>)
 8009b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b4e:	bf00      	nop
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20000f04 	.word	0x20000f04
 8009b5c:	20000a30 	.word	0x20000a30
 8009b60:	20000f10 	.word	0x20000f10
 8009b64:	20000f20 	.word	0x20000f20
 8009b68:	20000f0c 	.word	0x20000f0c
 8009b6c:	20000a34 	.word	0x20000a34
 8009b70:	e000ed04 	.word	0xe000ed04

08009b74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d017      	beq.n	8009bb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b86:	4b13      	ldr	r3, [pc, #76]	; (8009bd4 <vTaskDelay+0x60>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00a      	beq.n	8009ba4 <vTaskDelay+0x30>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	60bb      	str	r3, [r7, #8]
}
 8009ba0:	bf00      	nop
 8009ba2:	e7fe      	b.n	8009ba2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ba4:	f000 f88a 	bl	8009cbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ba8:	2100      	movs	r1, #0
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 ff76 	bl	800aa9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009bb0:	f000 f892 	bl	8009cd8 <xTaskResumeAll>
 8009bb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d107      	bne.n	8009bcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009bbc:	4b06      	ldr	r3, [pc, #24]	; (8009bd8 <vTaskDelay+0x64>)
 8009bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009bcc:	bf00      	nop
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20000f2c 	.word	0x20000f2c
 8009bd8:	e000ed04 	.word	0xe000ed04

08009bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08a      	sub	sp, #40	; 0x28
 8009be0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009be2:	2300      	movs	r3, #0
 8009be4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009be6:	2300      	movs	r3, #0
 8009be8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bea:	463a      	mov	r2, r7
 8009bec:	1d39      	adds	r1, r7, #4
 8009bee:	f107 0308 	add.w	r3, r7, #8
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fe fa90 	bl	8008118 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	9202      	str	r2, [sp, #8]
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	2300      	movs	r3, #0
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	2300      	movs	r3, #0
 8009c08:	460a      	mov	r2, r1
 8009c0a:	4924      	ldr	r1, [pc, #144]	; (8009c9c <vTaskStartScheduler+0xc0>)
 8009c0c:	4824      	ldr	r0, [pc, #144]	; (8009ca0 <vTaskStartScheduler+0xc4>)
 8009c0e:	f7ff fdf9 	bl	8009804 <xTaskCreateStatic>
 8009c12:	4603      	mov	r3, r0
 8009c14:	4a23      	ldr	r2, [pc, #140]	; (8009ca4 <vTaskStartScheduler+0xc8>)
 8009c16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c18:	4b22      	ldr	r3, [pc, #136]	; (8009ca4 <vTaskStartScheduler+0xc8>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d002      	beq.n	8009c26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c20:	2301      	movs	r3, #1
 8009c22:	617b      	str	r3, [r7, #20]
 8009c24:	e001      	b.n	8009c2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c26:	2300      	movs	r3, #0
 8009c28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d102      	bne.n	8009c36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c30:	f000 ff88 	bl	800ab44 <xTimerCreateTimerTask>
 8009c34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d11b      	bne.n	8009c74 <vTaskStartScheduler+0x98>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	613b      	str	r3, [r7, #16]
}
 8009c4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c50:	4b15      	ldr	r3, [pc, #84]	; (8009ca8 <vTaskStartScheduler+0xcc>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3354      	adds	r3, #84	; 0x54
 8009c56:	4a15      	ldr	r2, [pc, #84]	; (8009cac <vTaskStartScheduler+0xd0>)
 8009c58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c5a:	4b15      	ldr	r3, [pc, #84]	; (8009cb0 <vTaskStartScheduler+0xd4>)
 8009c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c62:	4b14      	ldr	r3, [pc, #80]	; (8009cb4 <vTaskStartScheduler+0xd8>)
 8009c64:	2201      	movs	r2, #1
 8009c66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c68:	4b13      	ldr	r3, [pc, #76]	; (8009cb8 <vTaskStartScheduler+0xdc>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c6e:	f001 fb3f 	bl	800b2f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c72:	e00e      	b.n	8009c92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c7a:	d10a      	bne.n	8009c92 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	60fb      	str	r3, [r7, #12]
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <vTaskStartScheduler+0xb4>
}
 8009c92:	bf00      	nop
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	0800c970 	.word	0x0800c970
 8009ca0:	0800a32d 	.word	0x0800a32d
 8009ca4:	20000f28 	.word	0x20000f28
 8009ca8:	20000a30 	.word	0x20000a30
 8009cac:	20000018 	.word	0x20000018
 8009cb0:	20000f24 	.word	0x20000f24
 8009cb4:	20000f10 	.word	0x20000f10
 8009cb8:	20000f08 	.word	0x20000f08

08009cbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009cc0:	4b04      	ldr	r3, [pc, #16]	; (8009cd4 <vTaskSuspendAll+0x18>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	4a03      	ldr	r2, [pc, #12]	; (8009cd4 <vTaskSuspendAll+0x18>)
 8009cc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009cca:	bf00      	nop
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	20000f2c 	.word	0x20000f2c

08009cd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009ce6:	4b42      	ldr	r3, [pc, #264]	; (8009df0 <xTaskResumeAll+0x118>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10a      	bne.n	8009d04 <xTaskResumeAll+0x2c>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	603b      	str	r3, [r7, #0]
}
 8009d00:	bf00      	nop
 8009d02:	e7fe      	b.n	8009d02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d04:	f001 fb96 	bl	800b434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d08:	4b39      	ldr	r3, [pc, #228]	; (8009df0 <xTaskResumeAll+0x118>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	4a38      	ldr	r2, [pc, #224]	; (8009df0 <xTaskResumeAll+0x118>)
 8009d10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d12:	4b37      	ldr	r3, [pc, #220]	; (8009df0 <xTaskResumeAll+0x118>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d162      	bne.n	8009de0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d1a:	4b36      	ldr	r3, [pc, #216]	; (8009df4 <xTaskResumeAll+0x11c>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d05e      	beq.n	8009de0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d22:	e02f      	b.n	8009d84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d24:	4b34      	ldr	r3, [pc, #208]	; (8009df8 <xTaskResumeAll+0x120>)
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3318      	adds	r3, #24
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fe faaf 	bl	8008294 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3304      	adds	r3, #4
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fe faaa 	bl	8008294 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d44:	4b2d      	ldr	r3, [pc, #180]	; (8009dfc <xTaskResumeAll+0x124>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d903      	bls.n	8009d54 <xTaskResumeAll+0x7c>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d50:	4a2a      	ldr	r2, [pc, #168]	; (8009dfc <xTaskResumeAll+0x124>)
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d58:	4613      	mov	r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4413      	add	r3, r2
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4a27      	ldr	r2, [pc, #156]	; (8009e00 <xTaskResumeAll+0x128>)
 8009d62:	441a      	add	r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	3304      	adds	r3, #4
 8009d68:	4619      	mov	r1, r3
 8009d6a:	4610      	mov	r0, r2
 8009d6c:	f7fe fa35 	bl	80081da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d74:	4b23      	ldr	r3, [pc, #140]	; (8009e04 <xTaskResumeAll+0x12c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d302      	bcc.n	8009d84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009d7e:	4b22      	ldr	r3, [pc, #136]	; (8009e08 <xTaskResumeAll+0x130>)
 8009d80:	2201      	movs	r2, #1
 8009d82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d84:	4b1c      	ldr	r3, [pc, #112]	; (8009df8 <xTaskResumeAll+0x120>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1cb      	bne.n	8009d24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d92:	f000 fb85 	bl	800a4a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d96:	4b1d      	ldr	r3, [pc, #116]	; (8009e0c <xTaskResumeAll+0x134>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d010      	beq.n	8009dc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009da2:	f000 f847 	bl	8009e34 <xTaskIncrementTick>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009dac:	4b16      	ldr	r3, [pc, #88]	; (8009e08 <xTaskResumeAll+0x130>)
 8009dae:	2201      	movs	r2, #1
 8009db0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1f1      	bne.n	8009da2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009dbe:	4b13      	ldr	r3, [pc, #76]	; (8009e0c <xTaskResumeAll+0x134>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009dc4:	4b10      	ldr	r3, [pc, #64]	; (8009e08 <xTaskResumeAll+0x130>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d009      	beq.n	8009de0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009dd0:	4b0f      	ldr	r3, [pc, #60]	; (8009e10 <xTaskResumeAll+0x138>)
 8009dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dd6:	601a      	str	r2, [r3, #0]
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009de0:	f001 fb58 	bl	800b494 <vPortExitCritical>

	return xAlreadyYielded;
 8009de4:	68bb      	ldr	r3, [r7, #8]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	20000f2c 	.word	0x20000f2c
 8009df4:	20000f04 	.word	0x20000f04
 8009df8:	20000ec4 	.word	0x20000ec4
 8009dfc:	20000f0c 	.word	0x20000f0c
 8009e00:	20000a34 	.word	0x20000a34
 8009e04:	20000a30 	.word	0x20000a30
 8009e08:	20000f18 	.word	0x20000f18
 8009e0c:	20000f14 	.word	0x20000f14
 8009e10:	e000ed04 	.word	0xe000ed04

08009e14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009e1a:	4b05      	ldr	r3, [pc, #20]	; (8009e30 <xTaskGetTickCount+0x1c>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009e20:	687b      	ldr	r3, [r7, #4]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	20000f08 	.word	0x20000f08

08009e34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e3e:	4b4f      	ldr	r3, [pc, #316]	; (8009f7c <xTaskIncrementTick+0x148>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f040 808f 	bne.w	8009f66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e48:	4b4d      	ldr	r3, [pc, #308]	; (8009f80 <xTaskIncrementTick+0x14c>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e50:	4a4b      	ldr	r2, [pc, #300]	; (8009f80 <xTaskIncrementTick+0x14c>)
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d120      	bne.n	8009e9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e5c:	4b49      	ldr	r3, [pc, #292]	; (8009f84 <xTaskIncrementTick+0x150>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00a      	beq.n	8009e7c <xTaskIncrementTick+0x48>
	__asm volatile
 8009e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6a:	f383 8811 	msr	BASEPRI, r3
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	603b      	str	r3, [r7, #0]
}
 8009e78:	bf00      	nop
 8009e7a:	e7fe      	b.n	8009e7a <xTaskIncrementTick+0x46>
 8009e7c:	4b41      	ldr	r3, [pc, #260]	; (8009f84 <xTaskIncrementTick+0x150>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	60fb      	str	r3, [r7, #12]
 8009e82:	4b41      	ldr	r3, [pc, #260]	; (8009f88 <xTaskIncrementTick+0x154>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a3f      	ldr	r2, [pc, #252]	; (8009f84 <xTaskIncrementTick+0x150>)
 8009e88:	6013      	str	r3, [r2, #0]
 8009e8a:	4a3f      	ldr	r2, [pc, #252]	; (8009f88 <xTaskIncrementTick+0x154>)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	4b3e      	ldr	r3, [pc, #248]	; (8009f8c <xTaskIncrementTick+0x158>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3301      	adds	r3, #1
 8009e96:	4a3d      	ldr	r2, [pc, #244]	; (8009f8c <xTaskIncrementTick+0x158>)
 8009e98:	6013      	str	r3, [r2, #0]
 8009e9a:	f000 fb01 	bl	800a4a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e9e:	4b3c      	ldr	r3, [pc, #240]	; (8009f90 <xTaskIncrementTick+0x15c>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	693a      	ldr	r2, [r7, #16]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d349      	bcc.n	8009f3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ea8:	4b36      	ldr	r3, [pc, #216]	; (8009f84 <xTaskIncrementTick+0x150>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d104      	bne.n	8009ebc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eb2:	4b37      	ldr	r3, [pc, #220]	; (8009f90 <xTaskIncrementTick+0x15c>)
 8009eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009eb8:	601a      	str	r2, [r3, #0]
					break;
 8009eba:	e03f      	b.n	8009f3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ebc:	4b31      	ldr	r3, [pc, #196]	; (8009f84 <xTaskIncrementTick+0x150>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d203      	bcs.n	8009edc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ed4:	4a2e      	ldr	r2, [pc, #184]	; (8009f90 <xTaskIncrementTick+0x15c>)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009eda:	e02f      	b.n	8009f3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fe f9d7 	bl	8008294 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d004      	beq.n	8009ef8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	3318      	adds	r3, #24
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fe f9ce 	bl	8008294 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efc:	4b25      	ldr	r3, [pc, #148]	; (8009f94 <xTaskIncrementTick+0x160>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d903      	bls.n	8009f0c <xTaskIncrementTick+0xd8>
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f08:	4a22      	ldr	r2, [pc, #136]	; (8009f94 <xTaskIncrementTick+0x160>)
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f10:	4613      	mov	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4a1f      	ldr	r2, [pc, #124]	; (8009f98 <xTaskIncrementTick+0x164>)
 8009f1a:	441a      	add	r2, r3
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	3304      	adds	r3, #4
 8009f20:	4619      	mov	r1, r3
 8009f22:	4610      	mov	r0, r2
 8009f24:	f7fe f959 	bl	80081da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2c:	4b1b      	ldr	r3, [pc, #108]	; (8009f9c <xTaskIncrementTick+0x168>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d3b8      	bcc.n	8009ea8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009f36:	2301      	movs	r3, #1
 8009f38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f3a:	e7b5      	b.n	8009ea8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f3c:	4b17      	ldr	r3, [pc, #92]	; (8009f9c <xTaskIncrementTick+0x168>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f42:	4915      	ldr	r1, [pc, #84]	; (8009f98 <xTaskIncrementTick+0x164>)
 8009f44:	4613      	mov	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	440b      	add	r3, r1
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d901      	bls.n	8009f58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009f54:	2301      	movs	r3, #1
 8009f56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f58:	4b11      	ldr	r3, [pc, #68]	; (8009fa0 <xTaskIncrementTick+0x16c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d007      	beq.n	8009f70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009f60:	2301      	movs	r3, #1
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	e004      	b.n	8009f70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f66:	4b0f      	ldr	r3, [pc, #60]	; (8009fa4 <xTaskIncrementTick+0x170>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	4a0d      	ldr	r2, [pc, #52]	; (8009fa4 <xTaskIncrementTick+0x170>)
 8009f6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f70:	697b      	ldr	r3, [r7, #20]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20000f2c 	.word	0x20000f2c
 8009f80:	20000f08 	.word	0x20000f08
 8009f84:	20000ebc 	.word	0x20000ebc
 8009f88:	20000ec0 	.word	0x20000ec0
 8009f8c:	20000f1c 	.word	0x20000f1c
 8009f90:	20000f24 	.word	0x20000f24
 8009f94:	20000f0c 	.word	0x20000f0c
 8009f98:	20000a34 	.word	0x20000a34
 8009f9c:	20000a30 	.word	0x20000a30
 8009fa0:	20000f18 	.word	0x20000f18
 8009fa4:	20000f14 	.word	0x20000f14

08009fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009fae:	4b2a      	ldr	r3, [pc, #168]	; (800a058 <vTaskSwitchContext+0xb0>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009fb6:	4b29      	ldr	r3, [pc, #164]	; (800a05c <vTaskSwitchContext+0xb4>)
 8009fb8:	2201      	movs	r2, #1
 8009fba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009fbc:	e046      	b.n	800a04c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009fbe:	4b27      	ldr	r3, [pc, #156]	; (800a05c <vTaskSwitchContext+0xb4>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fc4:	4b26      	ldr	r3, [pc, #152]	; (800a060 <vTaskSwitchContext+0xb8>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	60fb      	str	r3, [r7, #12]
 8009fca:	e010      	b.n	8009fee <vTaskSwitchContext+0x46>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10a      	bne.n	8009fe8 <vTaskSwitchContext+0x40>
	__asm volatile
 8009fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	607b      	str	r3, [r7, #4]
}
 8009fe4:	bf00      	nop
 8009fe6:	e7fe      	b.n	8009fe6 <vTaskSwitchContext+0x3e>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	3b01      	subs	r3, #1
 8009fec:	60fb      	str	r3, [r7, #12]
 8009fee:	491d      	ldr	r1, [pc, #116]	; (800a064 <vTaskSwitchContext+0xbc>)
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	440b      	add	r3, r1
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d0e4      	beq.n	8009fcc <vTaskSwitchContext+0x24>
 800a002:	68fa      	ldr	r2, [r7, #12]
 800a004:	4613      	mov	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4a15      	ldr	r2, [pc, #84]	; (800a064 <vTaskSwitchContext+0xbc>)
 800a00e:	4413      	add	r3, r2
 800a010:	60bb      	str	r3, [r7, #8]
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	605a      	str	r2, [r3, #4]
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	3308      	adds	r3, #8
 800a024:	429a      	cmp	r2, r3
 800a026:	d104      	bne.n	800a032 <vTaskSwitchContext+0x8a>
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	605a      	str	r2, [r3, #4]
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	4a0b      	ldr	r2, [pc, #44]	; (800a068 <vTaskSwitchContext+0xc0>)
 800a03a:	6013      	str	r3, [r2, #0]
 800a03c:	4a08      	ldr	r2, [pc, #32]	; (800a060 <vTaskSwitchContext+0xb8>)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a042:	4b09      	ldr	r3, [pc, #36]	; (800a068 <vTaskSwitchContext+0xc0>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	3354      	adds	r3, #84	; 0x54
 800a048:	4a08      	ldr	r2, [pc, #32]	; (800a06c <vTaskSwitchContext+0xc4>)
 800a04a:	6013      	str	r3, [r2, #0]
}
 800a04c:	bf00      	nop
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	20000f2c 	.word	0x20000f2c
 800a05c:	20000f18 	.word	0x20000f18
 800a060:	20000f0c 	.word	0x20000f0c
 800a064:	20000a34 	.word	0x20000a34
 800a068:	20000a30 	.word	0x20000a30
 800a06c:	20000018 	.word	0x20000018

0800a070 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10a      	bne.n	800a096 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	60fb      	str	r3, [r7, #12]
}
 800a092:	bf00      	nop
 800a094:	e7fe      	b.n	800a094 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a096:	4b07      	ldr	r3, [pc, #28]	; (800a0b4 <vTaskPlaceOnEventList+0x44>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3318      	adds	r3, #24
 800a09c:	4619      	mov	r1, r3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f7fe f8bf 	bl	8008222 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	6838      	ldr	r0, [r7, #0]
 800a0a8:	f000 fcf8 	bl	800aa9c <prvAddCurrentTaskToDelayedList>
}
 800a0ac:	bf00      	nop
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20000a30 	.word	0x20000a30

0800a0b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10a      	bne.n	800a0e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	617b      	str	r3, [r7, #20]
}
 800a0dc:	bf00      	nop
 800a0de:	e7fe      	b.n	800a0de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0e0:	4b0a      	ldr	r3, [pc, #40]	; (800a10c <vTaskPlaceOnEventListRestricted+0x54>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	3318      	adds	r3, #24
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f7fe f876 	bl	80081da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a0f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0fa:	6879      	ldr	r1, [r7, #4]
 800a0fc:	68b8      	ldr	r0, [r7, #8]
 800a0fe:	f000 fccd 	bl	800aa9c <prvAddCurrentTaskToDelayedList>
	}
 800a102:	bf00      	nop
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	20000a30 	.word	0x20000a30

0800a110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10a      	bne.n	800a13c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	60fb      	str	r3, [r7, #12]
}
 800a138:	bf00      	nop
 800a13a:	e7fe      	b.n	800a13a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	3318      	adds	r3, #24
 800a140:	4618      	mov	r0, r3
 800a142:	f7fe f8a7 	bl	8008294 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a146:	4b1e      	ldr	r3, [pc, #120]	; (800a1c0 <xTaskRemoveFromEventList+0xb0>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d11d      	bne.n	800a18a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	3304      	adds	r3, #4
 800a152:	4618      	mov	r0, r3
 800a154:	f7fe f89e 	bl	8008294 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a15c:	4b19      	ldr	r3, [pc, #100]	; (800a1c4 <xTaskRemoveFromEventList+0xb4>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	429a      	cmp	r2, r3
 800a162:	d903      	bls.n	800a16c <xTaskRemoveFromEventList+0x5c>
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a168:	4a16      	ldr	r2, [pc, #88]	; (800a1c4 <xTaskRemoveFromEventList+0xb4>)
 800a16a:	6013      	str	r3, [r2, #0]
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4a13      	ldr	r2, [pc, #76]	; (800a1c8 <xTaskRemoveFromEventList+0xb8>)
 800a17a:	441a      	add	r2, r3
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	3304      	adds	r3, #4
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7fe f829 	bl	80081da <vListInsertEnd>
 800a188:	e005      	b.n	800a196 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	3318      	adds	r3, #24
 800a18e:	4619      	mov	r1, r3
 800a190:	480e      	ldr	r0, [pc, #56]	; (800a1cc <xTaskRemoveFromEventList+0xbc>)
 800a192:	f7fe f822 	bl	80081da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19a:	4b0d      	ldr	r3, [pc, #52]	; (800a1d0 <xTaskRemoveFromEventList+0xc0>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d905      	bls.n	800a1b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a1a8:	4b0a      	ldr	r3, [pc, #40]	; (800a1d4 <xTaskRemoveFromEventList+0xc4>)
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	e001      	b.n	800a1b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a1b4:	697b      	ldr	r3, [r7, #20]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20000f2c 	.word	0x20000f2c
 800a1c4:	20000f0c 	.word	0x20000f0c
 800a1c8:	20000a34 	.word	0x20000a34
 800a1cc:	20000ec4 	.word	0x20000ec4
 800a1d0:	20000a30 	.word	0x20000a30
 800a1d4:	20000f18 	.word	0x20000f18

0800a1d8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d10a      	bne.n	800a1fc <vTaskSetTimeOutState+0x24>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	60fb      	str	r3, [r7, #12]
}
 800a1f8:	bf00      	nop
 800a1fa:	e7fe      	b.n	800a1fa <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800a1fc:	f001 f91a 	bl	800b434 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a200:	4b06      	ldr	r3, [pc, #24]	; (800a21c <vTaskSetTimeOutState+0x44>)
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a208:	4b05      	ldr	r3, [pc, #20]	; (800a220 <vTaskSetTimeOutState+0x48>)
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800a210:	f001 f940 	bl	800b494 <vPortExitCritical>
}
 800a214:	bf00      	nop
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	20000f1c 	.word	0x20000f1c
 800a220:	20000f08 	.word	0x20000f08

0800a224 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a22c:	4b06      	ldr	r3, [pc, #24]	; (800a248 <vTaskInternalSetTimeOutState+0x24>)
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a234:	4b05      	ldr	r3, [pc, #20]	; (800a24c <vTaskInternalSetTimeOutState+0x28>)
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	605a      	str	r2, [r3, #4]
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	20000f1c 	.word	0x20000f1c
 800a24c:	20000f08 	.word	0x20000f08

0800a250 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10a      	bne.n	800a276 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	613b      	str	r3, [r7, #16]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10a      	bne.n	800a292 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	60fb      	str	r3, [r7, #12]
}
 800a28e:	bf00      	nop
 800a290:	e7fe      	b.n	800a290 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a292:	f001 f8cf 	bl	800b434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a296:	4b1d      	ldr	r3, [pc, #116]	; (800a30c <xTaskCheckForTimeOut+0xbc>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	69ba      	ldr	r2, [r7, #24]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2ae:	d102      	bne.n	800a2b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	61fb      	str	r3, [r7, #28]
 800a2b4:	e023      	b.n	800a2fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	4b15      	ldr	r3, [pc, #84]	; (800a310 <xTaskCheckForTimeOut+0xc0>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d007      	beq.n	800a2d2 <xTaskCheckForTimeOut+0x82>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	69ba      	ldr	r2, [r7, #24]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d302      	bcc.n	800a2d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	61fb      	str	r3, [r7, #28]
 800a2d0:	e015      	b.n	800a2fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d20b      	bcs.n	800a2f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	1ad2      	subs	r2, r2, r3
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff ff9b 	bl	800a224 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	61fb      	str	r3, [r7, #28]
 800a2f2:	e004      	b.n	800a2fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a2fe:	f001 f8c9 	bl	800b494 <vPortExitCritical>

	return xReturn;
 800a302:	69fb      	ldr	r3, [r7, #28]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3720      	adds	r7, #32
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	20000f08 	.word	0x20000f08
 800a310:	20000f1c 	.word	0x20000f1c

0800a314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a314:	b480      	push	{r7}
 800a316:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a318:	4b03      	ldr	r3, [pc, #12]	; (800a328 <vTaskMissedYield+0x14>)
 800a31a:	2201      	movs	r2, #1
 800a31c:	601a      	str	r2, [r3, #0]
}
 800a31e:	bf00      	nop
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	20000f18 	.word	0x20000f18

0800a32c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a334:	f000 f852 	bl	800a3dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a338:	4b06      	ldr	r3, [pc, #24]	; (800a354 <prvIdleTask+0x28>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d9f9      	bls.n	800a334 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a340:	4b05      	ldr	r3, [pc, #20]	; (800a358 <prvIdleTask+0x2c>)
 800a342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a350:	e7f0      	b.n	800a334 <prvIdleTask+0x8>
 800a352:	bf00      	nop
 800a354:	20000a34 	.word	0x20000a34
 800a358:	e000ed04 	.word	0xe000ed04

0800a35c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a362:	2300      	movs	r3, #0
 800a364:	607b      	str	r3, [r7, #4]
 800a366:	e00c      	b.n	800a382 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	4613      	mov	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	4413      	add	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	4a12      	ldr	r2, [pc, #72]	; (800a3bc <prvInitialiseTaskLists+0x60>)
 800a374:	4413      	add	r3, r2
 800a376:	4618      	mov	r0, r3
 800a378:	f7fd ff02 	bl	8008180 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	3301      	adds	r3, #1
 800a380:	607b      	str	r3, [r7, #4]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b37      	cmp	r3, #55	; 0x37
 800a386:	d9ef      	bls.n	800a368 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a388:	480d      	ldr	r0, [pc, #52]	; (800a3c0 <prvInitialiseTaskLists+0x64>)
 800a38a:	f7fd fef9 	bl	8008180 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a38e:	480d      	ldr	r0, [pc, #52]	; (800a3c4 <prvInitialiseTaskLists+0x68>)
 800a390:	f7fd fef6 	bl	8008180 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a394:	480c      	ldr	r0, [pc, #48]	; (800a3c8 <prvInitialiseTaskLists+0x6c>)
 800a396:	f7fd fef3 	bl	8008180 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a39a:	480c      	ldr	r0, [pc, #48]	; (800a3cc <prvInitialiseTaskLists+0x70>)
 800a39c:	f7fd fef0 	bl	8008180 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a3a0:	480b      	ldr	r0, [pc, #44]	; (800a3d0 <prvInitialiseTaskLists+0x74>)
 800a3a2:	f7fd feed 	bl	8008180 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a3a6:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <prvInitialiseTaskLists+0x78>)
 800a3a8:	4a05      	ldr	r2, [pc, #20]	; (800a3c0 <prvInitialiseTaskLists+0x64>)
 800a3aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a3ac:	4b0a      	ldr	r3, [pc, #40]	; (800a3d8 <prvInitialiseTaskLists+0x7c>)
 800a3ae:	4a05      	ldr	r2, [pc, #20]	; (800a3c4 <prvInitialiseTaskLists+0x68>)
 800a3b0:	601a      	str	r2, [r3, #0]
}
 800a3b2:	bf00      	nop
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20000a34 	.word	0x20000a34
 800a3c0:	20000e94 	.word	0x20000e94
 800a3c4:	20000ea8 	.word	0x20000ea8
 800a3c8:	20000ec4 	.word	0x20000ec4
 800a3cc:	20000ed8 	.word	0x20000ed8
 800a3d0:	20000ef0 	.word	0x20000ef0
 800a3d4:	20000ebc 	.word	0x20000ebc
 800a3d8:	20000ec0 	.word	0x20000ec0

0800a3dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3e2:	e019      	b.n	800a418 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a3e4:	f001 f826 	bl	800b434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e8:	4b10      	ldr	r3, [pc, #64]	; (800a42c <prvCheckTasksWaitingTermination+0x50>)
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fd ff4d 	bl	8008294 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3fa:	4b0d      	ldr	r3, [pc, #52]	; (800a430 <prvCheckTasksWaitingTermination+0x54>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	4a0b      	ldr	r2, [pc, #44]	; (800a430 <prvCheckTasksWaitingTermination+0x54>)
 800a402:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a404:	4b0b      	ldr	r3, [pc, #44]	; (800a434 <prvCheckTasksWaitingTermination+0x58>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3b01      	subs	r3, #1
 800a40a:	4a0a      	ldr	r2, [pc, #40]	; (800a434 <prvCheckTasksWaitingTermination+0x58>)
 800a40c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a40e:	f001 f841 	bl	800b494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f810 	bl	800a438 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a418:	4b06      	ldr	r3, [pc, #24]	; (800a434 <prvCheckTasksWaitingTermination+0x58>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e1      	bne.n	800a3e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a420:	bf00      	nop
 800a422:	bf00      	nop
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	20000ed8 	.word	0x20000ed8
 800a430:	20000f04 	.word	0x20000f04
 800a434:	20000eec 	.word	0x20000eec

0800a438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	3354      	adds	r3, #84	; 0x54
 800a444:	4618      	mov	r0, r3
 800a446:	f001 fbff 	bl	800bc48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a450:	2b00      	cmp	r3, #0
 800a452:	d108      	bne.n	800a466 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a458:	4618      	mov	r0, r3
 800a45a:	f001 f9d9 	bl	800b810 <vPortFree>
				vPortFree( pxTCB );
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f001 f9d6 	bl	800b810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a464:	e018      	b.n	800a498 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d103      	bne.n	800a478 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f001 f9cd 	bl	800b810 <vPortFree>
	}
 800a476:	e00f      	b.n	800a498 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d00a      	beq.n	800a498 <prvDeleteTCB+0x60>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	60fb      	str	r3, [r7, #12]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <prvDeleteTCB+0x5e>
	}
 800a498:	bf00      	nop
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4a6:	4b0c      	ldr	r3, [pc, #48]	; (800a4d8 <prvResetNextTaskUnblockTime+0x38>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d104      	bne.n	800a4ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4b0:	4b0a      	ldr	r3, [pc, #40]	; (800a4dc <prvResetNextTaskUnblockTime+0x3c>)
 800a4b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4b8:	e008      	b.n	800a4cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ba:	4b07      	ldr	r3, [pc, #28]	; (800a4d8 <prvResetNextTaskUnblockTime+0x38>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	4a04      	ldr	r2, [pc, #16]	; (800a4dc <prvResetNextTaskUnblockTime+0x3c>)
 800a4ca:	6013      	str	r3, [r2, #0]
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr
 800a4d8:	20000ebc 	.word	0x20000ebc
 800a4dc:	20000f24 	.word	0x20000f24

0800a4e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a4e6:	4b05      	ldr	r3, [pc, #20]	; (800a4fc <xTaskGetCurrentTaskHandle+0x1c>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a4ec:	687b      	ldr	r3, [r7, #4]
	}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	20000a30 	.word	0x20000a30

0800a500 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a506:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <xTaskGetSchedulerState+0x34>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d102      	bne.n	800a514 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a50e:	2301      	movs	r3, #1
 800a510:	607b      	str	r3, [r7, #4]
 800a512:	e008      	b.n	800a526 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a514:	4b08      	ldr	r3, [pc, #32]	; (800a538 <xTaskGetSchedulerState+0x38>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d102      	bne.n	800a522 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a51c:	2302      	movs	r3, #2
 800a51e:	607b      	str	r3, [r7, #4]
 800a520:	e001      	b.n	800a526 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a522:	2300      	movs	r3, #0
 800a524:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a526:	687b      	ldr	r3, [r7, #4]
	}
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	20000f10 	.word	0x20000f10
 800a538:	20000f2c 	.word	0x20000f2c

0800a53c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a548:	2300      	movs	r3, #0
 800a54a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d051      	beq.n	800a5f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a556:	4b2a      	ldr	r3, [pc, #168]	; (800a600 <xTaskPriorityInherit+0xc4>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d241      	bcs.n	800a5e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	2b00      	cmp	r3, #0
 800a566:	db06      	blt.n	800a576 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a568:	4b25      	ldr	r3, [pc, #148]	; (800a600 <xTaskPriorityInherit+0xc4>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	6959      	ldr	r1, [r3, #20]
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57e:	4613      	mov	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4413      	add	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4a1f      	ldr	r2, [pc, #124]	; (800a604 <xTaskPriorityInherit+0xc8>)
 800a588:	4413      	add	r3, r2
 800a58a:	4299      	cmp	r1, r3
 800a58c:	d122      	bne.n	800a5d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	3304      	adds	r3, #4
 800a592:	4618      	mov	r0, r3
 800a594:	f7fd fe7e 	bl	8008294 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a598:	4b19      	ldr	r3, [pc, #100]	; (800a600 <xTaskPriorityInherit+0xc4>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a6:	4b18      	ldr	r3, [pc, #96]	; (800a608 <xTaskPriorityInherit+0xcc>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d903      	bls.n	800a5b6 <xTaskPriorityInherit+0x7a>
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b2:	4a15      	ldr	r2, [pc, #84]	; (800a608 <xTaskPriorityInherit+0xcc>)
 800a5b4:	6013      	str	r3, [r2, #0]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	4413      	add	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4a10      	ldr	r2, [pc, #64]	; (800a604 <xTaskPriorityInherit+0xc8>)
 800a5c4:	441a      	add	r2, r3
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	3304      	adds	r3, #4
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	f7fd fe04 	bl	80081da <vListInsertEnd>
 800a5d2:	e004      	b.n	800a5de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a5d4:	4b0a      	ldr	r3, [pc, #40]	; (800a600 <xTaskPriorityInherit+0xc4>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	60fb      	str	r3, [r7, #12]
 800a5e2:	e008      	b.n	800a5f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5e8:	4b05      	ldr	r3, [pc, #20]	; (800a600 <xTaskPriorityInherit+0xc4>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d201      	bcs.n	800a5f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
	}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	20000a30 	.word	0x20000a30
 800a604:	20000a34 	.word	0x20000a34
 800a608:	20000f0c 	.word	0x20000f0c

0800a60c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a618:	2300      	movs	r3, #0
 800a61a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d056      	beq.n	800a6d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a622:	4b2e      	ldr	r3, [pc, #184]	; (800a6dc <xTaskPriorityDisinherit+0xd0>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	693a      	ldr	r2, [r7, #16]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d00a      	beq.n	800a642 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	60fb      	str	r3, [r7, #12]
}
 800a63e:	bf00      	nop
 800a640:	e7fe      	b.n	800a640 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10a      	bne.n	800a660 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	60bb      	str	r3, [r7, #8]
}
 800a65c:	bf00      	nop
 800a65e:	e7fe      	b.n	800a65e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a664:	1e5a      	subs	r2, r3, #1
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a672:	429a      	cmp	r2, r3
 800a674:	d02c      	beq.n	800a6d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d128      	bne.n	800a6d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	3304      	adds	r3, #4
 800a682:	4618      	mov	r0, r3
 800a684:	f7fd fe06 	bl	8008294 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a694:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a0:	4b0f      	ldr	r3, [pc, #60]	; (800a6e0 <xTaskPriorityDisinherit+0xd4>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d903      	bls.n	800a6b0 <xTaskPriorityDisinherit+0xa4>
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ac:	4a0c      	ldr	r2, [pc, #48]	; (800a6e0 <xTaskPriorityDisinherit+0xd4>)
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4a09      	ldr	r2, [pc, #36]	; (800a6e4 <xTaskPriorityDisinherit+0xd8>)
 800a6be:	441a      	add	r2, r3
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4610      	mov	r0, r2
 800a6c8:	f7fd fd87 	bl	80081da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6d0:	697b      	ldr	r3, [r7, #20]
	}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3718      	adds	r7, #24
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	20000a30 	.word	0x20000a30
 800a6e0:	20000f0c 	.word	0x20000f0c
 800a6e4:	20000a34 	.word	0x20000a34

0800a6e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b088      	sub	sp, #32
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d06a      	beq.n	800a7d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10a      	bne.n	800a71e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	60fb      	str	r3, [r7, #12]
}
 800a71a:	bf00      	nop
 800a71c:	e7fe      	b.n	800a71c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	429a      	cmp	r2, r3
 800a726:	d902      	bls.n	800a72e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	61fb      	str	r3, [r7, #28]
 800a72c:	e002      	b.n	800a734 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a732:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a738:	69fa      	ldr	r2, [r7, #28]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d04b      	beq.n	800a7d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	429a      	cmp	r2, r3
 800a746:	d146      	bne.n	800a7d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a748:	4b25      	ldr	r3, [pc, #148]	; (800a7e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	69ba      	ldr	r2, [r7, #24]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d10a      	bne.n	800a768 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	60bb      	str	r3, [r7, #8]
}
 800a764:	bf00      	nop
 800a766:	e7fe      	b.n	800a766 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	69fa      	ldr	r2, [r7, #28]
 800a772:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	db04      	blt.n	800a786 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	6959      	ldr	r1, [r3, #20]
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4a13      	ldr	r2, [pc, #76]	; (800a7e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a796:	4413      	add	r3, r2
 800a798:	4299      	cmp	r1, r3
 800a79a:	d11c      	bne.n	800a7d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	3304      	adds	r3, #4
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7fd fd77 	bl	8008294 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7aa:	4b0f      	ldr	r3, [pc, #60]	; (800a7e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d903      	bls.n	800a7ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b6:	4a0c      	ldr	r2, [pc, #48]	; (800a7e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7be:	4613      	mov	r3, r2
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4413      	add	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	4a07      	ldr	r2, [pc, #28]	; (800a7e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a7c8:	441a      	add	r2, r3
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	4610      	mov	r0, r2
 800a7d2:	f7fd fd02 	bl	80081da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7d6:	bf00      	nop
 800a7d8:	3720      	adds	r7, #32
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	20000a30 	.word	0x20000a30
 800a7e4:	20000a34 	.word	0x20000a34
 800a7e8:	20000f0c 	.word	0x20000f0c

0800a7ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a7ec:	b480      	push	{r7}
 800a7ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a7f0:	4b07      	ldr	r3, [pc, #28]	; (800a810 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d004      	beq.n	800a802 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a7f8:	4b05      	ldr	r3, [pc, #20]	; (800a810 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7fe:	3201      	adds	r2, #1
 800a800:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a802:	4b03      	ldr	r3, [pc, #12]	; (800a810 <pvTaskIncrementMutexHeldCount+0x24>)
 800a804:	681b      	ldr	r3, [r3, #0]
	}
 800a806:	4618      	mov	r0, r3
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	20000a30 	.word	0x20000a30

0800a814 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a822:	f000 fe07 	bl	800b434 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a826:	4b29      	ldr	r3, [pc, #164]	; (800a8cc <xTaskNotifyWait+0xb8>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2b02      	cmp	r3, #2
 800a832:	d01c      	beq.n	800a86e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a834:	4b25      	ldr	r3, [pc, #148]	; (800a8cc <xTaskNotifyWait+0xb8>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	43d2      	mvns	r2, r2
 800a840:	400a      	ands	r2, r1
 800a842:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a846:	4b21      	ldr	r3, [pc, #132]	; (800a8cc <xTaskNotifyWait+0xb8>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00b      	beq.n	800a86e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a856:	2101      	movs	r1, #1
 800a858:	6838      	ldr	r0, [r7, #0]
 800a85a:	f000 f91f 	bl	800aa9c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a85e:	4b1c      	ldr	r3, [pc, #112]	; (800a8d0 <xTaskNotifyWait+0xbc>)
 800a860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a864:	601a      	str	r2, [r3, #0]
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a86e:	f000 fe11 	bl	800b494 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a872:	f000 fddf 	bl	800b434 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d005      	beq.n	800a888 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a87c:	4b13      	ldr	r3, [pc, #76]	; (800a8cc <xTaskNotifyWait+0xb8>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a888:	4b10      	ldr	r3, [pc, #64]	; (800a8cc <xTaskNotifyWait+0xb8>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b02      	cmp	r3, #2
 800a894:	d002      	beq.n	800a89c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a896:	2300      	movs	r3, #0
 800a898:	617b      	str	r3, [r7, #20]
 800a89a:	e00a      	b.n	800a8b2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a89c:	4b0b      	ldr	r3, [pc, #44]	; (800a8cc <xTaskNotifyWait+0xb8>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800a8a4:	68ba      	ldr	r2, [r7, #8]
 800a8a6:	43d2      	mvns	r2, r2
 800a8a8:	400a      	ands	r2, r1
 800a8aa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a8b2:	4b06      	ldr	r3, [pc, #24]	; (800a8cc <xTaskNotifyWait+0xb8>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800a8bc:	f000 fdea 	bl	800b494 <vPortExitCritical>

		return xReturn;
 800a8c0:	697b      	ldr	r3, [r7, #20]
	}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3718      	adds	r7, #24
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20000a30 	.word	0x20000a30
 800a8d0:	e000ed04 	.word	0xe000ed04

0800a8d4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08a      	sub	sp, #40	; 0x28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	603b      	str	r3, [r7, #0]
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10a      	bne.n	800a904 <xTaskGenericNotify+0x30>
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	61bb      	str	r3, [r7, #24]
}
 800a900:	bf00      	nop
 800a902:	e7fe      	b.n	800a902 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a908:	f000 fd94 	bl	800b434 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d004      	beq.n	800a91c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a912:	6a3b      	ldr	r3, [r7, #32]
 800a914:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a922:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	2202      	movs	r2, #2
 800a928:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800a92c:	79fb      	ldrb	r3, [r7, #7]
 800a92e:	2b04      	cmp	r3, #4
 800a930:	d82d      	bhi.n	800a98e <xTaskGenericNotify+0xba>
 800a932:	a201      	add	r2, pc, #4	; (adr r2, 800a938 <xTaskGenericNotify+0x64>)
 800a934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a938:	0800a9b1 	.word	0x0800a9b1
 800a93c:	0800a94d 	.word	0x0800a94d
 800a940:	0800a95f 	.word	0x0800a95f
 800a944:	0800a96f 	.word	0x0800a96f
 800a948:	0800a979 	.word	0x0800a979
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a94c:	6a3b      	ldr	r3, [r7, #32]
 800a94e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	431a      	orrs	r2, r3
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a95c:	e02b      	b.n	800a9b6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a964:	1c5a      	adds	r2, r3, #1
 800a966:	6a3b      	ldr	r3, [r7, #32]
 800a968:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a96c:	e023      	b.n	800a9b6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a96e:	6a3b      	ldr	r3, [r7, #32]
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a976:	e01e      	b.n	800a9b6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a978:	7ffb      	ldrb	r3, [r7, #31]
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d004      	beq.n	800a988 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a97e:	6a3b      	ldr	r3, [r7, #32]
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a986:	e016      	b.n	800a9b6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800a988:	2300      	movs	r3, #0
 800a98a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a98c:	e013      	b.n	800a9b6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a98e:	6a3b      	ldr	r3, [r7, #32]
 800a990:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a998:	d00c      	beq.n	800a9b4 <xTaskGenericNotify+0xe0>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	617b      	str	r3, [r7, #20]
}
 800a9ac:	bf00      	nop
 800a9ae:	e7fe      	b.n	800a9ae <xTaskGenericNotify+0xda>
					break;
 800a9b0:	bf00      	nop
 800a9b2:	e000      	b.n	800a9b6 <xTaskGenericNotify+0xe2>

					break;
 800a9b4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a9b6:	7ffb      	ldrb	r3, [r7, #31]
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d13a      	bne.n	800aa32 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	3304      	adds	r3, #4
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fd fc67 	bl	8008294 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a9c6:	6a3b      	ldr	r3, [r7, #32]
 800a9c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ca:	4b1d      	ldr	r3, [pc, #116]	; (800aa40 <xTaskGenericNotify+0x16c>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d903      	bls.n	800a9da <xTaskGenericNotify+0x106>
 800a9d2:	6a3b      	ldr	r3, [r7, #32]
 800a9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d6:	4a1a      	ldr	r2, [pc, #104]	; (800aa40 <xTaskGenericNotify+0x16c>)
 800a9d8:	6013      	str	r3, [r2, #0]
 800a9da:	6a3b      	ldr	r3, [r7, #32]
 800a9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9de:	4613      	mov	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	4a17      	ldr	r2, [pc, #92]	; (800aa44 <xTaskGenericNotify+0x170>)
 800a9e8:	441a      	add	r2, r3
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	3304      	adds	r3, #4
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	f7fd fbf2 	bl	80081da <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a9f6:	6a3b      	ldr	r3, [r7, #32]
 800a9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00a      	beq.n	800aa14 <xTaskGenericNotify+0x140>
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	613b      	str	r3, [r7, #16]
}
 800aa10:	bf00      	nop
 800aa12:	e7fe      	b.n	800aa12 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa18:	4b0b      	ldr	r3, [pc, #44]	; (800aa48 <xTaskGenericNotify+0x174>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d907      	bls.n	800aa32 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800aa22:	4b0a      	ldr	r3, [pc, #40]	; (800aa4c <xTaskGenericNotify+0x178>)
 800aa24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa28:	601a      	str	r2, [r3, #0]
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800aa32:	f000 fd2f 	bl	800b494 <vPortExitCritical>

		return xReturn;
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3728      	adds	r7, #40	; 0x28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	20000f0c 	.word	0x20000f0c
 800aa44:	20000a34 	.word	0x20000a34
 800aa48:	20000a30 	.word	0x20000a30
 800aa4c:	e000ed04 	.word	0xe000ed04

0800aa50 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d102      	bne.n	800aa64 <xTaskNotifyStateClear+0x14>
 800aa5e:	4b0e      	ldr	r3, [pc, #56]	; (800aa98 <xTaskNotifyStateClear+0x48>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	e000      	b.n	800aa66 <xTaskNotifyStateClear+0x16>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800aa68:	f000 fce4 	bl	800b434 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d106      	bne.n	800aa86 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 800aa80:	2301      	movs	r3, #1
 800aa82:	60fb      	str	r3, [r7, #12]
 800aa84:	e001      	b.n	800aa8a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800aa86:	2300      	movs	r3, #0
 800aa88:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800aa8a:	f000 fd03 	bl	800b494 <vPortExitCritical>

		return xReturn;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
	}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	20000a30 	.word	0x20000a30

0800aa9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aaa6:	4b21      	ldr	r3, [pc, #132]	; (800ab2c <prvAddCurrentTaskToDelayedList+0x90>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaac:	4b20      	ldr	r3, [pc, #128]	; (800ab30 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	3304      	adds	r3, #4
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fd fbee 	bl	8008294 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aabe:	d10a      	bne.n	800aad6 <prvAddCurrentTaskToDelayedList+0x3a>
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d007      	beq.n	800aad6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aac6:	4b1a      	ldr	r3, [pc, #104]	; (800ab30 <prvAddCurrentTaskToDelayedList+0x94>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	3304      	adds	r3, #4
 800aacc:	4619      	mov	r1, r3
 800aace:	4819      	ldr	r0, [pc, #100]	; (800ab34 <prvAddCurrentTaskToDelayedList+0x98>)
 800aad0:	f7fd fb83 	bl	80081da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aad4:	e026      	b.n	800ab24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4413      	add	r3, r2
 800aadc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aade:	4b14      	ldr	r3, [pc, #80]	; (800ab30 <prvAddCurrentTaskToDelayedList+0x94>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d209      	bcs.n	800ab02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaee:	4b12      	ldr	r3, [pc, #72]	; (800ab38 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	4b0f      	ldr	r3, [pc, #60]	; (800ab30 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4610      	mov	r0, r2
 800aafc:	f7fd fb91 	bl	8008222 <vListInsert>
}
 800ab00:	e010      	b.n	800ab24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab02:	4b0e      	ldr	r3, [pc, #56]	; (800ab3c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	4b0a      	ldr	r3, [pc, #40]	; (800ab30 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4610      	mov	r0, r2
 800ab10:	f7fd fb87 	bl	8008222 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab14:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d202      	bcs.n	800ab24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ab1e:	4a08      	ldr	r2, [pc, #32]	; (800ab40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	6013      	str	r3, [r2, #0]
}
 800ab24:	bf00      	nop
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	20000f08 	.word	0x20000f08
 800ab30:	20000a30 	.word	0x20000a30
 800ab34:	20000ef0 	.word	0x20000ef0
 800ab38:	20000ec0 	.word	0x20000ec0
 800ab3c:	20000ebc 	.word	0x20000ebc
 800ab40:	20000f24 	.word	0x20000f24

0800ab44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b08a      	sub	sp, #40	; 0x28
 800ab48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab4e:	f000 fb07 	bl	800b160 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab52:	4b1c      	ldr	r3, [pc, #112]	; (800abc4 <xTimerCreateTimerTask+0x80>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d021      	beq.n	800ab9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab62:	1d3a      	adds	r2, r7, #4
 800ab64:	f107 0108 	add.w	r1, r7, #8
 800ab68:	f107 030c 	add.w	r3, r7, #12
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fd faed 	bl	800814c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab72:	6879      	ldr	r1, [r7, #4]
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	9202      	str	r2, [sp, #8]
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	2300      	movs	r3, #0
 800ab82:	460a      	mov	r2, r1
 800ab84:	4910      	ldr	r1, [pc, #64]	; (800abc8 <xTimerCreateTimerTask+0x84>)
 800ab86:	4811      	ldr	r0, [pc, #68]	; (800abcc <xTimerCreateTimerTask+0x88>)
 800ab88:	f7fe fe3c 	bl	8009804 <xTaskCreateStatic>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	4a10      	ldr	r2, [pc, #64]	; (800abd0 <xTimerCreateTimerTask+0x8c>)
 800ab90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ab92:	4b0f      	ldr	r3, [pc, #60]	; (800abd0 <xTimerCreateTimerTask+0x8c>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10a      	bne.n	800abba <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	613b      	str	r3, [r7, #16]
}
 800abb6:	bf00      	nop
 800abb8:	e7fe      	b.n	800abb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800abba:	697b      	ldr	r3, [r7, #20]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3718      	adds	r7, #24
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	20000f60 	.word	0x20000f60
 800abc8:	0800c978 	.word	0x0800c978
 800abcc:	0800ad09 	.word	0x0800ad09
 800abd0:	20000f64 	.word	0x20000f64

0800abd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b08a      	sub	sp, #40	; 0x28
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
 800abe0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800abe2:	2300      	movs	r3, #0
 800abe4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d10a      	bne.n	800ac02 <xTimerGenericCommand+0x2e>
	__asm volatile
 800abec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf0:	f383 8811 	msr	BASEPRI, r3
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	623b      	str	r3, [r7, #32]
}
 800abfe:	bf00      	nop
 800ac00:	e7fe      	b.n	800ac00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ac02:	4b1a      	ldr	r3, [pc, #104]	; (800ac6c <xTimerGenericCommand+0x98>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d02a      	beq.n	800ac60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	2b05      	cmp	r3, #5
 800ac1a:	dc18      	bgt.n	800ac4e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac1c:	f7ff fc70 	bl	800a500 <xTaskGetSchedulerState>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d109      	bne.n	800ac3a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ac26:	4b11      	ldr	r3, [pc, #68]	; (800ac6c <xTimerGenericCommand+0x98>)
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	f107 0110 	add.w	r1, r7, #16
 800ac2e:	2300      	movs	r3, #0
 800ac30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac32:	f7fd fcc9 	bl	80085c8 <xQueueGenericSend>
 800ac36:	6278      	str	r0, [r7, #36]	; 0x24
 800ac38:	e012      	b.n	800ac60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac3a:	4b0c      	ldr	r3, [pc, #48]	; (800ac6c <xTimerGenericCommand+0x98>)
 800ac3c:	6818      	ldr	r0, [r3, #0]
 800ac3e:	f107 0110 	add.w	r1, r7, #16
 800ac42:	2300      	movs	r3, #0
 800ac44:	2200      	movs	r2, #0
 800ac46:	f7fd fcbf 	bl	80085c8 <xQueueGenericSend>
 800ac4a:	6278      	str	r0, [r7, #36]	; 0x24
 800ac4c:	e008      	b.n	800ac60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac4e:	4b07      	ldr	r3, [pc, #28]	; (800ac6c <xTimerGenericCommand+0x98>)
 800ac50:	6818      	ldr	r0, [r3, #0]
 800ac52:	f107 0110 	add.w	r1, r7, #16
 800ac56:	2300      	movs	r3, #0
 800ac58:	683a      	ldr	r2, [r7, #0]
 800ac5a:	f7fd fdb3 	bl	80087c4 <xQueueGenericSendFromISR>
 800ac5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3728      	adds	r7, #40	; 0x28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	20000f60 	.word	0x20000f60

0800ac70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af02      	add	r7, sp, #8
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac7a:	4b22      	ldr	r3, [pc, #136]	; (800ad04 <prvProcessExpiredTimer+0x94>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	3304      	adds	r3, #4
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7fd fb03 	bl	8008294 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac94:	f003 0304 	and.w	r3, r3, #4
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d022      	beq.n	800ace2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	699a      	ldr	r2, [r3, #24]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	18d1      	adds	r1, r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	683a      	ldr	r2, [r7, #0]
 800aca8:	6978      	ldr	r0, [r7, #20]
 800acaa:	f000 f8d1 	bl	800ae50 <prvInsertTimerInActiveList>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d01f      	beq.n	800acf4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800acb4:	2300      	movs	r3, #0
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	2300      	movs	r3, #0
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	2100      	movs	r1, #0
 800acbe:	6978      	ldr	r0, [r7, #20]
 800acc0:	f7ff ff88 	bl	800abd4 <xTimerGenericCommand>
 800acc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d113      	bne.n	800acf4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	60fb      	str	r3, [r7, #12]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ace8:	f023 0301 	bic.w	r3, r3, #1
 800acec:	b2da      	uxtb	r2, r3
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	6a1b      	ldr	r3, [r3, #32]
 800acf8:	6978      	ldr	r0, [r7, #20]
 800acfa:	4798      	blx	r3
}
 800acfc:	bf00      	nop
 800acfe:	3718      	adds	r7, #24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	20000f58 	.word	0x20000f58

0800ad08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad10:	f107 0308 	add.w	r3, r7, #8
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 f857 	bl	800adc8 <prvGetNextExpireTime>
 800ad1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	4619      	mov	r1, r3
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f000 f803 	bl	800ad2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ad26:	f000 f8d5 	bl	800aed4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad2a:	e7f1      	b.n	800ad10 <prvTimerTask+0x8>

0800ad2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad36:	f7fe ffc1 	bl	8009cbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad3a:	f107 0308 	add.w	r3, r7, #8
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 f866 	bl	800ae10 <prvSampleTimeNow>
 800ad44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d130      	bne.n	800adae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d10a      	bne.n	800ad68 <prvProcessTimerOrBlockTask+0x3c>
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d806      	bhi.n	800ad68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad5a:	f7fe ffbd 	bl	8009cd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad5e:	68f9      	ldr	r1, [r7, #12]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7ff ff85 	bl	800ac70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad66:	e024      	b.n	800adb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d008      	beq.n	800ad80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad6e:	4b13      	ldr	r3, [pc, #76]	; (800adbc <prvProcessTimerOrBlockTask+0x90>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d101      	bne.n	800ad7c <prvProcessTimerOrBlockTask+0x50>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e000      	b.n	800ad7e <prvProcessTimerOrBlockTask+0x52>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad80:	4b0f      	ldr	r3, [pc, #60]	; (800adc0 <prvProcessTimerOrBlockTask+0x94>)
 800ad82:	6818      	ldr	r0, [r3, #0]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	f7fe f97f 	bl	8009090 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad92:	f7fe ffa1 	bl	8009cd8 <xTaskResumeAll>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10a      	bne.n	800adb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad9c:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <prvProcessTimerOrBlockTask+0x98>)
 800ad9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	f3bf 8f6f 	isb	sy
}
 800adac:	e001      	b.n	800adb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800adae:	f7fe ff93 	bl	8009cd8 <xTaskResumeAll>
}
 800adb2:	bf00      	nop
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	20000f5c 	.word	0x20000f5c
 800adc0:	20000f60 	.word	0x20000f60
 800adc4:	e000ed04 	.word	0xe000ed04

0800adc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800add0:	4b0e      	ldr	r3, [pc, #56]	; (800ae0c <prvGetNextExpireTime+0x44>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <prvGetNextExpireTime+0x16>
 800adda:	2201      	movs	r2, #1
 800addc:	e000      	b.n	800ade0 <prvGetNextExpireTime+0x18>
 800adde:	2200      	movs	r2, #0
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d105      	bne.n	800adf8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800adec:	4b07      	ldr	r3, [pc, #28]	; (800ae0c <prvGetNextExpireTime+0x44>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	60fb      	str	r3, [r7, #12]
 800adf6:	e001      	b.n	800adfc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800adf8:	2300      	movs	r3, #0
 800adfa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800adfc:	68fb      	ldr	r3, [r7, #12]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	20000f58 	.word	0x20000f58

0800ae10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae18:	f7fe fffc 	bl	8009e14 <xTaskGetTickCount>
 800ae1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae1e:	4b0b      	ldr	r3, [pc, #44]	; (800ae4c <prvSampleTimeNow+0x3c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d205      	bcs.n	800ae34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae28:	f000 f936 	bl	800b098 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	601a      	str	r2, [r3, #0]
 800ae32:	e002      	b.n	800ae3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae3a:	4a04      	ldr	r2, [pc, #16]	; (800ae4c <prvSampleTimeNow+0x3c>)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae40:	68fb      	ldr	r3, [r7, #12]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	20000f68 	.word	0x20000f68

0800ae50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
 800ae5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	68ba      	ldr	r2, [r7, #8]
 800ae66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae6e:	68ba      	ldr	r2, [r7, #8]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d812      	bhi.n	800ae9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	1ad2      	subs	r2, r2, r3
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d302      	bcc.n	800ae8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae84:	2301      	movs	r3, #1
 800ae86:	617b      	str	r3, [r7, #20]
 800ae88:	e01b      	b.n	800aec2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae8a:	4b10      	ldr	r3, [pc, #64]	; (800aecc <prvInsertTimerInActiveList+0x7c>)
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	3304      	adds	r3, #4
 800ae92:	4619      	mov	r1, r3
 800ae94:	4610      	mov	r0, r2
 800ae96:	f7fd f9c4 	bl	8008222 <vListInsert>
 800ae9a:	e012      	b.n	800aec2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d206      	bcs.n	800aeb2 <prvInsertTimerInActiveList+0x62>
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d302      	bcc.n	800aeb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aeac:	2301      	movs	r3, #1
 800aeae:	617b      	str	r3, [r7, #20]
 800aeb0:	e007      	b.n	800aec2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aeb2:	4b07      	ldr	r3, [pc, #28]	; (800aed0 <prvInsertTimerInActiveList+0x80>)
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3304      	adds	r3, #4
 800aeba:	4619      	mov	r1, r3
 800aebc:	4610      	mov	r0, r2
 800aebe:	f7fd f9b0 	bl	8008222 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aec2:	697b      	ldr	r3, [r7, #20]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	20000f5c 	.word	0x20000f5c
 800aed0:	20000f58 	.word	0x20000f58

0800aed4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b08e      	sub	sp, #56	; 0x38
 800aed8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aeda:	e0ca      	b.n	800b072 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	da18      	bge.n	800af14 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aee2:	1d3b      	adds	r3, r7, #4
 800aee4:	3304      	adds	r3, #4
 800aee6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10a      	bne.n	800af04 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	61fb      	str	r3, [r7, #28]
}
 800af00:	bf00      	nop
 800af02:	e7fe      	b.n	800af02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800af04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af0a:	6850      	ldr	r0, [r2, #4]
 800af0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af0e:	6892      	ldr	r2, [r2, #8]
 800af10:	4611      	mov	r1, r2
 800af12:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	f2c0 80aa 	blt.w	800b070 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af22:	695b      	ldr	r3, [r3, #20]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d004      	beq.n	800af32 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2a:	3304      	adds	r3, #4
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7fd f9b1 	bl	8008294 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af32:	463b      	mov	r3, r7
 800af34:	4618      	mov	r0, r3
 800af36:	f7ff ff6b 	bl	800ae10 <prvSampleTimeNow>
 800af3a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2b09      	cmp	r3, #9
 800af40:	f200 8097 	bhi.w	800b072 <prvProcessReceivedCommands+0x19e>
 800af44:	a201      	add	r2, pc, #4	; (adr r2, 800af4c <prvProcessReceivedCommands+0x78>)
 800af46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4a:	bf00      	nop
 800af4c:	0800af75 	.word	0x0800af75
 800af50:	0800af75 	.word	0x0800af75
 800af54:	0800af75 	.word	0x0800af75
 800af58:	0800afe9 	.word	0x0800afe9
 800af5c:	0800affd 	.word	0x0800affd
 800af60:	0800b047 	.word	0x0800b047
 800af64:	0800af75 	.word	0x0800af75
 800af68:	0800af75 	.word	0x0800af75
 800af6c:	0800afe9 	.word	0x0800afe9
 800af70:	0800affd 	.word	0x0800affd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af7a:	f043 0301 	orr.w	r3, r3, #1
 800af7e:	b2da      	uxtb	r2, r3
 800af80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af86:	68ba      	ldr	r2, [r7, #8]
 800af88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8a:	699b      	ldr	r3, [r3, #24]
 800af8c:	18d1      	adds	r1, r2, r3
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af94:	f7ff ff5c 	bl	800ae50 <prvInsertTimerInActiveList>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d069      	beq.n	800b072 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa0:	6a1b      	ldr	r3, [r3, #32]
 800afa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afa4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afac:	f003 0304 	and.w	r3, r3, #4
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d05e      	beq.n	800b072 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	441a      	add	r2, r3
 800afbc:	2300      	movs	r3, #0
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	2300      	movs	r3, #0
 800afc2:	2100      	movs	r1, #0
 800afc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afc6:	f7ff fe05 	bl	800abd4 <xTimerGenericCommand>
 800afca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800afcc:	6a3b      	ldr	r3, [r7, #32]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d14f      	bne.n	800b072 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	61bb      	str	r3, [r7, #24]
}
 800afe4:	bf00      	nop
 800afe6:	e7fe      	b.n	800afe6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afee:	f023 0301 	bic.w	r3, r3, #1
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800affa:	e03a      	b.n	800b072 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800affc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b002:	f043 0301 	orr.w	r3, r3, #1
 800b006:	b2da      	uxtb	r2, r3
 800b008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b012:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b016:	699b      	ldr	r3, [r3, #24]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10a      	bne.n	800b032 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	617b      	str	r3, [r7, #20]
}
 800b02e:	bf00      	nop
 800b030:	e7fe      	b.n	800b030 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b034:	699a      	ldr	r2, [r3, #24]
 800b036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b038:	18d1      	adds	r1, r2, r3
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b03e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b040:	f7ff ff06 	bl	800ae50 <prvInsertTimerInActiveList>
					break;
 800b044:	e015      	b.n	800b072 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b04c:	f003 0302 	and.w	r3, r3, #2
 800b050:	2b00      	cmp	r3, #0
 800b052:	d103      	bne.n	800b05c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b056:	f000 fbdb 	bl	800b810 <vPortFree>
 800b05a:	e00a      	b.n	800b072 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b062:	f023 0301 	bic.w	r3, r3, #1
 800b066:	b2da      	uxtb	r2, r3
 800b068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b06e:	e000      	b.n	800b072 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b070:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b072:	4b08      	ldr	r3, [pc, #32]	; (800b094 <prvProcessReceivedCommands+0x1c0>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	1d39      	adds	r1, r7, #4
 800b078:	2200      	movs	r2, #0
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fd fcca 	bl	8008a14 <xQueueReceive>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	f47f af2a 	bne.w	800aedc <prvProcessReceivedCommands+0x8>
	}
}
 800b088:	bf00      	nop
 800b08a:	bf00      	nop
 800b08c:	3730      	adds	r7, #48	; 0x30
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	20000f60 	.word	0x20000f60

0800b098 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b088      	sub	sp, #32
 800b09c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b09e:	e048      	b.n	800b132 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0a0:	4b2d      	ldr	r3, [pc, #180]	; (800b158 <prvSwitchTimerLists+0xc0>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0aa:	4b2b      	ldr	r3, [pc, #172]	; (800b158 <prvSwitchTimerLists+0xc0>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	3304      	adds	r3, #4
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7fd f8eb 	bl	8008294 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6a1b      	ldr	r3, [r3, #32]
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0cc:	f003 0304 	and.w	r3, r3, #4
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d02e      	beq.n	800b132 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	4413      	add	r3, r2
 800b0dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d90e      	bls.n	800b104 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	68ba      	ldr	r2, [r7, #8]
 800b0ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0f2:	4b19      	ldr	r3, [pc, #100]	; (800b158 <prvSwitchTimerLists+0xc0>)
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	3304      	adds	r3, #4
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	f7fd f890 	bl	8008222 <vListInsert>
 800b102:	e016      	b.n	800b132 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b104:	2300      	movs	r3, #0
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	2300      	movs	r3, #0
 800b10a:	693a      	ldr	r2, [r7, #16]
 800b10c:	2100      	movs	r1, #0
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f7ff fd60 	bl	800abd4 <xTimerGenericCommand>
 800b114:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10a      	bne.n	800b132 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	603b      	str	r3, [r7, #0]
}
 800b12e:	bf00      	nop
 800b130:	e7fe      	b.n	800b130 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b132:	4b09      	ldr	r3, [pc, #36]	; (800b158 <prvSwitchTimerLists+0xc0>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1b1      	bne.n	800b0a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b13c:	4b06      	ldr	r3, [pc, #24]	; (800b158 <prvSwitchTimerLists+0xc0>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b142:	4b06      	ldr	r3, [pc, #24]	; (800b15c <prvSwitchTimerLists+0xc4>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a04      	ldr	r2, [pc, #16]	; (800b158 <prvSwitchTimerLists+0xc0>)
 800b148:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b14a:	4a04      	ldr	r2, [pc, #16]	; (800b15c <prvSwitchTimerLists+0xc4>)
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	6013      	str	r3, [r2, #0]
}
 800b150:	bf00      	nop
 800b152:	3718      	adds	r7, #24
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	20000f58 	.word	0x20000f58
 800b15c:	20000f5c 	.word	0x20000f5c

0800b160 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b166:	f000 f965 	bl	800b434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b16a:	4b15      	ldr	r3, [pc, #84]	; (800b1c0 <prvCheckForValidListAndQueue+0x60>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d120      	bne.n	800b1b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b172:	4814      	ldr	r0, [pc, #80]	; (800b1c4 <prvCheckForValidListAndQueue+0x64>)
 800b174:	f7fd f804 	bl	8008180 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b178:	4813      	ldr	r0, [pc, #76]	; (800b1c8 <prvCheckForValidListAndQueue+0x68>)
 800b17a:	f7fd f801 	bl	8008180 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b17e:	4b13      	ldr	r3, [pc, #76]	; (800b1cc <prvCheckForValidListAndQueue+0x6c>)
 800b180:	4a10      	ldr	r2, [pc, #64]	; (800b1c4 <prvCheckForValidListAndQueue+0x64>)
 800b182:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b184:	4b12      	ldr	r3, [pc, #72]	; (800b1d0 <prvCheckForValidListAndQueue+0x70>)
 800b186:	4a10      	ldr	r2, [pc, #64]	; (800b1c8 <prvCheckForValidListAndQueue+0x68>)
 800b188:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b18a:	2300      	movs	r3, #0
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	4b11      	ldr	r3, [pc, #68]	; (800b1d4 <prvCheckForValidListAndQueue+0x74>)
 800b190:	4a11      	ldr	r2, [pc, #68]	; (800b1d8 <prvCheckForValidListAndQueue+0x78>)
 800b192:	2110      	movs	r1, #16
 800b194:	200a      	movs	r0, #10
 800b196:	f7fd f90f 	bl	80083b8 <xQueueGenericCreateStatic>
 800b19a:	4603      	mov	r3, r0
 800b19c:	4a08      	ldr	r2, [pc, #32]	; (800b1c0 <prvCheckForValidListAndQueue+0x60>)
 800b19e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b1a0:	4b07      	ldr	r3, [pc, #28]	; (800b1c0 <prvCheckForValidListAndQueue+0x60>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d005      	beq.n	800b1b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b1a8:	4b05      	ldr	r3, [pc, #20]	; (800b1c0 <prvCheckForValidListAndQueue+0x60>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	490b      	ldr	r1, [pc, #44]	; (800b1dc <prvCheckForValidListAndQueue+0x7c>)
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fd ff44 	bl	800903c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1b4:	f000 f96e 	bl	800b494 <vPortExitCritical>
}
 800b1b8:	bf00      	nop
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	20000f60 	.word	0x20000f60
 800b1c4:	20000f30 	.word	0x20000f30
 800b1c8:	20000f44 	.word	0x20000f44
 800b1cc:	20000f58 	.word	0x20000f58
 800b1d0:	20000f5c 	.word	0x20000f5c
 800b1d4:	2000100c 	.word	0x2000100c
 800b1d8:	20000f6c 	.word	0x20000f6c
 800b1dc:	0800c980 	.word	0x0800c980

0800b1e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3b04      	subs	r3, #4
 800b1f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b1f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3b04      	subs	r3, #4
 800b1fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	f023 0201 	bic.w	r2, r3, #1
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3b04      	subs	r3, #4
 800b20e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b210:	4a0c      	ldr	r2, [pc, #48]	; (800b244 <pxPortInitialiseStack+0x64>)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3b14      	subs	r3, #20
 800b21a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3b04      	subs	r3, #4
 800b226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f06f 0202 	mvn.w	r2, #2
 800b22e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	3b20      	subs	r3, #32
 800b234:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b236:	68fb      	ldr	r3, [r7, #12]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3714      	adds	r7, #20
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr
 800b244:	0800b249 	.word	0x0800b249

0800b248 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b24e:	2300      	movs	r3, #0
 800b250:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b252:	4b12      	ldr	r3, [pc, #72]	; (800b29c <prvTaskExitError+0x54>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b25a:	d00a      	beq.n	800b272 <prvTaskExitError+0x2a>
	__asm volatile
 800b25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b260:	f383 8811 	msr	BASEPRI, r3
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	60fb      	str	r3, [r7, #12]
}
 800b26e:	bf00      	nop
 800b270:	e7fe      	b.n	800b270 <prvTaskExitError+0x28>
	__asm volatile
 800b272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	60bb      	str	r3, [r7, #8]
}
 800b284:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b286:	bf00      	nop
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d0fc      	beq.n	800b288 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b28e:	bf00      	nop
 800b290:	bf00      	nop
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr
 800b29c:	20000014 	.word	0x20000014

0800b2a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2a0:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <pxCurrentTCBConst2>)
 800b2a2:	6819      	ldr	r1, [r3, #0]
 800b2a4:	6808      	ldr	r0, [r1, #0]
 800b2a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2aa:	f380 8809 	msr	PSP, r0
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f04f 0000 	mov.w	r0, #0
 800b2b6:	f380 8811 	msr	BASEPRI, r0
 800b2ba:	4770      	bx	lr
 800b2bc:	f3af 8000 	nop.w

0800b2c0 <pxCurrentTCBConst2>:
 800b2c0:	20000a30 	.word	0x20000a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b2c4:	bf00      	nop
 800b2c6:	bf00      	nop

0800b2c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b2c8:	4808      	ldr	r0, [pc, #32]	; (800b2ec <prvPortStartFirstTask+0x24>)
 800b2ca:	6800      	ldr	r0, [r0, #0]
 800b2cc:	6800      	ldr	r0, [r0, #0]
 800b2ce:	f380 8808 	msr	MSP, r0
 800b2d2:	f04f 0000 	mov.w	r0, #0
 800b2d6:	f380 8814 	msr	CONTROL, r0
 800b2da:	b662      	cpsie	i
 800b2dc:	b661      	cpsie	f
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	df00      	svc	0
 800b2e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b2ea:	bf00      	nop
 800b2ec:	e000ed08 	.word	0xe000ed08

0800b2f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b2f6:	4b46      	ldr	r3, [pc, #280]	; (800b410 <xPortStartScheduler+0x120>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a46      	ldr	r2, [pc, #280]	; (800b414 <xPortStartScheduler+0x124>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d10a      	bne.n	800b316 <xPortStartScheduler+0x26>
	__asm volatile
 800b300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	613b      	str	r3, [r7, #16]
}
 800b312:	bf00      	nop
 800b314:	e7fe      	b.n	800b314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b316:	4b3e      	ldr	r3, [pc, #248]	; (800b410 <xPortStartScheduler+0x120>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a3f      	ldr	r2, [pc, #252]	; (800b418 <xPortStartScheduler+0x128>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d10a      	bne.n	800b336 <xPortStartScheduler+0x46>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	60fb      	str	r3, [r7, #12]
}
 800b332:	bf00      	nop
 800b334:	e7fe      	b.n	800b334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b336:	4b39      	ldr	r3, [pc, #228]	; (800b41c <xPortStartScheduler+0x12c>)
 800b338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	22ff      	movs	r2, #255	; 0xff
 800b346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b350:	78fb      	ldrb	r3, [r7, #3]
 800b352:	b2db      	uxtb	r3, r3
 800b354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b358:	b2da      	uxtb	r2, r3
 800b35a:	4b31      	ldr	r3, [pc, #196]	; (800b420 <xPortStartScheduler+0x130>)
 800b35c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b35e:	4b31      	ldr	r3, [pc, #196]	; (800b424 <xPortStartScheduler+0x134>)
 800b360:	2207      	movs	r2, #7
 800b362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b364:	e009      	b.n	800b37a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b366:	4b2f      	ldr	r3, [pc, #188]	; (800b424 <xPortStartScheduler+0x134>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	3b01      	subs	r3, #1
 800b36c:	4a2d      	ldr	r2, [pc, #180]	; (800b424 <xPortStartScheduler+0x134>)
 800b36e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b370:	78fb      	ldrb	r3, [r7, #3]
 800b372:	b2db      	uxtb	r3, r3
 800b374:	005b      	lsls	r3, r3, #1
 800b376:	b2db      	uxtb	r3, r3
 800b378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b37a:	78fb      	ldrb	r3, [r7, #3]
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b382:	2b80      	cmp	r3, #128	; 0x80
 800b384:	d0ef      	beq.n	800b366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b386:	4b27      	ldr	r3, [pc, #156]	; (800b424 <xPortStartScheduler+0x134>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f1c3 0307 	rsb	r3, r3, #7
 800b38e:	2b04      	cmp	r3, #4
 800b390:	d00a      	beq.n	800b3a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	60bb      	str	r3, [r7, #8]
}
 800b3a4:	bf00      	nop
 800b3a6:	e7fe      	b.n	800b3a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3a8:	4b1e      	ldr	r3, [pc, #120]	; (800b424 <xPortStartScheduler+0x134>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	021b      	lsls	r3, r3, #8
 800b3ae:	4a1d      	ldr	r2, [pc, #116]	; (800b424 <xPortStartScheduler+0x134>)
 800b3b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b3b2:	4b1c      	ldr	r3, [pc, #112]	; (800b424 <xPortStartScheduler+0x134>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3ba:	4a1a      	ldr	r2, [pc, #104]	; (800b424 <xPortStartScheduler+0x134>)
 800b3bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b3c6:	4b18      	ldr	r3, [pc, #96]	; (800b428 <xPortStartScheduler+0x138>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a17      	ldr	r2, [pc, #92]	; (800b428 <xPortStartScheduler+0x138>)
 800b3cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b3d2:	4b15      	ldr	r3, [pc, #84]	; (800b428 <xPortStartScheduler+0x138>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a14      	ldr	r2, [pc, #80]	; (800b428 <xPortStartScheduler+0x138>)
 800b3d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b3dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b3de:	f000 f8dd 	bl	800b59c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b3e2:	4b12      	ldr	r3, [pc, #72]	; (800b42c <xPortStartScheduler+0x13c>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b3e8:	f000 f8fc 	bl	800b5e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b3ec:	4b10      	ldr	r3, [pc, #64]	; (800b430 <xPortStartScheduler+0x140>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a0f      	ldr	r2, [pc, #60]	; (800b430 <xPortStartScheduler+0x140>)
 800b3f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b3f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b3f8:	f7ff ff66 	bl	800b2c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b3fc:	f7fe fdd4 	bl	8009fa8 <vTaskSwitchContext>
	prvTaskExitError();
 800b400:	f7ff ff22 	bl	800b248 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	e000ed00 	.word	0xe000ed00
 800b414:	410fc271 	.word	0x410fc271
 800b418:	410fc270 	.word	0x410fc270
 800b41c:	e000e400 	.word	0xe000e400
 800b420:	2000105c 	.word	0x2000105c
 800b424:	20001060 	.word	0x20001060
 800b428:	e000ed20 	.word	0xe000ed20
 800b42c:	20000014 	.word	0x20000014
 800b430:	e000ef34 	.word	0xe000ef34

0800b434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	607b      	str	r3, [r7, #4]
}
 800b44c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b44e:	4b0f      	ldr	r3, [pc, #60]	; (800b48c <vPortEnterCritical+0x58>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	3301      	adds	r3, #1
 800b454:	4a0d      	ldr	r2, [pc, #52]	; (800b48c <vPortEnterCritical+0x58>)
 800b456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b458:	4b0c      	ldr	r3, [pc, #48]	; (800b48c <vPortEnterCritical+0x58>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d10f      	bne.n	800b480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b460:	4b0b      	ldr	r3, [pc, #44]	; (800b490 <vPortEnterCritical+0x5c>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00a      	beq.n	800b480 <vPortEnterCritical+0x4c>
	__asm volatile
 800b46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46e:	f383 8811 	msr	BASEPRI, r3
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	f3bf 8f4f 	dsb	sy
 800b47a:	603b      	str	r3, [r7, #0]
}
 800b47c:	bf00      	nop
 800b47e:	e7fe      	b.n	800b47e <vPortEnterCritical+0x4a>
	}
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr
 800b48c:	20000014 	.word	0x20000014
 800b490:	e000ed04 	.word	0xe000ed04

0800b494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b49a:	4b12      	ldr	r3, [pc, #72]	; (800b4e4 <vPortExitCritical+0x50>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10a      	bne.n	800b4b8 <vPortExitCritical+0x24>
	__asm volatile
 800b4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	607b      	str	r3, [r7, #4]
}
 800b4b4:	bf00      	nop
 800b4b6:	e7fe      	b.n	800b4b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b4b8:	4b0a      	ldr	r3, [pc, #40]	; (800b4e4 <vPortExitCritical+0x50>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	4a09      	ldr	r2, [pc, #36]	; (800b4e4 <vPortExitCritical+0x50>)
 800b4c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b4c2:	4b08      	ldr	r3, [pc, #32]	; (800b4e4 <vPortExitCritical+0x50>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d105      	bne.n	800b4d6 <vPortExitCritical+0x42>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	f383 8811 	msr	BASEPRI, r3
}
 800b4d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b4d6:	bf00      	nop
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	20000014 	.word	0x20000014
	...

0800b4f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b4f0:	f3ef 8009 	mrs	r0, PSP
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	4b15      	ldr	r3, [pc, #84]	; (800b550 <pxCurrentTCBConst>)
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	f01e 0f10 	tst.w	lr, #16
 800b500:	bf08      	it	eq
 800b502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50a:	6010      	str	r0, [r2, #0]
 800b50c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b510:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b514:	f380 8811 	msr	BASEPRI, r0
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f7fe fd42 	bl	8009fa8 <vTaskSwitchContext>
 800b524:	f04f 0000 	mov.w	r0, #0
 800b528:	f380 8811 	msr	BASEPRI, r0
 800b52c:	bc09      	pop	{r0, r3}
 800b52e:	6819      	ldr	r1, [r3, #0]
 800b530:	6808      	ldr	r0, [r1, #0]
 800b532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b536:	f01e 0f10 	tst.w	lr, #16
 800b53a:	bf08      	it	eq
 800b53c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b540:	f380 8809 	msr	PSP, r0
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	f3af 8000 	nop.w

0800b550 <pxCurrentTCBConst>:
 800b550:	20000a30 	.word	0x20000a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b554:	bf00      	nop
 800b556:	bf00      	nop

0800b558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
	__asm volatile
 800b55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	607b      	str	r3, [r7, #4]
}
 800b570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b572:	f7fe fc5f 	bl	8009e34 <xTaskIncrementTick>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d003      	beq.n	800b584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b57c:	4b06      	ldr	r3, [pc, #24]	; (800b598 <xPortSysTickHandler+0x40>)
 800b57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	2300      	movs	r3, #0
 800b586:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	f383 8811 	msr	BASEPRI, r3
}
 800b58e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b590:	bf00      	nop
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	e000ed04 	.word	0xe000ed04

0800b59c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b59c:	b480      	push	{r7}
 800b59e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5a0:	4b0b      	ldr	r3, [pc, #44]	; (800b5d0 <vPortSetupTimerInterrupt+0x34>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5a6:	4b0b      	ldr	r3, [pc, #44]	; (800b5d4 <vPortSetupTimerInterrupt+0x38>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5ac:	4b0a      	ldr	r3, [pc, #40]	; (800b5d8 <vPortSetupTimerInterrupt+0x3c>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a0a      	ldr	r2, [pc, #40]	; (800b5dc <vPortSetupTimerInterrupt+0x40>)
 800b5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b6:	099b      	lsrs	r3, r3, #6
 800b5b8:	4a09      	ldr	r2, [pc, #36]	; (800b5e0 <vPortSetupTimerInterrupt+0x44>)
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b5be:	4b04      	ldr	r3, [pc, #16]	; (800b5d0 <vPortSetupTimerInterrupt+0x34>)
 800b5c0:	2207      	movs	r2, #7
 800b5c2:	601a      	str	r2, [r3, #0]
}
 800b5c4:	bf00      	nop
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	e000e010 	.word	0xe000e010
 800b5d4:	e000e018 	.word	0xe000e018
 800b5d8:	20000000 	.word	0x20000000
 800b5dc:	10624dd3 	.word	0x10624dd3
 800b5e0:	e000e014 	.word	0xe000e014

0800b5e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b5e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b5f4 <vPortEnableVFP+0x10>
 800b5e8:	6801      	ldr	r1, [r0, #0]
 800b5ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b5ee:	6001      	str	r1, [r0, #0]
 800b5f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b5f2:	bf00      	nop
 800b5f4:	e000ed88 	.word	0xe000ed88

0800b5f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b5fe:	f3ef 8305 	mrs	r3, IPSR
 800b602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2b0f      	cmp	r3, #15
 800b608:	d914      	bls.n	800b634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b60a:	4a17      	ldr	r2, [pc, #92]	; (800b668 <vPortValidateInterruptPriority+0x70>)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4413      	add	r3, r2
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b614:	4b15      	ldr	r3, [pc, #84]	; (800b66c <vPortValidateInterruptPriority+0x74>)
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	7afa      	ldrb	r2, [r7, #11]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d20a      	bcs.n	800b634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	607b      	str	r3, [r7, #4]
}
 800b630:	bf00      	nop
 800b632:	e7fe      	b.n	800b632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b634:	4b0e      	ldr	r3, [pc, #56]	; (800b670 <vPortValidateInterruptPriority+0x78>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b63c:	4b0d      	ldr	r3, [pc, #52]	; (800b674 <vPortValidateInterruptPriority+0x7c>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	429a      	cmp	r2, r3
 800b642:	d90a      	bls.n	800b65a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b648:	f383 8811 	msr	BASEPRI, r3
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	603b      	str	r3, [r7, #0]
}
 800b656:	bf00      	nop
 800b658:	e7fe      	b.n	800b658 <vPortValidateInterruptPriority+0x60>
	}
 800b65a:	bf00      	nop
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	e000e3f0 	.word	0xe000e3f0
 800b66c:	2000105c 	.word	0x2000105c
 800b670:	e000ed0c 	.word	0xe000ed0c
 800b674:	20001060 	.word	0x20001060

0800b678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b08a      	sub	sp, #40	; 0x28
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b680:	2300      	movs	r3, #0
 800b682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b684:	f7fe fb1a 	bl	8009cbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b688:	4b5b      	ldr	r3, [pc, #364]	; (800b7f8 <pvPortMalloc+0x180>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d101      	bne.n	800b694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b690:	f000 f920 	bl	800b8d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b694:	4b59      	ldr	r3, [pc, #356]	; (800b7fc <pvPortMalloc+0x184>)
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4013      	ands	r3, r2
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f040 8093 	bne.w	800b7c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d01d      	beq.n	800b6e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b6a8:	2208      	movs	r2, #8
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f003 0307 	and.w	r3, r3, #7
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d014      	beq.n	800b6e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f023 0307 	bic.w	r3, r3, #7
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f003 0307 	and.w	r3, r3, #7
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00a      	beq.n	800b6e4 <pvPortMalloc+0x6c>
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	617b      	str	r3, [r7, #20]
}
 800b6e0:	bf00      	nop
 800b6e2:	e7fe      	b.n	800b6e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d06e      	beq.n	800b7c8 <pvPortMalloc+0x150>
 800b6ea:	4b45      	ldr	r3, [pc, #276]	; (800b800 <pvPortMalloc+0x188>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d869      	bhi.n	800b7c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b6f4:	4b43      	ldr	r3, [pc, #268]	; (800b804 <pvPortMalloc+0x18c>)
 800b6f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b6f8:	4b42      	ldr	r3, [pc, #264]	; (800b804 <pvPortMalloc+0x18c>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6fe:	e004      	b.n	800b70a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	429a      	cmp	r2, r3
 800b712:	d903      	bls.n	800b71c <pvPortMalloc+0xa4>
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1f1      	bne.n	800b700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b71c:	4b36      	ldr	r3, [pc, #216]	; (800b7f8 <pvPortMalloc+0x180>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b722:	429a      	cmp	r2, r3
 800b724:	d050      	beq.n	800b7c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2208      	movs	r2, #8
 800b72c:	4413      	add	r3, r2
 800b72e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	685a      	ldr	r2, [r3, #4]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	1ad2      	subs	r2, r2, r3
 800b740:	2308      	movs	r3, #8
 800b742:	005b      	lsls	r3, r3, #1
 800b744:	429a      	cmp	r2, r3
 800b746:	d91f      	bls.n	800b788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4413      	add	r3, r2
 800b74e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	f003 0307 	and.w	r3, r3, #7
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00a      	beq.n	800b770 <pvPortMalloc+0xf8>
	__asm volatile
 800b75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75e:	f383 8811 	msr	BASEPRI, r3
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	613b      	str	r3, [r7, #16]
}
 800b76c:	bf00      	nop
 800b76e:	e7fe      	b.n	800b76e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b772:	685a      	ldr	r2, [r3, #4]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	1ad2      	subs	r2, r2, r3
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b782:	69b8      	ldr	r0, [r7, #24]
 800b784:	f000 f908 	bl	800b998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b788:	4b1d      	ldr	r3, [pc, #116]	; (800b800 <pvPortMalloc+0x188>)
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	1ad3      	subs	r3, r2, r3
 800b792:	4a1b      	ldr	r2, [pc, #108]	; (800b800 <pvPortMalloc+0x188>)
 800b794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b796:	4b1a      	ldr	r3, [pc, #104]	; (800b800 <pvPortMalloc+0x188>)
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	4b1b      	ldr	r3, [pc, #108]	; (800b808 <pvPortMalloc+0x190>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d203      	bcs.n	800b7aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7a2:	4b17      	ldr	r3, [pc, #92]	; (800b800 <pvPortMalloc+0x188>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a18      	ldr	r2, [pc, #96]	; (800b808 <pvPortMalloc+0x190>)
 800b7a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	4b13      	ldr	r3, [pc, #76]	; (800b7fc <pvPortMalloc+0x184>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	431a      	orrs	r2, r3
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b7be:	4b13      	ldr	r3, [pc, #76]	; (800b80c <pvPortMalloc+0x194>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	4a11      	ldr	r2, [pc, #68]	; (800b80c <pvPortMalloc+0x194>)
 800b7c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b7c8:	f7fe fa86 	bl	8009cd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	f003 0307 	and.w	r3, r3, #7
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00a      	beq.n	800b7ec <pvPortMalloc+0x174>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	60fb      	str	r3, [r7, #12]
}
 800b7e8:	bf00      	nop
 800b7ea:	e7fe      	b.n	800b7ea <pvPortMalloc+0x172>
	return pvReturn;
 800b7ec:	69fb      	ldr	r3, [r7, #28]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3728      	adds	r7, #40	; 0x28
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20005e8c 	.word	0x20005e8c
 800b7fc:	20005ea0 	.word	0x20005ea0
 800b800:	20005e90 	.word	0x20005e90
 800b804:	20005e84 	.word	0x20005e84
 800b808:	20005e94 	.word	0x20005e94
 800b80c:	20005e98 	.word	0x20005e98

0800b810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d04d      	beq.n	800b8be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b822:	2308      	movs	r3, #8
 800b824:	425b      	negs	r3, r3
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	4413      	add	r3, r2
 800b82a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	4b24      	ldr	r3, [pc, #144]	; (800b8c8 <vPortFree+0xb8>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4013      	ands	r3, r2
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10a      	bne.n	800b854 <vPortFree+0x44>
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	60fb      	str	r3, [r7, #12]
}
 800b850:	bf00      	nop
 800b852:	e7fe      	b.n	800b852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00a      	beq.n	800b872 <vPortFree+0x62>
	__asm volatile
 800b85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b860:	f383 8811 	msr	BASEPRI, r3
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	60bb      	str	r3, [r7, #8]
}
 800b86e:	bf00      	nop
 800b870:	e7fe      	b.n	800b870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	4b14      	ldr	r3, [pc, #80]	; (800b8c8 <vPortFree+0xb8>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4013      	ands	r3, r2
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d01e      	beq.n	800b8be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d11a      	bne.n	800b8be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	4b0e      	ldr	r3, [pc, #56]	; (800b8c8 <vPortFree+0xb8>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	43db      	mvns	r3, r3
 800b892:	401a      	ands	r2, r3
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b898:	f7fe fa10 	bl	8009cbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	685a      	ldr	r2, [r3, #4]
 800b8a0:	4b0a      	ldr	r3, [pc, #40]	; (800b8cc <vPortFree+0xbc>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	4a09      	ldr	r2, [pc, #36]	; (800b8cc <vPortFree+0xbc>)
 800b8a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b8aa:	6938      	ldr	r0, [r7, #16]
 800b8ac:	f000 f874 	bl	800b998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b8b0:	4b07      	ldr	r3, [pc, #28]	; (800b8d0 <vPortFree+0xc0>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	4a06      	ldr	r2, [pc, #24]	; (800b8d0 <vPortFree+0xc0>)
 800b8b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b8ba:	f7fe fa0d 	bl	8009cd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b8be:	bf00      	nop
 800b8c0:	3718      	adds	r7, #24
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	20005ea0 	.word	0x20005ea0
 800b8cc:	20005e90 	.word	0x20005e90
 800b8d0:	20005e9c 	.word	0x20005e9c

0800b8d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b8da:	f644 6320 	movw	r3, #20000	; 0x4e20
 800b8de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b8e0:	4b27      	ldr	r3, [pc, #156]	; (800b980 <prvHeapInit+0xac>)
 800b8e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f003 0307 	and.w	r3, r3, #7
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00c      	beq.n	800b908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3307      	adds	r3, #7
 800b8f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f023 0307 	bic.w	r3, r3, #7
 800b8fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	4a1f      	ldr	r2, [pc, #124]	; (800b980 <prvHeapInit+0xac>)
 800b904:	4413      	add	r3, r2
 800b906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b90c:	4a1d      	ldr	r2, [pc, #116]	; (800b984 <prvHeapInit+0xb0>)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b912:	4b1c      	ldr	r3, [pc, #112]	; (800b984 <prvHeapInit+0xb0>)
 800b914:	2200      	movs	r2, #0
 800b916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	4413      	add	r3, r2
 800b91e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b920:	2208      	movs	r2, #8
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	1a9b      	subs	r3, r3, r2
 800b926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f023 0307 	bic.w	r3, r3, #7
 800b92e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	4a15      	ldr	r2, [pc, #84]	; (800b988 <prvHeapInit+0xb4>)
 800b934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b936:	4b14      	ldr	r3, [pc, #80]	; (800b988 <prvHeapInit+0xb4>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2200      	movs	r2, #0
 800b93c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b93e:	4b12      	ldr	r3, [pc, #72]	; (800b988 <prvHeapInit+0xb4>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2200      	movs	r2, #0
 800b944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	1ad2      	subs	r2, r2, r3
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b954:	4b0c      	ldr	r3, [pc, #48]	; (800b988 <prvHeapInit+0xb4>)
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	4a0a      	ldr	r2, [pc, #40]	; (800b98c <prvHeapInit+0xb8>)
 800b962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	4a09      	ldr	r2, [pc, #36]	; (800b990 <prvHeapInit+0xbc>)
 800b96a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b96c:	4b09      	ldr	r3, [pc, #36]	; (800b994 <prvHeapInit+0xc0>)
 800b96e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b972:	601a      	str	r2, [r3, #0]
}
 800b974:	bf00      	nop
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	20001064 	.word	0x20001064
 800b984:	20005e84 	.word	0x20005e84
 800b988:	20005e8c 	.word	0x20005e8c
 800b98c:	20005e94 	.word	0x20005e94
 800b990:	20005e90 	.word	0x20005e90
 800b994:	20005ea0 	.word	0x20005ea0

0800b998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b9a0:	4b28      	ldr	r3, [pc, #160]	; (800ba44 <prvInsertBlockIntoFreeList+0xac>)
 800b9a2:	60fb      	str	r3, [r7, #12]
 800b9a4:	e002      	b.n	800b9ac <prvInsertBlockIntoFreeList+0x14>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	60fb      	str	r3, [r7, #12]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d8f7      	bhi.n	800b9a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	68ba      	ldr	r2, [r7, #8]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d108      	bne.n	800b9da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	685a      	ldr	r2, [r3, #4]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	441a      	add	r2, r3
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	68ba      	ldr	r2, [r7, #8]
 800b9e4:	441a      	add	r2, r3
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d118      	bne.n	800ba20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	4b15      	ldr	r3, [pc, #84]	; (800ba48 <prvInsertBlockIntoFreeList+0xb0>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d00d      	beq.n	800ba16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	685a      	ldr	r2, [r3, #4]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	441a      	add	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	e008      	b.n	800ba28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba16:	4b0c      	ldr	r3, [pc, #48]	; (800ba48 <prvInsertBlockIntoFreeList+0xb0>)
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	601a      	str	r2, [r3, #0]
 800ba1e:	e003      	b.n	800ba28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d002      	beq.n	800ba36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba36:	bf00      	nop
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	20005e84 	.word	0x20005e84
 800ba48:	20005e8c 	.word	0x20005e8c

0800ba4c <__errno>:
 800ba4c:	4b01      	ldr	r3, [pc, #4]	; (800ba54 <__errno+0x8>)
 800ba4e:	6818      	ldr	r0, [r3, #0]
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	20000018 	.word	0x20000018

0800ba58 <__libc_init_array>:
 800ba58:	b570      	push	{r4, r5, r6, lr}
 800ba5a:	4d0d      	ldr	r5, [pc, #52]	; (800ba90 <__libc_init_array+0x38>)
 800ba5c:	4c0d      	ldr	r4, [pc, #52]	; (800ba94 <__libc_init_array+0x3c>)
 800ba5e:	1b64      	subs	r4, r4, r5
 800ba60:	10a4      	asrs	r4, r4, #2
 800ba62:	2600      	movs	r6, #0
 800ba64:	42a6      	cmp	r6, r4
 800ba66:	d109      	bne.n	800ba7c <__libc_init_array+0x24>
 800ba68:	4d0b      	ldr	r5, [pc, #44]	; (800ba98 <__libc_init_array+0x40>)
 800ba6a:	4c0c      	ldr	r4, [pc, #48]	; (800ba9c <__libc_init_array+0x44>)
 800ba6c:	f000 ff2c 	bl	800c8c8 <_init>
 800ba70:	1b64      	subs	r4, r4, r5
 800ba72:	10a4      	asrs	r4, r4, #2
 800ba74:	2600      	movs	r6, #0
 800ba76:	42a6      	cmp	r6, r4
 800ba78:	d105      	bne.n	800ba86 <__libc_init_array+0x2e>
 800ba7a:	bd70      	pop	{r4, r5, r6, pc}
 800ba7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba80:	4798      	blx	r3
 800ba82:	3601      	adds	r6, #1
 800ba84:	e7ee      	b.n	800ba64 <__libc_init_array+0xc>
 800ba86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba8a:	4798      	blx	r3
 800ba8c:	3601      	adds	r6, #1
 800ba8e:	e7f2      	b.n	800ba76 <__libc_init_array+0x1e>
 800ba90:	0800cd0c 	.word	0x0800cd0c
 800ba94:	0800cd0c 	.word	0x0800cd0c
 800ba98:	0800cd0c 	.word	0x0800cd0c
 800ba9c:	0800cd10 	.word	0x0800cd10

0800baa0 <__itoa>:
 800baa0:	1e93      	subs	r3, r2, #2
 800baa2:	2b22      	cmp	r3, #34	; 0x22
 800baa4:	b510      	push	{r4, lr}
 800baa6:	460c      	mov	r4, r1
 800baa8:	d904      	bls.n	800bab4 <__itoa+0x14>
 800baaa:	2300      	movs	r3, #0
 800baac:	700b      	strb	r3, [r1, #0]
 800baae:	461c      	mov	r4, r3
 800bab0:	4620      	mov	r0, r4
 800bab2:	bd10      	pop	{r4, pc}
 800bab4:	2a0a      	cmp	r2, #10
 800bab6:	d109      	bne.n	800bacc <__itoa+0x2c>
 800bab8:	2800      	cmp	r0, #0
 800baba:	da07      	bge.n	800bacc <__itoa+0x2c>
 800babc:	232d      	movs	r3, #45	; 0x2d
 800babe:	700b      	strb	r3, [r1, #0]
 800bac0:	4240      	negs	r0, r0
 800bac2:	2101      	movs	r1, #1
 800bac4:	4421      	add	r1, r4
 800bac6:	f000 f959 	bl	800bd7c <__utoa>
 800baca:	e7f1      	b.n	800bab0 <__itoa+0x10>
 800bacc:	2100      	movs	r1, #0
 800bace:	e7f9      	b.n	800bac4 <__itoa+0x24>

0800bad0 <itoa>:
 800bad0:	f7ff bfe6 	b.w	800baa0 <__itoa>

0800bad4 <__retarget_lock_acquire_recursive>:
 800bad4:	4770      	bx	lr

0800bad6 <__retarget_lock_release_recursive>:
 800bad6:	4770      	bx	lr

0800bad8 <memcpy>:
 800bad8:	440a      	add	r2, r1
 800bada:	4291      	cmp	r1, r2
 800badc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bae0:	d100      	bne.n	800bae4 <memcpy+0xc>
 800bae2:	4770      	bx	lr
 800bae4:	b510      	push	{r4, lr}
 800bae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baee:	4291      	cmp	r1, r2
 800baf0:	d1f9      	bne.n	800bae6 <memcpy+0xe>
 800baf2:	bd10      	pop	{r4, pc}

0800baf4 <memset>:
 800baf4:	4402      	add	r2, r0
 800baf6:	4603      	mov	r3, r0
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d100      	bne.n	800bafe <memset+0xa>
 800bafc:	4770      	bx	lr
 800bafe:	f803 1b01 	strb.w	r1, [r3], #1
 800bb02:	e7f9      	b.n	800baf8 <memset+0x4>

0800bb04 <sbrk_aligned>:
 800bb04:	b570      	push	{r4, r5, r6, lr}
 800bb06:	4e0e      	ldr	r6, [pc, #56]	; (800bb40 <sbrk_aligned+0x3c>)
 800bb08:	460c      	mov	r4, r1
 800bb0a:	6831      	ldr	r1, [r6, #0]
 800bb0c:	4605      	mov	r5, r0
 800bb0e:	b911      	cbnz	r1, 800bb16 <sbrk_aligned+0x12>
 800bb10:	f000 f8f6 	bl	800bd00 <_sbrk_r>
 800bb14:	6030      	str	r0, [r6, #0]
 800bb16:	4621      	mov	r1, r4
 800bb18:	4628      	mov	r0, r5
 800bb1a:	f000 f8f1 	bl	800bd00 <_sbrk_r>
 800bb1e:	1c43      	adds	r3, r0, #1
 800bb20:	d00a      	beq.n	800bb38 <sbrk_aligned+0x34>
 800bb22:	1cc4      	adds	r4, r0, #3
 800bb24:	f024 0403 	bic.w	r4, r4, #3
 800bb28:	42a0      	cmp	r0, r4
 800bb2a:	d007      	beq.n	800bb3c <sbrk_aligned+0x38>
 800bb2c:	1a21      	subs	r1, r4, r0
 800bb2e:	4628      	mov	r0, r5
 800bb30:	f000 f8e6 	bl	800bd00 <_sbrk_r>
 800bb34:	3001      	adds	r0, #1
 800bb36:	d101      	bne.n	800bb3c <sbrk_aligned+0x38>
 800bb38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	bd70      	pop	{r4, r5, r6, pc}
 800bb40:	20005eac 	.word	0x20005eac

0800bb44 <_malloc_r>:
 800bb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb48:	1ccd      	adds	r5, r1, #3
 800bb4a:	f025 0503 	bic.w	r5, r5, #3
 800bb4e:	3508      	adds	r5, #8
 800bb50:	2d0c      	cmp	r5, #12
 800bb52:	bf38      	it	cc
 800bb54:	250c      	movcc	r5, #12
 800bb56:	2d00      	cmp	r5, #0
 800bb58:	4607      	mov	r7, r0
 800bb5a:	db01      	blt.n	800bb60 <_malloc_r+0x1c>
 800bb5c:	42a9      	cmp	r1, r5
 800bb5e:	d905      	bls.n	800bb6c <_malloc_r+0x28>
 800bb60:	230c      	movs	r3, #12
 800bb62:	603b      	str	r3, [r7, #0]
 800bb64:	2600      	movs	r6, #0
 800bb66:	4630      	mov	r0, r6
 800bb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb6c:	4e2e      	ldr	r6, [pc, #184]	; (800bc28 <_malloc_r+0xe4>)
 800bb6e:	f000 f947 	bl	800be00 <__malloc_lock>
 800bb72:	6833      	ldr	r3, [r6, #0]
 800bb74:	461c      	mov	r4, r3
 800bb76:	bb34      	cbnz	r4, 800bbc6 <_malloc_r+0x82>
 800bb78:	4629      	mov	r1, r5
 800bb7a:	4638      	mov	r0, r7
 800bb7c:	f7ff ffc2 	bl	800bb04 <sbrk_aligned>
 800bb80:	1c43      	adds	r3, r0, #1
 800bb82:	4604      	mov	r4, r0
 800bb84:	d14d      	bne.n	800bc22 <_malloc_r+0xde>
 800bb86:	6834      	ldr	r4, [r6, #0]
 800bb88:	4626      	mov	r6, r4
 800bb8a:	2e00      	cmp	r6, #0
 800bb8c:	d140      	bne.n	800bc10 <_malloc_r+0xcc>
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	4631      	mov	r1, r6
 800bb92:	4638      	mov	r0, r7
 800bb94:	eb04 0803 	add.w	r8, r4, r3
 800bb98:	f000 f8b2 	bl	800bd00 <_sbrk_r>
 800bb9c:	4580      	cmp	r8, r0
 800bb9e:	d13a      	bne.n	800bc16 <_malloc_r+0xd2>
 800bba0:	6821      	ldr	r1, [r4, #0]
 800bba2:	3503      	adds	r5, #3
 800bba4:	1a6d      	subs	r5, r5, r1
 800bba6:	f025 0503 	bic.w	r5, r5, #3
 800bbaa:	3508      	adds	r5, #8
 800bbac:	2d0c      	cmp	r5, #12
 800bbae:	bf38      	it	cc
 800bbb0:	250c      	movcc	r5, #12
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	4638      	mov	r0, r7
 800bbb6:	f7ff ffa5 	bl	800bb04 <sbrk_aligned>
 800bbba:	3001      	adds	r0, #1
 800bbbc:	d02b      	beq.n	800bc16 <_malloc_r+0xd2>
 800bbbe:	6823      	ldr	r3, [r4, #0]
 800bbc0:	442b      	add	r3, r5
 800bbc2:	6023      	str	r3, [r4, #0]
 800bbc4:	e00e      	b.n	800bbe4 <_malloc_r+0xa0>
 800bbc6:	6822      	ldr	r2, [r4, #0]
 800bbc8:	1b52      	subs	r2, r2, r5
 800bbca:	d41e      	bmi.n	800bc0a <_malloc_r+0xc6>
 800bbcc:	2a0b      	cmp	r2, #11
 800bbce:	d916      	bls.n	800bbfe <_malloc_r+0xba>
 800bbd0:	1961      	adds	r1, r4, r5
 800bbd2:	42a3      	cmp	r3, r4
 800bbd4:	6025      	str	r5, [r4, #0]
 800bbd6:	bf18      	it	ne
 800bbd8:	6059      	strne	r1, [r3, #4]
 800bbda:	6863      	ldr	r3, [r4, #4]
 800bbdc:	bf08      	it	eq
 800bbde:	6031      	streq	r1, [r6, #0]
 800bbe0:	5162      	str	r2, [r4, r5]
 800bbe2:	604b      	str	r3, [r1, #4]
 800bbe4:	4638      	mov	r0, r7
 800bbe6:	f104 060b 	add.w	r6, r4, #11
 800bbea:	f000 f90f 	bl	800be0c <__malloc_unlock>
 800bbee:	f026 0607 	bic.w	r6, r6, #7
 800bbf2:	1d23      	adds	r3, r4, #4
 800bbf4:	1af2      	subs	r2, r6, r3
 800bbf6:	d0b6      	beq.n	800bb66 <_malloc_r+0x22>
 800bbf8:	1b9b      	subs	r3, r3, r6
 800bbfa:	50a3      	str	r3, [r4, r2]
 800bbfc:	e7b3      	b.n	800bb66 <_malloc_r+0x22>
 800bbfe:	6862      	ldr	r2, [r4, #4]
 800bc00:	42a3      	cmp	r3, r4
 800bc02:	bf0c      	ite	eq
 800bc04:	6032      	streq	r2, [r6, #0]
 800bc06:	605a      	strne	r2, [r3, #4]
 800bc08:	e7ec      	b.n	800bbe4 <_malloc_r+0xa0>
 800bc0a:	4623      	mov	r3, r4
 800bc0c:	6864      	ldr	r4, [r4, #4]
 800bc0e:	e7b2      	b.n	800bb76 <_malloc_r+0x32>
 800bc10:	4634      	mov	r4, r6
 800bc12:	6876      	ldr	r6, [r6, #4]
 800bc14:	e7b9      	b.n	800bb8a <_malloc_r+0x46>
 800bc16:	230c      	movs	r3, #12
 800bc18:	603b      	str	r3, [r7, #0]
 800bc1a:	4638      	mov	r0, r7
 800bc1c:	f000 f8f6 	bl	800be0c <__malloc_unlock>
 800bc20:	e7a1      	b.n	800bb66 <_malloc_r+0x22>
 800bc22:	6025      	str	r5, [r4, #0]
 800bc24:	e7de      	b.n	800bbe4 <_malloc_r+0xa0>
 800bc26:	bf00      	nop
 800bc28:	20005ea8 	.word	0x20005ea8

0800bc2c <cleanup_glue>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	460c      	mov	r4, r1
 800bc30:	6809      	ldr	r1, [r1, #0]
 800bc32:	4605      	mov	r5, r0
 800bc34:	b109      	cbz	r1, 800bc3a <cleanup_glue+0xe>
 800bc36:	f7ff fff9 	bl	800bc2c <cleanup_glue>
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc42:	f000 b8e9 	b.w	800be18 <_free_r>
	...

0800bc48 <_reclaim_reent>:
 800bc48:	4b2c      	ldr	r3, [pc, #176]	; (800bcfc <_reclaim_reent+0xb4>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4283      	cmp	r3, r0
 800bc4e:	b570      	push	{r4, r5, r6, lr}
 800bc50:	4604      	mov	r4, r0
 800bc52:	d051      	beq.n	800bcf8 <_reclaim_reent+0xb0>
 800bc54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bc56:	b143      	cbz	r3, 800bc6a <_reclaim_reent+0x22>
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d14a      	bne.n	800bcf4 <_reclaim_reent+0xac>
 800bc5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc60:	6819      	ldr	r1, [r3, #0]
 800bc62:	b111      	cbz	r1, 800bc6a <_reclaim_reent+0x22>
 800bc64:	4620      	mov	r0, r4
 800bc66:	f000 f8d7 	bl	800be18 <_free_r>
 800bc6a:	6961      	ldr	r1, [r4, #20]
 800bc6c:	b111      	cbz	r1, 800bc74 <_reclaim_reent+0x2c>
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f000 f8d2 	bl	800be18 <_free_r>
 800bc74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bc76:	b111      	cbz	r1, 800bc7e <_reclaim_reent+0x36>
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f000 f8cd 	bl	800be18 <_free_r>
 800bc7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bc80:	b111      	cbz	r1, 800bc88 <_reclaim_reent+0x40>
 800bc82:	4620      	mov	r0, r4
 800bc84:	f000 f8c8 	bl	800be18 <_free_r>
 800bc88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bc8a:	b111      	cbz	r1, 800bc92 <_reclaim_reent+0x4a>
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	f000 f8c3 	bl	800be18 <_free_r>
 800bc92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bc94:	b111      	cbz	r1, 800bc9c <_reclaim_reent+0x54>
 800bc96:	4620      	mov	r0, r4
 800bc98:	f000 f8be 	bl	800be18 <_free_r>
 800bc9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bc9e:	b111      	cbz	r1, 800bca6 <_reclaim_reent+0x5e>
 800bca0:	4620      	mov	r0, r4
 800bca2:	f000 f8b9 	bl	800be18 <_free_r>
 800bca6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bca8:	b111      	cbz	r1, 800bcb0 <_reclaim_reent+0x68>
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f000 f8b4 	bl	800be18 <_free_r>
 800bcb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcb2:	b111      	cbz	r1, 800bcba <_reclaim_reent+0x72>
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f000 f8af 	bl	800be18 <_free_r>
 800bcba:	69a3      	ldr	r3, [r4, #24]
 800bcbc:	b1e3      	cbz	r3, 800bcf8 <_reclaim_reent+0xb0>
 800bcbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	4798      	blx	r3
 800bcc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bcc6:	b1b9      	cbz	r1, 800bcf8 <_reclaim_reent+0xb0>
 800bcc8:	4620      	mov	r0, r4
 800bcca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bcce:	f7ff bfad 	b.w	800bc2c <cleanup_glue>
 800bcd2:	5949      	ldr	r1, [r1, r5]
 800bcd4:	b941      	cbnz	r1, 800bce8 <_reclaim_reent+0xa0>
 800bcd6:	3504      	adds	r5, #4
 800bcd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcda:	2d80      	cmp	r5, #128	; 0x80
 800bcdc:	68d9      	ldr	r1, [r3, #12]
 800bcde:	d1f8      	bne.n	800bcd2 <_reclaim_reent+0x8a>
 800bce0:	4620      	mov	r0, r4
 800bce2:	f000 f899 	bl	800be18 <_free_r>
 800bce6:	e7ba      	b.n	800bc5e <_reclaim_reent+0x16>
 800bce8:	680e      	ldr	r6, [r1, #0]
 800bcea:	4620      	mov	r0, r4
 800bcec:	f000 f894 	bl	800be18 <_free_r>
 800bcf0:	4631      	mov	r1, r6
 800bcf2:	e7ef      	b.n	800bcd4 <_reclaim_reent+0x8c>
 800bcf4:	2500      	movs	r5, #0
 800bcf6:	e7ef      	b.n	800bcd8 <_reclaim_reent+0x90>
 800bcf8:	bd70      	pop	{r4, r5, r6, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20000018 	.word	0x20000018

0800bd00 <_sbrk_r>:
 800bd00:	b538      	push	{r3, r4, r5, lr}
 800bd02:	4d06      	ldr	r5, [pc, #24]	; (800bd1c <_sbrk_r+0x1c>)
 800bd04:	2300      	movs	r3, #0
 800bd06:	4604      	mov	r4, r0
 800bd08:	4608      	mov	r0, r1
 800bd0a:	602b      	str	r3, [r5, #0]
 800bd0c:	f7f5 fda2 	bl	8001854 <_sbrk>
 800bd10:	1c43      	adds	r3, r0, #1
 800bd12:	d102      	bne.n	800bd1a <_sbrk_r+0x1a>
 800bd14:	682b      	ldr	r3, [r5, #0]
 800bd16:	b103      	cbz	r3, 800bd1a <_sbrk_r+0x1a>
 800bd18:	6023      	str	r3, [r4, #0]
 800bd1a:	bd38      	pop	{r3, r4, r5, pc}
 800bd1c:	20005eb0 	.word	0x20005eb0

0800bd20 <siscanf>:
 800bd20:	b40e      	push	{r1, r2, r3}
 800bd22:	b510      	push	{r4, lr}
 800bd24:	b09f      	sub	sp, #124	; 0x7c
 800bd26:	ac21      	add	r4, sp, #132	; 0x84
 800bd28:	f44f 7101 	mov.w	r1, #516	; 0x204
 800bd2c:	f854 2b04 	ldr.w	r2, [r4], #4
 800bd30:	9201      	str	r2, [sp, #4]
 800bd32:	f8ad 101c 	strh.w	r1, [sp, #28]
 800bd36:	9004      	str	r0, [sp, #16]
 800bd38:	9008      	str	r0, [sp, #32]
 800bd3a:	f7f4 fa49 	bl	80001d0 <strlen>
 800bd3e:	4b0c      	ldr	r3, [pc, #48]	; (800bd70 <siscanf+0x50>)
 800bd40:	9005      	str	r0, [sp, #20]
 800bd42:	9009      	str	r0, [sp, #36]	; 0x24
 800bd44:	930d      	str	r3, [sp, #52]	; 0x34
 800bd46:	480b      	ldr	r0, [pc, #44]	; (800bd74 <siscanf+0x54>)
 800bd48:	9a01      	ldr	r2, [sp, #4]
 800bd4a:	6800      	ldr	r0, [r0, #0]
 800bd4c:	9403      	str	r4, [sp, #12]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	9311      	str	r3, [sp, #68]	; 0x44
 800bd52:	9316      	str	r3, [sp, #88]	; 0x58
 800bd54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd58:	f8ad 301e 	strh.w	r3, [sp, #30]
 800bd5c:	a904      	add	r1, sp, #16
 800bd5e:	4623      	mov	r3, r4
 800bd60:	f000 f900 	bl	800bf64 <__ssvfiscanf_r>
 800bd64:	b01f      	add	sp, #124	; 0x7c
 800bd66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd6a:	b003      	add	sp, #12
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	0800bd79 	.word	0x0800bd79
 800bd74:	20000018 	.word	0x20000018

0800bd78 <__seofread>:
 800bd78:	2000      	movs	r0, #0
 800bd7a:	4770      	bx	lr

0800bd7c <__utoa>:
 800bd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd7e:	4c1f      	ldr	r4, [pc, #124]	; (800bdfc <__utoa+0x80>)
 800bd80:	b08b      	sub	sp, #44	; 0x2c
 800bd82:	4605      	mov	r5, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	466e      	mov	r6, sp
 800bd88:	f104 0c20 	add.w	ip, r4, #32
 800bd8c:	6820      	ldr	r0, [r4, #0]
 800bd8e:	6861      	ldr	r1, [r4, #4]
 800bd90:	4637      	mov	r7, r6
 800bd92:	c703      	stmia	r7!, {r0, r1}
 800bd94:	3408      	adds	r4, #8
 800bd96:	4564      	cmp	r4, ip
 800bd98:	463e      	mov	r6, r7
 800bd9a:	d1f7      	bne.n	800bd8c <__utoa+0x10>
 800bd9c:	7921      	ldrb	r1, [r4, #4]
 800bd9e:	7139      	strb	r1, [r7, #4]
 800bda0:	1e91      	subs	r1, r2, #2
 800bda2:	6820      	ldr	r0, [r4, #0]
 800bda4:	6038      	str	r0, [r7, #0]
 800bda6:	2922      	cmp	r1, #34	; 0x22
 800bda8:	f04f 0100 	mov.w	r1, #0
 800bdac:	d904      	bls.n	800bdb8 <__utoa+0x3c>
 800bdae:	7019      	strb	r1, [r3, #0]
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	b00b      	add	sp, #44	; 0x2c
 800bdb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdb8:	1e58      	subs	r0, r3, #1
 800bdba:	4684      	mov	ip, r0
 800bdbc:	fbb5 f7f2 	udiv	r7, r5, r2
 800bdc0:	fb02 5617 	mls	r6, r2, r7, r5
 800bdc4:	3628      	adds	r6, #40	; 0x28
 800bdc6:	446e      	add	r6, sp
 800bdc8:	460c      	mov	r4, r1
 800bdca:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bdce:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bdd2:	462e      	mov	r6, r5
 800bdd4:	42b2      	cmp	r2, r6
 800bdd6:	f101 0101 	add.w	r1, r1, #1
 800bdda:	463d      	mov	r5, r7
 800bddc:	d9ee      	bls.n	800bdbc <__utoa+0x40>
 800bdde:	2200      	movs	r2, #0
 800bde0:	545a      	strb	r2, [r3, r1]
 800bde2:	1919      	adds	r1, r3, r4
 800bde4:	1aa5      	subs	r5, r4, r2
 800bde6:	42aa      	cmp	r2, r5
 800bde8:	dae3      	bge.n	800bdb2 <__utoa+0x36>
 800bdea:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bdee:	780e      	ldrb	r6, [r1, #0]
 800bdf0:	7006      	strb	r6, [r0, #0]
 800bdf2:	3201      	adds	r2, #1
 800bdf4:	f801 5901 	strb.w	r5, [r1], #-1
 800bdf8:	e7f4      	b.n	800bde4 <__utoa+0x68>
 800bdfa:	bf00      	nop
 800bdfc:	0800cbbc 	.word	0x0800cbbc

0800be00 <__malloc_lock>:
 800be00:	4801      	ldr	r0, [pc, #4]	; (800be08 <__malloc_lock+0x8>)
 800be02:	f7ff be67 	b.w	800bad4 <__retarget_lock_acquire_recursive>
 800be06:	bf00      	nop
 800be08:	20005ea4 	.word	0x20005ea4

0800be0c <__malloc_unlock>:
 800be0c:	4801      	ldr	r0, [pc, #4]	; (800be14 <__malloc_unlock+0x8>)
 800be0e:	f7ff be62 	b.w	800bad6 <__retarget_lock_release_recursive>
 800be12:	bf00      	nop
 800be14:	20005ea4 	.word	0x20005ea4

0800be18 <_free_r>:
 800be18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be1a:	2900      	cmp	r1, #0
 800be1c:	d044      	beq.n	800bea8 <_free_r+0x90>
 800be1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be22:	9001      	str	r0, [sp, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	f1a1 0404 	sub.w	r4, r1, #4
 800be2a:	bfb8      	it	lt
 800be2c:	18e4      	addlt	r4, r4, r3
 800be2e:	f7ff ffe7 	bl	800be00 <__malloc_lock>
 800be32:	4a1e      	ldr	r2, [pc, #120]	; (800beac <_free_r+0x94>)
 800be34:	9801      	ldr	r0, [sp, #4]
 800be36:	6813      	ldr	r3, [r2, #0]
 800be38:	b933      	cbnz	r3, 800be48 <_free_r+0x30>
 800be3a:	6063      	str	r3, [r4, #4]
 800be3c:	6014      	str	r4, [r2, #0]
 800be3e:	b003      	add	sp, #12
 800be40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be44:	f7ff bfe2 	b.w	800be0c <__malloc_unlock>
 800be48:	42a3      	cmp	r3, r4
 800be4a:	d908      	bls.n	800be5e <_free_r+0x46>
 800be4c:	6825      	ldr	r5, [r4, #0]
 800be4e:	1961      	adds	r1, r4, r5
 800be50:	428b      	cmp	r3, r1
 800be52:	bf01      	itttt	eq
 800be54:	6819      	ldreq	r1, [r3, #0]
 800be56:	685b      	ldreq	r3, [r3, #4]
 800be58:	1949      	addeq	r1, r1, r5
 800be5a:	6021      	streq	r1, [r4, #0]
 800be5c:	e7ed      	b.n	800be3a <_free_r+0x22>
 800be5e:	461a      	mov	r2, r3
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	b10b      	cbz	r3, 800be68 <_free_r+0x50>
 800be64:	42a3      	cmp	r3, r4
 800be66:	d9fa      	bls.n	800be5e <_free_r+0x46>
 800be68:	6811      	ldr	r1, [r2, #0]
 800be6a:	1855      	adds	r5, r2, r1
 800be6c:	42a5      	cmp	r5, r4
 800be6e:	d10b      	bne.n	800be88 <_free_r+0x70>
 800be70:	6824      	ldr	r4, [r4, #0]
 800be72:	4421      	add	r1, r4
 800be74:	1854      	adds	r4, r2, r1
 800be76:	42a3      	cmp	r3, r4
 800be78:	6011      	str	r1, [r2, #0]
 800be7a:	d1e0      	bne.n	800be3e <_free_r+0x26>
 800be7c:	681c      	ldr	r4, [r3, #0]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	6053      	str	r3, [r2, #4]
 800be82:	4421      	add	r1, r4
 800be84:	6011      	str	r1, [r2, #0]
 800be86:	e7da      	b.n	800be3e <_free_r+0x26>
 800be88:	d902      	bls.n	800be90 <_free_r+0x78>
 800be8a:	230c      	movs	r3, #12
 800be8c:	6003      	str	r3, [r0, #0]
 800be8e:	e7d6      	b.n	800be3e <_free_r+0x26>
 800be90:	6825      	ldr	r5, [r4, #0]
 800be92:	1961      	adds	r1, r4, r5
 800be94:	428b      	cmp	r3, r1
 800be96:	bf04      	itt	eq
 800be98:	6819      	ldreq	r1, [r3, #0]
 800be9a:	685b      	ldreq	r3, [r3, #4]
 800be9c:	6063      	str	r3, [r4, #4]
 800be9e:	bf04      	itt	eq
 800bea0:	1949      	addeq	r1, r1, r5
 800bea2:	6021      	streq	r1, [r4, #0]
 800bea4:	6054      	str	r4, [r2, #4]
 800bea6:	e7ca      	b.n	800be3e <_free_r+0x26>
 800bea8:	b003      	add	sp, #12
 800beaa:	bd30      	pop	{r4, r5, pc}
 800beac:	20005ea8 	.word	0x20005ea8

0800beb0 <_sungetc_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	1c4b      	adds	r3, r1, #1
 800beb4:	4614      	mov	r4, r2
 800beb6:	d103      	bne.n	800bec0 <_sungetc_r+0x10>
 800beb8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bebc:	4628      	mov	r0, r5
 800bebe:	bd38      	pop	{r3, r4, r5, pc}
 800bec0:	8993      	ldrh	r3, [r2, #12]
 800bec2:	f023 0320 	bic.w	r3, r3, #32
 800bec6:	8193      	strh	r3, [r2, #12]
 800bec8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800beca:	6852      	ldr	r2, [r2, #4]
 800becc:	b2cd      	uxtb	r5, r1
 800bece:	b18b      	cbz	r3, 800bef4 <_sungetc_r+0x44>
 800bed0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bed2:	4293      	cmp	r3, r2
 800bed4:	dd08      	ble.n	800bee8 <_sungetc_r+0x38>
 800bed6:	6823      	ldr	r3, [r4, #0]
 800bed8:	1e5a      	subs	r2, r3, #1
 800beda:	6022      	str	r2, [r4, #0]
 800bedc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bee0:	6863      	ldr	r3, [r4, #4]
 800bee2:	3301      	adds	r3, #1
 800bee4:	6063      	str	r3, [r4, #4]
 800bee6:	e7e9      	b.n	800bebc <_sungetc_r+0xc>
 800bee8:	4621      	mov	r1, r4
 800beea:	f000 fc35 	bl	800c758 <__submore>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d0f1      	beq.n	800bed6 <_sungetc_r+0x26>
 800bef2:	e7e1      	b.n	800beb8 <_sungetc_r+0x8>
 800bef4:	6921      	ldr	r1, [r4, #16]
 800bef6:	6823      	ldr	r3, [r4, #0]
 800bef8:	b151      	cbz	r1, 800bf10 <_sungetc_r+0x60>
 800befa:	4299      	cmp	r1, r3
 800befc:	d208      	bcs.n	800bf10 <_sungetc_r+0x60>
 800befe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bf02:	42a9      	cmp	r1, r5
 800bf04:	d104      	bne.n	800bf10 <_sungetc_r+0x60>
 800bf06:	3b01      	subs	r3, #1
 800bf08:	3201      	adds	r2, #1
 800bf0a:	6023      	str	r3, [r4, #0]
 800bf0c:	6062      	str	r2, [r4, #4]
 800bf0e:	e7d5      	b.n	800bebc <_sungetc_r+0xc>
 800bf10:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bf14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf18:	6363      	str	r3, [r4, #52]	; 0x34
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf1e:	4623      	mov	r3, r4
 800bf20:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bf24:	6023      	str	r3, [r4, #0]
 800bf26:	2301      	movs	r3, #1
 800bf28:	e7dc      	b.n	800bee4 <_sungetc_r+0x34>

0800bf2a <__ssrefill_r>:
 800bf2a:	b510      	push	{r4, lr}
 800bf2c:	460c      	mov	r4, r1
 800bf2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bf30:	b169      	cbz	r1, 800bf4e <__ssrefill_r+0x24>
 800bf32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf36:	4299      	cmp	r1, r3
 800bf38:	d001      	beq.n	800bf3e <__ssrefill_r+0x14>
 800bf3a:	f7ff ff6d 	bl	800be18 <_free_r>
 800bf3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf40:	6063      	str	r3, [r4, #4]
 800bf42:	2000      	movs	r0, #0
 800bf44:	6360      	str	r0, [r4, #52]	; 0x34
 800bf46:	b113      	cbz	r3, 800bf4e <__ssrefill_r+0x24>
 800bf48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf4a:	6023      	str	r3, [r4, #0]
 800bf4c:	bd10      	pop	{r4, pc}
 800bf4e:	6923      	ldr	r3, [r4, #16]
 800bf50:	6023      	str	r3, [r4, #0]
 800bf52:	2300      	movs	r3, #0
 800bf54:	6063      	str	r3, [r4, #4]
 800bf56:	89a3      	ldrh	r3, [r4, #12]
 800bf58:	f043 0320 	orr.w	r3, r3, #32
 800bf5c:	81a3      	strh	r3, [r4, #12]
 800bf5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf62:	e7f3      	b.n	800bf4c <__ssrefill_r+0x22>

0800bf64 <__ssvfiscanf_r>:
 800bf64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf68:	460c      	mov	r4, r1
 800bf6a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bf6e:	2100      	movs	r1, #0
 800bf70:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bf74:	49a6      	ldr	r1, [pc, #664]	; (800c210 <__ssvfiscanf_r+0x2ac>)
 800bf76:	91a0      	str	r1, [sp, #640]	; 0x280
 800bf78:	f10d 0804 	add.w	r8, sp, #4
 800bf7c:	49a5      	ldr	r1, [pc, #660]	; (800c214 <__ssvfiscanf_r+0x2b0>)
 800bf7e:	4fa6      	ldr	r7, [pc, #664]	; (800c218 <__ssvfiscanf_r+0x2b4>)
 800bf80:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c21c <__ssvfiscanf_r+0x2b8>
 800bf84:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bf88:	4606      	mov	r6, r0
 800bf8a:	91a1      	str	r1, [sp, #644]	; 0x284
 800bf8c:	9300      	str	r3, [sp, #0]
 800bf8e:	7813      	ldrb	r3, [r2, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f000 815a 	beq.w	800c24a <__ssvfiscanf_r+0x2e6>
 800bf96:	5dd9      	ldrb	r1, [r3, r7]
 800bf98:	f011 0108 	ands.w	r1, r1, #8
 800bf9c:	f102 0501 	add.w	r5, r2, #1
 800bfa0:	d019      	beq.n	800bfd6 <__ssvfiscanf_r+0x72>
 800bfa2:	6863      	ldr	r3, [r4, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	dd0f      	ble.n	800bfc8 <__ssvfiscanf_r+0x64>
 800bfa8:	6823      	ldr	r3, [r4, #0]
 800bfaa:	781a      	ldrb	r2, [r3, #0]
 800bfac:	5cba      	ldrb	r2, [r7, r2]
 800bfae:	0712      	lsls	r2, r2, #28
 800bfb0:	d401      	bmi.n	800bfb6 <__ssvfiscanf_r+0x52>
 800bfb2:	462a      	mov	r2, r5
 800bfb4:	e7eb      	b.n	800bf8e <__ssvfiscanf_r+0x2a>
 800bfb6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bfb8:	3201      	adds	r2, #1
 800bfba:	9245      	str	r2, [sp, #276]	; 0x114
 800bfbc:	6862      	ldr	r2, [r4, #4]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	3a01      	subs	r2, #1
 800bfc2:	6062      	str	r2, [r4, #4]
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	e7ec      	b.n	800bfa2 <__ssvfiscanf_r+0x3e>
 800bfc8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bfca:	4621      	mov	r1, r4
 800bfcc:	4630      	mov	r0, r6
 800bfce:	4798      	blx	r3
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d0e9      	beq.n	800bfa8 <__ssvfiscanf_r+0x44>
 800bfd4:	e7ed      	b.n	800bfb2 <__ssvfiscanf_r+0x4e>
 800bfd6:	2b25      	cmp	r3, #37	; 0x25
 800bfd8:	d012      	beq.n	800c000 <__ssvfiscanf_r+0x9c>
 800bfda:	469a      	mov	sl, r3
 800bfdc:	6863      	ldr	r3, [r4, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f340 8091 	ble.w	800c106 <__ssvfiscanf_r+0x1a2>
 800bfe4:	6822      	ldr	r2, [r4, #0]
 800bfe6:	7813      	ldrb	r3, [r2, #0]
 800bfe8:	4553      	cmp	r3, sl
 800bfea:	f040 812e 	bne.w	800c24a <__ssvfiscanf_r+0x2e6>
 800bfee:	6863      	ldr	r3, [r4, #4]
 800bff0:	3b01      	subs	r3, #1
 800bff2:	6063      	str	r3, [r4, #4]
 800bff4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bff6:	3201      	adds	r2, #1
 800bff8:	3301      	adds	r3, #1
 800bffa:	6022      	str	r2, [r4, #0]
 800bffc:	9345      	str	r3, [sp, #276]	; 0x114
 800bffe:	e7d8      	b.n	800bfb2 <__ssvfiscanf_r+0x4e>
 800c000:	9141      	str	r1, [sp, #260]	; 0x104
 800c002:	9143      	str	r1, [sp, #268]	; 0x10c
 800c004:	7853      	ldrb	r3, [r2, #1]
 800c006:	2b2a      	cmp	r3, #42	; 0x2a
 800c008:	bf02      	ittt	eq
 800c00a:	2310      	moveq	r3, #16
 800c00c:	1c95      	addeq	r5, r2, #2
 800c00e:	9341      	streq	r3, [sp, #260]	; 0x104
 800c010:	220a      	movs	r2, #10
 800c012:	46aa      	mov	sl, r5
 800c014:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c018:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c01c:	2b09      	cmp	r3, #9
 800c01e:	d91d      	bls.n	800c05c <__ssvfiscanf_r+0xf8>
 800c020:	487e      	ldr	r0, [pc, #504]	; (800c21c <__ssvfiscanf_r+0x2b8>)
 800c022:	2203      	movs	r2, #3
 800c024:	f7f4 f8dc 	bl	80001e0 <memchr>
 800c028:	b140      	cbz	r0, 800c03c <__ssvfiscanf_r+0xd8>
 800c02a:	2301      	movs	r3, #1
 800c02c:	eba0 0009 	sub.w	r0, r0, r9
 800c030:	fa03 f000 	lsl.w	r0, r3, r0
 800c034:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c036:	4318      	orrs	r0, r3
 800c038:	9041      	str	r0, [sp, #260]	; 0x104
 800c03a:	4655      	mov	r5, sl
 800c03c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c040:	2b78      	cmp	r3, #120	; 0x78
 800c042:	d806      	bhi.n	800c052 <__ssvfiscanf_r+0xee>
 800c044:	2b57      	cmp	r3, #87	; 0x57
 800c046:	d810      	bhi.n	800c06a <__ssvfiscanf_r+0x106>
 800c048:	2b25      	cmp	r3, #37	; 0x25
 800c04a:	d0c6      	beq.n	800bfda <__ssvfiscanf_r+0x76>
 800c04c:	d856      	bhi.n	800c0fc <__ssvfiscanf_r+0x198>
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d064      	beq.n	800c11c <__ssvfiscanf_r+0x1b8>
 800c052:	2303      	movs	r3, #3
 800c054:	9347      	str	r3, [sp, #284]	; 0x11c
 800c056:	230a      	movs	r3, #10
 800c058:	9342      	str	r3, [sp, #264]	; 0x108
 800c05a:	e071      	b.n	800c140 <__ssvfiscanf_r+0x1dc>
 800c05c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c05e:	fb02 1103 	mla	r1, r2, r3, r1
 800c062:	3930      	subs	r1, #48	; 0x30
 800c064:	9143      	str	r1, [sp, #268]	; 0x10c
 800c066:	4655      	mov	r5, sl
 800c068:	e7d3      	b.n	800c012 <__ssvfiscanf_r+0xae>
 800c06a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c06e:	2a20      	cmp	r2, #32
 800c070:	d8ef      	bhi.n	800c052 <__ssvfiscanf_r+0xee>
 800c072:	a101      	add	r1, pc, #4	; (adr r1, 800c078 <__ssvfiscanf_r+0x114>)
 800c074:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c078:	0800c12b 	.word	0x0800c12b
 800c07c:	0800c053 	.word	0x0800c053
 800c080:	0800c053 	.word	0x0800c053
 800c084:	0800c189 	.word	0x0800c189
 800c088:	0800c053 	.word	0x0800c053
 800c08c:	0800c053 	.word	0x0800c053
 800c090:	0800c053 	.word	0x0800c053
 800c094:	0800c053 	.word	0x0800c053
 800c098:	0800c053 	.word	0x0800c053
 800c09c:	0800c053 	.word	0x0800c053
 800c0a0:	0800c053 	.word	0x0800c053
 800c0a4:	0800c19f 	.word	0x0800c19f
 800c0a8:	0800c175 	.word	0x0800c175
 800c0ac:	0800c103 	.word	0x0800c103
 800c0b0:	0800c103 	.word	0x0800c103
 800c0b4:	0800c103 	.word	0x0800c103
 800c0b8:	0800c053 	.word	0x0800c053
 800c0bc:	0800c179 	.word	0x0800c179
 800c0c0:	0800c053 	.word	0x0800c053
 800c0c4:	0800c053 	.word	0x0800c053
 800c0c8:	0800c053 	.word	0x0800c053
 800c0cc:	0800c053 	.word	0x0800c053
 800c0d0:	0800c1af 	.word	0x0800c1af
 800c0d4:	0800c181 	.word	0x0800c181
 800c0d8:	0800c123 	.word	0x0800c123
 800c0dc:	0800c053 	.word	0x0800c053
 800c0e0:	0800c053 	.word	0x0800c053
 800c0e4:	0800c1ab 	.word	0x0800c1ab
 800c0e8:	0800c053 	.word	0x0800c053
 800c0ec:	0800c175 	.word	0x0800c175
 800c0f0:	0800c053 	.word	0x0800c053
 800c0f4:	0800c053 	.word	0x0800c053
 800c0f8:	0800c12b 	.word	0x0800c12b
 800c0fc:	3b45      	subs	r3, #69	; 0x45
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d8a7      	bhi.n	800c052 <__ssvfiscanf_r+0xee>
 800c102:	2305      	movs	r3, #5
 800c104:	e01b      	b.n	800c13e <__ssvfiscanf_r+0x1da>
 800c106:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c108:	4621      	mov	r1, r4
 800c10a:	4630      	mov	r0, r6
 800c10c:	4798      	blx	r3
 800c10e:	2800      	cmp	r0, #0
 800c110:	f43f af68 	beq.w	800bfe4 <__ssvfiscanf_r+0x80>
 800c114:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c116:	2800      	cmp	r0, #0
 800c118:	f040 808d 	bne.w	800c236 <__ssvfiscanf_r+0x2d2>
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c120:	e08f      	b.n	800c242 <__ssvfiscanf_r+0x2de>
 800c122:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c124:	f042 0220 	orr.w	r2, r2, #32
 800c128:	9241      	str	r2, [sp, #260]	; 0x104
 800c12a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c12c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c130:	9241      	str	r2, [sp, #260]	; 0x104
 800c132:	2210      	movs	r2, #16
 800c134:	2b6f      	cmp	r3, #111	; 0x6f
 800c136:	9242      	str	r2, [sp, #264]	; 0x108
 800c138:	bf34      	ite	cc
 800c13a:	2303      	movcc	r3, #3
 800c13c:	2304      	movcs	r3, #4
 800c13e:	9347      	str	r3, [sp, #284]	; 0x11c
 800c140:	6863      	ldr	r3, [r4, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	dd42      	ble.n	800c1cc <__ssvfiscanf_r+0x268>
 800c146:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c148:	0659      	lsls	r1, r3, #25
 800c14a:	d404      	bmi.n	800c156 <__ssvfiscanf_r+0x1f2>
 800c14c:	6823      	ldr	r3, [r4, #0]
 800c14e:	781a      	ldrb	r2, [r3, #0]
 800c150:	5cba      	ldrb	r2, [r7, r2]
 800c152:	0712      	lsls	r2, r2, #28
 800c154:	d441      	bmi.n	800c1da <__ssvfiscanf_r+0x276>
 800c156:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c158:	2b02      	cmp	r3, #2
 800c15a:	dc50      	bgt.n	800c1fe <__ssvfiscanf_r+0x29a>
 800c15c:	466b      	mov	r3, sp
 800c15e:	4622      	mov	r2, r4
 800c160:	a941      	add	r1, sp, #260	; 0x104
 800c162:	4630      	mov	r0, r6
 800c164:	f000 f876 	bl	800c254 <_scanf_chars>
 800c168:	2801      	cmp	r0, #1
 800c16a:	d06e      	beq.n	800c24a <__ssvfiscanf_r+0x2e6>
 800c16c:	2802      	cmp	r0, #2
 800c16e:	f47f af20 	bne.w	800bfb2 <__ssvfiscanf_r+0x4e>
 800c172:	e7cf      	b.n	800c114 <__ssvfiscanf_r+0x1b0>
 800c174:	220a      	movs	r2, #10
 800c176:	e7dd      	b.n	800c134 <__ssvfiscanf_r+0x1d0>
 800c178:	2300      	movs	r3, #0
 800c17a:	9342      	str	r3, [sp, #264]	; 0x108
 800c17c:	2303      	movs	r3, #3
 800c17e:	e7de      	b.n	800c13e <__ssvfiscanf_r+0x1da>
 800c180:	2308      	movs	r3, #8
 800c182:	9342      	str	r3, [sp, #264]	; 0x108
 800c184:	2304      	movs	r3, #4
 800c186:	e7da      	b.n	800c13e <__ssvfiscanf_r+0x1da>
 800c188:	4629      	mov	r1, r5
 800c18a:	4640      	mov	r0, r8
 800c18c:	f000 f9b4 	bl	800c4f8 <__sccl>
 800c190:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c196:	9341      	str	r3, [sp, #260]	; 0x104
 800c198:	4605      	mov	r5, r0
 800c19a:	2301      	movs	r3, #1
 800c19c:	e7cf      	b.n	800c13e <__ssvfiscanf_r+0x1da>
 800c19e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c1a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1a4:	9341      	str	r3, [sp, #260]	; 0x104
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	e7c9      	b.n	800c13e <__ssvfiscanf_r+0x1da>
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	e7c7      	b.n	800c13e <__ssvfiscanf_r+0x1da>
 800c1ae:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c1b0:	06c3      	lsls	r3, r0, #27
 800c1b2:	f53f aefe 	bmi.w	800bfb2 <__ssvfiscanf_r+0x4e>
 800c1b6:	9b00      	ldr	r3, [sp, #0]
 800c1b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c1ba:	1d19      	adds	r1, r3, #4
 800c1bc:	9100      	str	r1, [sp, #0]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f010 0f01 	tst.w	r0, #1
 800c1c4:	bf14      	ite	ne
 800c1c6:	801a      	strhne	r2, [r3, #0]
 800c1c8:	601a      	streq	r2, [r3, #0]
 800c1ca:	e6f2      	b.n	800bfb2 <__ssvfiscanf_r+0x4e>
 800c1cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	4798      	blx	r3
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d0b6      	beq.n	800c146 <__ssvfiscanf_r+0x1e2>
 800c1d8:	e79c      	b.n	800c114 <__ssvfiscanf_r+0x1b0>
 800c1da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c1dc:	3201      	adds	r2, #1
 800c1de:	9245      	str	r2, [sp, #276]	; 0x114
 800c1e0:	6862      	ldr	r2, [r4, #4]
 800c1e2:	3a01      	subs	r2, #1
 800c1e4:	2a00      	cmp	r2, #0
 800c1e6:	6062      	str	r2, [r4, #4]
 800c1e8:	dd02      	ble.n	800c1f0 <__ssvfiscanf_r+0x28c>
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	6023      	str	r3, [r4, #0]
 800c1ee:	e7ad      	b.n	800c14c <__ssvfiscanf_r+0x1e8>
 800c1f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1f2:	4621      	mov	r1, r4
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	4798      	blx	r3
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d0a7      	beq.n	800c14c <__ssvfiscanf_r+0x1e8>
 800c1fc:	e78a      	b.n	800c114 <__ssvfiscanf_r+0x1b0>
 800c1fe:	2b04      	cmp	r3, #4
 800c200:	dc0e      	bgt.n	800c220 <__ssvfiscanf_r+0x2bc>
 800c202:	466b      	mov	r3, sp
 800c204:	4622      	mov	r2, r4
 800c206:	a941      	add	r1, sp, #260	; 0x104
 800c208:	4630      	mov	r0, r6
 800c20a:	f000 f87d 	bl	800c308 <_scanf_i>
 800c20e:	e7ab      	b.n	800c168 <__ssvfiscanf_r+0x204>
 800c210:	0800beb1 	.word	0x0800beb1
 800c214:	0800bf2b 	.word	0x0800bf2b
 800c218:	0800cc01 	.word	0x0800cc01
 800c21c:	0800cbe1 	.word	0x0800cbe1
 800c220:	4b0b      	ldr	r3, [pc, #44]	; (800c250 <__ssvfiscanf_r+0x2ec>)
 800c222:	2b00      	cmp	r3, #0
 800c224:	f43f aec5 	beq.w	800bfb2 <__ssvfiscanf_r+0x4e>
 800c228:	466b      	mov	r3, sp
 800c22a:	4622      	mov	r2, r4
 800c22c:	a941      	add	r1, sp, #260	; 0x104
 800c22e:	4630      	mov	r0, r6
 800c230:	f3af 8000 	nop.w
 800c234:	e798      	b.n	800c168 <__ssvfiscanf_r+0x204>
 800c236:	89a3      	ldrh	r3, [r4, #12]
 800c238:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c23c:	bf18      	it	ne
 800c23e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800c242:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c24a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c24c:	e7f9      	b.n	800c242 <__ssvfiscanf_r+0x2de>
 800c24e:	bf00      	nop
 800c250:	00000000 	.word	0x00000000

0800c254 <_scanf_chars>:
 800c254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c258:	4615      	mov	r5, r2
 800c25a:	688a      	ldr	r2, [r1, #8]
 800c25c:	4680      	mov	r8, r0
 800c25e:	460c      	mov	r4, r1
 800c260:	b932      	cbnz	r2, 800c270 <_scanf_chars+0x1c>
 800c262:	698a      	ldr	r2, [r1, #24]
 800c264:	2a00      	cmp	r2, #0
 800c266:	bf0c      	ite	eq
 800c268:	2201      	moveq	r2, #1
 800c26a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800c26e:	608a      	str	r2, [r1, #8]
 800c270:	6822      	ldr	r2, [r4, #0]
 800c272:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c304 <_scanf_chars+0xb0>
 800c276:	06d1      	lsls	r1, r2, #27
 800c278:	bf5f      	itttt	pl
 800c27a:	681a      	ldrpl	r2, [r3, #0]
 800c27c:	1d11      	addpl	r1, r2, #4
 800c27e:	6019      	strpl	r1, [r3, #0]
 800c280:	6816      	ldrpl	r6, [r2, #0]
 800c282:	2700      	movs	r7, #0
 800c284:	69a0      	ldr	r0, [r4, #24]
 800c286:	b188      	cbz	r0, 800c2ac <_scanf_chars+0x58>
 800c288:	2801      	cmp	r0, #1
 800c28a:	d107      	bne.n	800c29c <_scanf_chars+0x48>
 800c28c:	682a      	ldr	r2, [r5, #0]
 800c28e:	7811      	ldrb	r1, [r2, #0]
 800c290:	6962      	ldr	r2, [r4, #20]
 800c292:	5c52      	ldrb	r2, [r2, r1]
 800c294:	b952      	cbnz	r2, 800c2ac <_scanf_chars+0x58>
 800c296:	2f00      	cmp	r7, #0
 800c298:	d031      	beq.n	800c2fe <_scanf_chars+0xaa>
 800c29a:	e022      	b.n	800c2e2 <_scanf_chars+0x8e>
 800c29c:	2802      	cmp	r0, #2
 800c29e:	d120      	bne.n	800c2e2 <_scanf_chars+0x8e>
 800c2a0:	682b      	ldr	r3, [r5, #0]
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c2a8:	071b      	lsls	r3, r3, #28
 800c2aa:	d41a      	bmi.n	800c2e2 <_scanf_chars+0x8e>
 800c2ac:	6823      	ldr	r3, [r4, #0]
 800c2ae:	06da      	lsls	r2, r3, #27
 800c2b0:	bf5e      	ittt	pl
 800c2b2:	682b      	ldrpl	r3, [r5, #0]
 800c2b4:	781b      	ldrbpl	r3, [r3, #0]
 800c2b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c2ba:	682a      	ldr	r2, [r5, #0]
 800c2bc:	686b      	ldr	r3, [r5, #4]
 800c2be:	3201      	adds	r2, #1
 800c2c0:	602a      	str	r2, [r5, #0]
 800c2c2:	68a2      	ldr	r2, [r4, #8]
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	3a01      	subs	r2, #1
 800c2c8:	606b      	str	r3, [r5, #4]
 800c2ca:	3701      	adds	r7, #1
 800c2cc:	60a2      	str	r2, [r4, #8]
 800c2ce:	b142      	cbz	r2, 800c2e2 <_scanf_chars+0x8e>
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	dcd7      	bgt.n	800c284 <_scanf_chars+0x30>
 800c2d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c2d8:	4629      	mov	r1, r5
 800c2da:	4640      	mov	r0, r8
 800c2dc:	4798      	blx	r3
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d0d0      	beq.n	800c284 <_scanf_chars+0x30>
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	f013 0310 	ands.w	r3, r3, #16
 800c2e8:	d105      	bne.n	800c2f6 <_scanf_chars+0xa2>
 800c2ea:	68e2      	ldr	r2, [r4, #12]
 800c2ec:	3201      	adds	r2, #1
 800c2ee:	60e2      	str	r2, [r4, #12]
 800c2f0:	69a2      	ldr	r2, [r4, #24]
 800c2f2:	b102      	cbz	r2, 800c2f6 <_scanf_chars+0xa2>
 800c2f4:	7033      	strb	r3, [r6, #0]
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	443b      	add	r3, r7
 800c2fa:	6123      	str	r3, [r4, #16]
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c302:	bf00      	nop
 800c304:	0800cc01 	.word	0x0800cc01

0800c308 <_scanf_i>:
 800c308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c30c:	4698      	mov	r8, r3
 800c30e:	4b76      	ldr	r3, [pc, #472]	; (800c4e8 <_scanf_i+0x1e0>)
 800c310:	460c      	mov	r4, r1
 800c312:	4682      	mov	sl, r0
 800c314:	4616      	mov	r6, r2
 800c316:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c31a:	b087      	sub	sp, #28
 800c31c:	ab03      	add	r3, sp, #12
 800c31e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c322:	4b72      	ldr	r3, [pc, #456]	; (800c4ec <_scanf_i+0x1e4>)
 800c324:	69a1      	ldr	r1, [r4, #24]
 800c326:	4a72      	ldr	r2, [pc, #456]	; (800c4f0 <_scanf_i+0x1e8>)
 800c328:	2903      	cmp	r1, #3
 800c32a:	bf18      	it	ne
 800c32c:	461a      	movne	r2, r3
 800c32e:	68a3      	ldr	r3, [r4, #8]
 800c330:	9201      	str	r2, [sp, #4]
 800c332:	1e5a      	subs	r2, r3, #1
 800c334:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c338:	bf88      	it	hi
 800c33a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c33e:	4627      	mov	r7, r4
 800c340:	bf82      	ittt	hi
 800c342:	eb03 0905 	addhi.w	r9, r3, r5
 800c346:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c34a:	60a3      	strhi	r3, [r4, #8]
 800c34c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c350:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c354:	bf98      	it	ls
 800c356:	f04f 0900 	movls.w	r9, #0
 800c35a:	6023      	str	r3, [r4, #0]
 800c35c:	463d      	mov	r5, r7
 800c35e:	f04f 0b00 	mov.w	fp, #0
 800c362:	6831      	ldr	r1, [r6, #0]
 800c364:	ab03      	add	r3, sp, #12
 800c366:	7809      	ldrb	r1, [r1, #0]
 800c368:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c36c:	2202      	movs	r2, #2
 800c36e:	f7f3 ff37 	bl	80001e0 <memchr>
 800c372:	b328      	cbz	r0, 800c3c0 <_scanf_i+0xb8>
 800c374:	f1bb 0f01 	cmp.w	fp, #1
 800c378:	d159      	bne.n	800c42e <_scanf_i+0x126>
 800c37a:	6862      	ldr	r2, [r4, #4]
 800c37c:	b92a      	cbnz	r2, 800c38a <_scanf_i+0x82>
 800c37e:	6822      	ldr	r2, [r4, #0]
 800c380:	2308      	movs	r3, #8
 800c382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c386:	6063      	str	r3, [r4, #4]
 800c388:	6022      	str	r2, [r4, #0]
 800c38a:	6822      	ldr	r2, [r4, #0]
 800c38c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c390:	6022      	str	r2, [r4, #0]
 800c392:	68a2      	ldr	r2, [r4, #8]
 800c394:	1e51      	subs	r1, r2, #1
 800c396:	60a1      	str	r1, [r4, #8]
 800c398:	b192      	cbz	r2, 800c3c0 <_scanf_i+0xb8>
 800c39a:	6832      	ldr	r2, [r6, #0]
 800c39c:	1c51      	adds	r1, r2, #1
 800c39e:	6031      	str	r1, [r6, #0]
 800c3a0:	7812      	ldrb	r2, [r2, #0]
 800c3a2:	f805 2b01 	strb.w	r2, [r5], #1
 800c3a6:	6872      	ldr	r2, [r6, #4]
 800c3a8:	3a01      	subs	r2, #1
 800c3aa:	2a00      	cmp	r2, #0
 800c3ac:	6072      	str	r2, [r6, #4]
 800c3ae:	dc07      	bgt.n	800c3c0 <_scanf_i+0xb8>
 800c3b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4650      	mov	r0, sl
 800c3b8:	4790      	blx	r2
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	f040 8085 	bne.w	800c4ca <_scanf_i+0x1c2>
 800c3c0:	f10b 0b01 	add.w	fp, fp, #1
 800c3c4:	f1bb 0f03 	cmp.w	fp, #3
 800c3c8:	d1cb      	bne.n	800c362 <_scanf_i+0x5a>
 800c3ca:	6863      	ldr	r3, [r4, #4]
 800c3cc:	b90b      	cbnz	r3, 800c3d2 <_scanf_i+0xca>
 800c3ce:	230a      	movs	r3, #10
 800c3d0:	6063      	str	r3, [r4, #4]
 800c3d2:	6863      	ldr	r3, [r4, #4]
 800c3d4:	4947      	ldr	r1, [pc, #284]	; (800c4f4 <_scanf_i+0x1ec>)
 800c3d6:	6960      	ldr	r0, [r4, #20]
 800c3d8:	1ac9      	subs	r1, r1, r3
 800c3da:	f000 f88d 	bl	800c4f8 <__sccl>
 800c3de:	f04f 0b00 	mov.w	fp, #0
 800c3e2:	68a3      	ldr	r3, [r4, #8]
 800c3e4:	6822      	ldr	r2, [r4, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d03d      	beq.n	800c466 <_scanf_i+0x15e>
 800c3ea:	6831      	ldr	r1, [r6, #0]
 800c3ec:	6960      	ldr	r0, [r4, #20]
 800c3ee:	f891 c000 	ldrb.w	ip, [r1]
 800c3f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	d035      	beq.n	800c466 <_scanf_i+0x15e>
 800c3fa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c3fe:	d124      	bne.n	800c44a <_scanf_i+0x142>
 800c400:	0510      	lsls	r0, r2, #20
 800c402:	d522      	bpl.n	800c44a <_scanf_i+0x142>
 800c404:	f10b 0b01 	add.w	fp, fp, #1
 800c408:	f1b9 0f00 	cmp.w	r9, #0
 800c40c:	d003      	beq.n	800c416 <_scanf_i+0x10e>
 800c40e:	3301      	adds	r3, #1
 800c410:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c414:	60a3      	str	r3, [r4, #8]
 800c416:	6873      	ldr	r3, [r6, #4]
 800c418:	3b01      	subs	r3, #1
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	6073      	str	r3, [r6, #4]
 800c41e:	dd1b      	ble.n	800c458 <_scanf_i+0x150>
 800c420:	6833      	ldr	r3, [r6, #0]
 800c422:	3301      	adds	r3, #1
 800c424:	6033      	str	r3, [r6, #0]
 800c426:	68a3      	ldr	r3, [r4, #8]
 800c428:	3b01      	subs	r3, #1
 800c42a:	60a3      	str	r3, [r4, #8]
 800c42c:	e7d9      	b.n	800c3e2 <_scanf_i+0xda>
 800c42e:	f1bb 0f02 	cmp.w	fp, #2
 800c432:	d1ae      	bne.n	800c392 <_scanf_i+0x8a>
 800c434:	6822      	ldr	r2, [r4, #0]
 800c436:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c43a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c43e:	d1bf      	bne.n	800c3c0 <_scanf_i+0xb8>
 800c440:	2310      	movs	r3, #16
 800c442:	6063      	str	r3, [r4, #4]
 800c444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c448:	e7a2      	b.n	800c390 <_scanf_i+0x88>
 800c44a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c44e:	6022      	str	r2, [r4, #0]
 800c450:	780b      	ldrb	r3, [r1, #0]
 800c452:	f805 3b01 	strb.w	r3, [r5], #1
 800c456:	e7de      	b.n	800c416 <_scanf_i+0x10e>
 800c458:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c45c:	4631      	mov	r1, r6
 800c45e:	4650      	mov	r0, sl
 800c460:	4798      	blx	r3
 800c462:	2800      	cmp	r0, #0
 800c464:	d0df      	beq.n	800c426 <_scanf_i+0x11e>
 800c466:	6823      	ldr	r3, [r4, #0]
 800c468:	05db      	lsls	r3, r3, #23
 800c46a:	d50d      	bpl.n	800c488 <_scanf_i+0x180>
 800c46c:	42bd      	cmp	r5, r7
 800c46e:	d909      	bls.n	800c484 <_scanf_i+0x17c>
 800c470:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c474:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c478:	4632      	mov	r2, r6
 800c47a:	4650      	mov	r0, sl
 800c47c:	4798      	blx	r3
 800c47e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c482:	464d      	mov	r5, r9
 800c484:	42bd      	cmp	r5, r7
 800c486:	d02d      	beq.n	800c4e4 <_scanf_i+0x1dc>
 800c488:	6822      	ldr	r2, [r4, #0]
 800c48a:	f012 0210 	ands.w	r2, r2, #16
 800c48e:	d113      	bne.n	800c4b8 <_scanf_i+0x1b0>
 800c490:	702a      	strb	r2, [r5, #0]
 800c492:	6863      	ldr	r3, [r4, #4]
 800c494:	9e01      	ldr	r6, [sp, #4]
 800c496:	4639      	mov	r1, r7
 800c498:	4650      	mov	r0, sl
 800c49a:	47b0      	blx	r6
 800c49c:	6821      	ldr	r1, [r4, #0]
 800c49e:	f8d8 3000 	ldr.w	r3, [r8]
 800c4a2:	f011 0f20 	tst.w	r1, #32
 800c4a6:	d013      	beq.n	800c4d0 <_scanf_i+0x1c8>
 800c4a8:	1d1a      	adds	r2, r3, #4
 800c4aa:	f8c8 2000 	str.w	r2, [r8]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	6018      	str	r0, [r3, #0]
 800c4b2:	68e3      	ldr	r3, [r4, #12]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	60e3      	str	r3, [r4, #12]
 800c4b8:	1bed      	subs	r5, r5, r7
 800c4ba:	44ab      	add	fp, r5
 800c4bc:	6925      	ldr	r5, [r4, #16]
 800c4be:	445d      	add	r5, fp
 800c4c0:	6125      	str	r5, [r4, #16]
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	b007      	add	sp, #28
 800c4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ca:	f04f 0b00 	mov.w	fp, #0
 800c4ce:	e7ca      	b.n	800c466 <_scanf_i+0x15e>
 800c4d0:	1d1a      	adds	r2, r3, #4
 800c4d2:	f8c8 2000 	str.w	r2, [r8]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f011 0f01 	tst.w	r1, #1
 800c4dc:	bf14      	ite	ne
 800c4de:	8018      	strhne	r0, [r3, #0]
 800c4e0:	6018      	streq	r0, [r3, #0]
 800c4e2:	e7e6      	b.n	800c4b2 <_scanf_i+0x1aa>
 800c4e4:	2001      	movs	r0, #1
 800c4e6:	e7ed      	b.n	800c4c4 <_scanf_i+0x1bc>
 800c4e8:	0800c988 	.word	0x0800c988
 800c4ec:	0800c755 	.word	0x0800c755
 800c4f0:	0800c66d 	.word	0x0800c66d
 800c4f4:	0800cbfe 	.word	0x0800cbfe

0800c4f8 <__sccl>:
 800c4f8:	b570      	push	{r4, r5, r6, lr}
 800c4fa:	780b      	ldrb	r3, [r1, #0]
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	2b5e      	cmp	r3, #94	; 0x5e
 800c500:	bf0b      	itete	eq
 800c502:	784b      	ldrbeq	r3, [r1, #1]
 800c504:	1c48      	addne	r0, r1, #1
 800c506:	1c88      	addeq	r0, r1, #2
 800c508:	2200      	movne	r2, #0
 800c50a:	bf08      	it	eq
 800c50c:	2201      	moveq	r2, #1
 800c50e:	1e61      	subs	r1, r4, #1
 800c510:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c514:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c518:	42a9      	cmp	r1, r5
 800c51a:	d1fb      	bne.n	800c514 <__sccl+0x1c>
 800c51c:	b90b      	cbnz	r3, 800c522 <__sccl+0x2a>
 800c51e:	3801      	subs	r0, #1
 800c520:	bd70      	pop	{r4, r5, r6, pc}
 800c522:	f082 0201 	eor.w	r2, r2, #1
 800c526:	54e2      	strb	r2, [r4, r3]
 800c528:	4605      	mov	r5, r0
 800c52a:	4628      	mov	r0, r5
 800c52c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c530:	292d      	cmp	r1, #45	; 0x2d
 800c532:	d006      	beq.n	800c542 <__sccl+0x4a>
 800c534:	295d      	cmp	r1, #93	; 0x5d
 800c536:	d0f3      	beq.n	800c520 <__sccl+0x28>
 800c538:	b909      	cbnz	r1, 800c53e <__sccl+0x46>
 800c53a:	4628      	mov	r0, r5
 800c53c:	e7f0      	b.n	800c520 <__sccl+0x28>
 800c53e:	460b      	mov	r3, r1
 800c540:	e7f1      	b.n	800c526 <__sccl+0x2e>
 800c542:	786e      	ldrb	r6, [r5, #1]
 800c544:	2e5d      	cmp	r6, #93	; 0x5d
 800c546:	d0fa      	beq.n	800c53e <__sccl+0x46>
 800c548:	42b3      	cmp	r3, r6
 800c54a:	dcf8      	bgt.n	800c53e <__sccl+0x46>
 800c54c:	3502      	adds	r5, #2
 800c54e:	4619      	mov	r1, r3
 800c550:	3101      	adds	r1, #1
 800c552:	428e      	cmp	r6, r1
 800c554:	5462      	strb	r2, [r4, r1]
 800c556:	dcfb      	bgt.n	800c550 <__sccl+0x58>
 800c558:	1af1      	subs	r1, r6, r3
 800c55a:	3901      	subs	r1, #1
 800c55c:	1c58      	adds	r0, r3, #1
 800c55e:	42b3      	cmp	r3, r6
 800c560:	bfa8      	it	ge
 800c562:	2100      	movge	r1, #0
 800c564:	1843      	adds	r3, r0, r1
 800c566:	e7e0      	b.n	800c52a <__sccl+0x32>

0800c568 <_strtol_l.constprop.0>:
 800c568:	2b01      	cmp	r3, #1
 800c56a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c56e:	d001      	beq.n	800c574 <_strtol_l.constprop.0+0xc>
 800c570:	2b24      	cmp	r3, #36	; 0x24
 800c572:	d906      	bls.n	800c582 <_strtol_l.constprop.0+0x1a>
 800c574:	f7ff fa6a 	bl	800ba4c <__errno>
 800c578:	2316      	movs	r3, #22
 800c57a:	6003      	str	r3, [r0, #0]
 800c57c:	2000      	movs	r0, #0
 800c57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c582:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c668 <_strtol_l.constprop.0+0x100>
 800c586:	460d      	mov	r5, r1
 800c588:	462e      	mov	r6, r5
 800c58a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c58e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c592:	f017 0708 	ands.w	r7, r7, #8
 800c596:	d1f7      	bne.n	800c588 <_strtol_l.constprop.0+0x20>
 800c598:	2c2d      	cmp	r4, #45	; 0x2d
 800c59a:	d132      	bne.n	800c602 <_strtol_l.constprop.0+0x9a>
 800c59c:	782c      	ldrb	r4, [r5, #0]
 800c59e:	2701      	movs	r7, #1
 800c5a0:	1cb5      	adds	r5, r6, #2
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d05b      	beq.n	800c65e <_strtol_l.constprop.0+0xf6>
 800c5a6:	2b10      	cmp	r3, #16
 800c5a8:	d109      	bne.n	800c5be <_strtol_l.constprop.0+0x56>
 800c5aa:	2c30      	cmp	r4, #48	; 0x30
 800c5ac:	d107      	bne.n	800c5be <_strtol_l.constprop.0+0x56>
 800c5ae:	782c      	ldrb	r4, [r5, #0]
 800c5b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c5b4:	2c58      	cmp	r4, #88	; 0x58
 800c5b6:	d14d      	bne.n	800c654 <_strtol_l.constprop.0+0xec>
 800c5b8:	786c      	ldrb	r4, [r5, #1]
 800c5ba:	2310      	movs	r3, #16
 800c5bc:	3502      	adds	r5, #2
 800c5be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c5c2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c5c6:	f04f 0c00 	mov.w	ip, #0
 800c5ca:	fbb8 f9f3 	udiv	r9, r8, r3
 800c5ce:	4666      	mov	r6, ip
 800c5d0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c5d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c5d8:	f1be 0f09 	cmp.w	lr, #9
 800c5dc:	d816      	bhi.n	800c60c <_strtol_l.constprop.0+0xa4>
 800c5de:	4674      	mov	r4, lr
 800c5e0:	42a3      	cmp	r3, r4
 800c5e2:	dd24      	ble.n	800c62e <_strtol_l.constprop.0+0xc6>
 800c5e4:	f1bc 0f00 	cmp.w	ip, #0
 800c5e8:	db1e      	blt.n	800c628 <_strtol_l.constprop.0+0xc0>
 800c5ea:	45b1      	cmp	r9, r6
 800c5ec:	d31c      	bcc.n	800c628 <_strtol_l.constprop.0+0xc0>
 800c5ee:	d101      	bne.n	800c5f4 <_strtol_l.constprop.0+0x8c>
 800c5f0:	45a2      	cmp	sl, r4
 800c5f2:	db19      	blt.n	800c628 <_strtol_l.constprop.0+0xc0>
 800c5f4:	fb06 4603 	mla	r6, r6, r3, r4
 800c5f8:	f04f 0c01 	mov.w	ip, #1
 800c5fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c600:	e7e8      	b.n	800c5d4 <_strtol_l.constprop.0+0x6c>
 800c602:	2c2b      	cmp	r4, #43	; 0x2b
 800c604:	bf04      	itt	eq
 800c606:	782c      	ldrbeq	r4, [r5, #0]
 800c608:	1cb5      	addeq	r5, r6, #2
 800c60a:	e7ca      	b.n	800c5a2 <_strtol_l.constprop.0+0x3a>
 800c60c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c610:	f1be 0f19 	cmp.w	lr, #25
 800c614:	d801      	bhi.n	800c61a <_strtol_l.constprop.0+0xb2>
 800c616:	3c37      	subs	r4, #55	; 0x37
 800c618:	e7e2      	b.n	800c5e0 <_strtol_l.constprop.0+0x78>
 800c61a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c61e:	f1be 0f19 	cmp.w	lr, #25
 800c622:	d804      	bhi.n	800c62e <_strtol_l.constprop.0+0xc6>
 800c624:	3c57      	subs	r4, #87	; 0x57
 800c626:	e7db      	b.n	800c5e0 <_strtol_l.constprop.0+0x78>
 800c628:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c62c:	e7e6      	b.n	800c5fc <_strtol_l.constprop.0+0x94>
 800c62e:	f1bc 0f00 	cmp.w	ip, #0
 800c632:	da05      	bge.n	800c640 <_strtol_l.constprop.0+0xd8>
 800c634:	2322      	movs	r3, #34	; 0x22
 800c636:	6003      	str	r3, [r0, #0]
 800c638:	4646      	mov	r6, r8
 800c63a:	b942      	cbnz	r2, 800c64e <_strtol_l.constprop.0+0xe6>
 800c63c:	4630      	mov	r0, r6
 800c63e:	e79e      	b.n	800c57e <_strtol_l.constprop.0+0x16>
 800c640:	b107      	cbz	r7, 800c644 <_strtol_l.constprop.0+0xdc>
 800c642:	4276      	negs	r6, r6
 800c644:	2a00      	cmp	r2, #0
 800c646:	d0f9      	beq.n	800c63c <_strtol_l.constprop.0+0xd4>
 800c648:	f1bc 0f00 	cmp.w	ip, #0
 800c64c:	d000      	beq.n	800c650 <_strtol_l.constprop.0+0xe8>
 800c64e:	1e69      	subs	r1, r5, #1
 800c650:	6011      	str	r1, [r2, #0]
 800c652:	e7f3      	b.n	800c63c <_strtol_l.constprop.0+0xd4>
 800c654:	2430      	movs	r4, #48	; 0x30
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1b1      	bne.n	800c5be <_strtol_l.constprop.0+0x56>
 800c65a:	2308      	movs	r3, #8
 800c65c:	e7af      	b.n	800c5be <_strtol_l.constprop.0+0x56>
 800c65e:	2c30      	cmp	r4, #48	; 0x30
 800c660:	d0a5      	beq.n	800c5ae <_strtol_l.constprop.0+0x46>
 800c662:	230a      	movs	r3, #10
 800c664:	e7ab      	b.n	800c5be <_strtol_l.constprop.0+0x56>
 800c666:	bf00      	nop
 800c668:	0800cc01 	.word	0x0800cc01

0800c66c <_strtol_r>:
 800c66c:	f7ff bf7c 	b.w	800c568 <_strtol_l.constprop.0>

0800c670 <_strtoul_l.constprop.0>:
 800c670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c674:	4f36      	ldr	r7, [pc, #216]	; (800c750 <_strtoul_l.constprop.0+0xe0>)
 800c676:	4686      	mov	lr, r0
 800c678:	460d      	mov	r5, r1
 800c67a:	4628      	mov	r0, r5
 800c67c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c680:	5de6      	ldrb	r6, [r4, r7]
 800c682:	f016 0608 	ands.w	r6, r6, #8
 800c686:	d1f8      	bne.n	800c67a <_strtoul_l.constprop.0+0xa>
 800c688:	2c2d      	cmp	r4, #45	; 0x2d
 800c68a:	d12f      	bne.n	800c6ec <_strtoul_l.constprop.0+0x7c>
 800c68c:	782c      	ldrb	r4, [r5, #0]
 800c68e:	2601      	movs	r6, #1
 800c690:	1c85      	adds	r5, r0, #2
 800c692:	2b00      	cmp	r3, #0
 800c694:	d057      	beq.n	800c746 <_strtoul_l.constprop.0+0xd6>
 800c696:	2b10      	cmp	r3, #16
 800c698:	d109      	bne.n	800c6ae <_strtoul_l.constprop.0+0x3e>
 800c69a:	2c30      	cmp	r4, #48	; 0x30
 800c69c:	d107      	bne.n	800c6ae <_strtoul_l.constprop.0+0x3e>
 800c69e:	7828      	ldrb	r0, [r5, #0]
 800c6a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c6a4:	2858      	cmp	r0, #88	; 0x58
 800c6a6:	d149      	bne.n	800c73c <_strtoul_l.constprop.0+0xcc>
 800c6a8:	786c      	ldrb	r4, [r5, #1]
 800c6aa:	2310      	movs	r3, #16
 800c6ac:	3502      	adds	r5, #2
 800c6ae:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c6b2:	2700      	movs	r7, #0
 800c6b4:	fbb8 f8f3 	udiv	r8, r8, r3
 800c6b8:	fb03 f908 	mul.w	r9, r3, r8
 800c6bc:	ea6f 0909 	mvn.w	r9, r9
 800c6c0:	4638      	mov	r0, r7
 800c6c2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c6c6:	f1bc 0f09 	cmp.w	ip, #9
 800c6ca:	d814      	bhi.n	800c6f6 <_strtoul_l.constprop.0+0x86>
 800c6cc:	4664      	mov	r4, ip
 800c6ce:	42a3      	cmp	r3, r4
 800c6d0:	dd22      	ble.n	800c718 <_strtoul_l.constprop.0+0xa8>
 800c6d2:	2f00      	cmp	r7, #0
 800c6d4:	db1d      	blt.n	800c712 <_strtoul_l.constprop.0+0xa2>
 800c6d6:	4580      	cmp	r8, r0
 800c6d8:	d31b      	bcc.n	800c712 <_strtoul_l.constprop.0+0xa2>
 800c6da:	d101      	bne.n	800c6e0 <_strtoul_l.constprop.0+0x70>
 800c6dc:	45a1      	cmp	r9, r4
 800c6de:	db18      	blt.n	800c712 <_strtoul_l.constprop.0+0xa2>
 800c6e0:	fb00 4003 	mla	r0, r0, r3, r4
 800c6e4:	2701      	movs	r7, #1
 800c6e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6ea:	e7ea      	b.n	800c6c2 <_strtoul_l.constprop.0+0x52>
 800c6ec:	2c2b      	cmp	r4, #43	; 0x2b
 800c6ee:	bf04      	itt	eq
 800c6f0:	782c      	ldrbeq	r4, [r5, #0]
 800c6f2:	1c85      	addeq	r5, r0, #2
 800c6f4:	e7cd      	b.n	800c692 <_strtoul_l.constprop.0+0x22>
 800c6f6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c6fa:	f1bc 0f19 	cmp.w	ip, #25
 800c6fe:	d801      	bhi.n	800c704 <_strtoul_l.constprop.0+0x94>
 800c700:	3c37      	subs	r4, #55	; 0x37
 800c702:	e7e4      	b.n	800c6ce <_strtoul_l.constprop.0+0x5e>
 800c704:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c708:	f1bc 0f19 	cmp.w	ip, #25
 800c70c:	d804      	bhi.n	800c718 <_strtoul_l.constprop.0+0xa8>
 800c70e:	3c57      	subs	r4, #87	; 0x57
 800c710:	e7dd      	b.n	800c6ce <_strtoul_l.constprop.0+0x5e>
 800c712:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c716:	e7e6      	b.n	800c6e6 <_strtoul_l.constprop.0+0x76>
 800c718:	2f00      	cmp	r7, #0
 800c71a:	da07      	bge.n	800c72c <_strtoul_l.constprop.0+0xbc>
 800c71c:	2322      	movs	r3, #34	; 0x22
 800c71e:	f8ce 3000 	str.w	r3, [lr]
 800c722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c726:	b932      	cbnz	r2, 800c736 <_strtoul_l.constprop.0+0xc6>
 800c728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c72c:	b106      	cbz	r6, 800c730 <_strtoul_l.constprop.0+0xc0>
 800c72e:	4240      	negs	r0, r0
 800c730:	2a00      	cmp	r2, #0
 800c732:	d0f9      	beq.n	800c728 <_strtoul_l.constprop.0+0xb8>
 800c734:	b107      	cbz	r7, 800c738 <_strtoul_l.constprop.0+0xc8>
 800c736:	1e69      	subs	r1, r5, #1
 800c738:	6011      	str	r1, [r2, #0]
 800c73a:	e7f5      	b.n	800c728 <_strtoul_l.constprop.0+0xb8>
 800c73c:	2430      	movs	r4, #48	; 0x30
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d1b5      	bne.n	800c6ae <_strtoul_l.constprop.0+0x3e>
 800c742:	2308      	movs	r3, #8
 800c744:	e7b3      	b.n	800c6ae <_strtoul_l.constprop.0+0x3e>
 800c746:	2c30      	cmp	r4, #48	; 0x30
 800c748:	d0a9      	beq.n	800c69e <_strtoul_l.constprop.0+0x2e>
 800c74a:	230a      	movs	r3, #10
 800c74c:	e7af      	b.n	800c6ae <_strtoul_l.constprop.0+0x3e>
 800c74e:	bf00      	nop
 800c750:	0800cc01 	.word	0x0800cc01

0800c754 <_strtoul_r>:
 800c754:	f7ff bf8c 	b.w	800c670 <_strtoul_l.constprop.0>

0800c758 <__submore>:
 800c758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c75c:	460c      	mov	r4, r1
 800c75e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c764:	4299      	cmp	r1, r3
 800c766:	d11d      	bne.n	800c7a4 <__submore+0x4c>
 800c768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c76c:	f7ff f9ea 	bl	800bb44 <_malloc_r>
 800c770:	b918      	cbnz	r0, 800c77a <__submore+0x22>
 800c772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c77a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c77e:	63a3      	str	r3, [r4, #56]	; 0x38
 800c780:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c784:	6360      	str	r0, [r4, #52]	; 0x34
 800c786:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c78a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c78e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c792:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c796:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c79a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c79e:	6020      	str	r0, [r4, #0]
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	e7e8      	b.n	800c776 <__submore+0x1e>
 800c7a4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c7a6:	0077      	lsls	r7, r6, #1
 800c7a8:	463a      	mov	r2, r7
 800c7aa:	f000 f80f 	bl	800c7cc <_realloc_r>
 800c7ae:	4605      	mov	r5, r0
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	d0de      	beq.n	800c772 <__submore+0x1a>
 800c7b4:	eb00 0806 	add.w	r8, r0, r6
 800c7b8:	4601      	mov	r1, r0
 800c7ba:	4632      	mov	r2, r6
 800c7bc:	4640      	mov	r0, r8
 800c7be:	f7ff f98b 	bl	800bad8 <memcpy>
 800c7c2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c7c6:	f8c4 8000 	str.w	r8, [r4]
 800c7ca:	e7e9      	b.n	800c7a0 <__submore+0x48>

0800c7cc <_realloc_r>:
 800c7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d0:	4680      	mov	r8, r0
 800c7d2:	4614      	mov	r4, r2
 800c7d4:	460e      	mov	r6, r1
 800c7d6:	b921      	cbnz	r1, 800c7e2 <_realloc_r+0x16>
 800c7d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7dc:	4611      	mov	r1, r2
 800c7de:	f7ff b9b1 	b.w	800bb44 <_malloc_r>
 800c7e2:	b92a      	cbnz	r2, 800c7f0 <_realloc_r+0x24>
 800c7e4:	f7ff fb18 	bl	800be18 <_free_r>
 800c7e8:	4625      	mov	r5, r4
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7f0:	f000 f81b 	bl	800c82a <_malloc_usable_size_r>
 800c7f4:	4284      	cmp	r4, r0
 800c7f6:	4607      	mov	r7, r0
 800c7f8:	d802      	bhi.n	800c800 <_realloc_r+0x34>
 800c7fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7fe:	d812      	bhi.n	800c826 <_realloc_r+0x5a>
 800c800:	4621      	mov	r1, r4
 800c802:	4640      	mov	r0, r8
 800c804:	f7ff f99e 	bl	800bb44 <_malloc_r>
 800c808:	4605      	mov	r5, r0
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d0ed      	beq.n	800c7ea <_realloc_r+0x1e>
 800c80e:	42bc      	cmp	r4, r7
 800c810:	4622      	mov	r2, r4
 800c812:	4631      	mov	r1, r6
 800c814:	bf28      	it	cs
 800c816:	463a      	movcs	r2, r7
 800c818:	f7ff f95e 	bl	800bad8 <memcpy>
 800c81c:	4631      	mov	r1, r6
 800c81e:	4640      	mov	r0, r8
 800c820:	f7ff fafa 	bl	800be18 <_free_r>
 800c824:	e7e1      	b.n	800c7ea <_realloc_r+0x1e>
 800c826:	4635      	mov	r5, r6
 800c828:	e7df      	b.n	800c7ea <_realloc_r+0x1e>

0800c82a <_malloc_usable_size_r>:
 800c82a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c82e:	1f18      	subs	r0, r3, #4
 800c830:	2b00      	cmp	r3, #0
 800c832:	bfbc      	itt	lt
 800c834:	580b      	ldrlt	r3, [r1, r0]
 800c836:	18c0      	addlt	r0, r0, r3
 800c838:	4770      	bx	lr
	...

0800c83c <round>:
 800c83c:	ec51 0b10 	vmov	r0, r1, d0
 800c840:	b570      	push	{r4, r5, r6, lr}
 800c842:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c846:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800c84a:	2c13      	cmp	r4, #19
 800c84c:	ee10 2a10 	vmov	r2, s0
 800c850:	460b      	mov	r3, r1
 800c852:	dc19      	bgt.n	800c888 <round+0x4c>
 800c854:	2c00      	cmp	r4, #0
 800c856:	da09      	bge.n	800c86c <round+0x30>
 800c858:	3401      	adds	r4, #1
 800c85a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c85e:	d103      	bne.n	800c868 <round+0x2c>
 800c860:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c864:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c868:	2200      	movs	r2, #0
 800c86a:	e028      	b.n	800c8be <round+0x82>
 800c86c:	4d15      	ldr	r5, [pc, #84]	; (800c8c4 <round+0x88>)
 800c86e:	4125      	asrs	r5, r4
 800c870:	ea01 0605 	and.w	r6, r1, r5
 800c874:	4332      	orrs	r2, r6
 800c876:	d00e      	beq.n	800c896 <round+0x5a>
 800c878:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c87c:	fa42 f404 	asr.w	r4, r2, r4
 800c880:	4423      	add	r3, r4
 800c882:	ea23 0305 	bic.w	r3, r3, r5
 800c886:	e7ef      	b.n	800c868 <round+0x2c>
 800c888:	2c33      	cmp	r4, #51	; 0x33
 800c88a:	dd07      	ble.n	800c89c <round+0x60>
 800c88c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c890:	d101      	bne.n	800c896 <round+0x5a>
 800c892:	f7f3 fcfb 	bl	800028c <__adddf3>
 800c896:	ec41 0b10 	vmov	d0, r0, r1
 800c89a:	bd70      	pop	{r4, r5, r6, pc}
 800c89c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800c8a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c8a4:	40f5      	lsrs	r5, r6
 800c8a6:	4228      	tst	r0, r5
 800c8a8:	d0f5      	beq.n	800c896 <round+0x5a>
 800c8aa:	2101      	movs	r1, #1
 800c8ac:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c8b0:	fa01 f404 	lsl.w	r4, r1, r4
 800c8b4:	1912      	adds	r2, r2, r4
 800c8b6:	bf28      	it	cs
 800c8b8:	185b      	addcs	r3, r3, r1
 800c8ba:	ea22 0205 	bic.w	r2, r2, r5
 800c8be:	4619      	mov	r1, r3
 800c8c0:	4610      	mov	r0, r2
 800c8c2:	e7e8      	b.n	800c896 <round+0x5a>
 800c8c4:	000fffff 	.word	0x000fffff

0800c8c8 <_init>:
 800c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ca:	bf00      	nop
 800c8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ce:	bc08      	pop	{r3}
 800c8d0:	469e      	mov	lr, r3
 800c8d2:	4770      	bx	lr

0800c8d4 <_fini>:
 800c8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d6:	bf00      	nop
 800c8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8da:	bc08      	pop	{r3}
 800c8dc:	469e      	mov	lr, r3
 800c8de:	4770      	bx	lr
