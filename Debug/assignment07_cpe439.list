
assignment07_cpe439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800cf0c  0800cf0c  0001cf0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3b0  0800d3b0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3b0  0800d3b0  0001d3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3b8  0800d3b8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3b8  0800d3b8  0001d3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3bc  0800d3bc  0001d3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d3c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006de4  2000007c  0800d43c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20006e60  0800d43c  00026e60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029ad3  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e4c  00000000  00000000  00049b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023d8  00000000  00000000  0004f9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002180  00000000  00000000  00051da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f654  00000000  00000000  00053f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aa3f  00000000  00000000  0008357c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111088  00000000  00000000  000adfbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bf043  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d68  00000000  00000000  001bf094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cef4 	.word	0x0800cef4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800cef4 	.word	0x0800cef4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <TX_task>:
Packets packetdata;
Packets gmpacket;


void TX_task(void *argument)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	packetdata.message[0] = 2;
 8000d88:	4b51      	ldr	r3, [pc, #324]	; (8000ed0 <TX_task+0x150>)
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	701a      	strb	r2, [r3, #0]


	size_t xBytesSent;
	UART_escapes("[2J");
 8000d8e:	4851      	ldr	r0, [pc, #324]	; (8000ed4 <TX_task+0x154>)
 8000d90:	f001 f902 	bl	8001f98 <UART_escapes>
	volatile uint8_t curraddress;
	xTXsem = xSemaphoreCreateBinary();
 8000d94:	2203      	movs	r2, #3
 8000d96:	2100      	movs	r1, #0
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f007 fe7d 	bl	8008a98 <xQueueGenericCreate>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4a4d      	ldr	r2, [pc, #308]	; (8000ed8 <TX_task+0x158>)
 8000da2:	6013      	str	r3, [r2, #0]
	xPrintNodes = xSemaphoreCreateMutex();
 8000da4:	2001      	movs	r0, #1
 8000da6:	f007 feee 	bl	8008b86 <xQueueCreateMutex>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a4b      	ldr	r2, [pc, #300]	; (8000edc <TX_task+0x15c>)
 8000dae:	6013      	str	r3, [r2, #0]
	xTXorRX = xSemaphoreCreateBinary();
 8000db0:	2203      	movs	r2, #3
 8000db2:	2100      	movs	r1, #0
 8000db4:	2001      	movs	r0, #1
 8000db6:	f007 fe6f 	bl	8008a98 <xQueueGenericCreate>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a48      	ldr	r2, [pc, #288]	; (8000ee0 <TX_task+0x160>)
 8000dbe:	6013      	str	r3, [r2, #0]

    if( xTXsem != NULL && xPrintNodes != NULL)
 8000dc0:	4b45      	ldr	r3, [pc, #276]	; (8000ed8 <TX_task+0x158>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d07f      	beq.n	8000ec8 <TX_task+0x148>
 8000dc8:	4b44      	ldr	r3, [pc, #272]	; (8000edc <TX_task+0x15c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d07b      	beq.n	8000ec8 <TX_task+0x148>
    {
		for(;;)
		{
			if(DMorGM==2 || DMorGM==3)
 8000dd0:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <TX_task+0x164>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d003      	beq.n	8000de0 <TX_task+0x60>
 8000dd8:	4b42      	ldr	r3, [pc, #264]	; (8000ee4 <TX_task+0x164>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d114      	bne.n	8000e0a <TX_task+0x8a>
			{
				if(xSemaphoreTake(xPrintNodes, ( TickType_t ) 100 ))
 8000de0:	4b3e      	ldr	r3, [pc, #248]	; (8000edc <TX_task+0x15c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2164      	movs	r1, #100	; 0x64
 8000de6:	4618      	mov	r0, r3
 8000de8:	f008 f9ec 	bl	80091c4 <xQueueSemaphoreTake>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00b      	beq.n	8000e0a <TX_task+0x8a>
				{
					print_message_id();
 8000df2:	f001 f8e9 	bl	8001fc8 <print_message_id>
					DMorGM=0;
 8000df6:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <TX_task+0x164>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
		    		xSemaphoreGive(xPrintNodes);
 8000dfc:	4b37      	ldr	r3, [pc, #220]	; (8000edc <TX_task+0x15c>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	2300      	movs	r3, #0
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	f007 fed7 	bl	8008bb8 <xQueueGenericSend>
				}


			}

			if(xSemaphoreTake( xTXsem, ( TickType_t ) 100 ) == pdTRUE )
 8000e0a:	4b33      	ldr	r3, [pc, #204]	; (8000ed8 <TX_task+0x158>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2164      	movs	r1, #100	; 0x64
 8000e10:	4618      	mov	r0, r3
 8000e12:	f008 f9d7 	bl	80091c4 <xQueueSemaphoreTake>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d1d9      	bne.n	8000dd0 <TX_task+0x50>
			{

				do {

					/* Go to the ready state */
					if (g_xStatus.MC_STATE == MC_STATE_LOCK) {
 8000e1c:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <TX_task+0x168>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b0f      	cmp	r3, #15
 8000e28:	d103      	bne.n	8000e32 <TX_task+0xb2>
						SpiritCmdStrobeReady();
 8000e2a:	2062      	movs	r0, #98	; 0x62
 8000e2c:	f001 fac6 	bl	80023bc <SpiritCmdStrobeCommand>
 8000e30:	e002      	b.n	8000e38 <TX_task+0xb8>
					} else {
						SpiritCmdStrobeSabort();
 8000e32:	2067      	movs	r0, #103	; 0x67
 8000e34:	f001 fac2 	bl	80023bc <SpiritCmdStrobeCommand>
					}

					/* Delay for state transition */
					for (volatile uint8_t i = 0; i != 0xFF; i++);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73bb      	strb	r3, [r7, #14]
 8000e3c:	e004      	b.n	8000e48 <TX_task+0xc8>
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	3301      	adds	r3, #1
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	73bb      	strb	r3, [r7, #14]
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2bff      	cmp	r3, #255	; 0xff
 8000e4e:	d1f6      	bne.n	8000e3e <TX_task+0xbe>

					/* Update the global status register variable */
					SpiritRefreshStatus();
 8000e50:	f003 fc2e 	bl	80046b0 <SpiritRefreshStatus>

				} while (g_xStatus.MC_STATE != MC_STATE_READY);
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <TX_task+0x168>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d1dc      	bne.n	8000e1c <TX_task+0x9c>

//				vTaskSuspend(RXmessage_Handler);
//				if(xSemaphoreTake( xTXorRXmutex, ( TickType_t ) 100 ) == pdTRUE )
//				{

				sscanf(packetdata.address, "%x", &curraddress);
 8000e62:	f107 030f 	add.w	r3, r7, #15
 8000e66:	461a      	mov	r2, r3
 8000e68:	4920      	ldr	r1, [pc, #128]	; (8000eec <TX_task+0x16c>)
 8000e6a:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <TX_task+0x170>)
 8000e6c:	f00b faa8 	bl	800c3c0 <siscanf>
			    SpiritPktCommonSetDestinationAddress(curraddress);
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 fe79 	bl	8002b6c <SpiritPktCommonSetDestinationAddress>


				xTxDoneFlag = READY;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <TX_task+0x174>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]

				// Send the payload
				SPSGRF_StartTx(packetdata.message, strlen(packetdata.message));
 8000e80:	4813      	ldr	r0, [pc, #76]	; (8000ed0 <TX_task+0x150>)
 8000e82:	f7ff f9af 	bl	80001e4 <strlen>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4810      	ldr	r0, [pc, #64]	; (8000ed0 <TX_task+0x150>)
 8000e8e:	f000 fd2b 	bl	80018e8 <SPSGRF_StartTx>
				while(!xTxDoneFlag);
 8000e92:	bf00      	nop
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <TX_task+0x174>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0fb      	beq.n	8000e94 <TX_task+0x114>
				UART_print("\n\r");
 8000e9c:	4816      	ldr	r0, [pc, #88]	; (8000ef8 <TX_task+0x178>)
 8000e9e:	f000 ff19 	bl	8001cd4 <UART_print>
				memset(&packetdata.message[1], '\0', PAYLOAD_SIZE-1);
 8000ea2:	2263      	movs	r2, #99	; 0x63
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4815      	ldr	r0, [pc, #84]	; (8000efc <TX_task+0x17c>)
 8000ea8:	f00b f928 	bl	800c0fc <memset>
				xRxDoneFlag = S_RESET;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <TX_task+0x180>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
				if(packetdata.message[0]==6)packetdata.message[0] =2;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <TX_task+0x150>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b06      	cmp	r3, #6
 8000eba:	d102      	bne.n	8000ec2 <TX_task+0x142>
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <TX_task+0x150>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	701a      	strb	r2, [r3, #0]
				print_message_id();
 8000ec2:	f001 f881 	bl	8001fc8 <print_message_id>
			if(DMorGM==2 || DMorGM==3)
 8000ec6:	e783      	b.n	8000dd0 <TX_task+0x50>
			}

		}

    }
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200000a8 	.word	0x200000a8
 8000ed4:	0800cf0c 	.word	0x0800cf0c
 8000ed8:	2000009c 	.word	0x2000009c
 8000edc:	200000a0 	.word	0x200000a0
 8000ee0:	200000a4 	.word	0x200000a4
 8000ee4:	20000120 	.word	0x20000120
 8000ee8:	20000278 	.word	0x20000278
 8000eec:	0800cf10 	.word	0x0800cf10
 8000ef0:	2000010c 	.word	0x2000010c
 8000ef4:	20000121 	.word	0x20000121
 8000ef8:	0800cf14 	.word	0x0800cf14
 8000efc:	200000a9 	.word	0x200000a9
 8000f00:	20000124 	.word	0x20000124

08000f04 <RX_task>:

void RX_task(void *argument)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b0a1      	sub	sp, #132	; 0x84
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	xpayLoad = xMessageBufferCreate(PAYLOAD_SIZE);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2064      	movs	r0, #100	; 0x64
 8000f12:	f008 fbe9 	bl	80096e8 <xStreamBufferGenericCreate>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a48      	ldr	r2, [pc, #288]	; (800103c <RX_task+0x138>)
 8000f1a:	6013      	str	r3, [r2, #0]

		size_t xBytesSent;
		volatile char payloadl[PAYLOAD_SIZE] = "";
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	2260      	movs	r2, #96	; 0x60
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f00b f8e7 	bl	800c0fc <memset>
		for(;;)
		{



				xRxDoneFlag = READY;
 8000f2e:	4b44      	ldr	r3, [pc, #272]	; (8001040 <RX_task+0x13c>)
 8000f30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f34:	601a      	str	r2, [r3, #0]
					SPSGRF_StartRx();
 8000f36:	f000 fcf8 	bl	800192a <SPSGRF_StartRx>

					while (xRxDoneFlag == READY);
 8000f3a:	bf00      	nop
 8000f3c:	4b40      	ldr	r3, [pc, #256]	; (8001040 <RX_task+0x13c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f44:	d0fa      	beq.n	8000f3c <RX_task+0x38>

					if(xRxDoneFlag == RX_DATA_READY)
 8000f46:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <RX_task+0x13c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d1ef      	bne.n	8000f2e <RX_task+0x2a>
					{
					SPSGRF_GetRxData(payloadl);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fcf2 	bl	800193c <SPSGRF_GetRxData>

					if(payloadl[0]==6)
 8000f58:	7b3b      	ldrb	r3, [r7, #12]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b06      	cmp	r3, #6
 8000f5e:	d151      	bne.n	8001004 <RX_task+0x100>
					{
						if(xSemaphoreTake(xPrintNodes, ( TickType_t ) 100 ))
 8000f60:	4b38      	ldr	r3, [pc, #224]	; (8001044 <RX_task+0x140>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2164      	movs	r1, #100	; 0x64
 8000f66:	4618      	mov	r0, r3
 8000f68:	f008 f92c 	bl	80091c4 <xQueueSemaphoreTake>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0dd      	beq.n	8000f2e <RX_task+0x2a>
						{


							uint8_t sAddress = SpiritPktCommonGetReceivedSourceAddress();
 8000f72:	f001 fe2d 	bl	8002bd0 <SpiritPktCommonGetReceivedSourceAddress>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
							char sAddString[2];
							itoa(sAddress, sAddString, 16);
 8000f7c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000f80:	f107 0108 	add.w	r1, r7, #8
 8000f84:	2210      	movs	r2, #16
 8000f86:	4618      	mov	r0, r3
 8000f88:	f00b f89e 	bl	800c0c8 <itoa>
							People *ptr = FindInList(sAddString);
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fbd3 	bl	800173c <FindInList>
 8000f96:	6778      	str	r0, [r7, #116]	; 0x74
							if(ptr == NULL)
 8000f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d12a      	bne.n	8000ff4 <RX_task+0xf0>
							{
								UART_print("\r");
 8000f9e:	482a      	ldr	r0, [pc, #168]	; (8001048 <RX_task+0x144>)
 8000fa0:	f000 fe98 	bl	8001cd4 <UART_print>
								UART_escapes("[2K"); //clear line
 8000fa4:	4829      	ldr	r0, [pc, #164]	; (800104c <RX_task+0x148>)
 8000fa6:	f000 fff7 	bl	8001f98 <UART_escapes>
								UART_print("New Node: ");
 8000faa:	4829      	ldr	r0, [pc, #164]	; (8001050 <RX_task+0x14c>)
 8000fac:	f000 fe92 	bl	8001cd4 <UART_print>
								UART_print(&payloadl[1]);
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fe8c 	bl	8001cd4 <UART_print>
								UART_print("\n\r");
 8000fbc:	4825      	ldr	r0, [pc, #148]	; (8001054 <RX_task+0x150>)
 8000fbe:	f000 fe89 	bl	8001cd4 <UART_print>
								payloadl[strlen(&payloadl[1])]='\0';
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff f90b 	bl	80001e4 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	3380      	adds	r3, #128	; 0x80
 8000fd2:	443b      	add	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f803 2c74 	strb.w	r2, [r3, #-116]
								People *tempnode = CreateNode(sAddString,&payloadl[1]);
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fb5a 	bl	80016a0 <CreateNode>
 8000fec:	6738      	str	r0, [r7, #112]	; 0x70
								insertLast(tempnode);
 8000fee:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000ff0:	f000 fb74 	bl	80016dc <insertLast>
							}
							xSemaphoreGive(xPrintNodes);
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <RX_task+0x140>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f007 fddb 	bl	8008bb8 <xQueueGenericSend>
 8001002:	e794      	b.n	8000f2e <RX_task+0x2a>


					}
					else{

						xBytesSent = xMessageBufferSend( xpayLoad,
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <RX_task+0x138>)
 8001006:	681c      	ldr	r4, [r3, #0]
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff f8e9 	bl	80001e4 <strlen>
 8001012:	4602      	mov	r2, r0
 8001014:	f107 010c 	add.w	r1, r7, #12
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	4620      	mov	r0, r4
 800101c:	f008 fbf2 	bl	8009804 <xStreamBufferSend>
 8001020:	67f8      	str	r0, [r7, #124]	; 0x7c
								( void * ) payloadl,
								strlen( payloadl), 100);

						if( xBytesSent != strlen( payloadl) )
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f8dc 	bl	80001e4 <strlen>
						{
							/* The string could not be added to the message buffer because there was
		        not enough free space in the buffer. */
						}
						memset(payloadl, '\0', PAYLOAD_SIZE);
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2264      	movs	r2, #100	; 0x64
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f00b f861 	bl	800c0fc <memset>
				xRxDoneFlag = READY;
 800103a:	e778      	b.n	8000f2e <RX_task+0x2a>
 800103c:	20000098 	.word	0x20000098
 8001040:	20000124 	.word	0x20000124
 8001044:	200000a0 	.word	0x200000a0
 8001048:	0800cf18 	.word	0x0800cf18
 800104c:	0800cf1c 	.word	0x0800cf1c
 8001050:	0800cf20 	.word	0x0800cf20
 8001054:	0800cf14 	.word	0x0800cf14

08001058 <print_task>:
		}

}

void print_task(void *argument)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0a0      	sub	sp, #128	; 0x80
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

	char ucRxData[PAYLOAD_SIZE]={'\0'};
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	2260      	movs	r2, #96	; 0x60
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f00b f845 	bl	800c0fc <memset>
	size_t xReceivedBytes;
	const TickType_t xBlockTime = pdMS_TO_TICKS( 20 );
 8001072:	2314      	movs	r3, #20
 8001074:	67fb      	str	r3, [r7, #124]	; 0x7c

	for(;;)
	{
		if(newaddressflag == 255)
 8001076:	4b4c      	ldr	r3, [pc, #304]	; (80011a8 <print_task+0x150>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2bff      	cmp	r3, #255	; 0xff
 800107c:	d107      	bne.n	800108e <print_task+0x36>
		{
			memset(&packetdata.message[1], '\0', PAYLOAD_SIZE-1);
 800107e:	2263      	movs	r2, #99	; 0x63
 8001080:	2100      	movs	r1, #0
 8001082:	484a      	ldr	r0, [pc, #296]	; (80011ac <print_task+0x154>)
 8001084:	f00b f83a 	bl	800c0fc <memset>

				print_linkedList();
 8001088:	f001 f808 	bl	800209c <print_linkedList>
 800108c:	e7f3      	b.n	8001076 <print_task+0x1e>


		}
		else
		{
		memset(ucRxData, '\0', PAYLOAD_SIZE);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2264      	movs	r2, #100	; 0x64
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00b f830 	bl	800c0fc <memset>
		xReceivedBytes = xMessageBufferReceive( xpayLoad,
 800109c:	4b44      	ldr	r3, [pc, #272]	; (80011b0 <print_task+0x158>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	f107 010c 	add.w	r1, r7, #12
 80010a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010a6:	2264      	movs	r2, #100	; 0x64
 80010a8:	f008 fc9e 	bl	80099e8 <xStreamBufferReceive>
 80010ac:	67b8      	str	r0, [r7, #120]	; 0x78
		                                            ( void * ) ucRxData,
		                                            sizeof( ucRxData ),
		                                            xBlockTime );

		    if( xReceivedBytes > 0 && (ucRxData[0]==2))
 80010ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0e0      	beq.n	8001076 <print_task+0x1e>
 80010b4:	7b3b      	ldrb	r3, [r7, #12]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d1dd      	bne.n	8001076 <print_task+0x1e>
		    {

		    	uint8_t currmesslen = strlen(&packetdata.message[1]);
 80010ba:	483c      	ldr	r0, [pc, #240]	; (80011ac <print_task+0x154>)
 80010bc:	f7ff f892 	bl	80001e4 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		    	if(currmesslen>1)
 80010c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d905      	bls.n	80010da <print_task+0x82>
		    	{
	    			UART_print("\r");
 80010ce:	4839      	ldr	r0, [pc, #228]	; (80011b4 <print_task+0x15c>)
 80010d0:	f000 fe00 	bl	8001cd4 <UART_print>
		    		UART_escapes("[2K"); //clear line
 80010d4:	4838      	ldr	r0, [pc, #224]	; (80011b8 <print_task+0x160>)
 80010d6:	f000 ff5f 	bl	8001f98 <UART_escapes>
		    	}
		    	if(xSemaphoreTake(xPrintNodes, ( TickType_t ) 100 ))
 80010da:	4b38      	ldr	r3, [pc, #224]	; (80011bc <print_task+0x164>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2164      	movs	r1, #100	; 0x64
 80010e0:	4618      	mov	r0, r3
 80010e2:	f008 f86f 	bl	80091c4 <xQueueSemaphoreTake>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0c4      	beq.n	8001076 <print_task+0x1e>
		    	{
		    		uint8_t sAddress = SpiritPktCommonGetReceivedSourceAddress();
 80010ec:	f001 fd70 	bl	8002bd0 <SpiritPktCommonGetReceivedSourceAddress>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		    		char sAddString[2];
		    		itoa(sAddress, sAddString, 16);
 80010f6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80010fa:	f107 0108 	add.w	r1, r7, #8
 80010fe:	2210      	movs	r2, #16
 8001100:	4618      	mov	r0, r3
 8001102:	f00a ffe1 	bl	800c0c8 <itoa>

		    		People *ptr = FindInList(sAddString); //used to only print contacts
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fb16 	bl	800173c <FindInList>
 8001110:	6738      	str	r0, [r7, #112]	; 0x70
		    		if(ptr != NULL) //if Null means message is not from a contact
 8001112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001114:	2b00      	cmp	r3, #0
 8001116:	d033      	beq.n	8001180 <print_task+0x128>
		    		{
		    			UART_print("\r");
 8001118:	4826      	ldr	r0, [pc, #152]	; (80011b4 <print_task+0x15c>)
 800111a:	f000 fddb 	bl	8001cd4 <UART_print>
			    		UART_escapes("[2K"); //clear line
 800111e:	4826      	ldr	r0, [pc, #152]	; (80011b8 <print_task+0x160>)
 8001120:	f000 ff3a 	bl	8001f98 <UART_escapes>
		    			if(ucRxData[0]==2 && SpiritPktCommonGetReceivedDestAddress() == MY_ADDRESS) {
 8001124:	7b3b      	ldrb	r3, [r7, #12]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d108      	bne.n	800113c <print_task+0xe4>
 800112a:	f001 fd39 	bl	8002ba0 <SpiritPktCommonGetReceivedDestAddress>
 800112e:	4603      	mov	r3, r0
 8001130:	2bed      	cmp	r3, #237	; 0xed
 8001132:	d103      	bne.n	800113c <print_task+0xe4>

		    				UART_print("DM from ");
 8001134:	4822      	ldr	r0, [pc, #136]	; (80011c0 <print_task+0x168>)
 8001136:	f000 fdcd 	bl	8001cd4 <UART_print>
 800113a:	e005      	b.n	8001148 <print_task+0xf0>
		    			}
		    			else if(ucRxData[0]==2) {
 800113c:	7b3b      	ldrb	r3, [r7, #12]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d102      	bne.n	8001148 <print_task+0xf0>
		    				UART_print("GM from ");
 8001142:	4820      	ldr	r0, [pc, #128]	; (80011c4 <print_task+0x16c>)
 8001144:	f000 fdc6 	bl	8001cd4 <UART_print>
		    			}


		    			UART_print("0x");
 8001148:	481f      	ldr	r0, [pc, #124]	; (80011c8 <print_task+0x170>)
 800114a:	f000 fdc3 	bl	8001cd4 <UART_print>
		    			UART_print(sAddString);
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4618      	mov	r0, r3
 8001154:	f000 fdbe 	bl	8001cd4 <UART_print>
		    			UART_print("  ");
 8001158:	481c      	ldr	r0, [pc, #112]	; (80011cc <print_task+0x174>)
 800115a:	f000 fdbb 	bl	8001cd4 <UART_print>
		    			UART_print(ptr->Name);
 800115e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001160:	3304      	adds	r3, #4
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fdb6 	bl	8001cd4 <UART_print>
		    			UART_print(": ");
 8001168:	4819      	ldr	r0, [pc, #100]	; (80011d0 <print_task+0x178>)
 800116a:	f000 fdb3 	bl	8001cd4 <UART_print>

		    			UART_print(&ucRxData[1]);
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	3301      	adds	r3, #1
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fdad 	bl	8001cd4 <UART_print>
		    			UART_print("\n");
 800117a:	4816      	ldr	r0, [pc, #88]	; (80011d4 <print_task+0x17c>)
 800117c:	f000 fdaa 	bl	8001cd4 <UART_print>
		    		}
		    		if(currmesslen>1)
 8001180:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001184:	2b01      	cmp	r3, #1
 8001186:	d905      	bls.n	8001194 <print_task+0x13c>
		    		{
		    			print_message_id();
 8001188:	f000 ff1e 	bl	8001fc8 <print_message_id>
		    			UART_print(&packetdata.message[1]);
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <print_task+0x154>)
 800118e:	f000 fda1 	bl	8001cd4 <UART_print>
 8001192:	e001      	b.n	8001198 <print_task+0x140>
		    		}
		    		else
		    		{
		    			print_message_id();
 8001194:	f000 ff18 	bl	8001fc8 <print_message_id>
		    		}
		    		xSemaphoreGive(xPrintNodes);
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <print_task+0x164>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	2300      	movs	r3, #0
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	f007 fd09 	bl	8008bb8 <xQueueGenericSend>
		if(newaddressflag == 255)
 80011a6:	e766      	b.n	8001076 <print_task+0x1e>
 80011a8:	2000026c 	.word	0x2000026c
 80011ac:	200000a9 	.word	0x200000a9
 80011b0:	20000098 	.word	0x20000098
 80011b4:	0800cf18 	.word	0x0800cf18
 80011b8:	0800cf1c 	.word	0x0800cf1c
 80011bc:	200000a0 	.word	0x200000a0
 80011c0:	0800cf2c 	.word	0x0800cf2c
 80011c4:	0800cf38 	.word	0x0800cf38
 80011c8:	0800cf44 	.word	0x0800cf44
 80011cc:	0800cf48 	.word	0x0800cf48
 80011d0:	0800cf4c 	.word	0x0800cf4c
 80011d4:	0800cf50 	.word	0x0800cf50

080011d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <MX_FREERTOS_Init+0x18>)
 80011de:	2100      	movs	r1, #0
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_FREERTOS_Init+0x1c>)
 80011e2:	f007 f9e3 	bl	80085ac <osThreadNew>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a03      	ldr	r2, [pc, #12]	; (80011f8 <MX_FREERTOS_Init+0x20>)
 80011ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	0800d040 	.word	0x0800d040
 80011f4:	080011fd 	.word	0x080011fd
 80011f8:	20000110 	.word	0x20000110

080011fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001204:	2001      	movs	r0, #1
 8001206:	f007 fa63 	bl	80086d0 <osDelay>
 800120a:	e7fb      	b.n	8001204 <StartDefaultTask+0x8>

0800120c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	4b44      	ldr	r3, [pc, #272]	; (8001334 <MX_GPIO_Init+0x128>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a43      	ldr	r2, [pc, #268]	; (8001334 <MX_GPIO_Init+0x128>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b41      	ldr	r3, [pc, #260]	; (8001334 <MX_GPIO_Init+0x128>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	4b3e      	ldr	r3, [pc, #248]	; (8001334 <MX_GPIO_Init+0x128>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a3d      	ldr	r2, [pc, #244]	; (8001334 <MX_GPIO_Init+0x128>)
 8001240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <MX_GPIO_Init+0x128>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <MX_GPIO_Init+0x128>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	4a37      	ldr	r2, [pc, #220]	; (8001334 <MX_GPIO_Init+0x128>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125e:	4b35      	ldr	r3, [pc, #212]	; (8001334 <MX_GPIO_Init+0x128>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b32      	ldr	r3, [pc, #200]	; (8001334 <MX_GPIO_Init+0x128>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a31      	ldr	r2, [pc, #196]	; (8001334 <MX_GPIO_Init+0x128>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <MX_GPIO_Init+0x128>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SDN_GPIO_Port, SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f003 fee6 	bl	800505c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	4828      	ldr	r0, [pc, #160]	; (8001338 <MX_GPIO_Init+0x12c>)
 8001296:	f003 fee1 	bl	800505c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800129a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4822      	ldr	r0, [pc, #136]	; (800133c <MX_GPIO_Init+0x130>)
 80012b2:	f003 fd29 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	481c      	ldr	r0, [pc, #112]	; (800133c <MX_GPIO_Init+0x130>)
 80012cc:	f003 fd1c 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin;
 80012d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPIRIT1_SDN_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ec:	f003 fd0c 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 80012f0:	2340      	movs	r3, #64	; 0x40
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	480c      	ldr	r0, [pc, #48]	; (8001338 <MX_GPIO_Init+0x12c>)
 8001308:	f003 fcfe 	bl	8004d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2105      	movs	r1, #5
 8001310:	2017      	movs	r0, #23
 8001312:	f003 fcc1 	bl	8004c98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001316:	2017      	movs	r0, #23
 8001318:	f003 fcda 	bl	8004cd0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	2105      	movs	r1, #5
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	f003 fcb9 	bl	8004c98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001326:	2028      	movs	r0, #40	; 0x28
 8001328:	f003 fcd2 	bl	8004cd0 <HAL_NVIC_EnableIRQ>

}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40021000 	.word	0x40021000
 8001338:	48000400 	.word	0x48000400
 800133c:	48000800 	.word	0x48000800

08001340 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b09c      	sub	sp, #112	; 0x70
 8001344:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */

	char payloadRX[PAYLOAD_SIZE] = "";
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2260      	movs	r2, #96	; 0x60
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f00a fed3 	bl	800c0fc <memset>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001356:	f003 fb5f 	bl	8004a18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800135a:	f000 f85b 	bl	8001414 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800135e:	f7ff ff55 	bl	800120c <MX_GPIO_Init>
	MX_SPI1_Init();
 8001362:	f000 f8ff 	bl	8001564 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8001366:	f000 fc15 	bl	8001b94 <MX_USART2_UART_Init>
	UART_escapes("[H");
 800136a:	4821      	ldr	r0, [pc, #132]	; (80013f0 <main+0xb0>)
 800136c:	f000 fe14 	bl	8001f98 <UART_escapes>
	/* USER CODE BEGIN 2 */

	SPSGRF_Init();
 8001370:	f000 fa08 	bl	8001784 <SPSGRF_Init>
    SpiritPktCommonSetDestinationAddress(0xFF);
 8001374:	20ff      	movs	r0, #255	; 0xff
 8001376:	f001 fbf9 	bl	8002b6c <SpiritPktCommonSetDestinationAddress>
	SpiritPktStackSetPayloadLength(PAYLOAD_SIZE);
 800137a:	2064      	movs	r0, #100	; 0x64
 800137c:	f001 fd7e 	bl	8002e7c <SpiritPktStackSetPayloadLength>
	//    SpiritPktBasicSetDestinationAddress(0x44);

	retVal = xTaskCreate(TX_task, "TX task", 5*configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+4, &TXmessage_Handler);
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <main+0xb4>)
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	2304      	movs	r3, #4
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2300      	movs	r3, #0
 800138a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800138e:	491a      	ldr	r1, [pc, #104]	; (80013f8 <main+0xb8>)
 8001390:	481a      	ldr	r0, [pc, #104]	; (80013fc <main+0xbc>)
 8001392:	f008 fd8c 	bl	8009eae <xTaskCreate>
 8001396:	6678      	str	r0, [r7, #100]	; 0x64
	if(retVal!=pdPASS){while(1);}//task creation failed
 8001398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800139a:	2b01      	cmp	r3, #1
 800139c:	d000      	beq.n	80013a0 <main+0x60>
 800139e:	e7fe      	b.n	800139e <main+0x5e>

	retVal = xTaskCreate(RX_task, "RX task", 2*configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+3, &RXmessage_Handler);
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <main+0xc0>)
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	2303      	movs	r3, #3
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2300      	movs	r3, #0
 80013aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ae:	4915      	ldr	r1, [pc, #84]	; (8001404 <main+0xc4>)
 80013b0:	4815      	ldr	r0, [pc, #84]	; (8001408 <main+0xc8>)
 80013b2:	f008 fd7c 	bl	8009eae <xTaskCreate>
 80013b6:	6678      	str	r0, [r7, #100]	; 0x64
	if(retVal!=pdPASS){while(1);}//task creation failed
 80013b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d000      	beq.n	80013c0 <main+0x80>
 80013be:	e7fe      	b.n	80013be <main+0x7e>


	retVal = xTaskCreate(print_task, "TX task", 2*configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+3, &printmessage_Handler);
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <main+0xcc>)
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	2303      	movs	r3, #3
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ce:	490a      	ldr	r1, [pc, #40]	; (80013f8 <main+0xb8>)
 80013d0:	480f      	ldr	r0, [pc, #60]	; (8001410 <main+0xd0>)
 80013d2:	f008 fd6c 	bl	8009eae <xTaskCreate>
 80013d6:	6678      	str	r0, [r7, #100]	; 0x64
	if(retVal!=pdPASS){while(1);}//task creation failed
 80013d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d000      	beq.n	80013e0 <main+0xa0>
 80013de:	e7fe      	b.n	80013de <main+0x9e>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80013e0:	f007 f89a 	bl	8008518 <osKernelInitialize>
	MX_FREERTOS_Init();
 80013e4:	f7ff fef8 	bl	80011d8 <MX_FREERTOS_Init>


	/* Start scheduler */
	osKernelStart();
 80013e8:	f007 f8ba 	bl	8008560 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	while (1)
 80013ec:	e7fe      	b.n	80013ec <main+0xac>
 80013ee:	bf00      	nop
 80013f0:	0800cf60 	.word	0x0800cf60
 80013f4:	20000114 	.word	0x20000114
 80013f8:	0800cf64 	.word	0x0800cf64
 80013fc:	08000d81 	.word	0x08000d81
 8001400:	20000118 	.word	0x20000118
 8001404:	0800cf6c 	.word	0x0800cf6c
 8001408:	08000f05 	.word	0x08000f05
 800140c:	2000011c 	.word	0x2000011c
 8001410:	08001059 	.word	0x08001059

08001414 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b096      	sub	sp, #88	; 0x58
 8001418:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	2244      	movs	r2, #68	; 0x44
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f00a fe6a 	bl	800c0fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	463b      	mov	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001436:	f44f 7000 	mov.w	r0, #512	; 0x200
 800143a:	f003 fe4d 	bl	80050d8 <HAL_PWREx_ControlVoltageScaling>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001444:	f000 f888 	bl	8001558 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001448:	2302      	movs	r3, #2
 800144a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001450:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001452:	2310      	movs	r3, #16
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001456:	2302      	movs	r3, #2
 8001458:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800145a:	2302      	movs	r3, #2
 800145c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800145e:	2301      	movs	r3, #1
 8001460:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001462:	230a      	movs	r3, #10
 8001464:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001466:	2307      	movs	r3, #7
 8001468:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800146a:	2302      	movs	r3, #2
 800146c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800146e:	2302      	movs	r3, #2
 8001470:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4618      	mov	r0, r3
 8001478:	f003 fe84 	bl	8005184 <HAL_RCC_OscConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8001482:	f000 f869 	bl	8001558 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001486:	230f      	movs	r3, #15
 8001488:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148a:	2303      	movs	r3, #3
 800148c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	2104      	movs	r1, #4
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 fa4c 	bl	800593c <HAL_RCC_ClockConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80014aa:	f000 f855 	bl	8001558 <Error_Handler>
	}
}
 80014ae:	bf00      	nop
 80014b0:	3758      	adds	r7, #88	; 0x58
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_GPIO_EXTI_Callback>:

///* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
	SpiritIrqs xIrqStatus;

	if (GPIO_Pin != SPIRIT1_GPIO3_Pin)
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	2b80      	cmp	r3, #128	; 0x80
 80014c6:	d12c      	bne.n	8001522 <HAL_GPIO_EXTI_Callback+0x6a>
	{
		return;
	}

	SpiritIrqGetStatus(&xIrqStatus);
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 f843 	bl	8002558 <SpiritIrqGetStatus>
	if (xIrqStatus.IRQ_TX_DATA_SENT)
 80014d2:	7b3b      	ldrb	r3, [r7, #12]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		xTxDoneFlag = S_SET;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <HAL_GPIO_EXTI_Callback+0x74>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_READY)
 80014e4:	7b3b      	ldrb	r3, [r7, #12]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		xRxDoneFlag = RX_DATA_READY;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_GPIO_EXTI_Callback+0x78>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_DISC)
 80014f6:	7b3b      	ldrb	r3, [r7, #12]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d004      	beq.n	800150c <HAL_GPIO_EXTI_Callback+0x54>
	{
		SpiritCmdStrobeRx();
 8001502:	f001 fa89 	bl	8002a18 <SpiritManagementWaCmdStrobeRx>
 8001506:	2061      	movs	r0, #97	; 0x61
 8001508:	f000 ff58 	bl	80023bc <SpiritCmdStrobeCommand>

	}
	if (xIrqStatus.IRQ_RX_TIMEOUT)
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_GPIO_EXTI_Callback+0x6c>
		{
		xRxDoneFlag = RX_TIMEOUT;
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_GPIO_EXTI_Callback+0x78>)
 800151a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e000      	b.n	8001524 <HAL_GPIO_EXTI_Callback+0x6c>
		return;
 8001522:	bf00      	nop

		}

}
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000121 	.word	0x20000121
 8001530:	20000124 	.word	0x20000124

08001534 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d101      	bne.n	800154a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001546:	f003 fa87 	bl	8004a58 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40001000 	.word	0x40001000

08001558 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001560:	e7fe      	b.n	8001560 <Error_Handler+0x8>
	...

08001564 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <MX_SPI1_Init+0x74>)
 800156a:	4a1c      	ldr	r2, [pc, #112]	; (80015dc <MX_SPI1_Init+0x78>)
 800156c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_SPI1_Init+0x74>)
 8001570:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001574:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <MX_SPI1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_SPI1_Init+0x74>)
 800157e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001582:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_SPI1_Init+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <MX_SPI1_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_SPI1_Init+0x74>)
 8001592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001596:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_SPI1_Init+0x74>)
 800159a:	2208      	movs	r2, #8
 800159c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_SPI1_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_SPI1_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_SPI1_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_SPI1_Init+0x74>)
 80015b2:	2207      	movs	r2, #7
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_SPI1_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_SPI1_Init+0x74>)
 80015be:	2208      	movs	r2, #8
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_SPI1_Init+0x74>)
 80015c4:	f005 f8cc 	bl	8006760 <HAL_SPI_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015ce:	f7ff ffc3 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000128 	.word	0x20000128
 80015dc:	40013000 	.word	0x40013000

080015e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a25      	ldr	r2, [pc, #148]	; (8001694 <HAL_SPI_MspInit+0xb4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d144      	bne.n	800168c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001602:	4b25      	ldr	r3, [pc, #148]	; (8001698 <HAL_SPI_MspInit+0xb8>)
 8001604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001606:	4a24      	ldr	r2, [pc, #144]	; (8001698 <HAL_SPI_MspInit+0xb8>)
 8001608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800160c:	6613      	str	r3, [r2, #96]	; 0x60
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_SPI_MspInit+0xb8>)
 8001610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <HAL_SPI_MspInit+0xb8>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <HAL_SPI_MspInit+0xb8>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <HAL_SPI_MspInit+0xb8>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_SPI_MspInit+0xb8>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	4a18      	ldr	r2, [pc, #96]	; (8001698 <HAL_SPI_MspInit+0xb8>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <HAL_SPI_MspInit+0xb8>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800164a:	23c0      	movs	r3, #192	; 0xc0
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800165a:	2305      	movs	r3, #5
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001668:	f003 fb4e 	bl	8004d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800166c:	2308      	movs	r3, #8
 800166e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800167c:	2305      	movs	r3, #5
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <HAL_SPI_MspInit+0xbc>)
 8001688:	f003 fb3e 	bl	8004d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40013000 	.word	0x40013000
 8001698:	40021000 	.word	0x40021000
 800169c:	48000400 	.word	0x48000400

080016a0 <CreateNode>:
People *last = NULL;

People *this = NULL;

People *CreateNode(char *address, char *name)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
    People *link = (People*) malloc(sizeof(People));
 80016aa:	206c      	movs	r0, #108	; 0x6c
 80016ac:	f00a fd10 	bl	800c0d0 <malloc>
 80016b0:	4603      	mov	r3, r0
 80016b2:	60fb      	str	r3, [r7, #12]
    link->next =NULL;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	669a      	str	r2, [r3, #104]	; 0x68
    strcpy(link->address, address);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4618      	mov	r0, r3
 80016c0:	f00a feac 	bl	800c41c <strcpy>
    strcpy(link->Name, name);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3304      	adds	r3, #4
 80016c8:	6839      	ldr	r1, [r7, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00a fea6 	bl	800c41c <strcpy>


    return link;
 80016d0:	68fb      	ldr	r3, [r7, #12]

}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <insertLast>:

void insertLast(People *link)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

    if(sizeList()==0)
 80016e4:	f000 f81e 	bl	8001724 <sizeList>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d103      	bne.n	80016f6 <insertLast+0x1a>
    {
      //make it the last link
      head = link;
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <insertLast+0x3c>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e003      	b.n	80016fe <insertLast+0x22>
    }
    else
    {
      //make link a new last link
      last->next = link;
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <insertLast+0x40>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	669a      	str	r2, [r3, #104]	; 0x68

    }

   //point last to new last node
   last = link;
 80016fe:	4a07      	ldr	r2, [pc, #28]	; (800171c <insertLast+0x40>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6013      	str	r3, [r2, #0]

   listLength++;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <insertLast+0x44>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <insertLast+0x44>)
 800170e:	701a      	strb	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000190 	.word	0x20000190
 800171c:	20000194 	.word	0x20000194
 8001720:	2000018c 	.word	0x2000018c

08001724 <sizeList>:

uint8_t sizeList(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
    return listLength;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <sizeList+0x14>)
 800172a:	781b      	ldrb	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	2000018c 	.word	0x2000018c

0800173c <FindInList>:

People* FindInList (char *keyAddress)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    //start from first link
    People *ptr = head;
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <FindInList+0x44>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]

    if (ptr == NULL) return NULL;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10a      	bne.n	8001766 <FindInList+0x2a>
 8001750:	2300      	movs	r3, #0
 8001752:	e011      	b.n	8001778 <FindInList+0x3c>

    while (strcmp(ptr->address,keyAddress) != EQUAL_STRINGS)//!=0
    {
        if(ptr->next == NULL) return NULL;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <FindInList+0x24>
 800175c:	2300      	movs	r3, #0
 800175e:	e00b      	b.n	8001778 <FindInList+0x3c>
        else ptr = ptr -> next;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001764:	60fb      	str	r3, [r7, #12]
    while (strcmp(ptr->address,keyAddress) != EQUAL_STRINGS)//!=0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe fd30 	bl	80001d0 <strcmp>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ee      	bne.n	8001754 <FindInList+0x18>
    }

    return ptr;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000190 	.word	0x20000190

08001784 <SPSGRF_Init>:

void SPSGRF_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b090      	sub	sp, #64	; 0x40
 8001788:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktStackInit xStackInit;
  PktStackAddressesInit xStackAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 800178a:	f002 ffb3 	bl	80046f4 <RadioSpiInit>

  // restart the radio
  SpiritEnterShutdown();
 800178e:	f003 f929 	bl	80049e4 <RadioEnterShutdown>
  SpiritExitShutdown();
 8001792:	f003 f932 	bl	80049fa <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 8001796:	f001 f96f 	bl	8002a78 <SpiritManagementWaExtraCurrent>

  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 800179a:	2300      	movs	r3, #0
 800179c:	71fb      	strb	r3, [r7, #7]
 800179e:	e004      	b.n	80017aa <SPSGRF_Init+0x26>
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	3301      	adds	r3, #1
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2bff      	cmp	r3, #255	; 0xff
 80017b0:	d1f6      	bne.n	80017a0 <SPSGRF_Init+0x1c>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 80017b2:	f002 ff7d 	bl	80046b0 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 80017b6:	4b46      	ldr	r3, [pc, #280]	; (80018d0 <SPSGRF_Init+0x14c>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d1ea      	bne.n	800179a <SPSGRF_Init+0x16>

  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 80017c4:	2300      	movs	r3, #0
 80017c6:	84bb      	strh	r3, [r7, #36]	; 0x24
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 80017c8:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <SPSGRF_Init+0x150>)
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 80017cc:	4b42      	ldr	r3, [pc, #264]	; (80018d8 <SPSGRF_Init+0x154>)
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  xRadioInit.lDatarate = DATARATE;
 80017dc:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 80017e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
  xRadioInit.lBandwidth = BANDWIDTH;
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <SPSGRF_Init+0x154>)
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 80017ec:	483b      	ldr	r0, [pc, #236]	; (80018dc <SPSGRF_Init+0x158>)
 80017ee:	f002 fdad 	bl	800434c <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	4618      	mov	r0, r3
 80017f8:	f001 fbfa 	bl	8002ff0 <SpiritRadioInit>

  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 80017fc:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80018e0 <SPSGRF_Init+0x15c>
 8001800:	2007      	movs	r0, #7
 8001802:	f002 fc3f 	bl	8004084 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 8001806:	2007      	movs	r0, #7
 8001808:	f002 fc92 	bl	8004130 <SpiritRadioSetPALevelMaxIndex>

  // Configure packet handler to use the Basic packet format
  xStackInit.xPreambleLength = PREAMBLE_LENGTH;
 800180c:	2318      	movs	r3, #24
 800180e:	753b      	strb	r3, [r7, #20]
  xStackInit.xSyncLength = SYNC_LENGTH;
 8001810:	2306      	movs	r3, #6
 8001812:	757b      	strb	r3, [r7, #21]
  xStackInit.lSyncWords = SYNC_WORD;
 8001814:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 8001818:	61bb      	str	r3, [r7, #24]
  xStackInit.xFixVarLength = LENGTH_TYPE;
 800181a:	2301      	movs	r3, #1
 800181c:	773b      	strb	r3, [r7, #28]
  xStackInit.cPktLengthWidth = LENGTH_WIDTH;
 800181e:	2307      	movs	r3, #7
 8001820:	777b      	strb	r3, [r7, #29]
  xStackInit.xCrcMode = CRC_MODE;
 8001822:	2320      	movs	r3, #32
 8001824:	77bb      	strb	r3, [r7, #30]
  xStackInit.xControlLength = CONTROL_LENGTH;
 8001826:	2300      	movs	r3, #0
 8001828:	77fb      	strb	r3, [r7, #31]
  xStackInit.xFec = EN_FEC;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 3020 	strb.w	r3, [r7, #32]
  xStackInit.xDataWhitening = EN_WHITENING;
 8001830:	2301      	movs	r3, #1
 8001832:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  SpiritPktStackInit(&xStackInit);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4618      	mov	r0, r3
 800183c:	f001 f9e0 	bl	8002c00 <SpiritPktStackInit>

  // Configure destination address criteria for automatic packet filtering
  xStackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8001840:	2301      	movs	r3, #1
 8001842:	733b      	strb	r3, [r7, #12]
  xStackAddress.cMyAddress = MY_ADDRESS;
 8001844:	23ed      	movs	r3, #237	; 0xed
 8001846:	737b      	strb	r3, [r7, #13]
  xStackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8001848:	2301      	movs	r3, #1
 800184a:	73bb      	strb	r3, [r7, #14]
  xStackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 800184c:	23ee      	movs	r3, #238	; 0xee
 800184e:	73fb      	strb	r3, [r7, #15]
  xStackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 8001850:	2301      	movs	r3, #1
 8001852:	743b      	strb	r3, [r7, #16]
  xStackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8001854:	23ff      	movs	r3, #255	; 0xff
 8001856:	747b      	strb	r3, [r7, #17]
  SpiritPktStackAddressesInit(&xStackAddress);
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4618      	mov	r0, r3
 800185e:	f001 fa9f 	bl	8002da0 <SpiritPktStackAddressesInit>

  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 8001862:	2302      	movs	r3, #2
 8001864:	723b      	strb	r3, [r7, #8]
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 8001866:	2302      	movs	r3, #2
 8001868:	727b      	strb	r3, [r7, #9]
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 800186a:	2300      	movs	r3, #0
 800186c:	72bb      	strb	r3, [r7, #10]
  SpiritGpioInit(&xGpioInit);
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	4618      	mov	r0, r3
 8001874:	f000 fdba 	bl	80023ec <SpiritGpioInit>

  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 8001878:	2000      	movs	r0, #0
 800187a:	f000 fddb 	bl	8002434 <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 800187e:	2101      	movs	r1, #1
 8001880:	2004      	movs	r0, #4
 8001882:	f000 fe03 	bl	800248c <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 8001886:	2101      	movs	r1, #1
 8001888:	2001      	movs	r0, #1
 800188a:	f000 fdff 	bl	800248c <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 800188e:	2101      	movs	r1, #1
 8001890:	2002      	movs	r0, #2
 8001892:	f000 fdfb 	bl	800248c <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 8001896:	2101      	movs	r1, #1
 8001898:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800189c:	f000 fdf6 	bl	800248c <SpiritIrq>
  SpiritIrqClearStatus();
 80018a0:	f000 fe8c 	bl	80025bc <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f001 fb4f 	bl	8002f48 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f001 fb14 	bl	8002ed8 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 80018b0:	f06f 0077 	mvn.w	r0, #119	; 0x77
 80018b4:	f001 fb7c 	bl	8002fb0 <SpiritQiSetRssiThresholddBm>

  // Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
  SpiritTimerSetRxTimeoutMs(RECEIVE_TIMEOUT);
 80018b8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80018e4 <SPSGRF_Init+0x160>
 80018bc:	f002 fd56 	bl	800436c <SpiritTimerSetRxTimeoutMs>
#else
  SET_INFINITE_RX_TIMEOUT();
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 80018c0:	2002      	movs	r0, #2
 80018c2:	f002 fead 	bl	8004620 <SpiritTimerSetRxTimeoutStopCondition>
}
 80018c6:	bf00      	nop
 80018c8:	3740      	adds	r7, #64	; 0x40
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000278 	.word	0x20000278
 80018d4:	3689cac0 	.word	0x3689cac0
 80018d8:	000186a0 	.word	0x000186a0
 80018dc:	02faf080 	.word	0x02faf080
 80018e0:	4139999a 	.word	0x4139999a
 80018e4:	44fa0000 	.word	0x44fa0000

080018e8 <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 80018f4:	2072      	movs	r0, #114	; 0x72
 80018f6:	f000 fd61 	bl	80023bc <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	2b60      	cmp	r3, #96	; 0x60
 80018fe:	bf28      	it	cs
 8001900:	2360      	movcs	r3, #96	; 0x60
 8001902:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4618      	mov	r0, r3
 800190a:	f002 ffdb 	bl	80048c4 <RadioSpiWriteFifo>
  SpiritPktStackSetPayloadLength(txLen);
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	b29b      	uxth	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f001 fab2 	bl	8002e7c <SpiritPktStackSetPayloadLength>
  SpiritCmdStrobeTx();
 8001918:	f001 f846 	bl	80029a8 <SpiritManagementWaCmdStrobeTx>
 800191c:	2060      	movs	r0, #96	; 0x60
 800191e:	f000 fd4d 	bl	80023bc <SpiritCmdStrobeCommand>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 800192e:	f001 f873 	bl	8002a18 <SpiritManagementWaCmdStrobeRx>
 8001932:	2061      	movs	r0, #97	; 0x61
 8001934:	f000 fd42 	bl	80023bc <SpiritCmdStrobeCommand>
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}

0800193c <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 8001944:	f000 fe52 	bl	80025ec <SpiritLinearFifoReadNumElementsRxFifo>
 8001948:	4603      	mov	r3, r0
 800194a:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4618      	mov	r0, r3
 8001952:	f002 ffff 	bl	8004954 <RadioSpiReadFifo>

  return len;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_MspInit+0x4c>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <HAL_MspInit+0x4c>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6613      	str	r3, [r2, #96]	; 0x60
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_MspInit+0x4c>)
 8001974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_MspInit+0x4c>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_MspInit+0x4c>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6593      	str	r3, [r2, #88]	; 0x58
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_MspInit+0x4c>)
 800198c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	210f      	movs	r1, #15
 800199a:	f06f 0001 	mvn.w	r0, #1
 800199e:	f003 f97b 	bl	8004c98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08e      	sub	sp, #56	; 0x38
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019be:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <HAL_InitTick+0xe0>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	4a33      	ldr	r2, [pc, #204]	; (8001a90 <HAL_InitTick+0xe0>)
 80019c4:	f043 0310 	orr.w	r3, r3, #16
 80019c8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_InitTick+0xe0>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019d6:	f107 0210 	add.w	r2, r7, #16
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f004 f96f 	bl	8005cc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d103      	bne.n	80019f8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019f0:	f004 f93c 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 80019f4:	6378      	str	r0, [r7, #52]	; 0x34
 80019f6:	e004      	b.n	8001a02 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019f8:	f004 f938 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 80019fc:	4603      	mov	r3, r0
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a04:	4a23      	ldr	r2, [pc, #140]	; (8001a94 <HAL_InitTick+0xe4>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9b      	lsrs	r3, r3, #18
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_InitTick+0xe8>)
 8001a12:	4a22      	ldr	r2, [pc, #136]	; (8001a9c <HAL_InitTick+0xec>)
 8001a14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_InitTick+0xe8>)
 8001a18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a1c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a1e:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <HAL_InitTick+0xe8>)
 8001a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a22:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a24:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <HAL_InitTick+0xe8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_InitTick+0xe8>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_InitTick+0xe8>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a36:	4818      	ldr	r0, [pc, #96]	; (8001a98 <HAL_InitTick+0xe8>)
 8001a38:	f005 fda2 	bl	8007580 <HAL_TIM_Base_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d11b      	bne.n	8001a82 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a4a:	4813      	ldr	r0, [pc, #76]	; (8001a98 <HAL_InitTick+0xe8>)
 8001a4c:	f005 fdfa 	bl	8007644 <HAL_TIM_Base_Start_IT>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d111      	bne.n	8001a82 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a5e:	2036      	movs	r0, #54	; 0x36
 8001a60:	f003 f936 	bl	8004cd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b0f      	cmp	r3, #15
 8001a68:	d808      	bhi.n	8001a7c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	2036      	movs	r0, #54	; 0x36
 8001a70:	f003 f912 	bl	8004c98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_InitTick+0xf0>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e002      	b.n	8001a82 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3738      	adds	r7, #56	; 0x38
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	431bde83 	.word	0x431bde83
 8001a98:	20000198 	.word	0x20000198
 8001a9c:	40001000 	.word	0x40001000
 8001aa0:	2000000c 	.word	0x2000000c

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <NMI_Handler+0x4>

08001aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <BusFault_Handler+0x4>

08001abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <UsageFault_Handler+0x4>

08001ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 8001ad4:	2080      	movs	r0, #128	; 0x80
 8001ad6:	f003 fad9 	bl	800508c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}

08001ade <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ae2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ae6:	f003 fad1 	bl	800508c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <TIM6_DAC_IRQHandler+0x10>)
 8001af6:	f005 fe15 	bl	8007724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000198 	.word	0x20000198

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f00a fa86 	bl	800c044 <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20018000 	.word	0x20018000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	200001e4 	.word	0x200001e4
 8001b6c:	20006e60 	.word	0x20006e60

08001b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <MX_USART2_UART_Init>:
uint8_t newaddresscount;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
	  huart2.Instance = USART2;
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <MX_USART2_UART_Init+0x5c>)
 8001b9a:	4a16      	ldr	r2, [pc, #88]	; (8001bf4 <MX_USART2_UART_Init+0x60>)
 8001b9c:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <MX_USART2_UART_Init+0x5c>)
 8001ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba4:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <MX_USART2_UART_Init+0x5c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <MX_USART2_UART_Init+0x5c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <MX_USART2_UART_Init+0x5c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <MX_USART2_UART_Init+0x5c>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_USART2_UART_Init+0x5c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <MX_USART2_UART_Init+0x5c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <MX_USART2_UART_Init+0x5c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <MX_USART2_UART_Init+0x5c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 8001bd6:	b662      	cpsie	i
}
 8001bd8:	bf00      	nop
	  __enable_irq();

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_USART2_UART_Init+0x5c>)
 8001bdc:	f005 ffa2 	bl	8007b24 <HAL_UART_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001be6:	f7ff fcb7 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200001e8 	.word	0x200001e8
 8001bf4:	40004400 	.word	0x40004400

08001bf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0ac      	sub	sp, #176	; 0xb0
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2288      	movs	r2, #136	; 0x88
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f00a fa6f 	bl	800c0fc <memset>
  if(uartHandle->Instance==USART2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <HAL_UART_MspInit+0xd0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d14b      	bne.n	8001cc0 <HAL_UART_MspInit+0xc8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 f8d7 	bl	8005de8 <HAL_RCCEx_PeriphCLKConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c40:	f7ff fc8a 	bl	8001558 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_UART_MspInit+0xd4>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <HAL_UART_MspInit+0xd4>)
 8001c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_UART_MspInit+0xd4>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_UART_MspInit+0xd4>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	4a1a      	ldr	r2, [pc, #104]	; (8001ccc <HAL_UART_MspInit+0xd4>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_UART_MspInit+0xd4>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c74:	230c      	movs	r3, #12
 8001c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f003 f834 	bl	8004d08 <HAL_GPIO_Init>
    __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_UART_MspInit+0xd8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_UART_MspInit+0xd8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0220 	orr.w	r2, r2, #32
 8001cae:	601a      	str	r2, [r3, #0]
    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2105      	movs	r1, #5
 8001cb4:	2026      	movs	r0, #38	; 0x26
 8001cb6:	f002 ffef 	bl	8004c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cba:	2026      	movs	r0, #38	; 0x26
 8001cbc:	f003 f808 	bl	8004cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	37b0      	adds	r7, #176	; 0xb0
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40004400 	.word	0x40004400
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	200001e8 	.word	0x200001e8

08001cd4 <UART_print>:
}

/* USER CODE BEGIN 1 */

void UART_print(char *outputstring)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	81fb      	strh	r3, [r7, #14]
 8001ce0:	e010      	b.n	8001d04 <UART_print+0x30>
	{
		while(!(USART2->ISR & USART_ISR_TXE)); //Transmit data register empty, using negation since value of 0 means data has not been transferred
 8001ce2:	bf00      	nop
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <UART_print+0x48>)
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f9      	beq.n	8001ce4 <UART_print+0x10>

		USART2->TDR = outputstring[currchar];
 8001cf0:	89fb      	ldrh	r3, [r7, #14]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781a      	ldrb	r2, [r3, #0]
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <UART_print+0x48>)
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	851a      	strh	r2, [r3, #40]	; 0x28
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 8001cfe:	89fb      	ldrh	r3, [r7, #14]
 8001d00:	3301      	adds	r3, #1
 8001d02:	81fb      	strh	r3, [r7, #14]
 8001d04:	89fc      	ldrh	r4, [r7, #14]
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe fa6c 	bl	80001e4 <strlen>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	429c      	cmp	r4, r3
 8001d10:	d3e7      	bcc.n	8001ce2 <UART_print+0xe>
	}

}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd90      	pop	{r4, r7, pc}
 8001d1c:	40004400 	.word	0x40004400

08001d20 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]


	uint8_t RX = USART2->RDR;
 8001d2a:	4b8f      	ldr	r3, [pc, #572]	; (8001f68 <USART2_IRQHandler+0x248>)
 8001d2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	73fb      	strb	r3, [r7, #15]
	char tempstr[6]={'\0'};
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	2300      	movs	r3, #0
 8001d38:	80bb      	strh	r3, [r7, #4]
	switch(RX)
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	3b24      	subs	r3, #36	; 0x24
 8001d3e:	2b2c      	cmp	r3, #44	; 0x2c
 8001d40:	f200 8092 	bhi.w	8001e68 <USART2_IRQHandler+0x148>
 8001d44:	a201      	add	r2, pc, #4	; (adr r2, 8001d4c <USART2_IRQHandler+0x2c>)
 8001d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4a:	bf00      	nop
 8001d4c:	08001e33 	.word	0x08001e33
 8001d50:	08001e69 	.word	0x08001e69
 8001d54:	08001e69 	.word	0x08001e69
 8001d58:	08001e69 	.word	0x08001e69
 8001d5c:	08001e69 	.word	0x08001e69
 8001d60:	08001e69 	.word	0x08001e69
 8001d64:	08001e69 	.word	0x08001e69
 8001d68:	08001e69 	.word	0x08001e69
 8001d6c:	08001e69 	.word	0x08001e69
 8001d70:	08001e69 	.word	0x08001e69
 8001d74:	08001e69 	.word	0x08001e69
 8001d78:	08001e69 	.word	0x08001e69
 8001d7c:	08001e69 	.word	0x08001e69
 8001d80:	08001e69 	.word	0x08001e69
 8001d84:	08001e69 	.word	0x08001e69
 8001d88:	08001e69 	.word	0x08001e69
 8001d8c:	08001e69 	.word	0x08001e69
 8001d90:	08001e69 	.word	0x08001e69
 8001d94:	08001e69 	.word	0x08001e69
 8001d98:	08001e69 	.word	0x08001e69
 8001d9c:	08001e69 	.word	0x08001e69
 8001da0:	08001e69 	.word	0x08001e69
 8001da4:	08001e69 	.word	0x08001e69
 8001da8:	08001e69 	.word	0x08001e69
 8001dac:	08001e69 	.word	0x08001e69
 8001db0:	08001e69 	.word	0x08001e69
 8001db4:	08001e69 	.word	0x08001e69
 8001db8:	08001e69 	.word	0x08001e69
 8001dbc:	08001e69 	.word	0x08001e69
 8001dc0:	08001e69 	.word	0x08001e69
 8001dc4:	08001e69 	.word	0x08001e69
 8001dc8:	08001e69 	.word	0x08001e69
 8001dcc:	08001e21 	.word	0x08001e21
 8001dd0:	08001e69 	.word	0x08001e69
 8001dd4:	08001e69 	.word	0x08001e69
 8001dd8:	08001e41 	.word	0x08001e41
 8001ddc:	08001e69 	.word	0x08001e69
 8001de0:	08001e69 	.word	0x08001e69
 8001de4:	08001e19 	.word	0x08001e19
 8001de8:	08001e69 	.word	0x08001e69
 8001dec:	08001e69 	.word	0x08001e69
 8001df0:	08001e69 	.word	0x08001e69
 8001df4:	08001e41 	.word	0x08001e41
 8001df8:	08001e69 	.word	0x08001e69
 8001dfc:	08001e01 	.word	0x08001e01
	{

			break;
		case 'P'://Print Nodes to DM
			packetdata.message[0] = 2;
 8001e00:	4b5a      	ldr	r3, [pc, #360]	; (8001f6c <USART2_IRQHandler+0x24c>)
 8001e02:	2202      	movs	r2, #2
 8001e04:	701a      	strb	r2, [r3, #0]
			newaddressflag = 255;
 8001e06:	4b5a      	ldr	r3, [pc, #360]	; (8001f70 <USART2_IRQHandler+0x250>)
 8001e08:	22ff      	movs	r2, #255	; 0xff
 8001e0a:	701a      	strb	r2, [r3, #0]
			DMorGM = 2;
 8001e0c:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <USART2_IRQHandler+0x254>)
 8001e0e:	2202      	movs	r2, #2
 8001e10:	701a      	strb	r2, [r3, #0]
			UART_escapes("[H");
 8001e12:	4859      	ldr	r0, [pc, #356]	; (8001f78 <USART2_IRQHandler+0x258>)
 8001e14:	f000 f8c0 	bl	8001f98 <UART_escapes>
		case 'J':
			UART_escapes("[2J"); //clear everything
 8001e18:	4858      	ldr	r0, [pc, #352]	; (8001f7c <USART2_IRQHandler+0x25c>)
 8001e1a:	f000 f8bd 	bl	8001f98 <UART_escapes>
			break;
 8001e1e:	e09f      	b.n	8001f60 <USART2_IRQHandler+0x240>

		case 'D'://Direct Message
			packetdata.message[0] = 2;
 8001e20:	4b52      	ldr	r3, [pc, #328]	; (8001f6c <USART2_IRQHandler+0x24c>)
 8001e22:	2202      	movs	r2, #2
 8001e24:	701a      	strb	r2, [r3, #0]
			DMorGM =1;
 8001e26:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <USART2_IRQHandler+0x254>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
			UART_escapes("[s");
 8001e2c:	4854      	ldr	r0, [pc, #336]	; (8001f80 <USART2_IRQHandler+0x260>)
 8001e2e:	f000 f8b3 	bl	8001f98 <UART_escapes>
		case '$':
			newaddressflag = 1;
 8001e32:	4b4f      	ldr	r3, [pc, #316]	; (8001f70 <USART2_IRQHandler+0x250>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
			UART_print("Enter Address:");
 8001e38:	4852      	ldr	r0, [pc, #328]	; (8001f84 <USART2_IRQHandler+0x264>)
 8001e3a:	f7ff ff4b 	bl	8001cd4 <UART_print>
			break;
 8001e3e:	e08f      	b.n	8001f60 <USART2_IRQHandler+0x240>
		case 'N'://broadcast name

		case 'G'://Group Message
				packetdata.message[0] = (RX=='N')?6:2;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	2b4e      	cmp	r3, #78	; 0x4e
 8001e44:	d101      	bne.n	8001e4a <USART2_IRQHandler+0x12a>
 8001e46:	2206      	movs	r2, #6
 8001e48:	e000      	b.n	8001e4c <USART2_IRQHandler+0x12c>
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <USART2_IRQHandler+0x24c>)
 8001e4e:	701a      	strb	r2, [r3, #0]
				packetdata.address[0] = 'F';//hardcoding broadcast address
 8001e50:	4b46      	ldr	r3, [pc, #280]	; (8001f6c <USART2_IRQHandler+0x24c>)
 8001e52:	2246      	movs	r2, #70	; 0x46
 8001e54:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				packetdata.address[1] = 'F';
 8001e58:	4b44      	ldr	r3, [pc, #272]	; (8001f6c <USART2_IRQHandler+0x24c>)
 8001e5a:	2246      	movs	r2, #70	; 0x46
 8001e5c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

				DMorGM=3;
 8001e60:	4b44      	ldr	r3, [pc, #272]	; (8001f74 <USART2_IRQHandler+0x254>)
 8001e62:	2203      	movs	r2, #3
 8001e64:	701a      	strb	r2, [r3, #0]
			break;
 8001e66:	e07b      	b.n	8001f60 <USART2_IRQHandler+0x240>
		default:



			if(newaddressflag==1)
 8001e68:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <USART2_IRQHandler+0x250>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d122      	bne.n	8001eb6 <USART2_IRQHandler+0x196>
			{

				packetdata.address[newaddresscount] = RX;
 8001e70:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <USART2_IRQHandler+0x268>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <USART2_IRQHandler+0x24c>)
 8001e78:	4413      	add	r3, r2
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				++newaddresscount;
 8001e80:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <USART2_IRQHandler+0x268>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	3301      	adds	r3, #1
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <USART2_IRQHandler+0x268>)
 8001e8a:	701a      	strb	r2, [r3, #0]
				USART2->TDR=RX;
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <USART2_IRQHandler+0x248>)
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	b292      	uxth	r2, r2
 8001e92:	851a      	strh	r2, [r3, #40]	; 0x28
				if(newaddresscount == 2)
 8001e94:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <USART2_IRQHandler+0x268>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d160      	bne.n	8001f5e <USART2_IRQHandler+0x23e>
				{

					UART_print("\n\r");
 8001e9c:	483b      	ldr	r0, [pc, #236]	; (8001f8c <USART2_IRQHandler+0x26c>)
 8001e9e:	f7ff ff19 	bl	8001cd4 <UART_print>
					DMorGM=2;
 8001ea2:	4b34      	ldr	r3, [pc, #208]	; (8001f74 <USART2_IRQHandler+0x254>)
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	701a      	strb	r2, [r3, #0]
					newaddressflag = 0;
 8001ea8:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <USART2_IRQHandler+0x250>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
					newaddresscount = 0;
 8001eae:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <USART2_IRQHandler+0x268>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]



				}
			}
				break;
 8001eb4:	e053      	b.n	8001f5e <USART2_IRQHandler+0x23e>
			else if(newaddressflag == 255)
 8001eb6:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <USART2_IRQHandler+0x250>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2bff      	cmp	r3, #255	; 0xff
 8001ebc:	d123      	bne.n	8001f06 <USART2_IRQHandler+0x1e6>
				while(!(USART2->ISR & USART_ISR_TXE));
 8001ebe:	bf00      	nop
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <USART2_IRQHandler+0x248>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f9      	beq.n	8001ec0 <USART2_IRQHandler+0x1a0>
								USART2->TDR=RX;
 8001ecc:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <USART2_IRQHandler+0x248>)
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	b292      	uxth	r2, r2
 8001ed2:	851a      	strh	r2, [r3, #40]	; 0x28
				if(RX !='\r')
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	2b0d      	cmp	r3, #13
 8001ed8:	d00e      	beq.n	8001ef8 <USART2_IRQHandler+0x1d8>
				packetdata.address[newaddresscount] = RX;
 8001eda:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <USART2_IRQHandler+0x268>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <USART2_IRQHandler+0x24c>)
 8001ee2:	4413      	add	r3, r2
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				++newaddresscount;
 8001eea:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <USART2_IRQHandler+0x268>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <USART2_IRQHandler+0x268>)
 8001ef4:	701a      	strb	r2, [r3, #0]
				break;
 8001ef6:	e032      	b.n	8001f5e <USART2_IRQHandler+0x23e>
					newaddresscount = 0 ;
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <USART2_IRQHandler+0x268>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
					newaddressflag = 111;
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <USART2_IRQHandler+0x250>)
 8001f00:	226f      	movs	r2, #111	; 0x6f
 8001f02:	701a      	strb	r2, [r3, #0]
				break;
 8001f04:	e02b      	b.n	8001f5e <USART2_IRQHandler+0x23e>
				packetdata.message[count] = RX;
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <USART2_IRQHandler+0x270>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <USART2_IRQHandler+0x24c>)
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	5453      	strb	r3, [r2, r1]
				++count;
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <USART2_IRQHandler+0x270>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <USART2_IRQHandler+0x270>)
 8001f1c:	801a      	strh	r2, [r3, #0]
				while(!(USART2->ISR & USART_ISR_TXE));
 8001f1e:	bf00      	nop
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <USART2_IRQHandler+0x248>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f9      	beq.n	8001f20 <USART2_IRQHandler+0x200>
				USART2->TDR=RX;
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <USART2_IRQHandler+0x248>)
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	b292      	uxth	r2, r2
 8001f32:	851a      	strh	r2, [r3, #40]	; 0x28
				if(RX == '\r') {
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	2b0d      	cmp	r3, #13
 8001f38:	d111      	bne.n	8001f5e <USART2_IRQHandler+0x23e>
					packetdata.message[count] = '\0';
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <USART2_IRQHandler+0x270>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <USART2_IRQHandler+0x24c>)
 8001f42:	2100      	movs	r1, #0
 8001f44:	5499      	strb	r1, [r3, r2]
					count = 1;
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <USART2_IRQHandler+0x270>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	801a      	strh	r2, [r3, #0]
					xSemaphoreGiveFromISR( xTXsem, &xHigherPriorityTaskWoken );
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <USART2_IRQHandler+0x274>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	f107 0308 	add.w	r3, r7, #8
 8001f56:	4619      	mov	r1, r3
 8001f58:	4610      	mov	r0, r2
 8001f5a:	f006 ffc6 	bl	8008eea <xQueueGiveFromISR>
				break;
 8001f5e:	bf00      	nop
	}
}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40004400 	.word	0x40004400
 8001f6c:	200000a8 	.word	0x200000a8
 8001f70:	2000026c 	.word	0x2000026c
 8001f74:	20000120 	.word	0x20000120
 8001f78:	0800cf74 	.word	0x0800cf74
 8001f7c:	0800cf78 	.word	0x0800cf78
 8001f80:	0800cf7c 	.word	0x0800cf7c
 8001f84:	0800cf80 	.word	0x0800cf80
 8001f88:	2000026d 	.word	0x2000026d
 8001f8c:	0800cf90 	.word	0x0800cf90
 8001f90:	20000004 	.word	0x20000004
 8001f94:	2000009c 	.word	0x2000009c

08001f98 <UART_escapes>:

void UART_escapes(char *escstring)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & USART_ISR_TXE));//do not advance until receiving transmit flag
 8001fa0:	bf00      	nop
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <UART_escapes+0x2c>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f9      	beq.n	8001fa2 <UART_escapes+0xa>
	USART2->TDR = (0x1B);  // ESC
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <UART_escapes+0x2c>)
 8001fb0:	221b      	movs	r2, #27
 8001fb2:	851a      	strh	r2, [r3, #40]	; 0x28
	UART_print(escstring);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fe8d 	bl	8001cd4 <UART_print>

}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40004400 	.word	0x40004400

08001fc8 <print_message_id>:
{
	UART_escapes("[32m");
}

void print_message_id()
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
	UART_print("\r");
 8001fce:	4827      	ldr	r0, [pc, #156]	; (800206c <print_message_id+0xa4>)
 8001fd0:	f7ff fe80 	bl	8001cd4 <UART_print>
	UART_escapes("[2K");
 8001fd4:	4826      	ldr	r0, [pc, #152]	; (8002070 <print_message_id+0xa8>)
 8001fd6:	f7ff ffdf 	bl	8001f98 <UART_escapes>
	if(strcmp(packetdata.address,"ff") == 0 || strcmp(packetdata.address,"FF") == 0)
 8001fda:	4926      	ldr	r1, [pc, #152]	; (8002074 <print_message_id+0xac>)
 8001fdc:	4826      	ldr	r0, [pc, #152]	; (8002078 <print_message_id+0xb0>)
 8001fde:	f7fe f8f7 	bl	80001d0 <strcmp>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <print_message_id+0x2e>
 8001fe8:	4924      	ldr	r1, [pc, #144]	; (800207c <print_message_id+0xb4>)
 8001fea:	4823      	ldr	r0, [pc, #140]	; (8002078 <print_message_id+0xb0>)
 8001fec:	f7fe f8f0 	bl	80001d0 <strcmp>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d118      	bne.n	8002028 <print_message_id+0x60>
	{
		if(packetdata.message[0]==2){
 8001ff6:	4b22      	ldr	r3, [pc, #136]	; (8002080 <print_message_id+0xb8>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d109      	bne.n	8002014 <print_message_id+0x4c>
		UART_print("GM to 0x");
 8002000:	4820      	ldr	r0, [pc, #128]	; (8002084 <print_message_id+0xbc>)
 8002002:	f7ff fe67 	bl	8001cd4 <UART_print>
		UART_print(packetdata.address);
 8002006:	481c      	ldr	r0, [pc, #112]	; (8002078 <print_message_id+0xb0>)
 8002008:	f7ff fe64 	bl	8001cd4 <UART_print>
		UART_print(":");}
 800200c:	481e      	ldr	r0, [pc, #120]	; (8002088 <print_message_id+0xc0>)
 800200e:	f7ff fe61 	bl	8001cd4 <UART_print>
		if(packetdata.message[0]==2){
 8002012:	e026      	b.n	8002062 <print_message_id+0x9a>
		else{
			UART_print("Broadcast name to 0x");
 8002014:	481d      	ldr	r0, [pc, #116]	; (800208c <print_message_id+0xc4>)
 8002016:	f7ff fe5d 	bl	8001cd4 <UART_print>
					UART_print(packetdata.address);
 800201a:	4817      	ldr	r0, [pc, #92]	; (8002078 <print_message_id+0xb0>)
 800201c:	f7ff fe5a 	bl	8001cd4 <UART_print>
					UART_print(":");
 8002020:	4819      	ldr	r0, [pc, #100]	; (8002088 <print_message_id+0xc0>)
 8002022:	f7ff fe57 	bl	8001cd4 <UART_print>
		if(packetdata.message[0]==2){
 8002026:	e01c      	b.n	8002062 <print_message_id+0x9a>
		}
	}
	else
	{
		UART_print("DM to 0x");
 8002028:	4819      	ldr	r0, [pc, #100]	; (8002090 <print_message_id+0xc8>)
 800202a:	f7ff fe53 	bl	8001cd4 <UART_print>
		UART_print(packetdata.address);
 800202e:	4812      	ldr	r0, [pc, #72]	; (8002078 <print_message_id+0xb0>)
 8002030:	f7ff fe50 	bl	8001cd4 <UART_print>
		UART_print("  ");
 8002034:	4817      	ldr	r0, [pc, #92]	; (8002094 <print_message_id+0xcc>)
 8002036:	f7ff fe4d 	bl	8001cd4 <UART_print>
		People* ptr = FindInList(packetdata.address);
 800203a:	480f      	ldr	r0, [pc, #60]	; (8002078 <print_message_id+0xb0>)
 800203c:	f7ff fb7e 	bl	800173c <FindInList>
 8002040:	6078      	str	r0, [r7, #4]
		if(ptr != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <print_message_id+0x92>
		{
			UART_print(ptr->Name);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3304      	adds	r3, #4
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fe41 	bl	8001cd4 <UART_print>
			UART_print(": ");
 8002052:	4811      	ldr	r0, [pc, #68]	; (8002098 <print_message_id+0xd0>)
 8002054:	f7ff fe3e 	bl	8001cd4 <UART_print>
		{
			UART_print(": ");
		}
	}

}
 8002058:	e003      	b.n	8002062 <print_message_id+0x9a>
			UART_print(": ");
 800205a:	480f      	ldr	r0, [pc, #60]	; (8002098 <print_message_id+0xd0>)
 800205c:	f7ff fe3a 	bl	8001cd4 <UART_print>
}
 8002060:	e7ff      	b.n	8002062 <print_message_id+0x9a>
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	0800cfa4 	.word	0x0800cfa4
 8002070:	0800cfa8 	.word	0x0800cfa8
 8002074:	0800cfac 	.word	0x0800cfac
 8002078:	2000010c 	.word	0x2000010c
 800207c:	0800cfb0 	.word	0x0800cfb0
 8002080:	200000a8 	.word	0x200000a8
 8002084:	0800cfb4 	.word	0x0800cfb4
 8002088:	0800cfc0 	.word	0x0800cfc0
 800208c:	0800cfc4 	.word	0x0800cfc4
 8002090:	0800cfdc 	.word	0x0800cfdc
 8002094:	0800cfe8 	.word	0x0800cfe8
 8002098:	0800cfec 	.word	0x0800cfec

0800209c <print_linkedList>:

void print_linkedList()
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xPrintNodes, ( TickType_t ) 100 ))
 80020a2:	4b35      	ldr	r3, [pc, #212]	; (8002178 <print_linkedList+0xdc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2164      	movs	r1, #100	; 0x64
 80020a8:	4618      	mov	r0, r3
 80020aa:	f007 f88b 	bl	80091c4 <xQueueSemaphoreTake>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d05c      	beq.n	800216e <print_linkedList+0xd2>
	{
		uint8_t listnum = 1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
		char str[5];


		People *ptr = head;
 80020b8:	4b30      	ldr	r3, [pc, #192]	; (800217c <print_linkedList+0xe0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60bb      	str	r3, [r7, #8]
		UART_escapes("[H");
 80020be:	4830      	ldr	r0, [pc, #192]	; (8002180 <print_linkedList+0xe4>)
 80020c0:	f7ff ff6a 	bl	8001f98 <UART_escapes>
		while(ptr != NULL)
 80020c4:	e021      	b.n	800210a <print_linkedList+0x6e>
		{
			itoa(listnum, str, 10);
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	4639      	mov	r1, r7
 80020ca:	220a      	movs	r2, #10
 80020cc:	4618      	mov	r0, r3
 80020ce:	f009 fffb 	bl	800c0c8 <itoa>
			UART_print(str);
 80020d2:	463b      	mov	r3, r7
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fdfd 	bl	8001cd4 <UART_print>
			UART_print(": ");
 80020da:	482a      	ldr	r0, [pc, #168]	; (8002184 <print_linkedList+0xe8>)
 80020dc:	f7ff fdfa 	bl	8001cd4 <UART_print>
			UART_print(ptr->Name);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	3304      	adds	r3, #4
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fdf5 	bl	8001cd4 <UART_print>
			UART_print(" at 0x");
 80020ea:	4827      	ldr	r0, [pc, #156]	; (8002188 <print_linkedList+0xec>)
 80020ec:	f7ff fdf2 	bl	8001cd4 <UART_print>
			UART_print(ptr->address);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fdee 	bl	8001cd4 <UART_print>
			UART_print("\n\r");
 80020f8:	4824      	ldr	r0, [pc, #144]	; (800218c <print_linkedList+0xf0>)
 80020fa:	f7ff fdeb 	bl	8001cd4 <UART_print>
			ptr = ptr->next;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002102:	60bb      	str	r3, [r7, #8]
			++listnum;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	3301      	adds	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
		while(ptr != NULL)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1da      	bne.n	80020c6 <print_linkedList+0x2a>
		}
		listnum = 1;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
		UART_print("Enter Desired Contact(1,2,or 3...):");
 8002114:	481e      	ldr	r0, [pc, #120]	; (8002190 <print_linkedList+0xf4>)
 8002116:	f7ff fddd 	bl	8001cd4 <UART_print>
		while(newaddressflag==255);
 800211a:	bf00      	nop
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <print_linkedList+0xf8>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2bff      	cmp	r3, #255	; 0xff
 8002122:	d0fb      	beq.n	800211c <print_linkedList+0x80>
		UART_print("\n\r");
 8002124:	4819      	ldr	r0, [pc, #100]	; (800218c <print_linkedList+0xf0>)
 8002126:	f7ff fdd5 	bl	8001cd4 <UART_print>
		uint8_t wantedaddr = atoi(packetdata.address);
 800212a:	481b      	ldr	r0, [pc, #108]	; (8002198 <print_linkedList+0xfc>)
 800212c:	f009 ff86 	bl	800c03c <atoi>
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]

		ptr = head;
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <print_linkedList+0xe0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60bb      	str	r3, [r7, #8]

		while(listnum < wantedaddr)
 800213a:	e005      	b.n	8002148 <print_linkedList+0xac>
		{
			ptr = ptr->next;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002140:	60bb      	str	r3, [r7, #8]
			++listnum;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	3301      	adds	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
		while(listnum < wantedaddr)
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	429a      	cmp	r2, r3
 800214e:	d3f5      	bcc.n	800213c <print_linkedList+0xa0>
		}

		strcpy(packetdata.address, ptr->address);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4619      	mov	r1, r3
 8002154:	4810      	ldr	r0, [pc, #64]	; (8002198 <print_linkedList+0xfc>)
 8002156:	f00a f961 	bl	800c41c <strcpy>

		xSemaphoreGive(xPrintNodes);
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <print_linkedList+0xdc>)
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	2300      	movs	r3, #0
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	f006 fd28 	bl	8008bb8 <xQueueGenericSend>
		newaddressflag = 0;
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <print_linkedList+0xf8>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]

	}
}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200000a0 	.word	0x200000a0
 800217c:	20000190 	.word	0x20000190
 8002180:	0800cf74 	.word	0x0800cf74
 8002184:	0800cfec 	.word	0x0800cfec
 8002188:	0800cff0 	.word	0x0800cff0
 800218c:	0800cf90 	.word	0x0800cf90
 8002190:	0800cff8 	.word	0x0800cff8
 8002194:	2000026c 	.word	0x2000026c
 8002198:	2000010c 	.word	0x2000010c

0800219c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800219c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021a0:	f7ff fce6 	bl	8001b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a4:	480c      	ldr	r0, [pc, #48]	; (80021d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80021a6:	490d      	ldr	r1, [pc, #52]	; (80021dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80021a8:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <LoopForever+0xe>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ac:	e002      	b.n	80021b4 <LoopCopyDataInit>

080021ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b2:	3304      	adds	r3, #4

080021b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b8:	d3f9      	bcc.n	80021ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021bc:	4c0a      	ldr	r4, [pc, #40]	; (80021e8 <LoopForever+0x16>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c0:	e001      	b.n	80021c6 <LoopFillZerobss>

080021c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c4:	3204      	adds	r2, #4

080021c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c8:	d3fb      	bcc.n	80021c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ca:	f009 ff41 	bl	800c050 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021ce:	f7ff f8b7 	bl	8001340 <main>

080021d2 <LoopForever>:

LoopForever:
    b LoopForever
 80021d2:	e7fe      	b.n	80021d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021dc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80021e0:	0800d3c0 	.word	0x0800d3c0
  ldr r2, =_sbss
 80021e4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80021e8:	20006e60 	.word	0x20006e60

080021ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021ec:	e7fe      	b.n	80021ec <ADC1_2_IRQHandler>
	...

080021f0 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 80021fa:	f107 030f 	add.w	r3, r7, #15
 80021fe:	461a      	mov	r2, r3
 8002200:	2101      	movs	r1, #1
 8002202:	2050      	movs	r0, #80	; 0x50
 8002204:	f002 fad2 	bl	80047ac <RadioSpiReadRegisters>
 8002208:	4602      	mov	r2, r0
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <SpiritCalibrationVco+0x6c>)
 800220c:	b212      	sxth	r2, r2
 800220e:	4611      	mov	r1, r2
 8002210:	7019      	strb	r1, [r3, #0]
 8002212:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002216:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d105      	bne.n	800222a <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	b2db      	uxtb	r3, r3
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e004      	b.n	8002234 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	f023 0302 	bic.w	r3, r3, #2
 8002230:	b2db      	uxtb	r3, r3
 8002232:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8002234:	f107 030f 	add.w	r3, r7, #15
 8002238:	461a      	mov	r2, r3
 800223a:	2101      	movs	r1, #1
 800223c:	2050      	movs	r0, #80	; 0x50
 800223e:	f002 fa69 	bl	8004714 <RadioSpiWriteRegisters>
 8002242:	4602      	mov	r2, r0
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <SpiritCalibrationVco+0x6c>)
 8002246:	b212      	sxth	r2, r2
 8002248:	4611      	mov	r1, r2
 800224a:	7019      	strb	r1, [r3, #0]
 800224c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002250:	705a      	strb	r2, [r3, #1]

}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000278 	.word	0x20000278

08002260 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8002266:	1dfb      	adds	r3, r7, #7
 8002268:	461a      	mov	r2, r3
 800226a:	2101      	movs	r1, #1
 800226c:	20e5      	movs	r0, #229	; 0xe5
 800226e:	f002 fa9d 	bl	80047ac <RadioSpiReadRegisters>
 8002272:	4602      	mov	r2, r0
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <SpiritCalibrationGetVcoCalData+0x34>)
 8002276:	b212      	sxth	r2, r2
 8002278:	4611      	mov	r1, r2
 800227a:	7019      	strb	r1, [r3, #0]
 800227c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002280:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002288:	b2db      	uxtb	r3, r3

}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000278 	.word	0x20000278

08002298 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 80022a2:	f107 030f 	add.w	r3, r7, #15
 80022a6:	461a      	mov	r2, r3
 80022a8:	2101      	movs	r1, #1
 80022aa:	206e      	movs	r0, #110	; 0x6e
 80022ac:	f002 fa7e 	bl	80047ac <RadioSpiReadRegisters>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <SpiritCalibrationSetVcoCalDataTx+0x64>)
 80022b4:	b212      	sxth	r2, r2
 80022b6:	4611      	mov	r1, r2
 80022b8:	7019      	strb	r1, [r3, #0]
 80022ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022be:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 80022d4:	f107 030f 	add.w	r3, r7, #15
 80022d8:	461a      	mov	r2, r3
 80022da:	2101      	movs	r1, #1
 80022dc:	206e      	movs	r0, #110	; 0x6e
 80022de:	f002 fa19 	bl	8004714 <RadioSpiWriteRegisters>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SpiritCalibrationSetVcoCalDataTx+0x64>)
 80022e6:	b212      	sxth	r2, r2
 80022e8:	4611      	mov	r1, r2
 80022ea:	7019      	strb	r1, [r3, #0]
 80022ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022f0:	705a      	strb	r2, [r3, #1]

}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000278 	.word	0x20000278

08002300 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 800230a:	f107 030f 	add.w	r3, r7, #15
 800230e:	461a      	mov	r2, r3
 8002310:	2101      	movs	r1, #1
 8002312:	206f      	movs	r0, #111	; 0x6f
 8002314:	f002 fa4a 	bl	80047ac <RadioSpiReadRegisters>
 8002318:	4602      	mov	r2, r0
 800231a:	4b12      	ldr	r3, [pc, #72]	; (8002364 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 800231c:	b212      	sxth	r2, r2
 800231e:	4611      	mov	r1, r2
 8002320:	7019      	strb	r1, [r3, #0]
 8002322:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002326:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800232e:	b2db      	uxtb	r3, r3
 8002330:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	4313      	orrs	r3, r2
 8002338:	b2db      	uxtb	r3, r3
 800233a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 800233c:	f107 030f 	add.w	r3, r7, #15
 8002340:	461a      	mov	r2, r3
 8002342:	2101      	movs	r1, #1
 8002344:	206f      	movs	r0, #111	; 0x6f
 8002346:	f002 f9e5 	bl	8004714 <RadioSpiWriteRegisters>
 800234a:	4602      	mov	r2, r0
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 800234e:	b212      	sxth	r2, r2
 8002350:	4611      	mov	r1, r2
 8002352:	7019      	strb	r1, [r3, #0]
 8002354:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002358:	705a      	strb	r2, [r3, #1]

}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000278 	.word	0x20000278

08002368 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8002372:	f107 030f 	add.w	r3, r7, #15
 8002376:	461a      	mov	r2, r3
 8002378:	2101      	movs	r1, #1
 800237a:	209e      	movs	r0, #158	; 0x9e
 800237c:	f002 fa16 	bl	80047ac <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	f023 0306 	bic.w	r3, r3, #6
 8002386:	b2db      	uxtb	r3, r3
 8002388:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	b2db      	uxtb	r3, r3
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	e004      	b.n	80023a6 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 80023a6:	f107 030f 	add.w	r3, r7, #15
 80023aa:	461a      	mov	r2, r3
 80023ac:	2101      	movs	r1, #1
 80023ae:	209e      	movs	r0, #158	; 0x9e
 80023b0:	f002 f9b0 	bl	8004714 <RadioSpiWriteRegisters>
  
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f002 fa3b 	bl	8004844 <RadioSpiCommandStrobes>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <SpiritCmdStrobeCommand+0x2c>)
 80023d2:	b212      	sxth	r2, r2
 80023d4:	4611      	mov	r1, r2
 80023d6:	7019      	strb	r1, [r3, #0]
 80023d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023dc:	705a      	strb	r2, [r3, #1]
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000278 	.word	0x20000278

080023ec <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	785a      	ldrb	r2, [r3, #1]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	789b      	ldrb	r3, [r3, #2]
 8002400:	4313      	orrs	r3, r2
 8002402:	b2db      	uxtb	r3, r3
 8002404:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	f107 020f 	add.w	r2, r7, #15
 800240e:	2101      	movs	r1, #1
 8002410:	4618      	mov	r0, r3
 8002412:	f002 f97f 	bl	8004714 <RadioSpiWriteRegisters>
 8002416:	4602      	mov	r2, r0
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <SpiritGpioInit+0x44>)
 800241a:	b212      	sxth	r2, r2
 800241c:	4611      	mov	r1, r2
 800241e:	7019      	strb	r1, [r3, #0]
 8002420:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002424:	705a      	strb	r2, [r3, #1]

}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000278 	.word	0x20000278

08002434 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00c      	beq.n	8002460 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8002446:	f107 0308 	add.w	r3, r7, #8
 800244a:	2204      	movs	r2, #4
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f009 fe54 	bl	800c0fc <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	461a      	mov	r2, r3
 8002458:	f107 0308 	add.w	r3, r7, #8
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002460:	f107 030c 	add.w	r3, r7, #12
 8002464:	461a      	mov	r2, r3
 8002466:	2104      	movs	r1, #4
 8002468:	2090      	movs	r0, #144	; 0x90
 800246a:	f002 f953 	bl	8004714 <RadioSpiWriteRegisters>
 800246e:	4602      	mov	r2, r0
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <SpiritIrqDeInit+0x54>)
 8002472:	b212      	sxth	r2, r2
 8002474:	4611      	mov	r1, r2
 8002476:	7019      	strb	r1, [r3, #0]
 8002478:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800247c:	705a      	strb	r2, [r3, #1]
}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000278 	.word	0x20000278

0800248c <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800249c:	f107 030c 	add.w	r3, r7, #12
 80024a0:	461a      	mov	r2, r3
 80024a2:	2104      	movs	r1, #4
 80024a4:	2090      	movs	r0, #144	; 0x90
 80024a6:	f002 f981 	bl	80047ac <RadioSpiReadRegisters>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b29      	ldr	r3, [pc, #164]	; (8002554 <SpiritIrq+0xc8>)
 80024ae:	b212      	sxth	r2, r2
 80024b0:	4611      	mov	r1, r2
 80024b2:	7019      	strb	r1, [r3, #0]
 80024b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024b8:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	74fb      	strb	r3, [r7, #19]
 80024be:	e011      	b.n	80024e4 <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	3318      	adds	r3, #24
 80024c4:	443b      	add	r3, r7
 80024c6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80024ca:	461a      	mov	r2, r3
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	f1c3 0303 	rsb	r3, r3, #3
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	4413      	add	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	3301      	adds	r3, #1
 80024e2:	74fb      	strb	r3, [r7, #19]
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d9ea      	bls.n	80024c0 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	4013      	ands	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	e003      	b.n	8002504 <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8002504:	2300      	movs	r3, #0
 8002506:	74bb      	strb	r3, [r7, #18]
 8002508:	e00e      	b.n	8002528 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 800250a:	7cbb      	ldrb	r3, [r7, #18]
 800250c:	f1c3 0303 	rsb	r3, r3, #3
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	40da      	lsrs	r2, r3
 8002516:	7cbb      	ldrb	r3, [r7, #18]
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	3318      	adds	r3, #24
 800251c:	443b      	add	r3, r7
 800251e:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8002522:	7cbb      	ldrb	r3, [r7, #18]
 8002524:	3301      	adds	r3, #1
 8002526:	74bb      	strb	r3, [r7, #18]
 8002528:	7cbb      	ldrb	r3, [r7, #18]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d9ed      	bls.n	800250a <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800252e:	f107 030c 	add.w	r3, r7, #12
 8002532:	461a      	mov	r2, r3
 8002534:	2104      	movs	r1, #4
 8002536:	2090      	movs	r0, #144	; 0x90
 8002538:	f002 f8ec 	bl	8004714 <RadioSpiWriteRegisters>
 800253c:	4602      	mov	r2, r0
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <SpiritIrq+0xc8>)
 8002540:	b212      	sxth	r2, r2
 8002542:	4611      	mov	r1, r2
 8002544:	7019      	strb	r1, [r3, #0]
 8002546:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800254a:	705a      	strb	r2, [r3, #1]

}
 800254c:	bf00      	nop
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000278 	.word	0x20000278

08002558 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002564:	f107 030c 	add.w	r3, r7, #12
 8002568:	461a      	mov	r2, r3
 800256a:	2104      	movs	r1, #4
 800256c:	20fa      	movs	r0, #250	; 0xfa
 800256e:	f002 f91d 	bl	80047ac <RadioSpiReadRegisters>
 8002572:	4602      	mov	r2, r0
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <SpiritIrqGetStatus+0x60>)
 8002576:	b212      	sxth	r2, r2
 8002578:	4611      	mov	r1, r2
 800257a:	7019      	strb	r1, [r3, #0]
 800257c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002580:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8002582:	2300      	movs	r3, #0
 8002584:	74fb      	strb	r3, [r7, #19]
 8002586:	e00e      	b.n	80025a6 <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	f1c3 0303 	rsb	r3, r3, #3
 800258e:	3318      	adds	r3, #24
 8002590:	443b      	add	r3, r7
 8002592:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	3301      	adds	r3, #1
 800259e:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	3301      	adds	r3, #1
 80025a4:	74fb      	strb	r3, [r7, #19]
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d9ed      	bls.n	8002588 <SpiritIrqGetStatus+0x30>
  }
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000278 	.word	0x20000278

080025bc <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	461a      	mov	r2, r3
 80025c6:	2104      	movs	r1, #4
 80025c8:	20fa      	movs	r0, #250	; 0xfa
 80025ca:	f002 f8ef 	bl	80047ac <RadioSpiReadRegisters>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <SpiritIrqClearStatus+0x2c>)
 80025d2:	b212      	sxth	r2, r2
 80025d4:	4611      	mov	r1, r2
 80025d6:	7019      	strb	r1, [r3, #0]
 80025d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025dc:	705a      	strb	r2, [r3, #1]

}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000278 	.word	0x20000278

080025ec <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	461a      	mov	r2, r3
 80025f6:	2101      	movs	r1, #1
 80025f8:	20e7      	movs	r0, #231	; 0xe7
 80025fa:	f002 f8d7 	bl	80047ac <RadioSpiReadRegisters>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 8002602:	b212      	sxth	r2, r2
 8002604:	4611      	mov	r1, r2
 8002606:	7019      	strb	r1, [r3, #0]
 8002608:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800260c:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002614:	b2db      	uxtb	r3, r3

}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000278 	.word	0x20000278

08002624 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8002624:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002628:	b08a      	sub	sp, #40	; 0x28
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a70      	ldr	r2, [pc, #448]	; (80027f4 <SpiritManagementSetFrequencyBase+0x1d0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d307      	bcc.n	8002646 <SpiritManagementSetFrequencyBase+0x22>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a6f      	ldr	r2, [pc, #444]	; (80027f8 <SpiritManagementSetFrequencyBase+0x1d4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d803      	bhi.n	8002646 <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002644:	e01a      	b.n	800267c <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a6c      	ldr	r2, [pc, #432]	; (80027fc <SpiritManagementSetFrequencyBase+0x1d8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d907      	bls.n	800265e <SpiritManagementSetFrequencyBase+0x3a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a6b      	ldr	r2, [pc, #428]	; (8002800 <SpiritManagementSetFrequencyBase+0x1dc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d803      	bhi.n	800265e <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8002656:	2301      	movs	r3, #1
 8002658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800265c:	e00e      	b.n	800267c <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a68      	ldr	r2, [pc, #416]	; (8002804 <SpiritManagementSetFrequencyBase+0x1e0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d907      	bls.n	8002676 <SpiritManagementSetFrequencyBase+0x52>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a67      	ldr	r2, [pc, #412]	; (8002808 <SpiritManagementSetFrequencyBase+0x1e4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d803      	bhi.n	8002676 <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 800266e:	2302      	movs	r3, #2
 8002670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002674:	e002      	b.n	800267c <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8002676:	2303      	movs	r3, #3
 8002678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 800267c:	f000 fff6 	bl	800366c <SpiritRadioGetFrequencyOffset>
 8002680:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002682:	f000 ffd3 	bl	800362c <SpiritRadioGetChannelSpace>
 8002686:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002688:	f000 ffb8 	bl	80035fc <SpiritRadioGetChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002690:	6a3a      	ldr	r2, [r7, #32]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	441a      	add	r2, r3
 8002696:	7efb      	ldrb	r3, [r7, #27]
 8002698:	69f9      	ldr	r1, [r7, #28]
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	4413      	add	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80026a2:	f001 fdd3 	bl	800424c <SpiritRadioGetRefDiv>
 80026a6:	4603      	mov	r3, r0
 80026a8:	3301      	adds	r3, #1
 80026aa:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 80026ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d83a      	bhi.n	800272a <SpiritManagementSetFrequencyBase+0x106>
 80026b4:	a201      	add	r2, pc, #4	; (adr r2, 80026bc <SpiritManagementSetFrequencyBase+0x98>)
 80026b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ba:	bf00      	nop
 80026bc:	08002715 	.word	0x08002715
 80026c0:	080026fd 	.word	0x080026fd
 80026c4:	080026e5 	.word	0x080026e5
 80026c8:	080026cd 	.word	0x080026cd
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	4a4f      	ldr	r2, [pc, #316]	; (800280c <SpiritManagementSetFrequencyBase+0x1e8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d803      	bhi.n	80026dc <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7ff fe47 	bl	8002368 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80026da:	e026      	b.n	800272a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80026dc:	2001      	movs	r0, #1
 80026de:	f7ff fe43 	bl	8002368 <SpiritCalibrationSelectVco>
    break;
 80026e2:	e022      	b.n	800272a <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	4a4a      	ldr	r2, [pc, #296]	; (8002810 <SpiritManagementSetFrequencyBase+0x1ec>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d803      	bhi.n	80026f4 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7ff fe3b 	bl	8002368 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80026f2:	e01a      	b.n	800272a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80026f4:	2001      	movs	r0, #1
 80026f6:	f7ff fe37 	bl	8002368 <SpiritCalibrationSelectVco>
    break;
 80026fa:	e016      	b.n	800272a <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	4a45      	ldr	r2, [pc, #276]	; (8002814 <SpiritManagementSetFrequencyBase+0x1f0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d803      	bhi.n	800270c <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002704:	2000      	movs	r0, #0
 8002706:	f7ff fe2f 	bl	8002368 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800270a:	e00e      	b.n	800272a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 800270c:	2001      	movs	r0, #1
 800270e:	f7ff fe2b 	bl	8002368 <SpiritCalibrationSelectVco>
    break;
 8002712:	e00a      	b.n	800272a <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	4a40      	ldr	r2, [pc, #256]	; (8002818 <SpiritManagementSetFrequencyBase+0x1f4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d803      	bhi.n	8002724 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800271c:	2000      	movs	r0, #0
 800271e:	f7ff fe23 	bl	8002368 <SpiritCalibrationSelectVco>
 8002722:	e002      	b.n	800272a <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002724:	2001      	movs	r0, #1
 8002726:	f7ff fe1f 	bl	8002368 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f000 fe7e 	bl	800342c <SpiritRadioSearchWCP>
 8002730:	4603      	mov	r3, r0
 8002732:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7fd fef5 	bl	8000524 <__aeabi_ui2d>
 800273a:	4604      	mov	r4, r0
 800273c:	460d      	mov	r5, r1
 800273e:	7cfb      	ldrb	r3, [r7, #19]
 8002740:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002744:	4935      	ldr	r1, [pc, #212]	; (800281c <SpiritManagementSetFrequencyBase+0x1f8>)
 8002746:	5c8a      	ldrb	r2, [r1, r2]
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	049b      	lsls	r3, r3, #18
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd fef8 	bl	8000544 <__aeabi_i2d>
 8002754:	4680      	mov	r8, r0
 8002756:	4689      	mov	r9, r1
 8002758:	f001 fdec 	bl	8004334 <SpiritRadioGetXtalFrequency>
 800275c:	4603      	mov	r3, r0
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd fee0 	bl	8000524 <__aeabi_ui2d>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4640      	mov	r0, r8
 800276a:	4649      	mov	r1, r9
 800276c:	f7fe f87e 	bl	800086c <__aeabi_ddiv>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4620      	mov	r0, r4
 8002776:	4629      	mov	r1, r5
 8002778:	f7fd ff4e 	bl	8000618 <__aeabi_dmul>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	f7fe f95a 	bl	8000a3c <__aeabi_d2uiz>
 8002788:	4603      	mov	r3, r0
 800278a:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	0d5b      	lsrs	r3, r3, #21
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	b2da      	uxtb	r2, r3
 8002798:	7cbb      	ldrb	r3, [r7, #18]
 800279a:	015b      	lsls	r3, r3, #5
 800279c:	b2db      	uxtb	r3, r3
 800279e:	4313      	orrs	r3, r2
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	0b5b      	lsrs	r3, r3, #13
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027c0:	4917      	ldr	r1, [pc, #92]	; (8002820 <SpiritManagementSetFrequencyBase+0x1fc>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80027ca:	f107 0308 	add.w	r3, r7, #8
 80027ce:	461a      	mov	r2, r3
 80027d0:	2104      	movs	r1, #4
 80027d2:	2008      	movs	r0, #8
 80027d4:	f001 ff9e 	bl	8004714 <RadioSpiWriteRegisters>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <SpiritManagementSetFrequencyBase+0x200>)
 80027dc:	b212      	sxth	r2, r2
 80027de:	4611      	mov	r1, r2
 80027e0:	7019      	strb	r1, [r3, #0]
 80027e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027e6:	705a      	strb	r2, [r3, #1]
}
 80027e8:	bf00      	nop
 80027ea:	3728      	adds	r7, #40	; 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027f2:	bf00      	nop
 80027f4:	2e5f5680 	.word	0x2e5f5680
 80027f8:	390c2fe0 	.word	0x390c2fe0
 80027fc:	1701e47f 	.word	0x1701e47f
 8002800:	1c146a60 	.word	0x1c146a60
 8002804:	11d260bf 	.word	0x11d260bf
 8002808:	14ced7e0 	.word	0x14ced7e0
 800280c:	099cf4e1 	.word	0x099cf4e1
 8002810:	1339e9c3 	.word	0x1339e9c3
 8002814:	19a28d05 	.word	0x19a28d05
 8002818:	33451a0a 	.word	0x33451a0a
 800281c:	0800d0b0 	.word	0x0800d0b0
 8002820:	0800d0ac 	.word	0x0800d0ac
 8002824:	20000278 	.word	0x20000278

08002828 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8002836:	f001 fd7d 	bl	8004334 <SpiritRadioGetXtalFrequency>
 800283a:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 800283c:	2300      	movs	r3, #0
 800283e:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4a57      	ldr	r2, [pc, #348]	; (80029a0 <SpiritManagementWaVcoCalibration+0x178>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d90f      	bls.n	8002868 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002848:	f001 fd00 	bl	800424c <SpiritRadioGetRefDiv>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 8002856:	f001 f86b 	bl	8003930 <SpiritRadioGetFrequencyBase>
 800285a:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 800285c:	2001      	movs	r0, #1
 800285e:	f001 fcc5 	bl	80041ec <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff fede 	bl	8002624 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8002868:	f001 f862 	bl	8003930 <SpiritRadioGetFrequencyBase>
 800286c:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 800286e:	2325      	movs	r3, #37	; 0x25
 8002870:	707b      	strb	r3, [r7, #1]
 8002872:	1c7b      	adds	r3, r7, #1
 8002874:	461a      	mov	r2, r3
 8002876:	2101      	movs	r1, #1
 8002878:	20a1      	movs	r0, #161	; 0xa1
 800287a:	f001 ff4b 	bl	8004714 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 800287e:	2001      	movs	r0, #1
 8002880:	f7ff fcb6 	bl	80021f0 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8002884:	f001 ff14 	bl	80046b0 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8002888:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <SpiritManagementWaVcoCalibration+0x17c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b40      	cmp	r3, #64	; 0x40
 8002894:	d10d      	bne.n	80028b2 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 8002896:	2301      	movs	r3, #1
 8002898:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 800289a:	2062      	movs	r0, #98	; 0x62
 800289c:	f7ff fd8e 	bl	80023bc <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 80028a0:	f001 ff06 	bl	80046b0 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80028a4:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <SpiritManagementWaVcoCalibration+0x17c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d1f6      	bne.n	80028a0 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80028b2:	2066      	movs	r0, #102	; 0x66
 80028b4:	f7ff fd82 	bl	80023bc <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80028bc:	f001 fef8 	bl	80046b0 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80028c0:	4b38      	ldr	r3, [pc, #224]	; (80029a4 <SpiritManagementWaVcoCalibration+0x17c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b13      	cmp	r3, #19
 80028cc:	d106      	bne.n	80028dc <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 80028ce:	7b7b      	ldrb	r3, [r7, #13]
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	737a      	strb	r2, [r7, #13]
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d101      	bne.n	80028dc <SpiritManagementWaVcoCalibration+0xb4>
 80028d8:	2301      	movs	r3, #1
 80028da:	e05d      	b.n	8002998 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80028dc:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <SpiritManagementWaVcoCalibration+0x17c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b0f      	cmp	r3, #15
 80028e8:	d1e8      	bne.n	80028bc <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80028ea:	f7ff fcb9 	bl	8002260 <SpiritCalibrationGetVcoCalData>
 80028ee:	4603      	mov	r3, r0
 80028f0:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 80028f2:	2062      	movs	r0, #98	; 0x62
 80028f4:	f7ff fd62 	bl	80023bc <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80028f8:	f001 feda 	bl	80046b0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80028fc:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <SpiritManagementWaVcoCalibration+0x17c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b03      	cmp	r3, #3
 8002908:	d1f6      	bne.n	80028f8 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 800290a:	2065      	movs	r0, #101	; 0x65
 800290c:	f7ff fd56 	bl	80023bc <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002910:	2300      	movs	r3, #0
 8002912:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002914:	f001 fecc 	bl	80046b0 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002918:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <SpiritManagementWaVcoCalibration+0x17c>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b13      	cmp	r3, #19
 8002924:	d106      	bne.n	8002934 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 8002926:	7b7b      	ldrb	r3, [r7, #13]
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	737a      	strb	r2, [r7, #13]
 800292c:	2b05      	cmp	r3, #5
 800292e:	d101      	bne.n	8002934 <SpiritManagementWaVcoCalibration+0x10c>
 8002930:	2301      	movs	r3, #1
 8002932:	e031      	b.n	8002998 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002934:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <SpiritManagementWaVcoCalibration+0x17c>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b0f      	cmp	r3, #15
 8002940:	d1e8      	bne.n	8002914 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8002942:	f7ff fc8d 	bl	8002260 <SpiritCalibrationGetVcoCalData>
 8002946:	4603      	mov	r3, r0
 8002948:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 800294a:	2062      	movs	r0, #98	; 0x62
 800294c:	f7ff fd36 	bl	80023bc <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002950:	f001 feae 	bl	80046b0 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <SpiritManagementWaVcoCalibration+0x17c>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b03      	cmp	r3, #3
 8002960:	d1f6      	bne.n	8002950 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8002962:	7bbb      	ldrb	r3, [r7, #14]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d102      	bne.n	800296e <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002968:	2063      	movs	r0, #99	; 0x63
 800296a:	f7ff fd27 	bl	80023bc <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 800296e:	2000      	movs	r0, #0
 8002970:	f7ff fc3e 	bl	80021f0 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 800297a:	2000      	movs	r0, #0
 800297c:	f001 fc36 	bl	80041ec <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff fe4f 	bl	8002624 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fc85 	bl	8002298 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 800298e:	78bb      	ldrb	r3, [r7, #2]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fcb5 	bl	8002300 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	01c9c380 	.word	0x01c9c380
 80029a4:	20000278 	.word	0x20000278

080029a8 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80029ae:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <SpiritManagementWaCmdStrobeTx+0x60>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d023      	beq.n	8002a00 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <SpiritManagementWaCmdStrobeTx+0x64>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <SpiritManagementWaCmdStrobeTx+0x68>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d908      	bls.n	80029d4 <SpiritManagementWaCmdStrobeTx+0x2c>
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <SpiritManagementWaCmdStrobeTx+0x64>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <SpiritManagementWaCmdStrobeTx+0x6c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d803      	bhi.n	80029d4 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 80029cc:	20c0      	movs	r0, #192	; 0xc0
 80029ce:	f001 fb83 	bl	80040d8 <SpiritRadioSetPACwc>
 80029d2:	e002      	b.n	80029da <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f001 fb7f 	bl	80040d8 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80029da:	2311      	movs	r3, #17
 80029dc:	71fb      	strb	r3, [r7, #7]
 80029de:	1dfb      	adds	r3, r7, #7
 80029e0:	461a      	mov	r2, r3
 80029e2:	2101      	movs	r1, #1
 80029e4:	20a9      	movs	r0, #169	; 0xa9
 80029e6:	f001 fe95 	bl	8004714 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 80029ea:	2320      	movs	r3, #32
 80029ec:	71fb      	strb	r3, [r7, #7]
 80029ee:	1dfb      	adds	r3, r7, #7
 80029f0:	461a      	mov	r2, r3
 80029f2:	2101      	movs	r1, #1
 80029f4:	20a5      	movs	r0, #165	; 0xa5
 80029f6:	f001 fe8d 	bl	8004714 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 80029fa:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <SpiritManagementWaCmdStrobeTx+0x60>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
  }
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000006 	.word	0x20000006
 8002a0c:	20000270 	.word	0x20000270
 8002a10:	08f0d17f 	.word	0x08f0d17f
 8002a14:	1c03a180 	.word	0x1c03a180

08002a18 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d00d      	beq.n	8002a44 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002a28:	2398      	movs	r3, #152	; 0x98
 8002a2a:	71fb      	strb	r3, [r7, #7]
 8002a2c:	1dfb      	adds	r3, r7, #7
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2101      	movs	r1, #1
 8002a32:	20a5      	movs	r0, #165	; 0xa5
 8002a34:	f001 fe6e 	bl	8004714 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f001 fb4d 	bl	80040d8 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8002a3e:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
  }
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000006 	.word	0x20000006

08002a50 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <SpiritManagementWaTRxFcMem+0x20>)
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8002a5e:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <SpiritManagementWaTRxFcMem+0x24>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	20000006 	.word	0x20000006
 8002a74:	20000270 	.word	0x20000270

08002a78 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 8002a7e:	23ca      	movs	r3, #202	; 0xca
 8002a80:	71fb      	strb	r3, [r7, #7]
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	461a      	mov	r2, r3
 8002a86:	2101      	movs	r1, #1
 8002a88:	20b2      	movs	r0, #178	; 0xb2
 8002a8a:	f001 fe43 	bl	8004714 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002a8e:	2304      	movs	r3, #4
 8002a90:	71fb      	strb	r3, [r7, #7]
 8002a92:	1dfb      	adds	r3, r7, #7
 8002a94:	461a      	mov	r2, r3
 8002a96:	2101      	movs	r1, #1
 8002a98:	20a8      	movs	r0, #168	; 0xa8
 8002a9a:	f001 fe3b 	bl	8004714 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 8002a9e:	1dfb      	adds	r3, r7, #7
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	20a8      	movs	r0, #168	; 0xa8
 8002aa6:	f001 fe81 	bl	80047ac <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002aaa:	2300      	movs	r3, #0
 8002aac:	71fb      	strb	r3, [r7, #7]
 8002aae:	1dfb      	adds	r3, r7, #7
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	20a8      	movs	r0, #168	; 0xa8
 8002ab6:	f001 fe2d 	bl	8004714 <RadioSpiWriteRegisters>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002aca:	1dfb      	adds	r3, r7, #7
 8002acc:	461a      	mov	r2, r3
 8002ace:	2101      	movs	r1, #1
 8002ad0:	2030      	movs	r0, #48	; 0x30
 8002ad2:	f001 fe6b 	bl	80047ac <RadioSpiReadRegisters>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <SpiritPktCommonGetControlLength+0x34>)
 8002ada:	b212      	sxth	r2, r2
 8002adc:	4611      	mov	r1, r2
 8002ade:	7019      	strb	r1, [r3, #0]
 8002ae0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ae4:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	b2db      	uxtb	r3, r3

}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000278 	.word	0x20000278

08002afc <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002b06:	f107 030f 	add.w	r3, r7, #15
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	204f      	movs	r0, #79	; 0x4f
 8002b10:	f001 fe4c 	bl	80047ac <RadioSpiReadRegisters>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002b18:	b212      	sxth	r2, r2
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	7019      	strb	r1, [r3, #0]
 8002b1e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b22:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d105      	bne.n	8002b36 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	e004      	b.n	8002b40 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002b40:	f107 030f 	add.w	r3, r7, #15
 8002b44:	461a      	mov	r2, r3
 8002b46:	2101      	movs	r1, #1
 8002b48:	204f      	movs	r0, #79	; 0x4f
 8002b4a:	f001 fde3 	bl	8004714 <RadioSpiWriteRegisters>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002b52:	b212      	sxth	r2, r2
 8002b54:	4611      	mov	r1, r2
 8002b56:	7019      	strb	r1, [r3, #0]
 8002b58:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b5c:	705a      	strb	r2, [r3, #1]

}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000278 	.word	0x20000278

08002b6c <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8002b76:	1dfb      	adds	r3, r7, #7
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	204b      	movs	r0, #75	; 0x4b
 8002b7e:	f001 fdc9 	bl	8004714 <RadioSpiWriteRegisters>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <SpiritPktCommonSetDestinationAddress+0x30>)
 8002b86:	b212      	sxth	r2, r2
 8002b88:	4611      	mov	r1, r2
 8002b8a:	7019      	strb	r1, [r3, #0]
 8002b8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b90:	705a      	strb	r2, [r3, #1]

}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000278 	.word	0x20000278

08002ba0 <SpiritPktCommonGetReceivedDestAddress>:
 * @brief  Returns the destination address of the received packet.
 * @param  None.
 * @retval uint8_t Destination address of the received address.
 */
uint8_t SpiritPktCommonGetReceivedDestAddress(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD0 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD0_BASE, 1, &tempRegValue);
 8002ba6:	1dfb      	adds	r3, r7, #7
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2101      	movs	r1, #1
 8002bac:	20d3      	movs	r0, #211	; 0xd3
 8002bae:	f001 fdfd 	bl	80047ac <RadioSpiReadRegisters>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <SpiritPktCommonGetReceivedDestAddress+0x2c>)
 8002bb6:	b212      	sxth	r2, r2
 8002bb8:	4611      	mov	r1, r2
 8002bba:	7019      	strb	r1, [r3, #0]
 8002bbc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bc0:	705a      	strb	r2, [r3, #1]

  /* Return value */
  return tempRegValue;
 8002bc2:	79fb      	ldrb	r3, [r7, #7]

}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000278 	.word	0x20000278

08002bd0 <SpiritPktCommonGetReceivedSourceAddress>:
 * @brief  Returns the source address of the received packet.
 * @param  None.
 * @retval uint8_t Source address of the received packet.
 */
uint8_t SpiritPktCommonGetReceivedSourceAddress(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD1 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD1_BASE, 1, &tempRegValue);
 8002bd6:	1dfb      	adds	r3, r7, #7
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2101      	movs	r1, #1
 8002bdc:	20d2      	movs	r0, #210	; 0xd2
 8002bde:	f001 fde5 	bl	80047ac <RadioSpiReadRegisters>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <SpiritPktCommonGetReceivedSourceAddress+0x2c>)
 8002be6:	b212      	sxth	r2, r2
 8002be8:	4611      	mov	r1, r2
 8002bea:	7019      	strb	r1, [r3, #0]
 8002bec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bf0:	705a      	strb	r2, [r3, #1]

  /* Returns value */
  return tempRegValue;
 8002bf2:	79fb      	ldrb	r3, [r7, #7]

}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000278 	.word	0x20000278

08002c00 <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002c08:	f107 0308 	add.w	r3, r7, #8
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2101      	movs	r1, #1
 8002c10:	2051      	movs	r0, #81	; 0x51
 8002c12:	f001 fdcb 	bl	80047ac <RadioSpiReadRegisters>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b60      	ldr	r3, [pc, #384]	; (8002d9c <SpiritPktStackInit+0x19c>)
 8002c1a:	b212      	sxth	r2, r2
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	7019      	strb	r1, [r3, #0]
 8002c20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c24:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8002c26:	7a3b      	ldrb	r3, [r7, #8]
 8002c28:	f023 0320 	bic.w	r3, r3, #32
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002c30:	7a3b      	ldrb	r3, [r7, #8]
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002c3a:	f107 0308 	add.w	r3, r7, #8
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2101      	movs	r1, #1
 8002c42:	2051      	movs	r0, #81	; 0x51
 8002c44:	f001 fd66 	bl	8004714 <RadioSpiWriteRegisters>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b54      	ldr	r3, [pc, #336]	; (8002d9c <SpiritPktStackInit+0x19c>)
 8002c4c:	b212      	sxth	r2, r2
 8002c4e:	4611      	mov	r1, r2
 8002c50:	7019      	strb	r1, [r3, #0]
 8002c52:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c56:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002c58:	f107 0308 	add.w	r3, r7, #8
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2101      	movs	r1, #1
 8002c60:	204f      	movs	r0, #79	; 0x4f
 8002c62:	f001 fda3 	bl	80047ac <RadioSpiReadRegisters>
 8002c66:	4602      	mov	r2, r0
 8002c68:	4b4c      	ldr	r3, [pc, #304]	; (8002d9c <SpiritPktStackInit+0x19c>)
 8002c6a:	b212      	sxth	r2, r2
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	7019      	strb	r1, [r3, #0]
 8002c70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c74:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8002c76:	7a3b      	ldrb	r3, [r7, #8]
 8002c78:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002c80:	f107 0308 	add.w	r3, r7, #8
 8002c84:	461a      	mov	r2, r3
 8002c86:	2101      	movs	r1, #1
 8002c88:	204f      	movs	r0, #79	; 0x4f
 8002c8a:	f001 fd43 	bl	8004714 <RadioSpiWriteRegisters>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	4b42      	ldr	r3, [pc, #264]	; (8002d9c <SpiritPktStackInit+0x19c>)
 8002c92:	b212      	sxth	r2, r2
 8002c94:	4611      	mov	r1, r2
 8002c96:	7019      	strb	r1, [r3, #0]
 8002c98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c9c:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7adb      	ldrb	r3, [r3, #11]
 8002ca2:	f043 0310 	orr.w	r3, r3, #16
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	7a5b      	ldrb	r3, [r3, #9]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <SpiritPktStackInit+0xb8>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7a5b      	ldrb	r3, [r3, #9]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	781a      	ldrb	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	785b      	ldrb	r3, [r3, #1]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7a9b      	ldrb	r3, [r3, #10]
 8002ce2:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	7b5b      	ldrb	r3, [r3, #13]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d104      	bne.n	8002cf6 <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002cec:	7afb      	ldrb	r3, [r7, #11]
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7b1b      	ldrb	r3, [r3, #12]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d104      	bne.n	8002d08 <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002cfe:	7afb      	ldrb	r3, [r7, #11]
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002d08:	f107 0308 	add.w	r3, r7, #8
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2104      	movs	r1, #4
 8002d10:	2030      	movs	r0, #48	; 0x30
 8002d12:	f001 fcff 	bl	8004714 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
 8002d1a:	e01d      	b.n	8002d58 <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	085b      	lsrs	r3, r3, #1
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f1c3 0303 	rsb	r3, r3, #3
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	da06      	bge.n	8002d3c <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	3310      	adds	r3, #16
 8002d32:	443b      	add	r3, r7
 8002d34:	2200      	movs	r2, #0
 8002d36:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002d3a:	e00a      	b.n	8002d52 <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	40da      	lsrs	r2, r3
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	3310      	adds	r3, #16
 8002d4c:	443b      	add	r3, r7
 8002d4e:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	3301      	adds	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d9de      	bls.n	8002d1c <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7a9b      	ldrb	r3, [r3, #10]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d103      	bne.n	8002d6e <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7ff fec8 	bl	8002afc <SpiritPktCommonFilterOnCrc>
 8002d6c:	e002      	b.n	8002d74 <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 8002d6e:	2001      	movs	r0, #1
 8002d70:	f7ff fec4 	bl	8002afc <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002d74:	f107 0308 	add.w	r3, r7, #8
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2104      	movs	r1, #4
 8002d7c:	2036      	movs	r0, #54	; 0x36
 8002d7e:	f001 fcc9 	bl	8004714 <RadioSpiWriteRegisters>
 8002d82:	4602      	mov	r2, r0
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <SpiritPktStackInit+0x19c>)
 8002d86:	b212      	sxth	r2, r2
 8002d88:	4611      	mov	r1, r2
 8002d8a:	7019      	strb	r1, [r3, #0]
 8002d8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d90:	705a      	strb	r2, [r3, #1]

}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000278 	.word	0x20000278

08002da0 <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	461a      	mov	r2, r3
 8002dae:	2101      	movs	r1, #1
 8002db0:	204f      	movs	r0, #79	; 0x4f
 8002db2:	f001 fcfb 	bl	80047ac <RadioSpiReadRegisters>
 8002db6:	4602      	mov	r2, r0
 8002db8:	4b2f      	ldr	r3, [pc, #188]	; (8002e78 <SpiritPktStackAddressesInit+0xd8>)
 8002dba:	b212      	sxth	r2, r2
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	7019      	strb	r1, [r3, #0]
 8002dc0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002dc4:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d105      	bne.n	8002dda <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002dce:	7b3b      	ldrb	r3, [r7, #12]
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	733b      	strb	r3, [r7, #12]
 8002dd8:	e004      	b.n	8002de4 <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002dda:	7b3b      	ldrb	r3, [r7, #12]
 8002ddc:	f023 0308 	bic.w	r3, r3, #8
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	789b      	ldrb	r3, [r3, #2]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d105      	bne.n	8002df8 <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002dec:	7b3b      	ldrb	r3, [r7, #12]
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	733b      	strb	r3, [r7, #12]
 8002df6:	e004      	b.n	8002e02 <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002df8:	7b3b      	ldrb	r3, [r7, #12]
 8002dfa:	f023 0304 	bic.w	r3, r3, #4
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	791b      	ldrb	r3, [r3, #4]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d105      	bne.n	8002e16 <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002e0a:	7b3b      	ldrb	r3, [r7, #12]
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	733b      	strb	r3, [r7, #12]
 8002e14:	e004      	b.n	8002e20 <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002e16:	7b3b      	ldrb	r3, [r7, #12]
 8002e18:	f023 0302 	bic.w	r3, r3, #2
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	461a      	mov	r2, r3
 8002e26:	2101      	movs	r1, #1
 8002e28:	204f      	movs	r0, #79	; 0x4f
 8002e2a:	f001 fc73 	bl	8004714 <RadioSpiWriteRegisters>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <SpiritPktStackAddressesInit+0xd8>)
 8002e32:	b212      	sxth	r2, r2
 8002e34:	4611      	mov	r1, r2
 8002e36:	7019      	strb	r1, [r3, #0]
 8002e38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e3c:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	795b      	ldrb	r3, [r3, #5]
 8002e42:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	78db      	ldrb	r3, [r3, #3]
 8002e48:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	785b      	ldrb	r3, [r3, #1]
 8002e4e:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002e50:	f107 030c 	add.w	r3, r7, #12
 8002e54:	461a      	mov	r2, r3
 8002e56:	2103      	movs	r1, #3
 8002e58:	204c      	movs	r0, #76	; 0x4c
 8002e5a:	f001 fc5b 	bl	8004714 <RadioSpiWriteRegisters>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <SpiritPktStackAddressesInit+0xd8>)
 8002e62:	b212      	sxth	r2, r2
 8002e64:	4611      	mov	r1, r2
 8002e66:	7019      	strb	r1, [r3, #0]
 8002e68:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e6c:	705a      	strb	r2, [r3, #1]
  
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000278 	.word	0x20000278

08002e7c <SpiritPktStackSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter can be any value of uint16_t.
 * @retval None.
 */
void SpiritPktStackSetPayloadLength(uint16_t nPayloadLength)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];

  /* Computes the oversize (address + control) size */
  uint16_t overSize = 2 + (uint16_t) SpiritPktStackGetControlLength();
 8002e86:	f7ff fe1d 	bl	8002ac4 <SpiritPktCommonGetControlLength>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3302      	adds	r3, #2
 8002e90:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from lPayloadLength */
  tempRegValue[1]=STACK_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	89fb      	ldrh	r3, [r7, #14]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from lPayloadLength */
  tempRegValue[0]=STACK_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8002ea0:	88fa      	ldrh	r2, [r7, #6]
 8002ea2:	89fb      	ldrh	r3, [r7, #14]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	121b      	asrs	r3, r3, #8
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	733b      	strb	r3, [r7, #12]

  /* Writes the value on the PCKTLENx registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	2034      	movs	r0, #52	; 0x34
 8002eb6:	f001 fc2d 	bl	8004714 <RadioSpiWriteRegisters>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <SpiritPktStackSetPayloadLength+0x58>)
 8002ebe:	b212      	sxth	r2, r2
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	7019      	strb	r1, [r3, #0]
 8002ec4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ec8:	705a      	strb	r2, [r3, #1]

}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000278 	.word	0x20000278

08002ed8 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002ee2:	f107 030f 	add.w	r3, r7, #15
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2101      	movs	r1, #1
 8002eea:	203a      	movs	r0, #58	; 0x3a
 8002eec:	f001 fc5e 	bl	80047ac <RadioSpiReadRegisters>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <SpiritQiSqiCheck+0x6c>)
 8002ef4:	b212      	sxth	r2, r2
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	7019      	strb	r1, [r3, #0]
 8002efa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002efe:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d105      	bne.n	8002f12 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	f043 0302 	orr.w	r3, r3, #2
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	73fb      	strb	r3, [r7, #15]
 8002f10:	e004      	b.n	8002f1c <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	f023 0302 	bic.w	r3, r3, #2
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002f1c:	f107 030f 	add.w	r3, r7, #15
 8002f20:	461a      	mov	r2, r3
 8002f22:	2101      	movs	r1, #1
 8002f24:	203a      	movs	r0, #58	; 0x3a
 8002f26:	f001 fbf5 	bl	8004714 <RadioSpiWriteRegisters>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <SpiritQiSqiCheck+0x6c>)
 8002f2e:	b212      	sxth	r2, r2
 8002f30:	4611      	mov	r1, r2
 8002f32:	7019      	strb	r1, [r3, #0]
 8002f34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f38:	705a      	strb	r2, [r3, #1]

}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000278 	.word	0x20000278

08002f48 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002f52:	f107 030f 	add.w	r3, r7, #15
 8002f56:	461a      	mov	r2, r3
 8002f58:	2101      	movs	r1, #1
 8002f5a:	203a      	movs	r0, #58	; 0x3a
 8002f5c:	f001 fc26 	bl	80047ac <RadioSpiReadRegisters>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <SpiritQiSetSqiThreshold+0x64>)
 8002f64:	b212      	sxth	r2, r2
 8002f66:	4611      	mov	r1, r2
 8002f68:	7019      	strb	r1, [r3, #0]
 8002f6a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f6e:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002f84:	f107 030f 	add.w	r3, r7, #15
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	203a      	movs	r0, #58	; 0x3a
 8002f8e:	f001 fbc1 	bl	8004714 <RadioSpiWriteRegisters>
 8002f92:	4602      	mov	r2, r0
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <SpiritQiSetSqiThreshold+0x64>)
 8002f96:	b212      	sxth	r2, r2
 8002f98:	4611      	mov	r1, r2
 8002f9a:	7019      	strb	r1, [r3, #0]
 8002f9c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fa0:	705a      	strb	r2, [r3, #1]

}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000278 	.word	0x20000278

08002fb0 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3382      	adds	r3, #130	; 0x82
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002fc4:	f107 030f 	add.w	r3, r7, #15
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2101      	movs	r1, #1
 8002fcc:	2022      	movs	r0, #34	; 0x22
 8002fce:	f001 fba1 	bl	8004714 <RadioSpiWriteRegisters>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <SpiritQiSetRssiThresholddBm+0x3c>)
 8002fd6:	b212      	sxth	r2, r2
 8002fd8:	4611      	mov	r1, r2
 8002fda:	7019      	strb	r1, [r3, #0]
 8002fdc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fe0:	705a      	strb	r2, [r3, #1]

}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000278 	.word	0x20000278

08002ff0 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08c      	sub	sp, #48	; 0x30
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002ff8:	23a0      	movs	r3, #160	; 0xa0
 8002ffa:	747b      	strb	r3, [r7, #17]
 8002ffc:	f107 0311 	add.w	r3, r7, #17
 8003000:	461a      	mov	r2, r3
 8003002:	2101      	movs	r1, #1
 8003004:	209f      	movs	r0, #159	; 0x9f
 8003006:	f001 fb85 	bl	8004714 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003010:	ee07 3a90 	vmov	s15, r3
 8003014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	ee07 3a90 	vmov	s15, r3
 8003020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003028:	eddf 6aae 	vldr	s13, [pc, #696]	; 80032e4 <SpiritRadioInit+0x2f4>
 800302c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003034:	ee17 3a90 	vmov	r3, s15
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 800303a:	2063      	movs	r0, #99	; 0x63
 800303c:	f001 fc02 	bl	8004844 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8003040:	2300      	movs	r3, #0
 8003042:	73bb      	strb	r3, [r7, #14]
 8003044:	e004      	b.n	8003050 <SpiritRadioInit+0x60>
 8003046:	7bbb      	ldrb	r3, [r7, #14]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	3301      	adds	r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	73bb      	strb	r3, [r7, #14]
 8003050:	7bbb      	ldrb	r3, [r7, #14]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2bff      	cmp	r3, #255	; 0xff
 8003056:	d1f6      	bne.n	8003046 <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8003058:	f001 fb2a 	bl	80046b0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 800305c:	4ba2      	ldr	r3, [pc, #648]	; (80032e8 <SpiritRadioInit+0x2f8>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d1ea      	bne.n	8003040 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 800306a:	4ba0      	ldr	r3, [pc, #640]	; (80032ec <SpiritRadioInit+0x2fc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4aa0      	ldr	r2, [pc, #640]	; (80032f0 <SpiritRadioInit+0x300>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d803      	bhi.n	800307c <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8003074:	2000      	movs	r0, #0
 8003076:	f001 f90b 	bl	8004290 <SpiritRadioSetDigDiv>
 800307a:	e002      	b.n	8003082 <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 800307c:	2001      	movs	r0, #1
 800307e:	f001 f907 	bl	8004290 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8003082:	2062      	movs	r0, #98	; 0x62
 8003084:	f001 fbde 	bl	8004844 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8003088:	2300      	movs	r3, #0
 800308a:	737b      	strb	r3, [r7, #13]
 800308c:	e004      	b.n	8003098 <SpiritRadioInit+0xa8>
 800308e:	7b7b      	ldrb	r3, [r7, #13]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	3301      	adds	r3, #1
 8003094:	b2db      	uxtb	r3, r3
 8003096:	737b      	strb	r3, [r7, #13]
 8003098:	7b7b      	ldrb	r3, [r7, #13]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2bff      	cmp	r3, #255	; 0xff
 800309e:	d1f6      	bne.n	800308e <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80030a0:	f001 fb06 	bl	80046b0 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 80030a4:	4b90      	ldr	r3, [pc, #576]	; (80032e8 <SpiritRadioInit+0x2f8>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d1ea      	bne.n	8003088 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	ee07 3a90 	vmov	s15, r3
 80030b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030bc:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80032f4 <SpiritRadioInit+0x304>
 80030c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80030c4:	4b89      	ldr	r3, [pc, #548]	; (80032ec <SpiritRadioInit+0x2fc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	ee07 3a90 	vmov	s15, r3
 80030cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030d8:	ee17 3a90 	vmov	r3, s15
 80030dc:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 80030de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 80030ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	025a      	lsls	r2, r3, #9
 80030fa:	4b7c      	ldr	r3, [pc, #496]	; (80032ec <SpiritRadioInit+0x2fc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	099b      	lsrs	r3, r3, #6
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	3301      	adds	r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fc9d 	bl	8002a50 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8003116:	f107 0310 	add.w	r3, r7, #16
 800311a:	461a      	mov	r2, r3
 800311c:	2101      	movs	r1, #1
 800311e:	20a3      	movs	r0, #163	; 0xa3
 8003120:	f001 fb44 	bl	80047ac <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8003124:	7c3b      	ldrb	r3, [r7, #16]
 8003126:	f023 0302 	bic.w	r3, r3, #2
 800312a:	b2db      	uxtb	r3, r3
 800312c:	743b      	strb	r3, [r7, #16]
 800312e:	f107 0310 	add.w	r3, r7, #16
 8003132:	461a      	mov	r2, r3
 8003134:	2101      	movs	r1, #1
 8003136:	20a3      	movs	r0, #163	; 0xa3
 8003138:	f001 faec 	bl	8004714 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f107 0216 	add.w	r2, r7, #22
 8003144:	f107 0117 	add.w	r1, r7, #23
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fc3d 	bl	80039c8 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7b5a      	ldrb	r2, [r3, #13]
 8003156:	7dbb      	ldrb	r3, [r7, #22]
 8003158:	4313      	orrs	r3, r2
 800315a:	b2db      	uxtb	r3, r3
 800315c:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 800315e:	f107 0310 	add.w	r3, r7, #16
 8003162:	461a      	mov	r2, r3
 8003164:	2101      	movs	r1, #1
 8003166:	201c      	movs	r0, #28
 8003168:	f001 fb20 	bl	80047ac <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f107 0214 	add.w	r2, r7, #20
 8003174:	f107 0115 	add.w	r1, r7, #21
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fdbd 	bl	8003cf8 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 800317e:	7d3b      	ldrb	r3, [r7, #20]
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	b25a      	sxtb	r2, r3
 8003184:	7c3b      	ldrb	r3, [r7, #16]
 8003186:	b25b      	sxtb	r3, r3
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	b25b      	sxtb	r3, r3
 800318e:	4313      	orrs	r3, r2
 8003190:	b25a      	sxtb	r2, r3
 8003192:	7d7b      	ldrb	r3, [r7, #21]
 8003194:	b25b      	sxtb	r3, r3
 8003196:	4313      	orrs	r3, r2
 8003198:	b25b      	sxtb	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f107 0212 	add.w	r2, r7, #18
 80031a6:	f107 0113 	add.w	r1, r7, #19
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fcbe 	bl	8003b2c <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	b25a      	sxtb	r2, r3
 80031b6:	7cbb      	ldrb	r3, [r7, #18]
 80031b8:	b25b      	sxtb	r3, r3
 80031ba:	4313      	orrs	r3, r2
 80031bc:	b25b      	sxtb	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 80031c2:	4b4a      	ldr	r3, [pc, #296]	; (80032ec <SpiritRadioInit+0x2fc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	0b1b      	lsrs	r3, r3, #12
 80031c8:	ee07 3a90 	vmov	s15, r3
 80031cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031d0:	eddf 6a49 	vldr	s13, [pc, #292]	; 80032f8 <SpiritRadioInit+0x308>
 80031d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031d8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80032fc <SpiritRadioInit+0x30c>
 80031dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 80031e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80031f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003204:	dd09      	ble.n	800321a <SpiritRadioInit+0x22a>
 8003206:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800320a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800320e:	edc7 7a00 	vstr	s15, [r7]
 8003212:	783b      	ldrb	r3, [r7, #0]
 8003214:	3301      	adds	r3, #1
 8003216:	b2db      	uxtb	r3, r3
 8003218:	e006      	b.n	8003228 <SpiritRadioInit+0x238>
 800321a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800321e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003222:	edc7 7a00 	vstr	s15, [r7]
 8003226:	783b      	ldrb	r3, [r7, #0]
 8003228:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 800322a:	4b30      	ldr	r3, [pc, #192]	; (80032ec <SpiritRadioInit+0x2fc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a30      	ldr	r2, [pc, #192]	; (80032f0 <SpiritRadioInit+0x300>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d802      	bhi.n	800323a <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	777b      	strb	r3, [r7, #29]
 8003238:	e033      	b.n	80032a2 <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 800323a:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <SpiritRadioInit+0x2fc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	0b5b      	lsrs	r3, r3, #13
 8003240:	ee07 3a90 	vmov	s15, r3
 8003244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003248:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80032f8 <SpiritRadioInit+0x308>
 800324c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003250:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80032fc <SpiritRadioInit+0x30c>
 8003254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003258:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 800325c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003268:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800326c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003270:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	dd09      	ble.n	8003292 <SpiritRadioInit+0x2a2>
 800327e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003286:	edc7 7a00 	vstr	s15, [r7]
 800328a:	783b      	ldrb	r3, [r7, #0]
 800328c:	3301      	adds	r3, #1
 800328e:	b2db      	uxtb	r3, r3
 8003290:	e006      	b.n	80032a0 <SpiritRadioInit+0x2b0>
 8003292:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800329a:	edc7 7a00 	vstr	s15, [r7]
 800329e:	783b      	ldrb	r3, [r7, #0]
 80032a0:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 80032a2:	f107 030f 	add.w	r3, r7, #15
 80032a6:	461a      	mov	r2, r3
 80032a8:	2101      	movs	r1, #1
 80032aa:	2007      	movs	r0, #7
 80032ac:	f001 fa32 	bl	8004714 <RadioSpiWriteRegisters>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <SpiritRadioInit+0x2f8>)
 80032b4:	b212      	sxth	r2, r2
 80032b6:	4611      	mov	r1, r2
 80032b8:	7019      	strb	r1, [r3, #0]
 80032ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80032be:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 80032c0:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <SpiritRadioInit+0x2fc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <SpiritRadioInit+0x310>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d91e      	bls.n	8003308 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <SpiritRadioInit+0x2fc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <SpiritRadioInit+0x314>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	bf8c      	ite	hi
 80032d4:	2301      	movhi	r3, #1
 80032d6:	2300      	movls	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f86c 	bl	80033b8 <SpiritRadioSetXtalFlag>
 80032e0:	e01d      	b.n	800331e <SpiritRadioInit+0x32e>
 80032e2:	bf00      	nop
 80032e4:	49742400 	.word	0x49742400
 80032e8:	20000278 	.word	0x20000278
 80032ec:	20000274 	.word	0x20000274
 80032f0:	01c9c37f 	.word	0x01c9c37f
 80032f4:	48800000 	.word	0x48800000
 80032f8:	49afd520 	.word	0x49afd520
 80032fc:	42800000 	.word	0x42800000
 8003300:	01c9c380 	.word	0x01c9c380
 8003304:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8003308:	4b28      	ldr	r3, [pc, #160]	; (80033ac <SpiritRadioInit+0x3bc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a28      	ldr	r2, [pc, #160]	; (80033b0 <SpiritRadioInit+0x3c0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	bf8c      	ite	hi
 8003312:	2301      	movhi	r3, #1
 8003314:	2300      	movls	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f84d 	bl	80033b8 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	330c      	adds	r3, #12
 8003322:	461a      	mov	r2, r3
 8003324:	2101      	movs	r1, #1
 8003326:	206c      	movs	r0, #108	; 0x6c
 8003328:	f001 f9f4 	bl	8004714 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 800332c:	f107 031c 	add.w	r3, r7, #28
 8003330:	461a      	mov	r2, r3
 8003332:	2104      	movs	r1, #4
 8003334:	200c      	movs	r0, #12
 8003336:	f001 f9ed 	bl	8004714 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 800333a:	f107 0318 	add.w	r3, r7, #24
 800333e:	461a      	mov	r2, r3
 8003340:	2104      	movs	r1, #4
 8003342:	201a      	movs	r0, #26
 8003344:	f001 f9e6 	bl	8004714 <RadioSpiWriteRegisters>
 8003348:	4602      	mov	r2, r0
 800334a:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <SpiritRadioInit+0x3c4>)
 800334c:	b212      	sxth	r2, r2
 800334e:	4611      	mov	r1, r2
 8003350:	7019      	strb	r1, [r3, #0]
 8003352:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003356:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8003358:	2001      	movs	r0, #1
 800335a:	f000 ff15 	bl	8004188 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8003362:	23e3      	movs	r3, #227	; 0xe3
 8003364:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8003366:	f107 031c 	add.w	r3, r7, #28
 800336a:	461a      	mov	r2, r3
 800336c:	2102      	movs	r1, #2
 800336e:	2099      	movs	r0, #153	; 0x99
 8003370:	f001 f9d0 	bl	8004714 <RadioSpiWriteRegisters>
 8003374:	4602      	mov	r2, r0
 8003376:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <SpiritRadioInit+0x3c4>)
 8003378:	b212      	sxth	r2, r2
 800337a:	4611      	mov	r1, r2
 800337c:	7019      	strb	r1, [r3, #0]
 800337e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003382:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8003384:	2322      	movs	r3, #34	; 0x22
 8003386:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8003388:	f107 031c 	add.w	r3, r7, #28
 800338c:	461a      	mov	r2, r3
 800338e:	2101      	movs	r1, #1
 8003390:	20bc      	movs	r0, #188	; 0xbc
 8003392:	f001 f9bf 	bl	8004714 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 f9aa 	bl	80036f4 <SpiritRadioSetFrequencyBase>
 80033a0:	4603      	mov	r3, r0
  
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3730      	adds	r7, #48	; 0x30
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000274 	.word	0x20000274
 80033b0:	017d783f 	.word	0x017d783f
 80033b4:	20000278 	.word	0x20000278

080033b8 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80033c6:	f107 030f 	add.w	r3, r7, #15
 80033ca:	461a      	mov	r2, r3
 80033cc:	2101      	movs	r1, #1
 80033ce:	2001      	movs	r0, #1
 80033d0:	f001 f9ec 	bl	80047ac <RadioSpiReadRegisters>
 80033d4:	4602      	mov	r2, r0
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <SpiritRadioSetXtalFlag+0x70>)
 80033d8:	b212      	sxth	r2, r2
 80033da:	4611      	mov	r1, r2
 80033dc:	7019      	strb	r1, [r3, #0]
 80033de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80033e2:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d105      	bne.n	80033f6 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	73fb      	strb	r3, [r7, #15]
 80033f4:	e004      	b.n	8003400 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8003400:	f107 030f 	add.w	r3, r7, #15
 8003404:	461a      	mov	r2, r3
 8003406:	2101      	movs	r1, #1
 8003408:	2001      	movs	r0, #1
 800340a:	f001 f983 	bl	8004714 <RadioSpiWriteRegisters>
 800340e:	4602      	mov	r2, r0
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <SpiritRadioSetXtalFlag+0x70>)
 8003412:	b212      	sxth	r2, r2
 8003414:	4611      	mov	r1, r2
 8003416:	7019      	strb	r1, [r3, #0]
 8003418:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800341c:	705a      	strb	r2, [r3, #1]
  
}
 800341e:	bf00      	nop
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000278 	.word	0x20000278

0800342c <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 800343c:	2300      	movs	r3, #0
 800343e:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a3a      	ldr	r2, [pc, #232]	; (800352c <SpiritRadioSearchWCP+0x100>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d306      	bcc.n	8003456 <SpiritRadioSearchWCP+0x2a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a39      	ldr	r2, [pc, #228]	; (8003530 <SpiritRadioSearchWCP+0x104>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d802      	bhi.n	8003456 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8003450:	2306      	movs	r3, #6
 8003452:	73bb      	strb	r3, [r7, #14]
 8003454:	e01f      	b.n	8003496 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a36      	ldr	r2, [pc, #216]	; (8003534 <SpiritRadioSearchWCP+0x108>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d906      	bls.n	800346c <SpiritRadioSearchWCP+0x40>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a35      	ldr	r2, [pc, #212]	; (8003538 <SpiritRadioSearchWCP+0x10c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d802      	bhi.n	800346c <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8003466:	230c      	movs	r3, #12
 8003468:	73bb      	strb	r3, [r7, #14]
 800346a:	e014      	b.n	8003496 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a33      	ldr	r2, [pc, #204]	; (800353c <SpiritRadioSearchWCP+0x110>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d906      	bls.n	8003482 <SpiritRadioSearchWCP+0x56>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a32      	ldr	r2, [pc, #200]	; (8003540 <SpiritRadioSearchWCP+0x114>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d802      	bhi.n	8003482 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 800347c:	2310      	movs	r3, #16
 800347e:	73bb      	strb	r3, [r7, #14]
 8003480:	e009      	b.n	8003496 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a2f      	ldr	r2, [pc, #188]	; (8003544 <SpiritRadioSearchWCP+0x118>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d905      	bls.n	8003496 <SpiritRadioSearchWCP+0x6a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a2e      	ldr	r2, [pc, #184]	; (8003548 <SpiritRadioSearchWCP+0x11c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d801      	bhi.n	8003496 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8003492:	2320      	movs	r3, #32
 8003494:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a2c      	ldr	r2, [pc, #176]	; (800354c <SpiritRadioSearchWCP+0x120>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	099b      	lsrs	r3, r3, #6
 80034a0:	7bba      	ldrb	r2, [r7, #14]
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 80034a8:	f241 631f 	movw	r3, #5663	; 0x161f
 80034ac:	461a      	mov	r2, r3
 80034ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d302      	bcc.n	80034c2 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 80034bc:	230f      	movs	r3, #15
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	e023      	b.n	800350a <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	e005      	b.n	80034d4 <SpiritRadioSearchWCP+0xa8>
 80034c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	3301      	adds	r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	73fb      	strb	r3, [r7, #15]
 80034d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d8:	2b0e      	cmp	r3, #14
 80034da:	dc0c      	bgt.n	80034f6 <SpiritRadioSearchWCP+0xca>
 80034dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e0:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <SpiritRadioSearchWCP+0x124>)
 80034e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034e6:	461a      	mov	r2, r3
 80034e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ec:	fb02 f303 	mul.w	r3, r2, r3
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d8e8      	bhi.n	80034c8 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 80034f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <SpiritRadioSearchWCP+0xde>
      i--;
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b2db      	uxtb	r3, r3
 8003508:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 800350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350e:	425a      	negs	r2, r3
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	f002 0207 	and.w	r2, r2, #7
 8003518:	bf58      	it	pl
 800351a:	4253      	negpl	r3, r2
 800351c:	b25b      	sxtb	r3, r3
 800351e:	b2db      	uxtb	r3, r3
  
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	2e5f5680 	.word	0x2e5f5680
 8003530:	390c2fe0 	.word	0x390c2fe0
 8003534:	1701e47f 	.word	0x1701e47f
 8003538:	1c146a60 	.word	0x1c146a60
 800353c:	11d260bf 	.word	0x11d260bf
 8003540:	14ced7e0 	.word	0x14ced7e0
 8003544:	08e18f3f 	.word	0x08e18f3f
 8003548:	0a6fd060 	.word	0x0a6fd060
 800354c:	10624dd3 	.word	0x10624dd3
 8003550:	0800d170 	.word	0x0800d170

08003554 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	461a      	mov	r2, r3
 800355e:	2104      	movs	r1, #4
 8003560:	2008      	movs	r0, #8
 8003562:	f001 f923 	bl	80047ac <RadioSpiReadRegisters>
 8003566:	4602      	mov	r2, r0
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <SpiritRadioGetSynthWord+0x48>)
 800356a:	b212      	sxth	r2, r2
 800356c:	4611      	mov	r1, r2
 800356e:	7019      	strb	r1, [r3, #0]
 8003570:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003574:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8003576:	793b      	ldrb	r3, [r7, #4]
 8003578:	055b      	lsls	r3, r3, #21
 800357a:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 800357e:	797b      	ldrb	r3, [r7, #5]
 8003580:	035b      	lsls	r3, r3, #13
 8003582:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8003584:	79bb      	ldrb	r3, [r7, #6]
 8003586:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8003588:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 800358a:	79fa      	ldrb	r2, [r7, #7]
 800358c:	08d2      	lsrs	r2, r2, #3
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	4413      	add	r3, r2
  
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000278 	.word	0x20000278

080035a0 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 80035a6:	1dfb      	adds	r3, r7, #7
 80035a8:	461a      	mov	r2, r3
 80035aa:	2101      	movs	r1, #1
 80035ac:	200b      	movs	r0, #11
 80035ae:	f001 f8fd 	bl	80047ac <RadioSpiReadRegisters>
 80035b2:	4602      	mov	r2, r0
 80035b4:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <SpiritRadioGetBand+0x58>)
 80035b6:	b212      	sxth	r2, r2
 80035b8:	4611      	mov	r1, r2
 80035ba:	7019      	strb	r1, [r3, #0]
 80035bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80035c0:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e00e      	b.n	80035ee <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d101      	bne.n	80035de <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 80035da:	2301      	movs	r3, #1
 80035dc:	e007      	b.n	80035ee <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d101      	bne.n	80035ec <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 80035e8:	2302      	movs	r3, #2
 80035ea:	e000      	b.n	80035ee <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 80035ec:	2303      	movs	r3, #3
  }
  
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000278 	.word	0x20000278

080035fc <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8003602:	1dfb      	adds	r3, r7, #7
 8003604:	461a      	mov	r2, r3
 8003606:	2101      	movs	r1, #1
 8003608:	206c      	movs	r0, #108	; 0x6c
 800360a:	f001 f8cf 	bl	80047ac <RadioSpiReadRegisters>
 800360e:	4602      	mov	r2, r0
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <SpiritRadioGetChannel+0x2c>)
 8003612:	b212      	sxth	r2, r2
 8003614:	4611      	mov	r1, r2
 8003616:	7019      	strb	r1, [r3, #0]
 8003618:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800361c:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 800361e:	79fb      	ldrb	r3, [r7, #7]
  
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20000278 	.word	0x20000278

0800362c <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8003632:	1dfb      	adds	r3, r7, #7
 8003634:	461a      	mov	r2, r3
 8003636:	2101      	movs	r1, #1
 8003638:	200c      	movs	r0, #12
 800363a:	f001 f8b7 	bl	80047ac <RadioSpiReadRegisters>
 800363e:	4602      	mov	r2, r0
 8003640:	4b08      	ldr	r3, [pc, #32]	; (8003664 <SpiritRadioGetChannelSpace+0x38>)
 8003642:	b212      	sxth	r2, r2
 8003644:	4611      	mov	r1, r2
 8003646:	7019      	strb	r1, [r3, #0]
 8003648:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800364c:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	461a      	mov	r2, r3
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <SpiritRadioGetChannelSpace+0x3c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	0bdb      	lsrs	r3, r3, #15
  
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20000278 	.word	0x20000278
 8003668:	20000274 	.word	0x20000274

0800366c <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8003672:	1d3b      	adds	r3, r7, #4
 8003674:	461a      	mov	r2, r3
 8003676:	2102      	movs	r1, #2
 8003678:	200e      	movs	r0, #14
 800367a:	f001 f897 	bl	80047ac <RadioSpiReadRegisters>
 800367e:	4602      	mov	r2, r0
 8003680:	4b1a      	ldr	r3, [pc, #104]	; (80036ec <SpiritRadioGetFrequencyOffset+0x80>)
 8003682:	b212      	sxth	r2, r2
 8003684:	4611      	mov	r1, r2
 8003686:	7019      	strb	r1, [r3, #0]
 8003688:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800368c:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 800368e:	793b      	ldrb	r3, [r7, #4]
 8003690:	b29b      	uxth	r3, r3
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	b29a      	uxth	r2, r3
 8003696:	797b      	ldrb	r3, [r7, #5]
 8003698:	b29b      	uxth	r3, r3
 800369a:	4413      	add	r3, r2
 800369c:	b29b      	uxth	r3, r3
 800369e:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 80036a0:	887b      	ldrh	r3, [r7, #2]
 80036a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 80036aa:	887b      	ldrh	r3, [r7, #2]
 80036ac:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80036b0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	807b      	strh	r3, [r7, #2]
 80036b8:	e004      	b.n	80036c4 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 80036ba:	887b      	ldrh	r3, [r7, #2]
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 80036c4:	1cbb      	adds	r3, r7, #2
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 80036ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ce:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <SpiritRadioGetFrequencyOffset+0x84>)
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	da03      	bge.n	80036e2 <SpiritRadioGetFrequencyOffset+0x76>
 80036da:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 80036de:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80036e2:	149b      	asrs	r3, r3, #18
  
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000278 	.word	0x20000278
 80036f0:	20000274 	.word	0x20000274

080036f4 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 80036f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036f8:	b08a      	sub	sp, #40	; 0x28
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 80036fe:	2300      	movs	r3, #0
 8003700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a79      	ldr	r2, [pc, #484]	; (80038ec <SpiritRadioSetFrequencyBase+0x1f8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d307      	bcc.n	800371c <SpiritRadioSetFrequencyBase+0x28>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a78      	ldr	r2, [pc, #480]	; (80038f0 <SpiritRadioSetFrequencyBase+0x1fc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d803      	bhi.n	800371c <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8003714:	2300      	movs	r3, #0
 8003716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800371a:	e022      	b.n	8003762 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a75      	ldr	r2, [pc, #468]	; (80038f4 <SpiritRadioSetFrequencyBase+0x200>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d907      	bls.n	8003734 <SpiritRadioSetFrequencyBase+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a74      	ldr	r2, [pc, #464]	; (80038f8 <SpiritRadioSetFrequencyBase+0x204>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d803      	bhi.n	8003734 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 800372c:	2301      	movs	r3, #1
 800372e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003732:	e016      	b.n	8003762 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a71      	ldr	r2, [pc, #452]	; (80038fc <SpiritRadioSetFrequencyBase+0x208>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d907      	bls.n	800374c <SpiritRadioSetFrequencyBase+0x58>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a70      	ldr	r2, [pc, #448]	; (8003900 <SpiritRadioSetFrequencyBase+0x20c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d803      	bhi.n	800374c <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8003744:	2302      	movs	r3, #2
 8003746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800374a:	e00a      	b.n	8003762 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a6d      	ldr	r2, [pc, #436]	; (8003904 <SpiritRadioSetFrequencyBase+0x210>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d906      	bls.n	8003762 <SpiritRadioSetFrequencyBase+0x6e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a6c      	ldr	r2, [pc, #432]	; (8003908 <SpiritRadioSetFrequencyBase+0x214>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d802      	bhi.n	8003762 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 800375c:	2303      	movs	r3, #3
 800375e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8003762:	f7ff ff83 	bl	800366c <SpiritRadioGetFrequencyOffset>
 8003766:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8003768:	f7ff ff60 	bl	800362c <SpiritRadioGetChannelSpace>
 800376c:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800376e:	f7ff ff45 	bl	80035fc <SpiritRadioGetChannel>
 8003772:	4603      	mov	r3, r0
 8003774:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8003776:	6a3a      	ldr	r2, [r7, #32]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	441a      	add	r2, r3
 800377c:	7efb      	ldrb	r3, [r7, #27]
 800377e:	69f9      	ldr	r1, [r7, #28]
 8003780:	fb01 f303 	mul.w	r3, r1, r3
 8003784:	4413      	add	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8003788:	f000 fd60 	bl	800424c <SpiritRadioGetRefDiv>
 800378c:	4603      	mov	r3, r0
 800378e:	3301      	adds	r3, #1
 8003790:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 8003792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003796:	2b03      	cmp	r3, #3
 8003798:	d839      	bhi.n	800380e <SpiritRadioSetFrequencyBase+0x11a>
 800379a:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <SpiritRadioSetFrequencyBase+0xac>)
 800379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a0:	080037f9 	.word	0x080037f9
 80037a4:	080037e1 	.word	0x080037e1
 80037a8:	080037c9 	.word	0x080037c9
 80037ac:	080037b1 	.word	0x080037b1
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4a56      	ldr	r2, [pc, #344]	; (800390c <SpiritRadioSetFrequencyBase+0x218>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d803      	bhi.n	80037c0 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80037b8:	2000      	movs	r0, #0
 80037ba:	f7fe fdd5 	bl	8002368 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80037be:	e026      	b.n	800380e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80037c0:	2001      	movs	r0, #1
 80037c2:	f7fe fdd1 	bl	8002368 <SpiritCalibrationSelectVco>
    break;
 80037c6:	e022      	b.n	800380e <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	4a51      	ldr	r2, [pc, #324]	; (8003910 <SpiritRadioSetFrequencyBase+0x21c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d803      	bhi.n	80037d8 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80037d0:	2000      	movs	r0, #0
 80037d2:	f7fe fdc9 	bl	8002368 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80037d6:	e01a      	b.n	800380e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80037d8:	2001      	movs	r0, #1
 80037da:	f7fe fdc5 	bl	8002368 <SpiritCalibrationSelectVco>
    break;
 80037de:	e016      	b.n	800380e <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	4a4c      	ldr	r2, [pc, #304]	; (8003914 <SpiritRadioSetFrequencyBase+0x220>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d803      	bhi.n	80037f0 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80037e8:	2000      	movs	r0, #0
 80037ea:	f7fe fdbd 	bl	8002368 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80037ee:	e00e      	b.n	800380e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80037f0:	2001      	movs	r0, #1
 80037f2:	f7fe fdb9 	bl	8002368 <SpiritCalibrationSelectVco>
    break;
 80037f6:	e00a      	b.n	800380e <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	4a47      	ldr	r2, [pc, #284]	; (8003918 <SpiritRadioSetFrequencyBase+0x224>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d803      	bhi.n	8003808 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003800:	2000      	movs	r0, #0
 8003802:	f7fe fdb1 	bl	8002368 <SpiritCalibrationSelectVco>
 8003806:	e002      	b.n	800380e <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003808:	2001      	movs	r0, #1
 800380a:	f7fe fdad 	bl	8002368 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	f7ff fe0c 	bl	800342c <SpiritRadioSearchWCP>
 8003814:	4603      	mov	r3, r0
 8003816:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800381c:	4a3f      	ldr	r2, [pc, #252]	; (800391c <SpiritRadioSetFrequencyBase+0x228>)
 800381e:	5cd3      	ldrb	r3, [r2, r3]
 8003820:	461a      	mov	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	fb02 f303 	mul.w	r3, r2, r3
 8003828:	4618      	mov	r0, r3
 800382a:	f7fc fe7b 	bl	8000524 <__aeabi_ui2d>
 800382e:	4604      	mov	r4, r0
 8003830:	460d      	mov	r5, r1
 8003832:	7cfb      	ldrb	r3, [r7, #19]
 8003834:	049b      	lsls	r3, r3, #18
 8003836:	4618      	mov	r0, r3
 8003838:	f7fc fe84 	bl	8000544 <__aeabi_i2d>
 800383c:	4680      	mov	r8, r0
 800383e:	4689      	mov	r9, r1
 8003840:	4b37      	ldr	r3, [pc, #220]	; (8003920 <SpiritRadioSetFrequencyBase+0x22c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fc fe6d 	bl	8000524 <__aeabi_ui2d>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4640      	mov	r0, r8
 8003850:	4649      	mov	r1, r9
 8003852:	f7fd f80b 	bl	800086c <__aeabi_ddiv>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4620      	mov	r0, r4
 800385c:	4629      	mov	r1, r5
 800385e:	f7fc fedb 	bl	8000618 <__aeabi_dmul>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4610      	mov	r0, r2
 8003868:	4619      	mov	r1, r3
 800386a:	f7fd f8e7 	bl	8000a3c <__aeabi_d2uiz>
 800386e:	4603      	mov	r3, r0
 8003870:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	0d5b      	lsrs	r3, r3, #21
 8003876:	b2db      	uxtb	r3, r3
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	b2da      	uxtb	r2, r3
 800387e:	7cbb      	ldrb	r3, [r7, #18]
 8003880:	015b      	lsls	r3, r3, #5
 8003882:	b2db      	uxtb	r3, r3
 8003884:	4313      	orrs	r3, r2
 8003886:	b2db      	uxtb	r3, r3
 8003888:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	0b5b      	lsrs	r3, r3, #13
 800388e:	b2db      	uxtb	r3, r3
 8003890:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	b2db      	uxtb	r3, r3
 8003898:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038a6:	491f      	ldr	r1, [pc, #124]	; (8003924 <SpiritRadioSetFrequencyBase+0x230>)
 80038a8:	5ccb      	ldrb	r3, [r1, r3]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80038b0:	f107 0308 	add.w	r3, r7, #8
 80038b4:	461a      	mov	r2, r3
 80038b6:	2104      	movs	r1, #4
 80038b8:	2008      	movs	r0, #8
 80038ba:	f000 ff2b 	bl	8004714 <RadioSpiWriteRegisters>
 80038be:	4602      	mov	r2, r0
 80038c0:	4b19      	ldr	r3, [pc, #100]	; (8003928 <SpiritRadioSetFrequencyBase+0x234>)
 80038c2:	b212      	sxth	r2, r2
 80038c4:	4611      	mov	r1, r2
 80038c6:	7019      	strb	r1, [r3, #0]
 80038c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80038cc:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 80038ce:	4b17      	ldr	r3, [pc, #92]	; (800392c <SpiritRadioSetFrequencyBase+0x238>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d103      	bne.n	80038de <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 80038d6:	f7fe ffa7 	bl	8002828 <SpiritManagementWaVcoCalibration>
 80038da:	4603      	mov	r3, r0
 80038dc:	e000      	b.n	80038e0 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3728      	adds	r7, #40	; 0x28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038ea:	bf00      	nop
 80038ec:	2e5f5680 	.word	0x2e5f5680
 80038f0:	390c2fe0 	.word	0x390c2fe0
 80038f4:	1701e47f 	.word	0x1701e47f
 80038f8:	1c146a60 	.word	0x1c146a60
 80038fc:	11d260bf 	.word	0x11d260bf
 8003900:	14ced7e0 	.word	0x14ced7e0
 8003904:	08e18f3f 	.word	0x08e18f3f
 8003908:	0a6fd060 	.word	0x0a6fd060
 800390c:	099cf4e1 	.word	0x099cf4e1
 8003910:	1339e9c3 	.word	0x1339e9c3
 8003914:	19a28d05 	.word	0x19a28d05
 8003918:	33451a0a 	.word	0x33451a0a
 800391c:	0800d0b4 	.word	0x0800d0b4
 8003920:	20000274 	.word	0x20000274
 8003924:	0800d0b8 	.word	0x0800d0b8
 8003928:	20000278 	.word	0x20000278
 800392c:	20000007 	.word	0x20000007

08003930 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003930:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8003938:	f7ff fe0c 	bl	8003554 <SpiritRadioGetSynthWord>
 800393c:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 800393e:	f7ff fe2f 	bl	80035a0 <SpiritRadioGetBand>
 8003942:	4603      	mov	r3, r0
 8003944:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8003946:	f000 fc81 	bl	800424c <SpiritRadioGetRefDiv>
 800394a:	4603      	mov	r3, r0
 800394c:	3301      	adds	r3, #1
 800394e:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7fc fde7 	bl	8000524 <__aeabi_ui2d>
 8003956:	4604      	mov	r4, r0
 8003958:	460d      	mov	r5, r1
 800395a:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <SpiritRadioGetFrequencyBase+0x90>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7fc fde0 	bl	8000524 <__aeabi_ui2d>
 8003964:	4680      	mov	r8, r0
 8003966:	4689      	mov	r9, r1
 8003968:	78bb      	ldrb	r3, [r7, #2]
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	4915      	ldr	r1, [pc, #84]	; (80039c4 <SpiritRadioGetFrequencyBase+0x94>)
 800396e:	5c8a      	ldrb	r2, [r1, r2]
 8003970:	fb02 f303 	mul.w	r3, r2, r3
 8003974:	049b      	lsls	r3, r3, #18
 8003976:	4618      	mov	r0, r3
 8003978:	f7fc fde4 	bl	8000544 <__aeabi_i2d>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4640      	mov	r0, r8
 8003982:	4649      	mov	r1, r9
 8003984:	f7fc ff72 	bl	800086c <__aeabi_ddiv>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4620      	mov	r0, r4
 800398e:	4629      	mov	r1, r5
 8003990:	f7fc fe42 	bl	8000618 <__aeabi_dmul>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	ec43 2b17 	vmov	d7, r2, r3
 800399c:	eeb0 0a47 	vmov.f32	s0, s14
 80039a0:	eef0 0a67 	vmov.f32	s1, s15
 80039a4:	f009 fa60 	bl	800ce68 <round>
 80039a8:	ec53 2b10 	vmov	r2, r3, d0
 80039ac:	4610      	mov	r0, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	f7fd f844 	bl	8000a3c <__aeabi_d2uiz>
 80039b4:	4603      	mov	r3, r0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039c0:	20000274 	.word	0x20000274
 80039c4:	0800d0b4 	.word	0x0800d0b4

080039c8 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 80039d4:	2300      	movs	r3, #0
 80039d6:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 80039d8:	230f      	movs	r3, #15
 80039da:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 80039e0:	f000 fc86 	bl	80042f0 <SpiritRadioGetDigDiv>
 80039e4:	4603      	mov	r3, r0
 80039e6:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 80039e8:	e015      	b.n	8003a16 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 80039ea:	4b4f      	ldr	r3, [pc, #316]	; (8003b28 <SpiritRadioSearchDatarateME+0x160>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039f2:	f1c3 0114 	rsb	r1, r3, #20
 80039f6:	7ebb      	ldrb	r3, [r7, #26]
 80039f8:	440b      	add	r3, r1
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d302      	bcc.n	8003a0a <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 8003a04:	2301      	movs	r3, #1
 8003a06:	763b      	strb	r3, [r7, #24]
 8003a08:	e005      	b.n	8003a16 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 8003a0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8003a16:	7e3b      	ldrb	r3, [r7, #24]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <SpiritRadioSearchDatarateME+0x5e>
 8003a1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	dae1      	bge.n	80039ea <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 8003a26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	da01      	bge.n	8003a32 <SpiritRadioSearchDatarateME+0x6a>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 8003a32:	7ffa      	ldrb	r2, [r7, #31]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003a38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a3c:	f1c3 0317 	rsb	r3, r3, #23
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	409a      	lsls	r2, r3
 8003a44:	4b38      	ldr	r3, [pc, #224]	; (8003b28 <SpiritRadioSearchDatarateME+0x160>)
 8003a46:	6819      	ldr	r1, [r3, #0]
 8003a48:	7ebb      	ldrb	r3, [r7, #26]
 8003a4a:	3305      	adds	r3, #5
 8003a4c:	fa21 f303 	lsr.w	r3, r1, r3
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8003a56:	2300      	movs	r3, #0
 8003a58:	77bb      	strb	r3, [r7, #30]
 8003a5a:	e031      	b.n	8003ac0 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 8003a5c:	7e7a      	ldrb	r2, [r7, #25]
 8003a5e:	7fbb      	ldrb	r3, [r7, #30]
 8003a60:	4413      	add	r3, r2
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d021      	beq.n	8003aaa <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	7e7b      	ldrb	r3, [r7, #25]
 8003a6c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8003a70:	7fbb      	ldrb	r3, [r7, #30]
 8003a72:	440b      	add	r3, r1
 8003a74:	3b01      	subs	r3, #1
 8003a76:	4618      	mov	r0, r3
 8003a78:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <SpiritRadioSearchDatarateME+0x160>)
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	7ebb      	ldrb	r3, [r7, #26]
 8003a7e:	3305      	adds	r3, #5
 8003a80:	fa21 f303 	lsr.w	r3, r1, r3
 8003a84:	fb03 f100 	mul.w	r1, r3, r0
 8003a88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a8c:	f1c3 0317 	rsb	r3, r3, #23
 8003a90:	fa21 f303 	lsr.w	r3, r1, r3
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	7fbb      	ldrb	r3, [r7, #30]
 8003a9c:	b212      	sxth	r2, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	3320      	adds	r3, #32
 8003aa2:	443b      	add	r3, r7
 8003aa4:	f823 2c10 	strh.w	r2, [r3, #-16]
 8003aa8:	e007      	b.n	8003aba <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 8003aaa:	7fbb      	ldrb	r3, [r7, #30]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	3320      	adds	r3, #32
 8003ab0:	443b      	add	r3, r7
 8003ab2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003ab6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 8003aba:	7fbb      	ldrb	r3, [r7, #30]
 8003abc:	3301      	adds	r3, #1
 8003abe:	77bb      	strb	r3, [r7, #30]
 8003ac0:	7fbb      	ldrb	r3, [r7, #30]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d9ca      	bls.n	8003a5c <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8003ac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aca:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	76fb      	strb	r3, [r7, #27]
 8003ad0:	e021      	b.n	8003b16 <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8003ad2:	7efb      	ldrb	r3, [r7, #27]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	3320      	adds	r3, #32
 8003ad8:	443b      	add	r3, r7
 8003ada:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bfb8      	it	lt
 8003ae2:	425b      	neglt	r3, r3
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	8bba      	ldrh	r2, [r7, #28]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d911      	bls.n	8003b10 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8003aec:	7efb      	ldrb	r3, [r7, #27]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	3320      	adds	r3, #32
 8003af2:	443b      	add	r3, r7
 8003af4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bfb8      	it	lt
 8003afc:	425b      	neglt	r3, r3
 8003afe:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003b00:	7e7a      	ldrb	r2, [r7, #25]
 8003b02:	7efb      	ldrb	r3, [r7, #27]
 8003b04:	4413      	add	r3, r2
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003b10:	7efb      	ldrb	r3, [r7, #27]
 8003b12:	3301      	adds	r3, #1
 8003b14:	76fb      	strb	r3, [r7, #27]
 8003b16:	7efb      	ldrb	r3, [r7, #27]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d9da      	bls.n	8003ad2 <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000274 	.word	0x20000274

08003b2c <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8003b3e:	f000 fbd7 	bl	80042f0 <SpiritRadioGetDigDiv>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003b4e:	e002      	b.n	8003b56 <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003b50:	2301      	movs	r3, #1
 8003b52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8003b56:	4b63      	ldr	r3, [pc, #396]	; (8003ce4 <SpiritRadioSearchChannelBwME+0x1b8>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b62:	4a61      	ldr	r2, [pc, #388]	; (8003ce8 <SpiritRadioSearchChannelBwME+0x1bc>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b72:	e006      	b.n	8003b82 <SpiritRadioSearchChannelBwME+0x56>
 8003b74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b86:	2b59      	cmp	r3, #89	; 0x59
 8003b88:	dc0f      	bgt.n	8003baa <SpiritRadioSearchChannelBwME+0x7e>
 8003b8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b8e:	4a57      	ldr	r2, [pc, #348]	; (8003cec <SpiritRadioSearchChannelBwME+0x1c0>)
 8003b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b94:	461a      	mov	r2, r3
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	4a54      	ldr	r2, [pc, #336]	; (8003cf0 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	0adb      	lsrs	r3, r3, #11
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d3e4      	bcc.n	8003b74 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 8003baa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d077      	beq.n	8003ca2 <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8003bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bb6:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003bbe:	e03a      	b.n	8003c36 <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003bc0:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003bc4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003bc8:	4413      	add	r3, r2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	dc06      	bgt.n	8003bdc <SpiritRadioSearchChannelBwME+0xb0>
 8003bce:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003bd2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003bd6:	4413      	add	r3, r2
 8003bd8:	2b5a      	cmp	r3, #90	; 0x5a
 8003bda:	dc1e      	bgt.n	8003c1a <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003be4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003be8:	440b      	add	r3, r1
 8003bea:	3b01      	subs	r3, #1
 8003bec:	493f      	ldr	r1, [pc, #252]	; (8003cec <SpiritRadioSearchChannelBwME+0x1c0>)
 8003bee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	fb01 f303 	mul.w	r3, r1, r3
 8003bfa:	493d      	ldr	r1, [pc, #244]	; (8003cf0 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003bfc:	fba1 1303 	umull	r1, r3, r1, r3
 8003c00:	0adb      	lsrs	r3, r3, #11
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c0c:	b212      	sxth	r2, r2
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	3328      	adds	r3, #40	; 0x28
 8003c12:	443b      	add	r3, r7
 8003c14:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003c18:	e008      	b.n	8003c2c <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8003c1a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	3328      	adds	r3, #40	; 0x28
 8003c22:	443b      	add	r3, r7
 8003c24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003c28:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003c2c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c30:	3301      	adds	r3, #1
 8003c32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003c36:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d9c0      	bls.n	8003bc0 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8003c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c42:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003c4a:	e026      	b.n	8003c9a <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003c4c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	3328      	adds	r3, #40	; 0x28
 8003c54:	443b      	add	r3, r7
 8003c56:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bfb8      	it	lt
 8003c5e:	425b      	neglt	r3, r3
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d913      	bls.n	8003c90 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003c68:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	3328      	adds	r3, #40	; 0x28
 8003c70:	443b      	add	r3, r7
 8003c72:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	bfb8      	it	lt
 8003c7a:	425b      	neglt	r3, r3
 8003c7c:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 8003c7e:	7efa      	ldrb	r2, [r7, #27]
 8003c80:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003c84:	4413      	add	r3, r2
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8003c90:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003c94:	3301      	adds	r3, #1
 8003c96:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003c9a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d9d4      	bls.n	8003c4c <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8003ca2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ca6:	4a13      	ldr	r2, [pc, #76]	; (8003cf4 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003ca8:	fb82 1203 	smull	r1, r2, r2, r3
 8003cac:	1052      	asrs	r2, r2, #1
 8003cae:	17db      	asrs	r3, r3, #31
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	b25b      	sxtb	r3, r3
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8003cba:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003cc0:	fb83 1302 	smull	r1, r3, r3, r2
 8003cc4:	1059      	asrs	r1, r3, #1
 8003cc6:	17d3      	asrs	r3, r2, #31
 8003cc8:	1ac9      	subs	r1, r1, r3
 8003cca:	460b      	mov	r3, r1
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	440b      	add	r3, r1
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	b25b      	sxtb	r3, r3
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	701a      	strb	r2, [r3, #0]
  
}
 8003cda:	bf00      	nop
 8003cdc:	3728      	adds	r7, #40	; 0x28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000274 	.word	0x20000274
 8003ce8:	51eb851f 	.word	0x51eb851f
 8003cec:	0800d0bc 	.word	0x0800d0bc
 8003cf0:	c9a633fd 	.word	0xc9a633fd
 8003cf4:	38e38e39 	.word	0x38e38e39

08003cf8 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003cf8:	b5b0      	push	{r4, r5, r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003d08:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <SpiritRadioSearchFreqDevME+0x160>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	ee07 3a90 	vmov	s15, r3
 8003d10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d14:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003e5c <SpiritRadioSearchFreqDevME+0x164>
 8003d18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d1c:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003d20:	2300      	movs	r3, #0
 8003d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d26:	e028      	b.n	8003d7a <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc fc06 	bl	8000544 <__aeabi_i2d>
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	4b48      	ldr	r3, [pc, #288]	; (8003e60 <SpiritRadioSearchFreqDevME+0x168>)
 8003d3e:	f7fc fc6b 	bl	8000618 <__aeabi_dmul>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4610      	mov	r0, r2
 8003d48:	4619      	mov	r1, r3
 8003d4a:	f7fc fe77 	bl	8000a3c <__aeabi_d2uiz>
 8003d4e:	ee07 0a90 	vmov	s15, r0
 8003d52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d56:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d62:	ee17 3a90 	vmov	r3, s15
 8003d66:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d309      	bcc.n	8003d84 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d74:	3301      	adds	r3, #1
 8003d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d7e:	2b09      	cmp	r3, #9
 8003d80:	d9d2      	bls.n	8003d28 <SpiritRadioSearchFreqDevME+0x30>
 8003d82:	e000      	b.n	8003d86 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003d84:	bf00      	nop
  }
  (*pcE) = i;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003d8c:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d94:	e043      	b.n	8003e1e <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 8003d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fc fbd0 	bl	8000544 <__aeabi_i2d>
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	4b2e      	ldr	r3, [pc, #184]	; (8003e64 <SpiritRadioSearchFreqDevME+0x16c>)
 8003daa:	f7fc fa7f 	bl	80002ac <__adddf3>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4610      	mov	r0, r2
 8003db4:	4619      	mov	r1, r3
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dbe:	f7fc fd55 	bl	800086c <__aeabi_ddiv>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4614      	mov	r4, r2
 8003dc8:	461d      	mov	r5, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	4093      	lsls	r3, r2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fc fbb5 	bl	8000544 <__aeabi_i2d>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4620      	mov	r0, r4
 8003de0:	4629      	mov	r1, r5
 8003de2:	f7fc fc19 	bl	8000618 <__aeabi_dmul>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	f7fc fe25 	bl	8000a3c <__aeabi_d2uiz>
 8003df2:	ee07 0a90 	vmov	s15, r0
 8003df6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e06:	ee17 3a90 	vmov	r3, s15
 8003e0a:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d309      	bcc.n	8003e28 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e22:	2b07      	cmp	r3, #7
 8003e24:	d9b7      	bls.n	8003d96 <SpiritRadioSearchFreqDevME+0x9e>
 8003e26:	e000      	b.n	8003e2a <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003e28:	bf00      	nop
  }
  
  (*pcM)=i;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003e30:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	1ad2      	subs	r2, r2, r3
 8003e38:	69f9      	ldr	r1, [r7, #28]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1acb      	subs	r3, r1, r3
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d205      	bcs.n	8003e4e <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	701a      	strb	r2, [r3, #0]
  
}
 8003e4e:	bf00      	nop
 8003e50:	3728      	adds	r7, #40	; 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bdb0      	pop	{r4, r5, r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000274 	.word	0x20000274
 8003e5c:	48800000 	.word	0x48800000
 8003e60:	401e0000 	.word	0x401e0000
 8003e64:	40200000 	.word	0x40200000

08003e68 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a74      	ldr	r2, [pc, #464]	; (8004050 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d30c      	bcc.n	8003e9e <SpiritRadioGetdBm2Reg+0x36>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4a73      	ldr	r2, [pc, #460]	; (8004054 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d808      	bhi.n	8003e9e <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a71      	ldr	r2, [pc, #452]	; (8004058 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d822      	bhi.n	8003ede <SpiritRadioGetdBm2Reg+0x76>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	75fb      	strb	r3, [r7, #23]
 8003e9c:	e01f      	b.n	8003ede <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4a6e      	ldr	r2, [pc, #440]	; (800405c <SpiritRadioGetdBm2Reg+0x1f4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d906      	bls.n	8003eb4 <SpiritRadioGetdBm2Reg+0x4c>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a6d      	ldr	r2, [pc, #436]	; (8004060 <SpiritRadioGetdBm2Reg+0x1f8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d802      	bhi.n	8003eb4 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	75fb      	strb	r3, [r7, #23]
 8003eb2:	e014      	b.n	8003ede <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a6b      	ldr	r2, [pc, #428]	; (8004064 <SpiritRadioGetdBm2Reg+0x1fc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d906      	bls.n	8003eca <SpiritRadioGetdBm2Reg+0x62>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a6a      	ldr	r2, [pc, #424]	; (8004068 <SpiritRadioGetdBm2Reg+0x200>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d802      	bhi.n	8003eca <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	75fb      	strb	r3, [r7, #23]
 8003ec8:	e009      	b.n	8003ede <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a67      	ldr	r2, [pc, #412]	; (800406c <SpiritRadioGetdBm2Reg+0x204>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d905      	bls.n	8003ede <SpiritRadioGetdBm2Reg+0x76>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a66      	ldr	r2, [pc, #408]	; (8004070 <SpiritRadioGetdBm2Reg+0x208>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d801      	bhi.n	8003ede <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 8003eda:	2304      	movs	r3, #4
 8003edc:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003ee2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ee6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eee:	dd2f      	ble.n	8003f50 <SpiritRadioGetdBm2Reg+0xe8>
 8003ef0:	7dfa      	ldrb	r2, [r7, #23]
 8003ef2:	4960      	ldr	r1, [pc, #384]	; (8004074 <SpiritRadioGetdBm2Reg+0x20c>)
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4413      	add	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	440b      	add	r3, r1
 8003efe:	3308      	adds	r3, #8
 8003f00:	edd3 7a00 	vldr	s15, [r3]
 8003f04:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8003f08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f0c:	7dfa      	ldrb	r2, [r7, #23]
 8003f0e:	4959      	ldr	r1, [pc, #356]	; (8004074 <SpiritRadioGetdBm2Reg+0x20c>)
 8003f10:	4613      	mov	r3, r2
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4413      	add	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	440b      	add	r3, r1
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	ed93 6a00 	vldr	s12, [r3]
 8003f20:	7dfa      	ldrb	r2, [r7, #23]
 8003f22:	4954      	ldr	r1, [pc, #336]	; (8004074 <SpiritRadioGetdBm2Reg+0x20c>)
 8003f24:	4613      	mov	r3, r2
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4413      	add	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3308      	adds	r3, #8
 8003f30:	edd3 6a00 	vldr	s13, [r3]
 8003f34:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f3c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f48:	dd02      	ble.n	8003f50 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	75bb      	strb	r3, [r7, #22]
 8003f4e:	e035      	b.n	8003fbc <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003f50:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5c:	d82e      	bhi.n	8003fbc <SpiritRadioGetdBm2Reg+0x154>
 8003f5e:	7dfa      	ldrb	r2, [r7, #23]
 8003f60:	4944      	ldr	r1, [pc, #272]	; (8004074 <SpiritRadioGetdBm2Reg+0x20c>)
 8003f62:	4613      	mov	r3, r2
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4413      	add	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	440b      	add	r3, r1
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	edd3 7a00 	vldr	s15, [r3]
 8003f72:	eddf 6a41 	vldr	s13, [pc, #260]	; 8004078 <SpiritRadioGetdBm2Reg+0x210>
 8003f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7a:	7dfa      	ldrb	r2, [r7, #23]
 8003f7c:	493d      	ldr	r1, [pc, #244]	; (8004074 <SpiritRadioGetdBm2Reg+0x20c>)
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	440b      	add	r3, r1
 8003f88:	330c      	adds	r3, #12
 8003f8a:	ed93 6a00 	vldr	s12, [r3]
 8003f8e:	7dfa      	ldrb	r2, [r7, #23]
 8003f90:	4938      	ldr	r1, [pc, #224]	; (8004074 <SpiritRadioGetdBm2Reg+0x20c>)
 8003f92:	4613      	mov	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	edd3 6a00 	vldr	s13, [r3]
 8003fa2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003faa:	ed97 7a02 	vldr	s14, [r7, #8]
 8003fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb6:	d501      	bpl.n	8003fbc <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003fbc:	7dfa      	ldrb	r2, [r7, #23]
 8003fbe:	7dbb      	ldrb	r3, [r7, #22]
 8003fc0:	0059      	lsls	r1, r3, #1
 8003fc2:	482c      	ldr	r0, [pc, #176]	; (8004074 <SpiritRadioGetdBm2Reg+0x20c>)
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	4413      	add	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	440b      	add	r3, r1
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4403      	add	r3, r0
 8003fd2:	ed93 7a00 	vldr	s14, [r3]
 8003fd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fde:	7dfa      	ldrb	r2, [r7, #23]
 8003fe0:	7dbb      	ldrb	r3, [r7, #22]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	1c59      	adds	r1, r3, #1
 8003fe6:	4823      	ldr	r0, [pc, #140]	; (8004074 <SpiritRadioGetdBm2Reg+0x20c>)
 8003fe8:	4613      	mov	r3, r2
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4413      	add	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	440b      	add	r3, r1
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4403      	add	r3, r0
 8003ff6:	edd3 7a00 	vldr	s15, [r3]
 8003ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ffe:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8004002:	edd7 7a04 	vldr	s15, [r7, #16]
 8004006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800400a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800400e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004012:	d503      	bpl.n	800401c <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8004014:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	e00a      	b.n	8004032 <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 800401c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004020:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800407c <SpiritRadioGetdBm2Reg+0x214>
 8004024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402c:	dd01      	ble.n	8004032 <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 800402e:	4b14      	ldr	r3, [pc, #80]	; (8004080 <SpiritRadioGetdBm2Reg+0x218>)
 8004030:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8004032:	edd7 7a04 	vldr	s15, [r7, #16]
 8004036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800403a:	edc7 7a01 	vstr	s15, [r7, #4]
 800403e:	793b      	ldrb	r3, [r7, #4]
 8004040:	b2db      	uxtb	r3, r3
}
 8004042:	4618      	mov	r0, r3
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	2e5f5680 	.word	0x2e5f5680
 8004054:	390c2fe0 	.word	0x390c2fe0
 8004058:	35a4e8ff 	.word	0x35a4e8ff
 800405c:	1701e47f 	.word	0x1701e47f
 8004060:	1c146a60 	.word	0x1c146a60
 8004064:	11d260bf 	.word	0x11d260bf
 8004068:	14ced7e0 	.word	0x14ced7e0
 800406c:	08e18f3f 	.word	0x08e18f3f
 8004070:	0a6fd060 	.word	0x0a6fd060
 8004074:	0800d190 	.word	0x0800d190
 8004078:	42200000 	.word	0x42200000
 800407c:	42b40000 	.word	0x42b40000
 8004080:	42b40000 	.word	0x42b40000

08004084 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	ed87 0a00 	vstr	s0, [r7]
 8004090:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8004092:	f7ff fc4d 	bl	8003930 <SpiritRadioGetFrequencyBase>
 8004096:	4603      	mov	r3, r0
 8004098:	ed97 0a00 	vldr	s0, [r7]
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fee3 	bl	8003e68 <SpiritRadioGetdBm2Reg>
 80040a2:	4603      	mov	r3, r0
 80040a4:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	f1c3 0317 	rsb	r3, r3, #23
 80040ac:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 80040ae:	f107 020e 	add.w	r2, r7, #14
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	2101      	movs	r1, #1
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fb2c 	bl	8004714 <RadioSpiWriteRegisters>
 80040bc:	4602      	mov	r2, r0
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <SpiritRadioSetPALeveldBm+0x50>)
 80040c0:	b212      	sxth	r2, r2
 80040c2:	4611      	mov	r1, r2
 80040c4:	7019      	strb	r1, [r3, #0]
 80040c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80040ca:	705a      	strb	r2, [r3, #1]
  
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000278 	.word	0x20000278

080040d8 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80040e2:	f107 030f 	add.w	r3, r7, #15
 80040e6:	461a      	mov	r2, r3
 80040e8:	2101      	movs	r1, #1
 80040ea:	2018      	movs	r0, #24
 80040ec:	f000 fb5e 	bl	80047ac <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 80040fa:	7bfa      	ldrb	r2, [r7, #15]
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	4313      	orrs	r3, r2
 8004100:	b2db      	uxtb	r3, r3
 8004102:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004104:	f107 030f 	add.w	r3, r7, #15
 8004108:	461a      	mov	r2, r3
 800410a:	2101      	movs	r1, #1
 800410c:	2018      	movs	r0, #24
 800410e:	f000 fb01 	bl	8004714 <RadioSpiWriteRegisters>
 8004112:	4602      	mov	r2, r0
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <SpiritRadioSetPACwc+0x54>)
 8004116:	b212      	sxth	r2, r2
 8004118:	4611      	mov	r1, r2
 800411a:	7019      	strb	r1, [r3, #0]
 800411c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004120:	705a      	strb	r2, [r3, #1]
  
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000278 	.word	0x20000278

08004130 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800413a:	f107 030f 	add.w	r3, r7, #15
 800413e:	461a      	mov	r2, r3
 8004140:	2101      	movs	r1, #1
 8004142:	2018      	movs	r0, #24
 8004144:	f000 fb32 	bl	80047ac <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	f023 0307 	bic.w	r3, r3, #7
 800414e:	b2db      	uxtb	r3, r3
 8004150:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	4313      	orrs	r3, r2
 8004158:	b2db      	uxtb	r3, r3
 800415a:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800415c:	f107 030f 	add.w	r3, r7, #15
 8004160:	461a      	mov	r2, r3
 8004162:	2101      	movs	r1, #1
 8004164:	2018      	movs	r0, #24
 8004166:	f000 fad5 	bl	8004714 <RadioSpiWriteRegisters>
 800416a:	4602      	mov	r2, r0
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <SpiritRadioSetPALevelMaxIndex+0x54>)
 800416e:	b212      	sxth	r2, r2
 8004170:	4611      	mov	r1, r2
 8004172:	7019      	strb	r1, [r3, #0]
 8004174:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004178:	705a      	strb	r2, [r3, #1]
  
}
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000278 	.word	0x20000278

08004188 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8004196:	f107 030f 	add.w	r3, r7, #15
 800419a:	461a      	mov	r2, r3
 800419c:	2101      	movs	r1, #1
 800419e:	201e      	movs	r0, #30
 80041a0:	f000 fb04 	bl	80047ac <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d105      	bne.n	80041b6 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	73fb      	strb	r3, [r7, #15]
 80041b4:	e004      	b.n	80041c0 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 80041c0:	f107 030f 	add.w	r3, r7, #15
 80041c4:	461a      	mov	r2, r3
 80041c6:	2101      	movs	r1, #1
 80041c8:	201e      	movs	r0, #30
 80041ca:	f000 faa3 	bl	8004714 <RadioSpiWriteRegisters>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <SpiritRadioAFCFreezeOnSync+0x60>)
 80041d2:	b212      	sxth	r2, r2
 80041d4:	4611      	mov	r1, r2
 80041d6:	7019      	strb	r1, [r3, #0]
 80041d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80041dc:	705a      	strb	r2, [r3, #1]
  
}
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000278 	.word	0x20000278

080041ec <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80041f6:	f107 030f 	add.w	r3, r7, #15
 80041fa:	461a      	mov	r2, r3
 80041fc:	2101      	movs	r1, #1
 80041fe:	209e      	movs	r0, #158	; 0x9e
 8004200:	f000 fad4 	bl	80047ac <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d105      	bne.n	8004216 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004210:	b2db      	uxtb	r3, r3
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	e004      	b.n	8004220 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800421c:	b2db      	uxtb	r3, r3
 800421e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004220:	f107 030f 	add.w	r3, r7, #15
 8004224:	461a      	mov	r2, r3
 8004226:	2101      	movs	r1, #1
 8004228:	209e      	movs	r0, #158	; 0x9e
 800422a:	f000 fa73 	bl	8004714 <RadioSpiWriteRegisters>
 800422e:	4602      	mov	r2, r0
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <SpiritRadioSetRefDiv+0x5c>)
 8004232:	b212      	sxth	r2, r2
 8004234:	4611      	mov	r1, r2
 8004236:	7019      	strb	r1, [r3, #0]
 8004238:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800423c:	705a      	strb	r2, [r3, #1]
  
}
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000278 	.word	0x20000278

0800424c <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004252:	1dfb      	adds	r3, r7, #7
 8004254:	461a      	mov	r2, r3
 8004256:	2101      	movs	r1, #1
 8004258:	209e      	movs	r0, #158	; 0x9e
 800425a:	f000 faa7 	bl	80047ac <RadioSpiReadRegisters>
 800425e:	4602      	mov	r2, r0
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <SpiritRadioGetRefDiv+0x40>)
 8004262:	b212      	sxth	r2, r2
 8004264:	4611      	mov	r1, r2
 8004266:	7019      	strb	r1, [r3, #0]
 8004268:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800426c:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	09db      	lsrs	r3, r3, #7
 8004272:	b2db      	uxtb	r3, r3
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8004280:	2300      	movs	r3, #0
  }
  
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000278 	.word	0x20000278

08004290 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 800429a:	f107 030f 	add.w	r3, r7, #15
 800429e:	461a      	mov	r2, r3
 80042a0:	2101      	movs	r1, #1
 80042a2:	20b4      	movs	r0, #180	; 0xb4
 80042a4:	f000 fa82 	bl	80047ac <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d105      	bne.n	80042ba <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	f023 0308 	bic.w	r3, r3, #8
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	73fb      	strb	r3, [r7, #15]
 80042b8:	e004      	b.n	80042c4 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	f043 0308 	orr.w	r3, r3, #8
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80042c4:	f107 030f 	add.w	r3, r7, #15
 80042c8:	461a      	mov	r2, r3
 80042ca:	2101      	movs	r1, #1
 80042cc:	20b4      	movs	r0, #180	; 0xb4
 80042ce:	f000 fa21 	bl	8004714 <RadioSpiWriteRegisters>
 80042d2:	4602      	mov	r2, r0
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <SpiritRadioSetDigDiv+0x5c>)
 80042d6:	b212      	sxth	r2, r2
 80042d8:	4611      	mov	r1, r2
 80042da:	7019      	strb	r1, [r3, #0]
 80042dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80042e0:	705a      	strb	r2, [r3, #1]
  
}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000278 	.word	0x20000278

080042f0 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80042f6:	1dfb      	adds	r3, r7, #7
 80042f8:	461a      	mov	r2, r3
 80042fa:	2101      	movs	r1, #1
 80042fc:	20b4      	movs	r0, #180	; 0xb4
 80042fe:	f000 fa55 	bl	80047ac <RadioSpiReadRegisters>
 8004302:	4602      	mov	r2, r0
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <SpiritRadioGetDigDiv+0x40>)
 8004306:	b212      	sxth	r2, r2
 8004308:	4611      	mov	r1, r2
 800430a:	7019      	strb	r1, [r3, #0]
 800430c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004310:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	08db      	lsrs	r3, r3, #3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8004320:	2300      	movs	r3, #0
 8004322:	e000      	b.n	8004326 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8004324:	2301      	movs	r3, #1
  }
  
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000278 	.word	0x20000278

08004334 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8004338:	4b03      	ldr	r3, [pc, #12]	; (8004348 <SpiritRadioGetXtalFrequency+0x14>)
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000274 	.word	0x20000274

0800434c <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <SpiritRadioSetXtalFrequency+0x1c>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6013      	str	r3, [r2, #0]
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000274 	.word	0x20000274

0800436c <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 8004376:	f107 020c 	add.w	r2, r7, #12
 800437a:	f107 030c 	add.w	r3, r7, #12
 800437e:	3301      	adds	r3, #1
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	ed97 0a01 	vldr	s0, [r7, #4]
 8004388:	f000 f816 	bl	80043b8 <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 800438c:	f107 030c 	add.w	r3, r7, #12
 8004390:	461a      	mov	r2, r3
 8004392:	2102      	movs	r1, #2
 8004394:	2053      	movs	r0, #83	; 0x53
 8004396:	f000 f9bd 	bl	8004714 <RadioSpiWriteRegisters>
 800439a:	4602      	mov	r2, r0
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <SpiritTimerSetRxTimeoutMs+0x48>)
 800439e:	b212      	sxth	r2, r2
 80043a0:	4611      	mov	r1, r2
 80043a2:	7019      	strb	r1, [r3, #0]
 80043a4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80043a8:	705a      	strb	r2, [r3, #1]

}
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000278 	.word	0x20000278

080043b8 <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	ed87 0a03 	vstr	s0, [r7, #12]
 80043c2:	60b8      	str	r0, [r7, #8]
 80043c4:	6079      	str	r1, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 80043c6:	f7ff ffb5 	bl	8004334 <SpiritRadioGetXtalFrequency>
 80043ca:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4a91      	ldr	r2, [pc, #580]	; (8004614 <SpiritTimerComputeRxTimeoutValues+0x25c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d902      	bls.n	80043da <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	ee07 3a90 	vmov	s15, r3
 80043e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80043e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043ec:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8004618 <SpiritTimerComputeRxTimeoutValues+0x260>
 80043f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f8:	ee17 3a90 	vmov	r3, s15
 80043fc:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	f64f 5201 	movw	r2, #64769	; 0xfd01
 8004404:	4293      	cmp	r3, r2
 8004406:	d906      	bls.n	8004416 <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	22ff      	movs	r2, #255	; 0xff
 800440c:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	22ff      	movs	r2, #255	; 0xff
 8004412:	701a      	strb	r2, [r3, #0]
    return;
 8004414:	e0fa      	b.n	800460c <SpiritTimerComputeRxTimeoutValues+0x254>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	4a80      	ldr	r2, [pc, #512]	; (800461c <SpiritTimerComputeRxTimeoutValues+0x264>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	09db      	lsrs	r3, r3, #7
 8004420:	b2db      	uxtb	r3, r3
 8004422:	3302      	adds	r3, #2
 8004424:	b2da      	uxtb	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	fbb3 f3f2 	udiv	r3, r3, r2
 8004436:	b2da      	uxtb	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	ee07 3a90 	vmov	s15, r3
 8004444:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004458:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8004618 <SpiritTimerComputeRxTimeoutValues+0x260>
 800445c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800447a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447e:	dd1d      	ble.n	80044bc <SpiritTimerComputeRxTimeoutValues+0x104>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	ee07 3a90 	vmov	s15, r3
 8004488:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	ee07 3a90 	vmov	s15, r3
 8004494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004618 <SpiritTimerComputeRxTimeoutValues+0x260>
 80044a0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80044b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044ba:	e01e      	b.n	80044fa <SpiritTimerComputeRxTimeoutValues+0x142>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	ee07 3a90 	vmov	s15, r3
 80044c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	ee07 3a90 	vmov	s15, r3
 80044d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004618 <SpiritTimerComputeRxTimeoutValues+0x260>
 80044dc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80044f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044f6:	eef1 7a67 	vneg.f32	s15, s15
 80044fa:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if((*pcCounter)<=254)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2bff      	cmp	r3, #255	; 0xff
 8004504:	d06e      	beq.n	80045e4 <SpiritTimerComputeRxTimeoutValues+0x22c>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	3301      	adds	r3, #1
 800450c:	ee07 3a90 	vmov	s15, r3
 8004510:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004524:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004618 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004528:	ee67 6a87 	vmul.f32	s13, s15, s14
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453a:	edd7 7a03 	vldr	s15, [r7, #12]
 800453e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454a:	dd1e      	ble.n	800458a <SpiritTimerComputeRxTimeoutValues+0x1d2>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	3301      	adds	r3, #1
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004618 <SpiritTimerComputeRxTimeoutValues+0x260>
 800456e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004580:	edd7 7a03 	vldr	s15, [r7, #12]
 8004584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004588:	e01f      	b.n	80045ca <SpiritTimerComputeRxTimeoutValues+0x212>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	3301      	adds	r3, #1
 8004590:	ee07 3a90 	vmov	s15, r3
 8004594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	ee07 3a90 	vmov	s15, r3
 80045a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004618 <SpiritTimerComputeRxTimeoutValues+0x260>
 80045ac:	ee67 6a87 	vmul.f32	s13, s15, s14
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045be:	edd7 7a03 	vldr	s15, [r7, #12]
 80045c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045c6:	eef1 7a67 	vneg.f32	s15, s15
 80045ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80045ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d6:	d505      	bpl.n	80045e4 <SpiritTimerComputeRxTimeoutValues+0x22c>
      (*pcCounter)=(*pcCounter)+1;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	3301      	adds	r3, #1
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d906      	bls.n	8004606 <SpiritTimerComputeRxTimeoutValues+0x24e>
    (*pcCounter)--;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	e002      	b.n	800460c <SpiritTimerComputeRxTimeoutValues+0x254>
  else
    (*pcCounter)=1;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2201      	movs	r2, #1
 800460a:	701a      	strb	r2, [r3, #0]
}
 800460c:	3720      	adds	r7, #32
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	01c9c380 	.word	0x01c9c380
 8004618:	4993b480 	.word	0x4993b480
 800461c:	80808081 	.word	0x80808081

08004620 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 800462a:	f107 030c 	add.w	r3, r7, #12
 800462e:	461a      	mov	r2, r3
 8004630:	2102      	movs	r1, #2
 8004632:	204f      	movs	r0, #79	; 0x4f
 8004634:	f000 f8ba 	bl	80047ac <RadioSpiReadRegisters>
 8004638:	4602      	mov	r2, r0
 800463a:	4b1c      	ldr	r3, [pc, #112]	; (80046ac <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 800463c:	b212      	sxth	r2, r2
 800463e:	4611      	mov	r1, r2
 8004640:	7019      	strb	r1, [r3, #0]
 8004642:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004646:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8004648:	7b3b      	ldrb	r3, [r7, #12]
 800464a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800464e:	b2db      	uxtb	r3, r3
 8004650:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8004652:	7b3b      	ldrb	r3, [r7, #12]
 8004654:	b25a      	sxtb	r2, r3
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	b25b      	sxtb	r3, r3
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	b25b      	sxtb	r3, r3
 8004662:	4313      	orrs	r3, r2
 8004664:	b25b      	sxtb	r3, r3
 8004666:	b2db      	uxtb	r3, r3
 8004668:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 800466a:	7b7b      	ldrb	r3, [r7, #13]
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	b2db      	uxtb	r3, r3
 8004672:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8004674:	7b7b      	ldrb	r3, [r7, #13]
 8004676:	b25a      	sxtb	r2, r3
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	015b      	lsls	r3, r3, #5
 800467c:	b25b      	sxtb	r3, r3
 800467e:	4313      	orrs	r3, r2
 8004680:	b25b      	sxtb	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004686:	f107 030c 	add.w	r3, r7, #12
 800468a:	461a      	mov	r2, r3
 800468c:	2102      	movs	r1, #2
 800468e:	204f      	movs	r0, #79	; 0x4f
 8004690:	f000 f840 	bl	8004714 <RadioSpiWriteRegisters>
 8004694:	4602      	mov	r2, r0
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004698:	b212      	sxth	r2, r2
 800469a:	4611      	mov	r1, r2
 800469c:	7019      	strb	r1, [r3, #0]
 800469e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80046a2:	705a      	strb	r2, [r3, #1]

}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000278 	.word	0x20000278

080046b0 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 80046b6:	1d3b      	adds	r3, r7, #4
 80046b8:	461a      	mov	r2, r3
 80046ba:	2102      	movs	r1, #2
 80046bc:	20c0      	movs	r0, #192	; 0xc0
 80046be:	f000 f875 	bl	80047ac <RadioSpiReadRegisters>
 80046c2:	4603      	mov	r3, r0
 80046c4:	4a09      	ldr	r2, [pc, #36]	; (80046ec <SpiritRefreshStatus+0x3c>)
 80046c6:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 80046c8:	4b08      	ldr	r3, [pc, #32]	; (80046ec <SpiritRefreshStatus+0x3c>)
 80046ca:	781a      	ldrb	r2, [r3, #0]
 80046cc:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d1f1      	bne.n	80046b6 <SpiritRefreshStatus+0x6>
 80046d2:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <SpiritRefreshStatus+0x40>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 80046dc:	4293      	cmp	r3, r2
 80046de:	d1ea      	bne.n	80046b6 <SpiritRefreshStatus+0x6>

}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000278 	.word	0x20000278
 80046f0:	20000279 	.word	0x20000279

080046f4 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <RadioSpiInit+0x1c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <RadioSpiInit+0x16>
  {
    Error_Handler();
 8004706:	f7fc ff27 	bl	8001558 <Error_Handler>
  }
}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20000008 	.word	0x20000008

08004714 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af02      	add	r7, sp, #8
 800471a:	4603      	mov	r3, r0
 800471c:	603a      	str	r2, [r7, #0]
 800471e:	71fb      	strb	r3, [r7, #7]
 8004720:	460b      	mov	r3, r1
 8004722:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 8004724:	2300      	movs	r3, #0
 8004726:	743b      	strb	r3, [r7, #16]
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800472c:	2017      	movs	r0, #23
 800472e:	f000 fadd 	bl	8004cec <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 8004732:	2200      	movs	r2, #0
 8004734:	2140      	movs	r1, #64	; 0x40
 8004736:	481b      	ldr	r0, [pc, #108]	; (80047a4 <RadioSpiWriteRegisters+0x90>)
 8004738:	f000 fc90 	bl	800505c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800473c:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <RadioSpiWriteRegisters+0x94>)
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	f107 020c 	add.w	r2, r7, #12
 8004744:	f107 0110 	add.w	r1, r7, #16
 8004748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2302      	movs	r3, #2
 8004750:	f002 fb47 	bl	8006de2 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004754:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <RadioSpiWriteRegisters+0x94>)
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	79bb      	ldrb	r3, [r7, #6]
 800475a:	b29a      	uxth	r2, r3
 800475c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004760:	6839      	ldr	r1, [r7, #0]
 8004762:	f002 f8a0 	bl	80068a6 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004766:	2201      	movs	r2, #1
 8004768:	2140      	movs	r1, #64	; 0x40
 800476a:	480e      	ldr	r0, [pc, #56]	; (80047a4 <RadioSpiWriteRegisters+0x90>)
 800476c:	f000 fc76 	bl	800505c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004770:	2017      	movs	r0, #23
 8004772:	f000 faad 	bl	8004cd0 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004776:	f107 0308 	add.w	r3, r7, #8
 800477a:	3301      	adds	r3, #1
 800477c:	7b3a      	ldrb	r2, [r7, #12]
 800477e:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004780:	f107 0308 	add.w	r3, r7, #8
 8004784:	7b7a      	ldrb	r2, [r7, #13]
 8004786:	701a      	strb	r2, [r3, #0]

  return status;
 8004788:	893b      	ldrh	r3, [r7, #8]
 800478a:	82bb      	strh	r3, [r7, #20]
 800478c:	2300      	movs	r3, #0
 800478e:	7d3a      	ldrb	r2, [r7, #20]
 8004790:	f362 0307 	bfi	r3, r2, #0, #8
 8004794:	7d7a      	ldrb	r2, [r7, #21]
 8004796:	f362 230f 	bfi	r3, r2, #8, #8

}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	48000400 	.word	0x48000400
 80047a8:	20000008 	.word	0x20000008

080047ac <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	4603      	mov	r3, r0
 80047b4:	603a      	str	r2, [r7, #0]
 80047b6:	71fb      	strb	r3, [r7, #7]
 80047b8:	460b      	mov	r3, r1
 80047ba:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 80047bc:	2301      	movs	r3, #1
 80047be:	743b      	strb	r3, [r7, #16]
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80047c4:	2017      	movs	r0, #23
 80047c6:	f000 fa91 	bl	8004cec <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80047ca:	2200      	movs	r2, #0
 80047cc:	2140      	movs	r1, #64	; 0x40
 80047ce:	481b      	ldr	r0, [pc, #108]	; (800483c <RadioSpiReadRegisters+0x90>)
 80047d0:	f000 fc44 	bl	800505c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80047d4:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <RadioSpiReadRegisters+0x94>)
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	f107 020c 	add.w	r2, r7, #12
 80047dc:	f107 0110 	add.w	r1, r7, #16
 80047e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	2302      	movs	r3, #2
 80047e8:	f002 fafb 	bl	8006de2 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80047ec:	4b14      	ldr	r3, [pc, #80]	; (8004840 <RadioSpiReadRegisters+0x94>)
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	79bb      	ldrb	r3, [r7, #6]
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047f8:	6839      	ldr	r1, [r7, #0]
 80047fa:	f002 f9c2 	bl	8006b82 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80047fe:	2201      	movs	r2, #1
 8004800:	2140      	movs	r1, #64	; 0x40
 8004802:	480e      	ldr	r0, [pc, #56]	; (800483c <RadioSpiReadRegisters+0x90>)
 8004804:	f000 fc2a 	bl	800505c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004808:	2017      	movs	r0, #23
 800480a:	f000 fa61 	bl	8004cd0 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800480e:	f107 0308 	add.w	r3, r7, #8
 8004812:	3301      	adds	r3, #1
 8004814:	7b3a      	ldrb	r2, [r7, #12]
 8004816:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004818:	f107 0308 	add.w	r3, r7, #8
 800481c:	7b7a      	ldrb	r2, [r7, #13]
 800481e:	701a      	strb	r2, [r3, #0]

  return status;
 8004820:	893b      	ldrh	r3, [r7, #8]
 8004822:	82bb      	strh	r3, [r7, #20]
 8004824:	2300      	movs	r3, #0
 8004826:	7d3a      	ldrb	r2, [r7, #20]
 8004828:	f362 0307 	bfi	r3, r2, #0, #8
 800482c:	7d7a      	ldrb	r2, [r7, #21]
 800482e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	48000400 	.word	0x48000400
 8004840:	20000008 	.word	0x20000008

08004844 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af02      	add	r7, sp, #8
 800484a:	4603      	mov	r3, r0
 800484c:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	743b      	strb	r3, [r7, #16]
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004856:	2017      	movs	r0, #23
 8004858:	f000 fa48 	bl	8004cec <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800485c:	2200      	movs	r2, #0
 800485e:	2140      	movs	r1, #64	; 0x40
 8004860:	4816      	ldr	r0, [pc, #88]	; (80048bc <RadioSpiCommandStrobes+0x78>)
 8004862:	f000 fbfb 	bl	800505c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004866:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <RadioSpiCommandStrobes+0x7c>)
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	f107 020c 	add.w	r2, r7, #12
 800486e:	f107 0110 	add.w	r1, r7, #16
 8004872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	2302      	movs	r3, #2
 800487a:	f002 fab2 	bl	8006de2 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800487e:	2201      	movs	r2, #1
 8004880:	2140      	movs	r1, #64	; 0x40
 8004882:	480e      	ldr	r0, [pc, #56]	; (80048bc <RadioSpiCommandStrobes+0x78>)
 8004884:	f000 fbea 	bl	800505c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004888:	2017      	movs	r0, #23
 800488a:	f000 fa21 	bl	8004cd0 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800488e:	f107 0308 	add.w	r3, r7, #8
 8004892:	3301      	adds	r3, #1
 8004894:	7b3a      	ldrb	r2, [r7, #12]
 8004896:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004898:	f107 0308 	add.w	r3, r7, #8
 800489c:	7b7a      	ldrb	r2, [r7, #13]
 800489e:	701a      	strb	r2, [r3, #0]

  return status;
 80048a0:	893b      	ldrh	r3, [r7, #8]
 80048a2:	82bb      	strh	r3, [r7, #20]
 80048a4:	2300      	movs	r3, #0
 80048a6:	7d3a      	ldrb	r2, [r7, #20]
 80048a8:	f362 0307 	bfi	r3, r2, #0, #8
 80048ac:	7d7a      	ldrb	r2, [r7, #21]
 80048ae:	f362 230f 	bfi	r3, r2, #8, #8
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	48000400 	.word	0x48000400
 80048c0:	20000008 	.word	0x20000008

080048c4 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	4603      	mov	r3, r0
 80048cc:	6039      	str	r1, [r7, #0]
 80048ce:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 80048d0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80048d4:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80048d6:	2017      	movs	r0, #23
 80048d8:	f000 fa08 	bl	8004cec <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80048dc:	2200      	movs	r2, #0
 80048de:	2140      	movs	r1, #64	; 0x40
 80048e0:	481a      	ldr	r0, [pc, #104]	; (800494c <RadioSpiWriteFifo+0x88>)
 80048e2:	f000 fbbb 	bl	800505c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80048e6:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <RadioSpiWriteFifo+0x8c>)
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	f107 020c 	add.w	r2, r7, #12
 80048ee:	f107 0110 	add.w	r1, r7, #16
 80048f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	2302      	movs	r3, #2
 80048fa:	f002 fa72 	bl	8006de2 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80048fe:	4b14      	ldr	r3, [pc, #80]	; (8004950 <RadioSpiWriteFifo+0x8c>)
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	b29a      	uxth	r2, r3
 8004906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800490a:	6839      	ldr	r1, [r7, #0]
 800490c:	f001 ffcb 	bl	80068a6 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004910:	2201      	movs	r2, #1
 8004912:	2140      	movs	r1, #64	; 0x40
 8004914:	480d      	ldr	r0, [pc, #52]	; (800494c <RadioSpiWriteFifo+0x88>)
 8004916:	f000 fba1 	bl	800505c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800491a:	2017      	movs	r0, #23
 800491c:	f000 f9d8 	bl	8004cd0 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004920:	f107 0308 	add.w	r3, r7, #8
 8004924:	3301      	adds	r3, #1
 8004926:	7b3a      	ldrb	r2, [r7, #12]
 8004928:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 800492a:	f107 0308 	add.w	r3, r7, #8
 800492e:	7b7a      	ldrb	r2, [r7, #13]
 8004930:	701a      	strb	r2, [r3, #0]

  return status;
 8004932:	893b      	ldrh	r3, [r7, #8]
 8004934:	82bb      	strh	r3, [r7, #20]
 8004936:	2300      	movs	r3, #0
 8004938:	7d3a      	ldrb	r2, [r7, #20]
 800493a:	f362 0307 	bfi	r3, r2, #0, #8
 800493e:	7d7a      	ldrb	r2, [r7, #21]
 8004940:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	48000400 	.word	0x48000400
 8004950:	20000008 	.word	0x20000008

08004954 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af02      	add	r7, sp, #8
 800495a:	4603      	mov	r3, r0
 800495c:	6039      	str	r1, [r7, #0]
 800495e:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 8004960:	f64f 7301 	movw	r3, #65281	; 0xff01
 8004964:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004966:	2017      	movs	r0, #23
 8004968:	f000 f9c0 	bl	8004cec <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800496c:	2200      	movs	r2, #0
 800496e:	2140      	movs	r1, #64	; 0x40
 8004970:	481a      	ldr	r0, [pc, #104]	; (80049dc <RadioSpiReadFifo+0x88>)
 8004972:	f000 fb73 	bl	800505c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004976:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <RadioSpiReadFifo+0x8c>)
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	f107 020c 	add.w	r2, r7, #12
 800497e:	f107 0110 	add.w	r1, r7, #16
 8004982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	2302      	movs	r3, #2
 800498a:	f002 fa2a 	bl	8006de2 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800498e:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <RadioSpiReadFifo+0x8c>)
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	b29a      	uxth	r2, r3
 8004996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800499a:	6839      	ldr	r1, [r7, #0]
 800499c:	f002 f8f1 	bl	8006b82 <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 80049a0:	2201      	movs	r2, #1
 80049a2:	2140      	movs	r1, #64	; 0x40
 80049a4:	480d      	ldr	r0, [pc, #52]	; (80049dc <RadioSpiReadFifo+0x88>)
 80049a6:	f000 fb59 	bl	800505c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80049aa:	2017      	movs	r0, #23
 80049ac:	f000 f990 	bl	8004cd0 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80049b0:	f107 0308 	add.w	r3, r7, #8
 80049b4:	3301      	adds	r3, #1
 80049b6:	7b3a      	ldrb	r2, [r7, #12]
 80049b8:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80049ba:	f107 0308 	add.w	r3, r7, #8
 80049be:	7b7a      	ldrb	r2, [r7, #13]
 80049c0:	701a      	strb	r2, [r3, #0]

  return status;
 80049c2:	893b      	ldrh	r3, [r7, #8]
 80049c4:	82bb      	strh	r3, [r7, #20]
 80049c6:	2300      	movs	r3, #0
 80049c8:	7d3a      	ldrb	r2, [r7, #20]
 80049ca:	f362 0307 	bfi	r3, r2, #0, #8
 80049ce:	7d7a      	ldrb	r2, [r7, #21]
 80049d0:	f362 230f 	bfi	r3, r2, #8, #8
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	48000400 	.word	0x48000400
 80049e0:	20000008 	.word	0x20000008

080049e4 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 80049e8:	2201      	movs	r2, #1
 80049ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049f2:	f000 fb33 	bl	800505c <HAL_GPIO_WritePin>
}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}

080049fa <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 80049fe:	2200      	movs	r2, #0
 8004a00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a08:	f000 fb28 	bl	800505c <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	f000 f843 	bl	8004a98 <HAL_Delay>
}
 8004a12:	bf00      	nop
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a22:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <HAL_Init+0x3c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <HAL_Init+0x3c>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a2e:	2003      	movs	r0, #3
 8004a30:	f000 f927 	bl	8004c82 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a34:	200f      	movs	r0, #15
 8004a36:	f7fc ffbb 	bl	80019b0 <HAL_InitTick>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	71fb      	strb	r3, [r7, #7]
 8004a44:	e001      	b.n	8004a4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a46:	f7fc ff8b 	bl	8001960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40022000 	.word	0x40022000

08004a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <HAL_IncTick+0x20>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_IncTick+0x24>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4413      	add	r3, r2
 8004a68:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <HAL_IncTick+0x24>)
 8004a6a:	6013      	str	r3, [r2, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	20000010 	.word	0x20000010
 8004a7c:	2000027c 	.word	0x2000027c

08004a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return uwTick;
 8004a84:	4b03      	ldr	r3, [pc, #12]	; (8004a94 <HAL_GetTick+0x14>)
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	2000027c 	.word	0x2000027c

08004a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004aa0:	f7ff ffee 	bl	8004a80 <HAL_GetTick>
 8004aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ab0:	d005      	beq.n	8004abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <HAL_Delay+0x44>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004abe:	bf00      	nop
 8004ac0:	f7ff ffde 	bl	8004a80 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d8f7      	bhi.n	8004ac0 <HAL_Delay+0x28>
  {
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000010 	.word	0x20000010

08004ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004af0:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <__NVIC_SetPriorityGrouping+0x44>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004afc:	4013      	ands	r3, r2
 8004afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b12:	4a04      	ldr	r2, [pc, #16]	; (8004b24 <__NVIC_SetPriorityGrouping+0x44>)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	60d3      	str	r3, [r2, #12]
}
 8004b18:	bf00      	nop
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	e000ed00 	.word	0xe000ed00

08004b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <__NVIC_GetPriorityGrouping+0x18>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	0a1b      	lsrs	r3, r3, #8
 8004b32:	f003 0307 	and.w	r3, r3, #7
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	e000ed00 	.word	0xe000ed00

08004b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	db0b      	blt.n	8004b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	f003 021f 	and.w	r2, r3, #31
 8004b5c:	4907      	ldr	r1, [pc, #28]	; (8004b7c <__NVIC_EnableIRQ+0x38>)
 8004b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	2001      	movs	r0, #1
 8004b66:	fa00 f202 	lsl.w	r2, r0, r2
 8004b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	e000e100 	.word	0xe000e100

08004b80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	db12      	blt.n	8004bb8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	f003 021f 	and.w	r2, r3, #31
 8004b98:	490a      	ldr	r1, [pc, #40]	; (8004bc4 <__NVIC_DisableIRQ+0x44>)
 8004b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ba6:	3320      	adds	r3, #32
 8004ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004bac:	f3bf 8f4f 	dsb	sy
}
 8004bb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004bb2:	f3bf 8f6f 	isb	sy
}
 8004bb6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	e000e100 	.word	0xe000e100

08004bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	6039      	str	r1, [r7, #0]
 8004bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	db0a      	blt.n	8004bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	490c      	ldr	r1, [pc, #48]	; (8004c14 <__NVIC_SetPriority+0x4c>)
 8004be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be6:	0112      	lsls	r2, r2, #4
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	440b      	add	r3, r1
 8004bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bf0:	e00a      	b.n	8004c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	4908      	ldr	r1, [pc, #32]	; (8004c18 <__NVIC_SetPriority+0x50>)
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	3b04      	subs	r3, #4
 8004c00:	0112      	lsls	r2, r2, #4
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	440b      	add	r3, r1
 8004c06:	761a      	strb	r2, [r3, #24]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000e100 	.word	0xe000e100
 8004c18:	e000ed00 	.word	0xe000ed00

08004c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b089      	sub	sp, #36	; 0x24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f1c3 0307 	rsb	r3, r3, #7
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	bf28      	it	cs
 8004c3a:	2304      	movcs	r3, #4
 8004c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2b06      	cmp	r3, #6
 8004c44:	d902      	bls.n	8004c4c <NVIC_EncodePriority+0x30>
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	3b03      	subs	r3, #3
 8004c4a:	e000      	b.n	8004c4e <NVIC_EncodePriority+0x32>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43da      	mvns	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	401a      	ands	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6e:	43d9      	mvns	r1, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c74:	4313      	orrs	r3, r2
         );
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3724      	adds	r7, #36	; 0x24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff ff28 	bl	8004ae0 <__NVIC_SetPriorityGrouping>
}
 8004c90:	bf00      	nop
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004caa:	f7ff ff3d 	bl	8004b28 <__NVIC_GetPriorityGrouping>
 8004cae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	6978      	ldr	r0, [r7, #20]
 8004cb6:	f7ff ffb1 	bl	8004c1c <NVIC_EncodePriority>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff ff80 	bl	8004bc8 <__NVIC_SetPriority>
}
 8004cc8:	bf00      	nop
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff ff30 	bl	8004b44 <__NVIC_EnableIRQ>
}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff ff40 	bl	8004b80 <__NVIC_DisableIRQ>
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d16:	e17f      	b.n	8005018 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	fa01 f303 	lsl.w	r3, r1, r3
 8004d24:	4013      	ands	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 8171 	beq.w	8005012 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d005      	beq.n	8004d48 <HAL_GPIO_Init+0x40>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d130      	bne.n	8004daa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	2203      	movs	r2, #3
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d7e:	2201      	movs	r2, #1
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	091b      	lsrs	r3, r3, #4
 8004d94:	f003 0201 	and.w	r2, r3, #1
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d118      	bne.n	8004de8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	08db      	lsrs	r3, r3, #3
 8004dd2:	f003 0201 	and.w	r2, r3, #1
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d017      	beq.n	8004e24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	2203      	movs	r2, #3
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	43db      	mvns	r3, r3
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d123      	bne.n	8004e78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	08da      	lsrs	r2, r3, #3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3208      	adds	r2, #8
 8004e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	220f      	movs	r2, #15
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4013      	ands	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	08da      	lsrs	r2, r3, #3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3208      	adds	r2, #8
 8004e72:	6939      	ldr	r1, [r7, #16]
 8004e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	2203      	movs	r2, #3
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0203 	and.w	r2, r3, #3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80ac 	beq.w	8005012 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eba:	4b5f      	ldr	r3, [pc, #380]	; (8005038 <HAL_GPIO_Init+0x330>)
 8004ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ebe:	4a5e      	ldr	r2, [pc, #376]	; (8005038 <HAL_GPIO_Init+0x330>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8004ec6:	4b5c      	ldr	r3, [pc, #368]	; (8005038 <HAL_GPIO_Init+0x330>)
 8004ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004ed2:	4a5a      	ldr	r2, [pc, #360]	; (800503c <HAL_GPIO_Init+0x334>)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	089b      	lsrs	r3, r3, #2
 8004ed8:	3302      	adds	r3, #2
 8004eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	220f      	movs	r2, #15
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004efc:	d025      	beq.n	8004f4a <HAL_GPIO_Init+0x242>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a4f      	ldr	r2, [pc, #316]	; (8005040 <HAL_GPIO_Init+0x338>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01f      	beq.n	8004f46 <HAL_GPIO_Init+0x23e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a4e      	ldr	r2, [pc, #312]	; (8005044 <HAL_GPIO_Init+0x33c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d019      	beq.n	8004f42 <HAL_GPIO_Init+0x23a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a4d      	ldr	r2, [pc, #308]	; (8005048 <HAL_GPIO_Init+0x340>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d013      	beq.n	8004f3e <HAL_GPIO_Init+0x236>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a4c      	ldr	r2, [pc, #304]	; (800504c <HAL_GPIO_Init+0x344>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00d      	beq.n	8004f3a <HAL_GPIO_Init+0x232>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a4b      	ldr	r2, [pc, #300]	; (8005050 <HAL_GPIO_Init+0x348>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d007      	beq.n	8004f36 <HAL_GPIO_Init+0x22e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a4a      	ldr	r2, [pc, #296]	; (8005054 <HAL_GPIO_Init+0x34c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d101      	bne.n	8004f32 <HAL_GPIO_Init+0x22a>
 8004f2e:	2306      	movs	r3, #6
 8004f30:	e00c      	b.n	8004f4c <HAL_GPIO_Init+0x244>
 8004f32:	2307      	movs	r3, #7
 8004f34:	e00a      	b.n	8004f4c <HAL_GPIO_Init+0x244>
 8004f36:	2305      	movs	r3, #5
 8004f38:	e008      	b.n	8004f4c <HAL_GPIO_Init+0x244>
 8004f3a:	2304      	movs	r3, #4
 8004f3c:	e006      	b.n	8004f4c <HAL_GPIO_Init+0x244>
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e004      	b.n	8004f4c <HAL_GPIO_Init+0x244>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e002      	b.n	8004f4c <HAL_GPIO_Init+0x244>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <HAL_GPIO_Init+0x244>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	f002 0203 	and.w	r2, r2, #3
 8004f52:	0092      	lsls	r2, r2, #2
 8004f54:	4093      	lsls	r3, r2
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f5c:	4937      	ldr	r1, [pc, #220]	; (800503c <HAL_GPIO_Init+0x334>)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	089b      	lsrs	r3, r3, #2
 8004f62:	3302      	adds	r3, #2
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f6a:	4b3b      	ldr	r3, [pc, #236]	; (8005058 <HAL_GPIO_Init+0x350>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	43db      	mvns	r3, r3
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4013      	ands	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f8e:	4a32      	ldr	r2, [pc, #200]	; (8005058 <HAL_GPIO_Init+0x350>)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f94:	4b30      	ldr	r3, [pc, #192]	; (8005058 <HAL_GPIO_Init+0x350>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fb8:	4a27      	ldr	r2, [pc, #156]	; (8005058 <HAL_GPIO_Init+0x350>)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004fbe:	4b26      	ldr	r3, [pc, #152]	; (8005058 <HAL_GPIO_Init+0x350>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fe2:	4a1d      	ldr	r2, [pc, #116]	; (8005058 <HAL_GPIO_Init+0x350>)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <HAL_GPIO_Init+0x350>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800500c:	4a12      	ldr	r2, [pc, #72]	; (8005058 <HAL_GPIO_Init+0x350>)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	3301      	adds	r3, #1
 8005016:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	fa22 f303 	lsr.w	r3, r2, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	f47f ae78 	bne.w	8004d18 <HAL_GPIO_Init+0x10>
  }
}
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40021000 	.word	0x40021000
 800503c:	40010000 	.word	0x40010000
 8005040:	48000400 	.word	0x48000400
 8005044:	48000800 	.word	0x48000800
 8005048:	48000c00 	.word	0x48000c00
 800504c:	48001000 	.word	0x48001000
 8005050:	48001400 	.word	0x48001400
 8005054:	48001800 	.word	0x48001800
 8005058:	40010400 	.word	0x40010400

0800505c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	807b      	strh	r3, [r7, #2]
 8005068:	4613      	mov	r3, r2
 800506a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800506c:	787b      	ldrb	r3, [r7, #1]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005072:	887a      	ldrh	r2, [r7, #2]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005078:	e002      	b.n	8005080 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800507a:	887a      	ldrh	r2, [r7, #2]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005096:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	4013      	ands	r3, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d006      	beq.n	80050b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050a2:	4a05      	ldr	r2, [pc, #20]	; (80050b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050a4:	88fb      	ldrh	r3, [r7, #6]
 80050a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fc fa04 	bl	80014b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40010400 	.word	0x40010400

080050bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80050c0:	4b04      	ldr	r3, [pc, #16]	; (80050d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40007000 	.word	0x40007000

080050d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e6:	d130      	bne.n	800514a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80050e8:	4b23      	ldr	r3, [pc, #140]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f4:	d038      	beq.n	8005168 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050f6:	4b20      	ldr	r3, [pc, #128]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050fe:	4a1e      	ldr	r2, [pc, #120]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005104:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005106:	4b1d      	ldr	r3, [pc, #116]	; (800517c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2232      	movs	r2, #50	; 0x32
 800510c:	fb02 f303 	mul.w	r3, r2, r3
 8005110:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	0c9b      	lsrs	r3, r3, #18
 8005118:	3301      	adds	r3, #1
 800511a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800511c:	e002      	b.n	8005124 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3b01      	subs	r3, #1
 8005122:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005124:	4b14      	ldr	r3, [pc, #80]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005130:	d102      	bne.n	8005138 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f2      	bne.n	800511e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005138:	4b0f      	ldr	r3, [pc, #60]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005144:	d110      	bne.n	8005168 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e00f      	b.n	800516a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800514a:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005156:	d007      	beq.n	8005168 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005158:	4b07      	ldr	r3, [pc, #28]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005160:	4a05      	ldr	r2, [pc, #20]	; (8005178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005166:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40007000 	.word	0x40007000
 800517c:	20000000 	.word	0x20000000
 8005180:	431bde83 	.word	0x431bde83

08005184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e3ca      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005196:	4b97      	ldr	r3, [pc, #604]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 030c 	and.w	r3, r3, #12
 800519e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051a0:	4b94      	ldr	r3, [pc, #592]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0303 	and.w	r3, r3, #3
 80051a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 80e4 	beq.w	8005380 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <HAL_RCC_OscConfig+0x4a>
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b0c      	cmp	r3, #12
 80051c2:	f040 808b 	bne.w	80052dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	f040 8087 	bne.w	80052dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051ce:	4b89      	ldr	r3, [pc, #548]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <HAL_RCC_OscConfig+0x62>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e3a2      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1a      	ldr	r2, [r3, #32]
 80051ea:	4b82      	ldr	r3, [pc, #520]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d004      	beq.n	8005200 <HAL_RCC_OscConfig+0x7c>
 80051f6:	4b7f      	ldr	r3, [pc, #508]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051fe:	e005      	b.n	800520c <HAL_RCC_OscConfig+0x88>
 8005200:	4b7c      	ldr	r3, [pc, #496]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800520c:	4293      	cmp	r3, r2
 800520e:	d223      	bcs.n	8005258 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fd87 	bl	8005d28 <RCC_SetFlashLatencyFromMSIRange>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e383      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005224:	4b73      	ldr	r3, [pc, #460]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a72      	ldr	r2, [pc, #456]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 800522a:	f043 0308 	orr.w	r3, r3, #8
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	4b70      	ldr	r3, [pc, #448]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	496d      	ldr	r1, [pc, #436]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 800523e:	4313      	orrs	r3, r2
 8005240:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005242:	4b6c      	ldr	r3, [pc, #432]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	4968      	ldr	r1, [pc, #416]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005252:	4313      	orrs	r3, r2
 8005254:	604b      	str	r3, [r1, #4]
 8005256:	e025      	b.n	80052a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005258:	4b66      	ldr	r3, [pc, #408]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a65      	ldr	r2, [pc, #404]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 800525e:	f043 0308 	orr.w	r3, r3, #8
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	4b63      	ldr	r3, [pc, #396]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	4960      	ldr	r1, [pc, #384]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005272:	4313      	orrs	r3, r2
 8005274:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005276:	4b5f      	ldr	r3, [pc, #380]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	495b      	ldr	r1, [pc, #364]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005286:	4313      	orrs	r3, r2
 8005288:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d109      	bne.n	80052a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	4618      	mov	r0, r3
 8005296:	f000 fd47 	bl	8005d28 <RCC_SetFlashLatencyFromMSIRange>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e343      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052a4:	f000 fc4a 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 80052a8:	4602      	mov	r2, r0
 80052aa:	4b52      	ldr	r3, [pc, #328]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	091b      	lsrs	r3, r3, #4
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	4950      	ldr	r1, [pc, #320]	; (80053f8 <HAL_RCC_OscConfig+0x274>)
 80052b6:	5ccb      	ldrb	r3, [r1, r3]
 80052b8:	f003 031f 	and.w	r3, r3, #31
 80052bc:	fa22 f303 	lsr.w	r3, r2, r3
 80052c0:	4a4e      	ldr	r2, [pc, #312]	; (80053fc <HAL_RCC_OscConfig+0x278>)
 80052c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80052c4:	4b4e      	ldr	r3, [pc, #312]	; (8005400 <HAL_RCC_OscConfig+0x27c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fc fb71 	bl	80019b0 <HAL_InitTick>
 80052ce:	4603      	mov	r3, r0
 80052d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d052      	beq.n	800537e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	e327      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d032      	beq.n	800534a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80052e4:	4b43      	ldr	r3, [pc, #268]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a42      	ldr	r2, [pc, #264]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 80052ea:	f043 0301 	orr.w	r3, r3, #1
 80052ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052f0:	f7ff fbc6 	bl	8004a80 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052f8:	f7ff fbc2 	bl	8004a80 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e310      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800530a:	4b3a      	ldr	r3, [pc, #232]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f0      	beq.n	80052f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005316:	4b37      	ldr	r3, [pc, #220]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a36      	ldr	r2, [pc, #216]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 800531c:	f043 0308 	orr.w	r3, r3, #8
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	4b34      	ldr	r3, [pc, #208]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	4931      	ldr	r1, [pc, #196]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005330:	4313      	orrs	r3, r2
 8005332:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005334:	4b2f      	ldr	r3, [pc, #188]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	492c      	ldr	r1, [pc, #176]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005344:	4313      	orrs	r3, r2
 8005346:	604b      	str	r3, [r1, #4]
 8005348:	e01a      	b.n	8005380 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800534a:	4b2a      	ldr	r3, [pc, #168]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a29      	ldr	r2, [pc, #164]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005356:	f7ff fb93 	bl	8004a80 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800535c:	e008      	b.n	8005370 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800535e:	f7ff fb8f 	bl	8004a80 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e2dd      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005370:	4b20      	ldr	r3, [pc, #128]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1f0      	bne.n	800535e <HAL_RCC_OscConfig+0x1da>
 800537c:	e000      	b.n	8005380 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800537e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d074      	beq.n	8005476 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b08      	cmp	r3, #8
 8005390:	d005      	beq.n	800539e <HAL_RCC_OscConfig+0x21a>
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b0c      	cmp	r3, #12
 8005396:	d10e      	bne.n	80053b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2b03      	cmp	r3, #3
 800539c:	d10b      	bne.n	80053b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539e:	4b15      	ldr	r3, [pc, #84]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d064      	beq.n	8005474 <HAL_RCC_OscConfig+0x2f0>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d160      	bne.n	8005474 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e2ba      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053be:	d106      	bne.n	80053ce <HAL_RCC_OscConfig+0x24a>
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a0b      	ldr	r2, [pc, #44]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 80053c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	e026      	b.n	800541c <HAL_RCC_OscConfig+0x298>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053d6:	d115      	bne.n	8005404 <HAL_RCC_OscConfig+0x280>
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a05      	ldr	r2, [pc, #20]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 80053de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a02      	ldr	r2, [pc, #8]	; (80053f4 <HAL_RCC_OscConfig+0x270>)
 80053ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	e014      	b.n	800541c <HAL_RCC_OscConfig+0x298>
 80053f2:	bf00      	nop
 80053f4:	40021000 	.word	0x40021000
 80053f8:	0800d064 	.word	0x0800d064
 80053fc:	20000000 	.word	0x20000000
 8005400:	2000000c 	.word	0x2000000c
 8005404:	4ba0      	ldr	r3, [pc, #640]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a9f      	ldr	r2, [pc, #636]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 800540a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	4b9d      	ldr	r3, [pc, #628]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a9c      	ldr	r2, [pc, #624]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 8005416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800541a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d013      	beq.n	800544c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005424:	f7ff fb2c 	bl	8004a80 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800542c:	f7ff fb28 	bl	8004a80 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b64      	cmp	r3, #100	; 0x64
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e276      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800543e:	4b92      	ldr	r3, [pc, #584]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0f0      	beq.n	800542c <HAL_RCC_OscConfig+0x2a8>
 800544a:	e014      	b.n	8005476 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544c:	f7ff fb18 	bl	8004a80 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005454:	f7ff fb14 	bl	8004a80 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b64      	cmp	r3, #100	; 0x64
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e262      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005466:	4b88      	ldr	r3, [pc, #544]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f0      	bne.n	8005454 <HAL_RCC_OscConfig+0x2d0>
 8005472:	e000      	b.n	8005476 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d060      	beq.n	8005544 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b04      	cmp	r3, #4
 8005486:	d005      	beq.n	8005494 <HAL_RCC_OscConfig+0x310>
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b0c      	cmp	r3, #12
 800548c:	d119      	bne.n	80054c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b02      	cmp	r3, #2
 8005492:	d116      	bne.n	80054c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005494:	4b7c      	ldr	r3, [pc, #496]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_RCC_OscConfig+0x328>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e23f      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ac:	4b76      	ldr	r3, [pc, #472]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	061b      	lsls	r3, r3, #24
 80054ba:	4973      	ldr	r1, [pc, #460]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054c0:	e040      	b.n	8005544 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d023      	beq.n	8005512 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054ca:	4b6f      	ldr	r3, [pc, #444]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a6e      	ldr	r2, [pc, #440]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 80054d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d6:	f7ff fad3 	bl	8004a80 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054de:	f7ff facf 	bl	8004a80 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e21d      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054f0:	4b65      	ldr	r3, [pc, #404]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fc:	4b62      	ldr	r3, [pc, #392]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	061b      	lsls	r3, r3, #24
 800550a:	495f      	ldr	r1, [pc, #380]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 800550c:	4313      	orrs	r3, r2
 800550e:	604b      	str	r3, [r1, #4]
 8005510:	e018      	b.n	8005544 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005512:	4b5d      	ldr	r3, [pc, #372]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a5c      	ldr	r2, [pc, #368]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 8005518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800551c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551e:	f7ff faaf 	bl	8004a80 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005526:	f7ff faab 	bl	8004a80 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e1f9      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005538:	4b53      	ldr	r3, [pc, #332]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1f0      	bne.n	8005526 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b00      	cmp	r3, #0
 800554e:	d03c      	beq.n	80055ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01c      	beq.n	8005592 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005558:	4b4b      	ldr	r3, [pc, #300]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 800555a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800555e:	4a4a      	ldr	r2, [pc, #296]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005568:	f7ff fa8a 	bl	8004a80 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005570:	f7ff fa86 	bl	8004a80 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e1d4      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005582:	4b41      	ldr	r3, [pc, #260]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 8005584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0ef      	beq.n	8005570 <HAL_RCC_OscConfig+0x3ec>
 8005590:	e01b      	b.n	80055ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005592:	4b3d      	ldr	r3, [pc, #244]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 8005594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005598:	4a3b      	ldr	r2, [pc, #236]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a2:	f7ff fa6d 	bl	8004a80 <HAL_GetTick>
 80055a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055aa:	f7ff fa69 	bl	8004a80 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e1b7      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055bc:	4b32      	ldr	r3, [pc, #200]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 80055be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1ef      	bne.n	80055aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 80a6 	beq.w	8005724 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055d8:	2300      	movs	r3, #0
 80055da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80055dc:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 80055de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10d      	bne.n	8005604 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055e8:	4b27      	ldr	r3, [pc, #156]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 80055ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ec:	4a26      	ldr	r2, [pc, #152]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 80055ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f2:	6593      	str	r3, [r2, #88]	; 0x58
 80055f4:	4b24      	ldr	r3, [pc, #144]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 80055f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005600:	2301      	movs	r3, #1
 8005602:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005604:	4b21      	ldr	r3, [pc, #132]	; (800568c <HAL_RCC_OscConfig+0x508>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d118      	bne.n	8005642 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005610:	4b1e      	ldr	r3, [pc, #120]	; (800568c <HAL_RCC_OscConfig+0x508>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1d      	ldr	r2, [pc, #116]	; (800568c <HAL_RCC_OscConfig+0x508>)
 8005616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800561a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800561c:	f7ff fa30 	bl	8004a80 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005624:	f7ff fa2c 	bl	8004a80 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e17a      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005636:	4b15      	ldr	r3, [pc, #84]	; (800568c <HAL_RCC_OscConfig+0x508>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d108      	bne.n	800565c <HAL_RCC_OscConfig+0x4d8>
 800564a:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 800564c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005650:	4a0d      	ldr	r2, [pc, #52]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800565a:	e029      	b.n	80056b0 <HAL_RCC_OscConfig+0x52c>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	2b05      	cmp	r3, #5
 8005662:	d115      	bne.n	8005690 <HAL_RCC_OscConfig+0x50c>
 8005664:	4b08      	ldr	r3, [pc, #32]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566a:	4a07      	ldr	r2, [pc, #28]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 800566c:	f043 0304 	orr.w	r3, r3, #4
 8005670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	4a03      	ldr	r2, [pc, #12]	; (8005688 <HAL_RCC_OscConfig+0x504>)
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005684:	e014      	b.n	80056b0 <HAL_RCC_OscConfig+0x52c>
 8005686:	bf00      	nop
 8005688:	40021000 	.word	0x40021000
 800568c:	40007000 	.word	0x40007000
 8005690:	4b9c      	ldr	r3, [pc, #624]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005696:	4a9b      	ldr	r2, [pc, #620]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056a0:	4b98      	ldr	r3, [pc, #608]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a6:	4a97      	ldr	r2, [pc, #604]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 80056a8:	f023 0304 	bic.w	r3, r3, #4
 80056ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d016      	beq.n	80056e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b8:	f7ff f9e2 	bl	8004a80 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056be:	e00a      	b.n	80056d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c0:	f7ff f9de 	bl	8004a80 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e12a      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056d6:	4b8b      	ldr	r3, [pc, #556]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 80056d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0ed      	beq.n	80056c0 <HAL_RCC_OscConfig+0x53c>
 80056e4:	e015      	b.n	8005712 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e6:	f7ff f9cb 	bl	8004a80 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056ec:	e00a      	b.n	8005704 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ee:	f7ff f9c7 	bl	8004a80 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e113      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005704:	4b7f      	ldr	r3, [pc, #508]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 8005706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1ed      	bne.n	80056ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005712:	7ffb      	ldrb	r3, [r7, #31]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d105      	bne.n	8005724 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005718:	4b7a      	ldr	r3, [pc, #488]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 800571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571c:	4a79      	ldr	r2, [pc, #484]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 800571e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005722:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80fe 	beq.w	800592a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005732:	2b02      	cmp	r3, #2
 8005734:	f040 80d0 	bne.w	80058d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005738:	4b72      	ldr	r3, [pc, #456]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f003 0203 	and.w	r2, r3, #3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	429a      	cmp	r2, r3
 800574a:	d130      	bne.n	80057ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	3b01      	subs	r3, #1
 8005758:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800575a:	429a      	cmp	r2, r3
 800575c:	d127      	bne.n	80057ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005768:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800576a:	429a      	cmp	r2, r3
 800576c:	d11f      	bne.n	80057ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005778:	2a07      	cmp	r2, #7
 800577a:	bf14      	ite	ne
 800577c:	2201      	movne	r2, #1
 800577e:	2200      	moveq	r2, #0
 8005780:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005782:	4293      	cmp	r3, r2
 8005784:	d113      	bne.n	80057ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005790:	085b      	lsrs	r3, r3, #1
 8005792:	3b01      	subs	r3, #1
 8005794:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005796:	429a      	cmp	r2, r3
 8005798:	d109      	bne.n	80057ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	085b      	lsrs	r3, r3, #1
 80057a6:	3b01      	subs	r3, #1
 80057a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d06e      	beq.n	800588c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	2b0c      	cmp	r3, #12
 80057b2:	d069      	beq.n	8005888 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80057b4:	4b53      	ldr	r3, [pc, #332]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d105      	bne.n	80057cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80057c0:	4b50      	ldr	r3, [pc, #320]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0ad      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80057d0:	4b4c      	ldr	r3, [pc, #304]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a4b      	ldr	r2, [pc, #300]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 80057d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057dc:	f7ff f950 	bl	8004a80 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e4:	f7ff f94c 	bl	8004a80 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e09a      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057f6:	4b43      	ldr	r3, [pc, #268]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005802:	4b40      	ldr	r3, [pc, #256]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	4b40      	ldr	r3, [pc, #256]	; (8005908 <HAL_RCC_OscConfig+0x784>)
 8005808:	4013      	ands	r3, r2
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005812:	3a01      	subs	r2, #1
 8005814:	0112      	lsls	r2, r2, #4
 8005816:	4311      	orrs	r1, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800581c:	0212      	lsls	r2, r2, #8
 800581e:	4311      	orrs	r1, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005824:	0852      	lsrs	r2, r2, #1
 8005826:	3a01      	subs	r2, #1
 8005828:	0552      	lsls	r2, r2, #21
 800582a:	4311      	orrs	r1, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005830:	0852      	lsrs	r2, r2, #1
 8005832:	3a01      	subs	r2, #1
 8005834:	0652      	lsls	r2, r2, #25
 8005836:	4311      	orrs	r1, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800583c:	0912      	lsrs	r2, r2, #4
 800583e:	0452      	lsls	r2, r2, #17
 8005840:	430a      	orrs	r2, r1
 8005842:	4930      	ldr	r1, [pc, #192]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 8005844:	4313      	orrs	r3, r2
 8005846:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005848:	4b2e      	ldr	r3, [pc, #184]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a2d      	ldr	r2, [pc, #180]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 800584e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005852:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005854:	4b2b      	ldr	r3, [pc, #172]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	4a2a      	ldr	r2, [pc, #168]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 800585a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800585e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005860:	f7ff f90e 	bl	8004a80 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005868:	f7ff f90a 	bl	8004a80 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e058      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800587a:	4b22      	ldr	r3, [pc, #136]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f0      	beq.n	8005868 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005886:	e050      	b.n	800592a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e04f      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800588c:	4b1d      	ldr	r3, [pc, #116]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d148      	bne.n	800592a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005898:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a19      	ldr	r2, [pc, #100]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 800589e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058a4:	4b17      	ldr	r3, [pc, #92]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	4a16      	ldr	r2, [pc, #88]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 80058aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058b0:	f7ff f8e6 	bl	8004a80 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b8:	f7ff f8e2 	bl	8004a80 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e030      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ca:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0f0      	beq.n	80058b8 <HAL_RCC_OscConfig+0x734>
 80058d6:	e028      	b.n	800592a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	2b0c      	cmp	r3, #12
 80058dc:	d023      	beq.n	8005926 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058de:	4b09      	ldr	r3, [pc, #36]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a08      	ldr	r2, [pc, #32]	; (8005904 <HAL_RCC_OscConfig+0x780>)
 80058e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ea:	f7ff f8c9 	bl	8004a80 <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f0:	e00c      	b.n	800590c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f2:	f7ff f8c5 	bl	8004a80 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d905      	bls.n	800590c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e013      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
 8005904:	40021000 	.word	0x40021000
 8005908:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800590c:	4b09      	ldr	r3, [pc, #36]	; (8005934 <HAL_RCC_OscConfig+0x7b0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1ec      	bne.n	80058f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005918:	4b06      	ldr	r3, [pc, #24]	; (8005934 <HAL_RCC_OscConfig+0x7b0>)
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	4905      	ldr	r1, [pc, #20]	; (8005934 <HAL_RCC_OscConfig+0x7b0>)
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <HAL_RCC_OscConfig+0x7b4>)
 8005920:	4013      	ands	r3, r2
 8005922:	60cb      	str	r3, [r1, #12]
 8005924:	e001      	b.n	800592a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3720      	adds	r7, #32
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	40021000 	.word	0x40021000
 8005938:	feeefffc 	.word	0xfeeefffc

0800593c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e0e7      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005950:	4b75      	ldr	r3, [pc, #468]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d910      	bls.n	8005980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595e:	4b72      	ldr	r3, [pc, #456]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f023 0207 	bic.w	r2, r3, #7
 8005966:	4970      	ldr	r1, [pc, #448]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	4313      	orrs	r3, r2
 800596c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800596e:	4b6e      	ldr	r3, [pc, #440]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d001      	beq.n	8005980 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e0cf      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d010      	beq.n	80059ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	4b66      	ldr	r3, [pc, #408]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005998:	429a      	cmp	r2, r3
 800599a:	d908      	bls.n	80059ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800599c:	4b63      	ldr	r3, [pc, #396]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	4960      	ldr	r1, [pc, #384]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d04c      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d107      	bne.n	80059d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c2:	4b5a      	ldr	r3, [pc, #360]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d121      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e0a6      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d107      	bne.n	80059ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059da:	4b54      	ldr	r3, [pc, #336]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d115      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e09a      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d107      	bne.n	8005a02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059f2:	4b4e      	ldr	r3, [pc, #312]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e08e      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a02:	4b4a      	ldr	r3, [pc, #296]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e086      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a12:	4b46      	ldr	r3, [pc, #280]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f023 0203 	bic.w	r2, r3, #3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4943      	ldr	r1, [pc, #268]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a24:	f7ff f82c 	bl	8004a80 <HAL_GetTick>
 8005a28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a2a:	e00a      	b.n	8005a42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a2c:	f7ff f828 	bl	8004a80 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e06e      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a42:	4b3a      	ldr	r3, [pc, #232]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 020c 	and.w	r2, r3, #12
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d1eb      	bne.n	8005a2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d010      	beq.n	8005a82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	4b31      	ldr	r3, [pc, #196]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d208      	bcs.n	8005a82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a70:	4b2e      	ldr	r3, [pc, #184]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	492b      	ldr	r1, [pc, #172]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a82:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d210      	bcs.n	8005ab2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a90:	4b25      	ldr	r3, [pc, #148]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f023 0207 	bic.w	r2, r3, #7
 8005a98:	4923      	ldr	r1, [pc, #140]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa0:	4b21      	ldr	r3, [pc, #132]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d001      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e036      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005abe:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	4918      	ldr	r1, [pc, #96]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d009      	beq.n	8005af0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005adc:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	4910      	ldr	r1, [pc, #64]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005af0:	f000 f824 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	091b      	lsrs	r3, r3, #4
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	490b      	ldr	r1, [pc, #44]	; (8005b30 <HAL_RCC_ClockConfig+0x1f4>)
 8005b02:	5ccb      	ldrb	r3, [r1, r3]
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0c:	4a09      	ldr	r2, [pc, #36]	; (8005b34 <HAL_RCC_ClockConfig+0x1f8>)
 8005b0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <HAL_RCC_ClockConfig+0x1fc>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fb ff4b 	bl	80019b0 <HAL_InitTick>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	40022000 	.word	0x40022000
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	0800d064 	.word	0x0800d064
 8005b34:	20000000 	.word	0x20000000
 8005b38:	2000000c 	.word	0x2000000c

08005b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b089      	sub	sp, #36	; 0x24
 8005b40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	2300      	movs	r3, #0
 8005b48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b4a:	4b3e      	ldr	r3, [pc, #248]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
 8005b52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b54:	4b3b      	ldr	r3, [pc, #236]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0x34>
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	2b0c      	cmp	r3, #12
 8005b68:	d121      	bne.n	8005bae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d11e      	bne.n	8005bae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b70:	4b34      	ldr	r3, [pc, #208]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d107      	bne.n	8005b8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b7c:	4b31      	ldr	r3, [pc, #196]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b82:	0a1b      	lsrs	r3, r3, #8
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	e005      	b.n	8005b98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b8c:	4b2d      	ldr	r3, [pc, #180]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	091b      	lsrs	r3, r3, #4
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b98:	4a2b      	ldr	r2, [pc, #172]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10d      	bne.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bac:	e00a      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d102      	bne.n	8005bba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bb4:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x110>)
 8005bb6:	61bb      	str	r3, [r7, #24]
 8005bb8:	e004      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d101      	bne.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bc0:	4b23      	ldr	r3, [pc, #140]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x114>)
 8005bc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	2b0c      	cmp	r3, #12
 8005bc8:	d134      	bne.n	8005c34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bca:	4b1e      	ldr	r3, [pc, #120]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d003      	beq.n	8005be2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d003      	beq.n	8005be8 <HAL_RCC_GetSysClockFreq+0xac>
 8005be0:	e005      	b.n	8005bee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005be2:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x110>)
 8005be4:	617b      	str	r3, [r7, #20]
      break;
 8005be6:	e005      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005be8:	4b19      	ldr	r3, [pc, #100]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x114>)
 8005bea:	617b      	str	r3, [r7, #20]
      break;
 8005bec:	e002      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	617b      	str	r3, [r7, #20]
      break;
 8005bf2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bf4:	4b13      	ldr	r3, [pc, #76]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	091b      	lsrs	r3, r3, #4
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	3301      	adds	r3, #1
 8005c00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c02:	4b10      	ldr	r3, [pc, #64]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	0a1b      	lsrs	r3, r3, #8
 8005c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	fb03 f202 	mul.w	r2, r3, r2
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	0e5b      	lsrs	r3, r3, #25
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	3301      	adds	r3, #1
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005c34:	69bb      	ldr	r3, [r7, #24]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3724      	adds	r7, #36	; 0x24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40021000 	.word	0x40021000
 8005c48:	0800d07c 	.word	0x0800d07c
 8005c4c:	00f42400 	.word	0x00f42400
 8005c50:	007a1200 	.word	0x007a1200

08005c54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c58:	4b03      	ldr	r3, [pc, #12]	; (8005c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	20000000 	.word	0x20000000

08005c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c70:	f7ff fff0 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
 8005c74:	4602      	mov	r2, r0
 8005c76:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	0a1b      	lsrs	r3, r3, #8
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	4904      	ldr	r1, [pc, #16]	; (8005c94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c82:	5ccb      	ldrb	r3, [r1, r3]
 8005c84:	f003 031f 	and.w	r3, r3, #31
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40021000 	.word	0x40021000
 8005c94:	0800d074 	.word	0x0800d074

08005c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c9c:	f7ff ffda 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	0adb      	lsrs	r3, r3, #11
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	4904      	ldr	r1, [pc, #16]	; (8005cc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cae:	5ccb      	ldrb	r3, [r1, r3]
 8005cb0:	f003 031f 	and.w	r3, r3, #31
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	0800d074 	.word	0x0800d074

08005cc4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	220f      	movs	r2, #15
 8005cd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005cd4:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <HAL_RCC_GetClockConfig+0x5c>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 0203 	and.w	r2, r3, #3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005ce0:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <HAL_RCC_GetClockConfig+0x5c>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005cec:	4b0c      	ldr	r3, [pc, #48]	; (8005d20 <HAL_RCC_GetClockConfig+0x5c>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005cf8:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <HAL_RCC_GetClockConfig+0x5c>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	08db      	lsrs	r3, r3, #3
 8005cfe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005d06:	4b07      	ldr	r3, [pc, #28]	; (8005d24 <HAL_RCC_GetClockConfig+0x60>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0207 	and.w	r2, r3, #7
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	601a      	str	r2, [r3, #0]
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40021000 	.word	0x40021000
 8005d24:	40022000 	.word	0x40022000

08005d28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d30:	2300      	movs	r3, #0
 8005d32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d34:	4b2a      	ldr	r3, [pc, #168]	; (8005de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d40:	f7ff f9bc 	bl	80050bc <HAL_PWREx_GetVoltageRange>
 8005d44:	6178      	str	r0, [r7, #20]
 8005d46:	e014      	b.n	8005d72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d48:	4b25      	ldr	r3, [pc, #148]	; (8005de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4c:	4a24      	ldr	r2, [pc, #144]	; (8005de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d52:	6593      	str	r3, [r2, #88]	; 0x58
 8005d54:	4b22      	ldr	r3, [pc, #136]	; (8005de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d60:	f7ff f9ac 	bl	80050bc <HAL_PWREx_GetVoltageRange>
 8005d64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d66:	4b1e      	ldr	r3, [pc, #120]	; (8005de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6a:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d78:	d10b      	bne.n	8005d92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b80      	cmp	r3, #128	; 0x80
 8005d7e:	d919      	bls.n	8005db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2ba0      	cmp	r3, #160	; 0xa0
 8005d84:	d902      	bls.n	8005d8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d86:	2302      	movs	r3, #2
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	e013      	b.n	8005db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	e010      	b.n	8005db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b80      	cmp	r3, #128	; 0x80
 8005d96:	d902      	bls.n	8005d9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d98:	2303      	movs	r3, #3
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	e00a      	b.n	8005db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b80      	cmp	r3, #128	; 0x80
 8005da2:	d102      	bne.n	8005daa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005da4:	2302      	movs	r3, #2
 8005da6:	613b      	str	r3, [r7, #16]
 8005da8:	e004      	b.n	8005db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b70      	cmp	r3, #112	; 0x70
 8005dae:	d101      	bne.n	8005db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005db0:	2301      	movs	r3, #1
 8005db2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005db4:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f023 0207 	bic.w	r2, r3, #7
 8005dbc:	4909      	ldr	r1, [pc, #36]	; (8005de4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005dc4:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d001      	beq.n	8005dd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40021000 	.word	0x40021000
 8005de4:	40022000 	.word	0x40022000

08005de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005df0:	2300      	movs	r3, #0
 8005df2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005df4:	2300      	movs	r3, #0
 8005df6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d041      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e0c:	d02a      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005e0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e12:	d824      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e18:	d008      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e1e:	d81e      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e28:	d010      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e2a:	e018      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e2c:	4b86      	ldr	r3, [pc, #536]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4a85      	ldr	r2, [pc, #532]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e36:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e38:	e015      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	2100      	movs	r1, #0
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 fabb 	bl	80063bc <RCCEx_PLLSAI1_Config>
 8005e46:	4603      	mov	r3, r0
 8005e48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e4a:	e00c      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3320      	adds	r3, #32
 8005e50:	2100      	movs	r1, #0
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fba6 	bl	80065a4 <RCCEx_PLLSAI2_Config>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e5c:	e003      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	74fb      	strb	r3, [r7, #19]
      break;
 8005e62:	e000      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e66:	7cfb      	ldrb	r3, [r7, #19]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10b      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e6c:	4b76      	ldr	r3, [pc, #472]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e7a:	4973      	ldr	r1, [pc, #460]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e82:	e001      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e84:	7cfb      	ldrb	r3, [r7, #19]
 8005e86:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d041      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e9c:	d02a      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005e9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ea2:	d824      	bhi.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ea4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ea8:	d008      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005eaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eae:	d81e      	bhi.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005eb8:	d010      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005eba:	e018      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ebc:	4b62      	ldr	r3, [pc, #392]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	4a61      	ldr	r2, [pc, #388]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ec8:	e015      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fa73 	bl	80063bc <RCCEx_PLLSAI1_Config>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005eda:	e00c      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3320      	adds	r3, #32
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fb5e 	bl	80065a4 <RCCEx_PLLSAI2_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005eec:	e003      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	74fb      	strb	r3, [r7, #19]
      break;
 8005ef2:	e000      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ef6:	7cfb      	ldrb	r3, [r7, #19]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10b      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005efc:	4b52      	ldr	r3, [pc, #328]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f0a:	494f      	ldr	r1, [pc, #316]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f12:	e001      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f14:	7cfb      	ldrb	r3, [r7, #19]
 8005f16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80a0 	beq.w	8006066 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f26:	2300      	movs	r3, #0
 8005f28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f2a:	4b47      	ldr	r3, [pc, #284]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00d      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f40:	4b41      	ldr	r3, [pc, #260]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f44:	4a40      	ldr	r2, [pc, #256]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8005f4c:	4b3e      	ldr	r3, [pc, #248]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f5c:	4b3b      	ldr	r3, [pc, #236]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a3a      	ldr	r2, [pc, #232]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f68:	f7fe fd8a 	bl	8004a80 <HAL_GetTick>
 8005f6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f6e:	e009      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f70:	f7fe fd86 	bl	8004a80 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d902      	bls.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	74fb      	strb	r3, [r7, #19]
        break;
 8005f82:	e005      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f84:	4b31      	ldr	r3, [pc, #196]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0ef      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005f90:	7cfb      	ldrb	r3, [r7, #19]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d15c      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f96:	4b2c      	ldr	r3, [pc, #176]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01f      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d019      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fb4:	4b24      	ldr	r3, [pc, #144]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fc0:	4b21      	ldr	r3, [pc, #132]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc6:	4a20      	ldr	r2, [pc, #128]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fd0:	4b1d      	ldr	r3, [pc, #116]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd6:	4a1c      	ldr	r2, [pc, #112]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005fe0:	4a19      	ldr	r2, [pc, #100]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d016      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff2:	f7fe fd45 	bl	8004a80 <HAL_GetTick>
 8005ff6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ff8:	e00b      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffa:	f7fe fd41 	bl	8004a80 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	f241 3288 	movw	r2, #5000	; 0x1388
 8006008:	4293      	cmp	r3, r2
 800600a:	d902      	bls.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	74fb      	strb	r3, [r7, #19]
            break;
 8006010:	e006      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006012:	4b0d      	ldr	r3, [pc, #52]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0ec      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006020:	7cfb      	ldrb	r3, [r7, #19]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10c      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006026:	4b08      	ldr	r3, [pc, #32]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006036:	4904      	ldr	r1, [pc, #16]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800603e:	e009      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006040:	7cfb      	ldrb	r3, [r7, #19]
 8006042:	74bb      	strb	r3, [r7, #18]
 8006044:	e006      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006046:	bf00      	nop
 8006048:	40021000 	.word	0x40021000
 800604c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006050:	7cfb      	ldrb	r3, [r7, #19]
 8006052:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006054:	7c7b      	ldrb	r3, [r7, #17]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d105      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800605a:	4b9e      	ldr	r3, [pc, #632]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800605c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605e:	4a9d      	ldr	r2, [pc, #628]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006064:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006072:	4b98      	ldr	r3, [pc, #608]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006078:	f023 0203 	bic.w	r2, r3, #3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	4994      	ldr	r1, [pc, #592]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006094:	4b8f      	ldr	r3, [pc, #572]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609a:	f023 020c 	bic.w	r2, r3, #12
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a2:	498c      	ldr	r1, [pc, #560]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060b6:	4b87      	ldr	r3, [pc, #540]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c4:	4983      	ldr	r1, [pc, #524]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060d8:	4b7e      	ldr	r3, [pc, #504]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e6:	497b      	ldr	r1, [pc, #492]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0310 	and.w	r3, r3, #16
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80060fa:	4b76      	ldr	r3, [pc, #472]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006108:	4972      	ldr	r1, [pc, #456]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800610a:	4313      	orrs	r3, r2
 800610c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800611c:	4b6d      	ldr	r3, [pc, #436]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800611e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006122:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800612a:	496a      	ldr	r1, [pc, #424]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800612c:	4313      	orrs	r3, r2
 800612e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800613e:	4b65      	ldr	r3, [pc, #404]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006144:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614c:	4961      	ldr	r1, [pc, #388]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006160:	4b5c      	ldr	r3, [pc, #368]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006166:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616e:	4959      	ldr	r1, [pc, #356]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006182:	4b54      	ldr	r3, [pc, #336]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006188:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006190:	4950      	ldr	r1, [pc, #320]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061a4:	4b4b      	ldr	r3, [pc, #300]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b2:	4948      	ldr	r1, [pc, #288]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061c6:	4b43      	ldr	r3, [pc, #268]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d4:	493f      	ldr	r1, [pc, #252]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d028      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061e8:	4b3a      	ldr	r3, [pc, #232]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061f6:	4937      	ldr	r1, [pc, #220]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006206:	d106      	bne.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006208:	4b32      	ldr	r3, [pc, #200]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	4a31      	ldr	r2, [pc, #196]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800620e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006212:	60d3      	str	r3, [r2, #12]
 8006214:	e011      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800621a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800621e:	d10c      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3304      	adds	r3, #4
 8006224:	2101      	movs	r1, #1
 8006226:	4618      	mov	r0, r3
 8006228:	f000 f8c8 	bl	80063bc <RCCEx_PLLSAI1_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006230:	7cfb      	ldrb	r3, [r7, #19]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006236:	7cfb      	ldrb	r3, [r7, #19]
 8006238:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d028      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006246:	4b23      	ldr	r3, [pc, #140]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006254:	491f      	ldr	r1, [pc, #124]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006256:	4313      	orrs	r3, r2
 8006258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006264:	d106      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006266:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	4a1a      	ldr	r2, [pc, #104]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800626c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006270:	60d3      	str	r3, [r2, #12]
 8006272:	e011      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006278:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800627c:	d10c      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3304      	adds	r3, #4
 8006282:	2101      	movs	r1, #1
 8006284:	4618      	mov	r0, r3
 8006286:	f000 f899 	bl	80063bc <RCCEx_PLLSAI1_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800628e:	7cfb      	ldrb	r3, [r7, #19]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006294:	7cfb      	ldrb	r3, [r7, #19]
 8006296:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d02b      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062a4:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b2:	4908      	ldr	r1, [pc, #32]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062c2:	d109      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062c4:	4b03      	ldr	r3, [pc, #12]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	4a02      	ldr	r2, [pc, #8]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ce:	60d3      	str	r3, [r2, #12]
 80062d0:	e014      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80062d2:	bf00      	nop
 80062d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062e0:	d10c      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3304      	adds	r3, #4
 80062e6:	2101      	movs	r1, #1
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 f867 	bl	80063bc <RCCEx_PLLSAI1_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062f2:	7cfb      	ldrb	r3, [r7, #19]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80062f8:	7cfb      	ldrb	r3, [r7, #19]
 80062fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d02f      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006308:	4b2b      	ldr	r3, [pc, #172]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800630a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006316:	4928      	ldr	r1, [pc, #160]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006318:	4313      	orrs	r3, r2
 800631a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006326:	d10d      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3304      	adds	r3, #4
 800632c:	2102      	movs	r1, #2
 800632e:	4618      	mov	r0, r3
 8006330:	f000 f844 	bl	80063bc <RCCEx_PLLSAI1_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006338:	7cfb      	ldrb	r3, [r7, #19]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d014      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800633e:	7cfb      	ldrb	r3, [r7, #19]
 8006340:	74bb      	strb	r3, [r7, #18]
 8006342:	e011      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800634c:	d10c      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3320      	adds	r3, #32
 8006352:	2102      	movs	r1, #2
 8006354:	4618      	mov	r0, r3
 8006356:	f000 f925 	bl	80065a4 <RCCEx_PLLSAI2_Config>
 800635a:	4603      	mov	r3, r0
 800635c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800635e:	7cfb      	ldrb	r3, [r7, #19]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006364:	7cfb      	ldrb	r3, [r7, #19]
 8006366:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006374:	4b10      	ldr	r3, [pc, #64]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006382:	490d      	ldr	r1, [pc, #52]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00b      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006396:	4b08      	ldr	r3, [pc, #32]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063a6:	4904      	ldr	r1, [pc, #16]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80063ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	40021000 	.word	0x40021000

080063bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063ca:	4b75      	ldr	r3, [pc, #468]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d018      	beq.n	8006408 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063d6:	4b72      	ldr	r3, [pc, #456]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f003 0203 	and.w	r2, r3, #3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d10d      	bne.n	8006402 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
       ||
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d009      	beq.n	8006402 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80063ee:	4b6c      	ldr	r3, [pc, #432]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	091b      	lsrs	r3, r3, #4
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
       ||
 80063fe:	429a      	cmp	r2, r3
 8006400:	d047      	beq.n	8006492 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	73fb      	strb	r3, [r7, #15]
 8006406:	e044      	b.n	8006492 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b03      	cmp	r3, #3
 800640e:	d018      	beq.n	8006442 <RCCEx_PLLSAI1_Config+0x86>
 8006410:	2b03      	cmp	r3, #3
 8006412:	d825      	bhi.n	8006460 <RCCEx_PLLSAI1_Config+0xa4>
 8006414:	2b01      	cmp	r3, #1
 8006416:	d002      	beq.n	800641e <RCCEx_PLLSAI1_Config+0x62>
 8006418:	2b02      	cmp	r3, #2
 800641a:	d009      	beq.n	8006430 <RCCEx_PLLSAI1_Config+0x74>
 800641c:	e020      	b.n	8006460 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800641e:	4b60      	ldr	r3, [pc, #384]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d11d      	bne.n	8006466 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800642e:	e01a      	b.n	8006466 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006430:	4b5b      	ldr	r3, [pc, #364]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006438:	2b00      	cmp	r3, #0
 800643a:	d116      	bne.n	800646a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006440:	e013      	b.n	800646a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006442:	4b57      	ldr	r3, [pc, #348]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10f      	bne.n	800646e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800644e:	4b54      	ldr	r3, [pc, #336]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d109      	bne.n	800646e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800645e:	e006      	b.n	800646e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
      break;
 8006464:	e004      	b.n	8006470 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006466:	bf00      	nop
 8006468:	e002      	b.n	8006470 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800646a:	bf00      	nop
 800646c:	e000      	b.n	8006470 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800646e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10d      	bne.n	8006492 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006476:	4b4a      	ldr	r3, [pc, #296]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6819      	ldr	r1, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	3b01      	subs	r3, #1
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	430b      	orrs	r3, r1
 800648c:	4944      	ldr	r1, [pc, #272]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800648e:	4313      	orrs	r3, r2
 8006490:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d17d      	bne.n	8006594 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006498:	4b41      	ldr	r3, [pc, #260]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a40      	ldr	r2, [pc, #256]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800649e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a4:	f7fe faec 	bl	8004a80 <HAL_GetTick>
 80064a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064aa:	e009      	b.n	80064c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064ac:	f7fe fae8 	bl	8004a80 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d902      	bls.n	80064c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	73fb      	strb	r3, [r7, #15]
        break;
 80064be:	e005      	b.n	80064cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064c0:	4b37      	ldr	r3, [pc, #220]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1ef      	bne.n	80064ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d160      	bne.n	8006594 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d111      	bne.n	80064fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064d8:	4b31      	ldr	r3, [pc, #196]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80064e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6892      	ldr	r2, [r2, #8]
 80064e8:	0211      	lsls	r1, r2, #8
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	68d2      	ldr	r2, [r2, #12]
 80064ee:	0912      	lsrs	r2, r2, #4
 80064f0:	0452      	lsls	r2, r2, #17
 80064f2:	430a      	orrs	r2, r1
 80064f4:	492a      	ldr	r1, [pc, #168]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	610b      	str	r3, [r1, #16]
 80064fa:	e027      	b.n	800654c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d112      	bne.n	8006528 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006502:	4b27      	ldr	r3, [pc, #156]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800650a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6892      	ldr	r2, [r2, #8]
 8006512:	0211      	lsls	r1, r2, #8
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6912      	ldr	r2, [r2, #16]
 8006518:	0852      	lsrs	r2, r2, #1
 800651a:	3a01      	subs	r2, #1
 800651c:	0552      	lsls	r2, r2, #21
 800651e:	430a      	orrs	r2, r1
 8006520:	491f      	ldr	r1, [pc, #124]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006522:	4313      	orrs	r3, r2
 8006524:	610b      	str	r3, [r1, #16]
 8006526:	e011      	b.n	800654c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006528:	4b1d      	ldr	r3, [pc, #116]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006530:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6892      	ldr	r2, [r2, #8]
 8006538:	0211      	lsls	r1, r2, #8
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6952      	ldr	r2, [r2, #20]
 800653e:	0852      	lsrs	r2, r2, #1
 8006540:	3a01      	subs	r2, #1
 8006542:	0652      	lsls	r2, r2, #25
 8006544:	430a      	orrs	r2, r1
 8006546:	4916      	ldr	r1, [pc, #88]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006548:	4313      	orrs	r3, r2
 800654a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800654c:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a13      	ldr	r2, [pc, #76]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006556:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006558:	f7fe fa92 	bl	8004a80 <HAL_GetTick>
 800655c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800655e:	e009      	b.n	8006574 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006560:	f7fe fa8e 	bl	8004a80 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d902      	bls.n	8006574 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	73fb      	strb	r3, [r7, #15]
          break;
 8006572:	e005      	b.n	8006580 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006574:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0ef      	beq.n	8006560 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006580:	7bfb      	ldrb	r3, [r7, #15]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006586:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	4904      	ldr	r1, [pc, #16]	; (80065a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006590:	4313      	orrs	r3, r2
 8006592:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006594:	7bfb      	ldrb	r3, [r7, #15]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	40021000 	.word	0x40021000

080065a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065b2:	4b6a      	ldr	r3, [pc, #424]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d018      	beq.n	80065f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80065be:	4b67      	ldr	r3, [pc, #412]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f003 0203 	and.w	r2, r3, #3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d10d      	bne.n	80065ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
       ||
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80065d6:	4b61      	ldr	r3, [pc, #388]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	091b      	lsrs	r3, r3, #4
 80065dc:	f003 0307 	and.w	r3, r3, #7
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
       ||
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d047      	beq.n	800667a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	73fb      	strb	r3, [r7, #15]
 80065ee:	e044      	b.n	800667a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d018      	beq.n	800662a <RCCEx_PLLSAI2_Config+0x86>
 80065f8:	2b03      	cmp	r3, #3
 80065fa:	d825      	bhi.n	8006648 <RCCEx_PLLSAI2_Config+0xa4>
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d002      	beq.n	8006606 <RCCEx_PLLSAI2_Config+0x62>
 8006600:	2b02      	cmp	r3, #2
 8006602:	d009      	beq.n	8006618 <RCCEx_PLLSAI2_Config+0x74>
 8006604:	e020      	b.n	8006648 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006606:	4b55      	ldr	r3, [pc, #340]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d11d      	bne.n	800664e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006616:	e01a      	b.n	800664e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006618:	4b50      	ldr	r3, [pc, #320]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006620:	2b00      	cmp	r3, #0
 8006622:	d116      	bne.n	8006652 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006628:	e013      	b.n	8006652 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800662a:	4b4c      	ldr	r3, [pc, #304]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10f      	bne.n	8006656 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006636:	4b49      	ldr	r3, [pc, #292]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d109      	bne.n	8006656 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006646:	e006      	b.n	8006656 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	73fb      	strb	r3, [r7, #15]
      break;
 800664c:	e004      	b.n	8006658 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800664e:	bf00      	nop
 8006650:	e002      	b.n	8006658 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006652:	bf00      	nop
 8006654:	e000      	b.n	8006658 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006656:	bf00      	nop
    }

    if(status == HAL_OK)
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10d      	bne.n	800667a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800665e:	4b3f      	ldr	r3, [pc, #252]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6819      	ldr	r1, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	3b01      	subs	r3, #1
 8006670:	011b      	lsls	r3, r3, #4
 8006672:	430b      	orrs	r3, r1
 8006674:	4939      	ldr	r1, [pc, #228]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006676:	4313      	orrs	r3, r2
 8006678:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d167      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006680:	4b36      	ldr	r3, [pc, #216]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a35      	ldr	r2, [pc, #212]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800668a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800668c:	f7fe f9f8 	bl	8004a80 <HAL_GetTick>
 8006690:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006692:	e009      	b.n	80066a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006694:	f7fe f9f4 	bl	8004a80 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d902      	bls.n	80066a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	73fb      	strb	r3, [r7, #15]
        break;
 80066a6:	e005      	b.n	80066b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066a8:	4b2c      	ldr	r3, [pc, #176]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1ef      	bne.n	8006694 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d14a      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d111      	bne.n	80066e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066c0:	4b26      	ldr	r3, [pc, #152]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80066c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6892      	ldr	r2, [r2, #8]
 80066d0:	0211      	lsls	r1, r2, #8
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68d2      	ldr	r2, [r2, #12]
 80066d6:	0912      	lsrs	r2, r2, #4
 80066d8:	0452      	lsls	r2, r2, #17
 80066da:	430a      	orrs	r2, r1
 80066dc:	491f      	ldr	r1, [pc, #124]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	614b      	str	r3, [r1, #20]
 80066e2:	e011      	b.n	8006708 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066e4:	4b1d      	ldr	r3, [pc, #116]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80066ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6892      	ldr	r2, [r2, #8]
 80066f4:	0211      	lsls	r1, r2, #8
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	6912      	ldr	r2, [r2, #16]
 80066fa:	0852      	lsrs	r2, r2, #1
 80066fc:	3a01      	subs	r2, #1
 80066fe:	0652      	lsls	r2, r2, #25
 8006700:	430a      	orrs	r2, r1
 8006702:	4916      	ldr	r1, [pc, #88]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006704:	4313      	orrs	r3, r2
 8006706:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006708:	4b14      	ldr	r3, [pc, #80]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a13      	ldr	r2, [pc, #76]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 800670e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006712:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006714:	f7fe f9b4 	bl	8004a80 <HAL_GetTick>
 8006718:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800671a:	e009      	b.n	8006730 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800671c:	f7fe f9b0 	bl	8004a80 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d902      	bls.n	8006730 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	73fb      	strb	r3, [r7, #15]
          break;
 800672e:	e005      	b.n	800673c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0ef      	beq.n	800671c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	4904      	ldr	r1, [pc, #16]	; (800675c <RCCEx_PLLSAI2_Config+0x1b8>)
 800674c:	4313      	orrs	r3, r2
 800674e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40021000 	.word	0x40021000

08006760 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e095      	b.n	800689e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	2b00      	cmp	r3, #0
 8006778:	d108      	bne.n	800678c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006782:	d009      	beq.n	8006798 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	61da      	str	r2, [r3, #28]
 800678a:	e005      	b.n	8006798 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d106      	bne.n	80067b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fa ff14 	bl	80015e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067d8:	d902      	bls.n	80067e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	e002      	b.n	80067e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80067ee:	d007      	beq.n	8006800 <HAL_SPI_Init+0xa0>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067f8:	d002      	beq.n	8006800 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006838:	431a      	orrs	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006842:	ea42 0103 	orr.w	r1, r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	0c1b      	lsrs	r3, r3, #16
 800685c:	f003 0204 	and.w	r2, r3, #4
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686e:	f003 0308 	and.w	r3, r3, #8
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800687c:	ea42 0103 	orr.w	r1, r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b088      	sub	sp, #32
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	603b      	str	r3, [r7, #0]
 80068b2:	4613      	mov	r3, r2
 80068b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_SPI_Transmit+0x22>
 80068c4:	2302      	movs	r3, #2
 80068c6:	e158      	b.n	8006b7a <HAL_SPI_Transmit+0x2d4>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068d0:	f7fe f8d6 	bl	8004a80 <HAL_GetTick>
 80068d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80068d6:	88fb      	ldrh	r3, [r7, #6]
 80068d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d002      	beq.n	80068ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068e6:	2302      	movs	r3, #2
 80068e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068ea:	e13d      	b.n	8006b68 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <HAL_SPI_Transmit+0x52>
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d102      	bne.n	80068fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068fc:	e134      	b.n	8006b68 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2203      	movs	r2, #3
 8006902:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	88fa      	ldrh	r2, [r7, #6]
 8006916:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	88fa      	ldrh	r2, [r7, #6]
 800691c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006948:	d10f      	bne.n	800696a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006958:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006968:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006974:	2b40      	cmp	r3, #64	; 0x40
 8006976:	d007      	beq.n	8006988 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006986:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006990:	d94b      	bls.n	8006a2a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <HAL_SPI_Transmit+0xfa>
 800699a:	8afb      	ldrh	r3, [r7, #22]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d13e      	bne.n	8006a1e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	881a      	ldrh	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	1c9a      	adds	r2, r3, #2
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069c4:	e02b      	b.n	8006a1e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d112      	bne.n	80069fa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	881a      	ldrh	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	1c9a      	adds	r2, r3, #2
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069f8:	e011      	b.n	8006a1e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069fa:	f7fe f841 	bl	8004a80 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d803      	bhi.n	8006a12 <HAL_SPI_Transmit+0x16c>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a10:	d102      	bne.n	8006a18 <HAL_SPI_Transmit+0x172>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d102      	bne.n	8006a1e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a1c:	e0a4      	b.n	8006b68 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1ce      	bne.n	80069c6 <HAL_SPI_Transmit+0x120>
 8006a28:	e07c      	b.n	8006b24 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <HAL_SPI_Transmit+0x192>
 8006a32:	8afb      	ldrh	r3, [r7, #22]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d170      	bne.n	8006b1a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d912      	bls.n	8006a68 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a46:	881a      	ldrh	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a52:	1c9a      	adds	r2, r3, #2
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	3b02      	subs	r3, #2
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a66:	e058      	b.n	8006b1a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330c      	adds	r3, #12
 8006a72:	7812      	ldrb	r2, [r2, #0]
 8006a74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006a8e:	e044      	b.n	8006b1a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d12b      	bne.n	8006af6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d912      	bls.n	8006ace <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	1c9a      	adds	r2, r3, #2
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	3b02      	subs	r3, #2
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006acc:	e025      	b.n	8006b1a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	7812      	ldrb	r2, [r2, #0]
 8006ada:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006af4:	e011      	b.n	8006b1a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006af6:	f7fd ffc3 	bl	8004a80 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d803      	bhi.n	8006b0e <HAL_SPI_Transmit+0x268>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b0c:	d102      	bne.n	8006b14 <HAL_SPI_Transmit+0x26e>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d102      	bne.n	8006b1a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b18:	e026      	b.n	8006b68 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1b5      	bne.n	8006a90 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 fce3 	bl	80074f4 <SPI_EndRxTxTransaction>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2220      	movs	r2, #32
 8006b38:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b42:	2300      	movs	r3, #0
 8006b44:	613b      	str	r3, [r7, #16]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	613b      	str	r3, [r7, #16]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	613b      	str	r3, [r7, #16]
 8006b56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	77fb      	strb	r3, [r7, #31]
 8006b64:	e000      	b.n	8006b68 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006b66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b78:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3720      	adds	r7, #32
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b088      	sub	sp, #32
 8006b86:	af02      	add	r7, sp, #8
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	603b      	str	r3, [r7, #0]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b9e:	d112      	bne.n	8006bc6 <HAL_SPI_Receive+0x44>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10e      	bne.n	8006bc6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2204      	movs	r2, #4
 8006bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006bb0:	88fa      	ldrh	r2, [r7, #6]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	68b9      	ldr	r1, [r7, #8]
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f910 	bl	8006de2 <HAL_SPI_TransmitReceive>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	e109      	b.n	8006dda <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_SPI_Receive+0x52>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e102      	b.n	8006dda <HAL_SPI_Receive+0x258>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bdc:	f7fd ff50 	bl	8004a80 <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d002      	beq.n	8006bf4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006bee:	2302      	movs	r3, #2
 8006bf0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006bf2:	e0e9      	b.n	8006dc8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <HAL_SPI_Receive+0x7e>
 8006bfa:	88fb      	ldrh	r3, [r7, #6]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d102      	bne.n	8006c06 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c04:	e0e0      	b.n	8006dc8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2204      	movs	r2, #4
 8006c0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	88fa      	ldrh	r2, [r7, #6]
 8006c1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	88fa      	ldrh	r2, [r7, #6]
 8006c26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c50:	d908      	bls.n	8006c64 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c60:	605a      	str	r2, [r3, #4]
 8006c62:	e007      	b.n	8006c74 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c72:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7c:	d10f      	bne.n	8006c9e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c9c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca8:	2b40      	cmp	r3, #64	; 0x40
 8006caa:	d007      	beq.n	8006cbc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cc4:	d867      	bhi.n	8006d96 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006cc6:	e030      	b.n	8006d2a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d117      	bne.n	8006d06 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f103 020c 	add.w	r2, r3, #12
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	7812      	ldrb	r2, [r2, #0]
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006d04:	e011      	b.n	8006d2a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d06:	f7fd febb 	bl	8004a80 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d803      	bhi.n	8006d1e <HAL_SPI_Receive+0x19c>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d1c:	d102      	bne.n	8006d24 <HAL_SPI_Receive+0x1a2>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d28:	e04e      	b.n	8006dc8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1c8      	bne.n	8006cc8 <HAL_SPI_Receive+0x146>
 8006d36:	e034      	b.n	8006da2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d115      	bne.n	8006d72 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68da      	ldr	r2, [r3, #12]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d50:	b292      	uxth	r2, r2
 8006d52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	1c9a      	adds	r2, r3, #2
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006d70:	e011      	b.n	8006d96 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d72:	f7fd fe85 	bl	8004a80 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d803      	bhi.n	8006d8a <HAL_SPI_Receive+0x208>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d88:	d102      	bne.n	8006d90 <HAL_SPI_Receive+0x20e>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d102      	bne.n	8006d96 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d94:	e018      	b.n	8006dc8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1ca      	bne.n	8006d38 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 fb4c 	bl	8007444 <SPI_EndRxTransaction>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2220      	movs	r2, #32
 8006db6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	75fb      	strb	r3, [r7, #23]
 8006dc4:	e000      	b.n	8006dc8 <HAL_SPI_Receive+0x246>
  }

error :
 8006dc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b08a      	sub	sp, #40	; 0x28
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
 8006dee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006df0:	2301      	movs	r3, #1
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d101      	bne.n	8006e08 <HAL_SPI_TransmitReceive+0x26>
 8006e04:	2302      	movs	r3, #2
 8006e06:	e1fb      	b.n	8007200 <HAL_SPI_TransmitReceive+0x41e>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e10:	f7fd fe36 	bl	8004a80 <HAL_GetTick>
 8006e14:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e1c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e24:	887b      	ldrh	r3, [r7, #2]
 8006e26:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006e28:	887b      	ldrh	r3, [r7, #2]
 8006e2a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e2c:	7efb      	ldrb	r3, [r7, #27]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d00e      	beq.n	8006e50 <HAL_SPI_TransmitReceive+0x6e>
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e38:	d106      	bne.n	8006e48 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d102      	bne.n	8006e48 <HAL_SPI_TransmitReceive+0x66>
 8006e42:	7efb      	ldrb	r3, [r7, #27]
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d003      	beq.n	8006e50 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006e4e:	e1cd      	b.n	80071ec <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <HAL_SPI_TransmitReceive+0x80>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <HAL_SPI_TransmitReceive+0x80>
 8006e5c:	887b      	ldrh	r3, [r7, #2]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d103      	bne.n	8006e6a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006e68:	e1c0      	b.n	80071ec <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d003      	beq.n	8006e7e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2205      	movs	r2, #5
 8006e7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	887a      	ldrh	r2, [r7, #2]
 8006e8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	887a      	ldrh	r2, [r7, #2]
 8006e96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	887a      	ldrh	r2, [r7, #2]
 8006ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	887a      	ldrh	r2, [r7, #2]
 8006eaa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ec0:	d802      	bhi.n	8006ec8 <HAL_SPI_TransmitReceive+0xe6>
 8006ec2:	8a3b      	ldrh	r3, [r7, #16]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d908      	bls.n	8006eda <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ed6:	605a      	str	r2, [r3, #4]
 8006ed8:	e007      	b.n	8006eea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ee8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef4:	2b40      	cmp	r3, #64	; 0x40
 8006ef6:	d007      	beq.n	8006f08 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f10:	d97c      	bls.n	800700c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <HAL_SPI_TransmitReceive+0x13e>
 8006f1a:	8a7b      	ldrh	r3, [r7, #18]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d169      	bne.n	8006ff4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	881a      	ldrh	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	1c9a      	adds	r2, r3, #2
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f44:	e056      	b.n	8006ff4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d11b      	bne.n	8006f8c <HAL_SPI_TransmitReceive+0x1aa>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d016      	beq.n	8006f8c <HAL_SPI_TransmitReceive+0x1aa>
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d113      	bne.n	8006f8c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	881a      	ldrh	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	1c9a      	adds	r2, r3, #2
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d11c      	bne.n	8006fd4 <HAL_SPI_TransmitReceive+0x1f2>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d016      	beq.n	8006fd4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	b292      	uxth	r2, r2
 8006fb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb8:	1c9a      	adds	r2, r3, #2
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fd4:	f7fd fd54 	bl	8004a80 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d807      	bhi.n	8006ff4 <HAL_SPI_TransmitReceive+0x212>
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fea:	d003      	beq.n	8006ff4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006ff2:	e0fb      	b.n	80071ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1a3      	bne.n	8006f46 <HAL_SPI_TransmitReceive+0x164>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007004:	b29b      	uxth	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d19d      	bne.n	8006f46 <HAL_SPI_TransmitReceive+0x164>
 800700a:	e0df      	b.n	80071cc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <HAL_SPI_TransmitReceive+0x23a>
 8007014:	8a7b      	ldrh	r3, [r7, #18]
 8007016:	2b01      	cmp	r3, #1
 8007018:	f040 80cb 	bne.w	80071b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b01      	cmp	r3, #1
 8007024:	d912      	bls.n	800704c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702a:	881a      	ldrh	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	1c9a      	adds	r2, r3, #2
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007040:	b29b      	uxth	r3, r3
 8007042:	3b02      	subs	r3, #2
 8007044:	b29a      	uxth	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	87da      	strh	r2, [r3, #62]	; 0x3e
 800704a:	e0b2      	b.n	80071b2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	330c      	adds	r3, #12
 8007056:	7812      	ldrb	r2, [r2, #0]
 8007058:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	b29a      	uxth	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007072:	e09e      	b.n	80071b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b02      	cmp	r3, #2
 8007080:	d134      	bne.n	80070ec <HAL_SPI_TransmitReceive+0x30a>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007086:	b29b      	uxth	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d02f      	beq.n	80070ec <HAL_SPI_TransmitReceive+0x30a>
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	2b01      	cmp	r3, #1
 8007090:	d12c      	bne.n	80070ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b01      	cmp	r3, #1
 800709a:	d912      	bls.n	80070c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a0:	881a      	ldrh	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	1c9a      	adds	r2, r3, #2
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b02      	subs	r3, #2
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070c0:	e012      	b.n	80070e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	330c      	adds	r3, #12
 80070cc:	7812      	ldrb	r2, [r2, #0]
 80070ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d148      	bne.n	800718c <HAL_SPI_TransmitReceive+0x3aa>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007100:	b29b      	uxth	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d042      	beq.n	800718c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800710c:	b29b      	uxth	r3, r3
 800710e:	2b01      	cmp	r3, #1
 8007110:	d923      	bls.n	800715a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	b292      	uxth	r2, r2
 800711e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007124:	1c9a      	adds	r2, r3, #2
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007130:	b29b      	uxth	r3, r3
 8007132:	3b02      	subs	r3, #2
 8007134:	b29a      	uxth	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007142:	b29b      	uxth	r3, r3
 8007144:	2b01      	cmp	r3, #1
 8007146:	d81f      	bhi.n	8007188 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007156:	605a      	str	r2, [r3, #4]
 8007158:	e016      	b.n	8007188 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f103 020c 	add.w	r2, r3, #12
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	7812      	ldrb	r2, [r2, #0]
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007188:	2301      	movs	r3, #1
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800718c:	f7fd fc78 	bl	8004a80 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007198:	429a      	cmp	r2, r3
 800719a:	d803      	bhi.n	80071a4 <HAL_SPI_TransmitReceive+0x3c2>
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071a2:	d102      	bne.n	80071aa <HAL_SPI_TransmitReceive+0x3c8>
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d103      	bne.n	80071b2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80071b0:	e01c      	b.n	80071ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f47f af5b 	bne.w	8007074 <HAL_SPI_TransmitReceive+0x292>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f47f af54 	bne.w	8007074 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071cc:	69fa      	ldr	r2, [r7, #28]
 80071ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f98f 	bl	80074f4 <SPI_EndRxTxTransaction>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d006      	beq.n	80071ea <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2220      	movs	r2, #32
 80071e6:	661a      	str	r2, [r3, #96]	; 0x60
 80071e8:	e000      	b.n	80071ec <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80071ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80071fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007200:	4618      	mov	r0, r3
 8007202:	3728      	adds	r7, #40	; 0x28
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b088      	sub	sp, #32
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	4613      	mov	r3, r2
 8007216:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007218:	f7fd fc32 	bl	8004a80 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007220:	1a9b      	subs	r3, r3, r2
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	4413      	add	r3, r2
 8007226:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007228:	f7fd fc2a 	bl	8004a80 <HAL_GetTick>
 800722c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800722e:	4b39      	ldr	r3, [pc, #228]	; (8007314 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	015b      	lsls	r3, r3, #5
 8007234:	0d1b      	lsrs	r3, r3, #20
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	fb02 f303 	mul.w	r3, r2, r3
 800723c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800723e:	e054      	b.n	80072ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007246:	d050      	beq.n	80072ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007248:	f7fd fc1a 	bl	8004a80 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	429a      	cmp	r2, r3
 8007256:	d902      	bls.n	800725e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d13d      	bne.n	80072da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800726c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007276:	d111      	bne.n	800729c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007280:	d004      	beq.n	800728c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800728a:	d107      	bne.n	800729c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800729a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072a4:	d10f      	bne.n	80072c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e017      	b.n	800730a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4013      	ands	r3, r2
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	bf0c      	ite	eq
 80072fa:	2301      	moveq	r3, #1
 80072fc:	2300      	movne	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	79fb      	ldrb	r3, [r7, #7]
 8007304:	429a      	cmp	r2, r3
 8007306:	d19b      	bne.n	8007240 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3720      	adds	r7, #32
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20000000 	.word	0x20000000

08007318 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	; 0x28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007326:	2300      	movs	r3, #0
 8007328:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800732a:	f7fd fba9 	bl	8004a80 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	1a9b      	subs	r3, r3, r2
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	4413      	add	r3, r2
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800733a:	f7fd fba1 	bl	8004a80 <HAL_GetTick>
 800733e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	330c      	adds	r3, #12
 8007346:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007348:	4b3d      	ldr	r3, [pc, #244]	; (8007440 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	00da      	lsls	r2, r3, #3
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	0d1b      	lsrs	r3, r3, #20
 8007358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735a:	fb02 f303 	mul.w	r3, r2, r3
 800735e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007360:	e060      	b.n	8007424 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007368:	d107      	bne.n	800737a <SPI_WaitFifoStateUntilTimeout+0x62>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d104      	bne.n	800737a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	b2db      	uxtb	r3, r3
 8007376:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007378:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007380:	d050      	beq.n	8007424 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007382:	f7fd fb7d 	bl	8004a80 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738e:	429a      	cmp	r2, r3
 8007390:	d902      	bls.n	8007398 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	2b00      	cmp	r3, #0
 8007396:	d13d      	bne.n	8007414 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073b0:	d111      	bne.n	80073d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ba:	d004      	beq.n	80073c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c4:	d107      	bne.n	80073d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073de:	d10f      	bne.n	8007400 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e010      	b.n	8007436 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	3b01      	subs	r3, #1
 8007422:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	4013      	ands	r3, r2
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	429a      	cmp	r2, r3
 8007432:	d196      	bne.n	8007362 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3728      	adds	r7, #40	; 0x28
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000000 	.word	0x20000000

08007444 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af02      	add	r7, sp, #8
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007458:	d111      	bne.n	800747e <SPI_EndRxTransaction+0x3a>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007462:	d004      	beq.n	800746e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800746c:	d107      	bne.n	800747e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800747c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2200      	movs	r2, #0
 8007486:	2180      	movs	r1, #128	; 0x80
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7ff febd 	bl	8007208 <SPI_WaitFlagStateUntilTimeout>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d007      	beq.n	80074a4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007498:	f043 0220 	orr.w	r2, r3, #32
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e023      	b.n	80074ec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ac:	d11d      	bne.n	80074ea <SPI_EndRxTransaction+0xa6>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b6:	d004      	beq.n	80074c2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c0:	d113      	bne.n	80074ea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f7ff ff22 	bl	8007318 <SPI_WaitFifoStateUntilTimeout>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d007      	beq.n	80074ea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074de:	f043 0220 	orr.w	r2, r3, #32
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e000      	b.n	80074ec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af02      	add	r7, sp, #8
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2200      	movs	r2, #0
 8007508:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff ff03 	bl	8007318 <SPI_WaitFifoStateUntilTimeout>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d007      	beq.n	8007528 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800751c:	f043 0220 	orr.w	r2, r3, #32
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e027      	b.n	8007578 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2200      	movs	r2, #0
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff fe68 	bl	8007208 <SPI_WaitFlagStateUntilTimeout>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d007      	beq.n	800754e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007542:	f043 0220 	orr.w	r2, r3, #32
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e014      	b.n	8007578 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2200      	movs	r2, #0
 8007556:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f7ff fedc 	bl	8007318 <SPI_WaitFifoStateUntilTimeout>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d007      	beq.n	8007576 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800756a:	f043 0220 	orr.w	r2, r3, #32
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e000      	b.n	8007578 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e049      	b.n	8007626 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d106      	bne.n	80075ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f841 	bl	800762e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4619      	mov	r1, r3
 80075be:	4610      	mov	r0, r2
 80075c0:	f000 f9f8 	bl	80079b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
	...

08007644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	d001      	beq.n	800765c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e04f      	b.n	80076fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2202      	movs	r2, #2
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a23      	ldr	r2, [pc, #140]	; (8007708 <HAL_TIM_Base_Start_IT+0xc4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d01d      	beq.n	80076ba <HAL_TIM_Base_Start_IT+0x76>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007686:	d018      	beq.n	80076ba <HAL_TIM_Base_Start_IT+0x76>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1f      	ldr	r2, [pc, #124]	; (800770c <HAL_TIM_Base_Start_IT+0xc8>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d013      	beq.n	80076ba <HAL_TIM_Base_Start_IT+0x76>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1e      	ldr	r2, [pc, #120]	; (8007710 <HAL_TIM_Base_Start_IT+0xcc>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00e      	beq.n	80076ba <HAL_TIM_Base_Start_IT+0x76>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a1c      	ldr	r2, [pc, #112]	; (8007714 <HAL_TIM_Base_Start_IT+0xd0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d009      	beq.n	80076ba <HAL_TIM_Base_Start_IT+0x76>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a1b      	ldr	r2, [pc, #108]	; (8007718 <HAL_TIM_Base_Start_IT+0xd4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d004      	beq.n	80076ba <HAL_TIM_Base_Start_IT+0x76>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a19      	ldr	r2, [pc, #100]	; (800771c <HAL_TIM_Base_Start_IT+0xd8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d115      	bne.n	80076e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689a      	ldr	r2, [r3, #8]
 80076c0:	4b17      	ldr	r3, [pc, #92]	; (8007720 <HAL_TIM_Base_Start_IT+0xdc>)
 80076c2:	4013      	ands	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b06      	cmp	r3, #6
 80076ca:	d015      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0xb4>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d2:	d011      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0201 	orr.w	r2, r2, #1
 80076e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e4:	e008      	b.n	80076f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f042 0201 	orr.w	r2, r2, #1
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	e000      	b.n	80076fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	40012c00 	.word	0x40012c00
 800770c:	40000400 	.word	0x40000400
 8007710:	40000800 	.word	0x40000800
 8007714:	40000c00 	.word	0x40000c00
 8007718:	40013400 	.word	0x40013400
 800771c:	40014000 	.word	0x40014000
 8007720:	00010007 	.word	0x00010007

08007724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b02      	cmp	r3, #2
 8007738:	d122      	bne.n	8007780 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b02      	cmp	r3, #2
 8007746:	d11b      	bne.n	8007780 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0202 	mvn.w	r2, #2
 8007750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f905 	bl	8007976 <HAL_TIM_IC_CaptureCallback>
 800776c:	e005      	b.n	800777a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f8f7 	bl	8007962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f908 	bl	800798a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	2b04      	cmp	r3, #4
 800778c:	d122      	bne.n	80077d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b04      	cmp	r3, #4
 800779a:	d11b      	bne.n	80077d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f06f 0204 	mvn.w	r2, #4
 80077a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2202      	movs	r2, #2
 80077aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f8db 	bl	8007976 <HAL_TIM_IC_CaptureCallback>
 80077c0:	e005      	b.n	80077ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f8cd 	bl	8007962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f8de 	bl	800798a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f003 0308 	and.w	r3, r3, #8
 80077de:	2b08      	cmp	r3, #8
 80077e0:	d122      	bne.n	8007828 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f003 0308 	and.w	r3, r3, #8
 80077ec:	2b08      	cmp	r3, #8
 80077ee:	d11b      	bne.n	8007828 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f06f 0208 	mvn.w	r2, #8
 80077f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2204      	movs	r2, #4
 80077fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f8b1 	bl	8007976 <HAL_TIM_IC_CaptureCallback>
 8007814:	e005      	b.n	8007822 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f8a3 	bl	8007962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f8b4 	bl	800798a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f003 0310 	and.w	r3, r3, #16
 8007832:	2b10      	cmp	r3, #16
 8007834:	d122      	bne.n	800787c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	2b10      	cmp	r3, #16
 8007842:	d11b      	bne.n	800787c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f06f 0210 	mvn.w	r2, #16
 800784c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2208      	movs	r2, #8
 8007852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f887 	bl	8007976 <HAL_TIM_IC_CaptureCallback>
 8007868:	e005      	b.n	8007876 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f879 	bl	8007962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f88a 	bl	800798a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b01      	cmp	r3, #1
 8007888:	d10e      	bne.n	80078a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b01      	cmp	r3, #1
 8007896:	d107      	bne.n	80078a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f06f 0201 	mvn.w	r2, #1
 80078a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7f9 fe46 	bl	8001534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b2:	2b80      	cmp	r3, #128	; 0x80
 80078b4:	d10e      	bne.n	80078d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c0:	2b80      	cmp	r3, #128	; 0x80
 80078c2:	d107      	bne.n	80078d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f914 	bl	8007afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e2:	d10e      	bne.n	8007902 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ee:	2b80      	cmp	r3, #128	; 0x80
 80078f0:	d107      	bne.n	8007902 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80078fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f907 	bl	8007b10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790c:	2b40      	cmp	r3, #64	; 0x40
 800790e:	d10e      	bne.n	800792e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791a:	2b40      	cmp	r3, #64	; 0x40
 800791c:	d107      	bne.n	800792e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f838 	bl	800799e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f003 0320 	and.w	r3, r3, #32
 8007938:	2b20      	cmp	r3, #32
 800793a:	d10e      	bne.n	800795a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	2b20      	cmp	r3, #32
 8007948:	d107      	bne.n	800795a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f06f 0220 	mvn.w	r2, #32
 8007952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f8c7 	bl	8007ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800795a:	bf00      	nop
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007992:	bf00      	nop
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
	...

080079b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a40      	ldr	r2, [pc, #256]	; (8007ac8 <TIM_Base_SetConfig+0x114>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d013      	beq.n	80079f4 <TIM_Base_SetConfig+0x40>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d2:	d00f      	beq.n	80079f4 <TIM_Base_SetConfig+0x40>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a3d      	ldr	r2, [pc, #244]	; (8007acc <TIM_Base_SetConfig+0x118>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d00b      	beq.n	80079f4 <TIM_Base_SetConfig+0x40>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a3c      	ldr	r2, [pc, #240]	; (8007ad0 <TIM_Base_SetConfig+0x11c>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d007      	beq.n	80079f4 <TIM_Base_SetConfig+0x40>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a3b      	ldr	r2, [pc, #236]	; (8007ad4 <TIM_Base_SetConfig+0x120>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d003      	beq.n	80079f4 <TIM_Base_SetConfig+0x40>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a3a      	ldr	r2, [pc, #232]	; (8007ad8 <TIM_Base_SetConfig+0x124>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d108      	bne.n	8007a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a2f      	ldr	r2, [pc, #188]	; (8007ac8 <TIM_Base_SetConfig+0x114>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d01f      	beq.n	8007a4e <TIM_Base_SetConfig+0x9a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a14:	d01b      	beq.n	8007a4e <TIM_Base_SetConfig+0x9a>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a2c      	ldr	r2, [pc, #176]	; (8007acc <TIM_Base_SetConfig+0x118>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d017      	beq.n	8007a4e <TIM_Base_SetConfig+0x9a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a2b      	ldr	r2, [pc, #172]	; (8007ad0 <TIM_Base_SetConfig+0x11c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d013      	beq.n	8007a4e <TIM_Base_SetConfig+0x9a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a2a      	ldr	r2, [pc, #168]	; (8007ad4 <TIM_Base_SetConfig+0x120>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00f      	beq.n	8007a4e <TIM_Base_SetConfig+0x9a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a29      	ldr	r2, [pc, #164]	; (8007ad8 <TIM_Base_SetConfig+0x124>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00b      	beq.n	8007a4e <TIM_Base_SetConfig+0x9a>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a28      	ldr	r2, [pc, #160]	; (8007adc <TIM_Base_SetConfig+0x128>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d007      	beq.n	8007a4e <TIM_Base_SetConfig+0x9a>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a27      	ldr	r2, [pc, #156]	; (8007ae0 <TIM_Base_SetConfig+0x12c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d003      	beq.n	8007a4e <TIM_Base_SetConfig+0x9a>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a26      	ldr	r2, [pc, #152]	; (8007ae4 <TIM_Base_SetConfig+0x130>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d108      	bne.n	8007a60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a10      	ldr	r2, [pc, #64]	; (8007ac8 <TIM_Base_SetConfig+0x114>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d00f      	beq.n	8007aac <TIM_Base_SetConfig+0xf8>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a12      	ldr	r2, [pc, #72]	; (8007ad8 <TIM_Base_SetConfig+0x124>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d00b      	beq.n	8007aac <TIM_Base_SetConfig+0xf8>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a11      	ldr	r2, [pc, #68]	; (8007adc <TIM_Base_SetConfig+0x128>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d007      	beq.n	8007aac <TIM_Base_SetConfig+0xf8>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a10      	ldr	r2, [pc, #64]	; (8007ae0 <TIM_Base_SetConfig+0x12c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d003      	beq.n	8007aac <TIM_Base_SetConfig+0xf8>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a0f      	ldr	r2, [pc, #60]	; (8007ae4 <TIM_Base_SetConfig+0x130>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d103      	bne.n	8007ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	691a      	ldr	r2, [r3, #16]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	615a      	str	r2, [r3, #20]
}
 8007aba:	bf00      	nop
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	40012c00 	.word	0x40012c00
 8007acc:	40000400 	.word	0x40000400
 8007ad0:	40000800 	.word	0x40000800
 8007ad4:	40000c00 	.word	0x40000c00
 8007ad8:	40013400 	.word	0x40013400
 8007adc:	40014000 	.word	0x40014000
 8007ae0:	40014400 	.word	0x40014400
 8007ae4:	40014800 	.word	0x40014800

08007ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e040      	b.n	8007bb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d106      	bne.n	8007b4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7fa f856 	bl	8001bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2224      	movs	r2, #36	; 0x24
 8007b50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 0201 	bic.w	r2, r2, #1
 8007b60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f82c 	bl	8007bc0 <UART_SetConfig>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d101      	bne.n	8007b72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e022      	b.n	8007bb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fad8 	bl	8008130 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689a      	ldr	r2, [r3, #8]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f042 0201 	orr.w	r2, r2, #1
 8007bae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fb5f 	bl	8008274 <UART_CheckIdleState>
 8007bb6:	4603      	mov	r3, r0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bc4:	b08a      	sub	sp, #40	; 0x28
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	431a      	orrs	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	4ba4      	ldr	r3, [pc, #656]	; (8007e80 <UART_SetConfig+0x2c0>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	6812      	ldr	r2, [r2, #0]
 8007bf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a99      	ldr	r2, [pc, #612]	; (8007e84 <UART_SetConfig+0x2c4>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d004      	beq.n	8007c2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a90      	ldr	r2, [pc, #576]	; (8007e88 <UART_SetConfig+0x2c8>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d126      	bne.n	8007c98 <UART_SetConfig+0xd8>
 8007c4a:	4b90      	ldr	r3, [pc, #576]	; (8007e8c <UART_SetConfig+0x2cc>)
 8007c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c50:	f003 0303 	and.w	r3, r3, #3
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d81b      	bhi.n	8007c90 <UART_SetConfig+0xd0>
 8007c58:	a201      	add	r2, pc, #4	; (adr r2, 8007c60 <UART_SetConfig+0xa0>)
 8007c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5e:	bf00      	nop
 8007c60:	08007c71 	.word	0x08007c71
 8007c64:	08007c81 	.word	0x08007c81
 8007c68:	08007c79 	.word	0x08007c79
 8007c6c:	08007c89 	.word	0x08007c89
 8007c70:	2301      	movs	r3, #1
 8007c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c76:	e116      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007c78:	2302      	movs	r3, #2
 8007c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c7e:	e112      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007c80:	2304      	movs	r3, #4
 8007c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c86:	e10e      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007c88:	2308      	movs	r3, #8
 8007c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c8e:	e10a      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007c90:	2310      	movs	r3, #16
 8007c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c96:	e106      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a7c      	ldr	r2, [pc, #496]	; (8007e90 <UART_SetConfig+0x2d0>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d138      	bne.n	8007d14 <UART_SetConfig+0x154>
 8007ca2:	4b7a      	ldr	r3, [pc, #488]	; (8007e8c <UART_SetConfig+0x2cc>)
 8007ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca8:	f003 030c 	and.w	r3, r3, #12
 8007cac:	2b0c      	cmp	r3, #12
 8007cae:	d82d      	bhi.n	8007d0c <UART_SetConfig+0x14c>
 8007cb0:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <UART_SetConfig+0xf8>)
 8007cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb6:	bf00      	nop
 8007cb8:	08007ced 	.word	0x08007ced
 8007cbc:	08007d0d 	.word	0x08007d0d
 8007cc0:	08007d0d 	.word	0x08007d0d
 8007cc4:	08007d0d 	.word	0x08007d0d
 8007cc8:	08007cfd 	.word	0x08007cfd
 8007ccc:	08007d0d 	.word	0x08007d0d
 8007cd0:	08007d0d 	.word	0x08007d0d
 8007cd4:	08007d0d 	.word	0x08007d0d
 8007cd8:	08007cf5 	.word	0x08007cf5
 8007cdc:	08007d0d 	.word	0x08007d0d
 8007ce0:	08007d0d 	.word	0x08007d0d
 8007ce4:	08007d0d 	.word	0x08007d0d
 8007ce8:	08007d05 	.word	0x08007d05
 8007cec:	2300      	movs	r3, #0
 8007cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cf2:	e0d8      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cfa:	e0d4      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d02:	e0d0      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007d04:	2308      	movs	r3, #8
 8007d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d0a:	e0cc      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007d0c:	2310      	movs	r3, #16
 8007d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d12:	e0c8      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a5e      	ldr	r2, [pc, #376]	; (8007e94 <UART_SetConfig+0x2d4>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d125      	bne.n	8007d6a <UART_SetConfig+0x1aa>
 8007d1e:	4b5b      	ldr	r3, [pc, #364]	; (8007e8c <UART_SetConfig+0x2cc>)
 8007d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d28:	2b30      	cmp	r3, #48	; 0x30
 8007d2a:	d016      	beq.n	8007d5a <UART_SetConfig+0x19a>
 8007d2c:	2b30      	cmp	r3, #48	; 0x30
 8007d2e:	d818      	bhi.n	8007d62 <UART_SetConfig+0x1a2>
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	d00a      	beq.n	8007d4a <UART_SetConfig+0x18a>
 8007d34:	2b20      	cmp	r3, #32
 8007d36:	d814      	bhi.n	8007d62 <UART_SetConfig+0x1a2>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <UART_SetConfig+0x182>
 8007d3c:	2b10      	cmp	r3, #16
 8007d3e:	d008      	beq.n	8007d52 <UART_SetConfig+0x192>
 8007d40:	e00f      	b.n	8007d62 <UART_SetConfig+0x1a2>
 8007d42:	2300      	movs	r3, #0
 8007d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d48:	e0ad      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d50:	e0a9      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007d52:	2304      	movs	r3, #4
 8007d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d58:	e0a5      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007d5a:	2308      	movs	r3, #8
 8007d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d60:	e0a1      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007d62:	2310      	movs	r3, #16
 8007d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d68:	e09d      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a4a      	ldr	r2, [pc, #296]	; (8007e98 <UART_SetConfig+0x2d8>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d125      	bne.n	8007dc0 <UART_SetConfig+0x200>
 8007d74:	4b45      	ldr	r3, [pc, #276]	; (8007e8c <UART_SetConfig+0x2cc>)
 8007d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d7e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d80:	d016      	beq.n	8007db0 <UART_SetConfig+0x1f0>
 8007d82:	2bc0      	cmp	r3, #192	; 0xc0
 8007d84:	d818      	bhi.n	8007db8 <UART_SetConfig+0x1f8>
 8007d86:	2b80      	cmp	r3, #128	; 0x80
 8007d88:	d00a      	beq.n	8007da0 <UART_SetConfig+0x1e0>
 8007d8a:	2b80      	cmp	r3, #128	; 0x80
 8007d8c:	d814      	bhi.n	8007db8 <UART_SetConfig+0x1f8>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <UART_SetConfig+0x1d8>
 8007d92:	2b40      	cmp	r3, #64	; 0x40
 8007d94:	d008      	beq.n	8007da8 <UART_SetConfig+0x1e8>
 8007d96:	e00f      	b.n	8007db8 <UART_SetConfig+0x1f8>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d9e:	e082      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007da0:	2302      	movs	r3, #2
 8007da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007da6:	e07e      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007da8:	2304      	movs	r3, #4
 8007daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dae:	e07a      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007db0:	2308      	movs	r3, #8
 8007db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007db6:	e076      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007db8:	2310      	movs	r3, #16
 8007dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dbe:	e072      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a35      	ldr	r2, [pc, #212]	; (8007e9c <UART_SetConfig+0x2dc>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d12a      	bne.n	8007e20 <UART_SetConfig+0x260>
 8007dca:	4b30      	ldr	r3, [pc, #192]	; (8007e8c <UART_SetConfig+0x2cc>)
 8007dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dd8:	d01a      	beq.n	8007e10 <UART_SetConfig+0x250>
 8007dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dde:	d81b      	bhi.n	8007e18 <UART_SetConfig+0x258>
 8007de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de4:	d00c      	beq.n	8007e00 <UART_SetConfig+0x240>
 8007de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dea:	d815      	bhi.n	8007e18 <UART_SetConfig+0x258>
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <UART_SetConfig+0x238>
 8007df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007df4:	d008      	beq.n	8007e08 <UART_SetConfig+0x248>
 8007df6:	e00f      	b.n	8007e18 <UART_SetConfig+0x258>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dfe:	e052      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007e00:	2302      	movs	r3, #2
 8007e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e06:	e04e      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007e08:	2304      	movs	r3, #4
 8007e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e0e:	e04a      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007e10:	2308      	movs	r3, #8
 8007e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e16:	e046      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007e18:	2310      	movs	r3, #16
 8007e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e1e:	e042      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a17      	ldr	r2, [pc, #92]	; (8007e84 <UART_SetConfig+0x2c4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d13a      	bne.n	8007ea0 <UART_SetConfig+0x2e0>
 8007e2a:	4b18      	ldr	r3, [pc, #96]	; (8007e8c <UART_SetConfig+0x2cc>)
 8007e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e38:	d01a      	beq.n	8007e70 <UART_SetConfig+0x2b0>
 8007e3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e3e:	d81b      	bhi.n	8007e78 <UART_SetConfig+0x2b8>
 8007e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e44:	d00c      	beq.n	8007e60 <UART_SetConfig+0x2a0>
 8007e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e4a:	d815      	bhi.n	8007e78 <UART_SetConfig+0x2b8>
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <UART_SetConfig+0x298>
 8007e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e54:	d008      	beq.n	8007e68 <UART_SetConfig+0x2a8>
 8007e56:	e00f      	b.n	8007e78 <UART_SetConfig+0x2b8>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e5e:	e022      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007e60:	2302      	movs	r3, #2
 8007e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e66:	e01e      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007e68:	2304      	movs	r3, #4
 8007e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e6e:	e01a      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007e70:	2308      	movs	r3, #8
 8007e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e76:	e016      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007e78:	2310      	movs	r3, #16
 8007e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e7e:	e012      	b.n	8007ea6 <UART_SetConfig+0x2e6>
 8007e80:	efff69f3 	.word	0xefff69f3
 8007e84:	40008000 	.word	0x40008000
 8007e88:	40013800 	.word	0x40013800
 8007e8c:	40021000 	.word	0x40021000
 8007e90:	40004400 	.word	0x40004400
 8007e94:	40004800 	.word	0x40004800
 8007e98:	40004c00 	.word	0x40004c00
 8007e9c:	40005000 	.word	0x40005000
 8007ea0:	2310      	movs	r3, #16
 8007ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a9f      	ldr	r2, [pc, #636]	; (8008128 <UART_SetConfig+0x568>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d17a      	bne.n	8007fa6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d824      	bhi.n	8007f02 <UART_SetConfig+0x342>
 8007eb8:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <UART_SetConfig+0x300>)
 8007eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebe:	bf00      	nop
 8007ec0:	08007ee5 	.word	0x08007ee5
 8007ec4:	08007f03 	.word	0x08007f03
 8007ec8:	08007eed 	.word	0x08007eed
 8007ecc:	08007f03 	.word	0x08007f03
 8007ed0:	08007ef3 	.word	0x08007ef3
 8007ed4:	08007f03 	.word	0x08007f03
 8007ed8:	08007f03 	.word	0x08007f03
 8007edc:	08007f03 	.word	0x08007f03
 8007ee0:	08007efb 	.word	0x08007efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ee4:	f7fd fec2 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 8007ee8:	61f8      	str	r0, [r7, #28]
        break;
 8007eea:	e010      	b.n	8007f0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eec:	4b8f      	ldr	r3, [pc, #572]	; (800812c <UART_SetConfig+0x56c>)
 8007eee:	61fb      	str	r3, [r7, #28]
        break;
 8007ef0:	e00d      	b.n	8007f0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ef2:	f7fd fe23 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 8007ef6:	61f8      	str	r0, [r7, #28]
        break;
 8007ef8:	e009      	b.n	8007f0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007efe:	61fb      	str	r3, [r7, #28]
        break;
 8007f00:	e005      	b.n	8007f0e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007f0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 80fb 	beq.w	800810c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	4413      	add	r3, r2
 8007f20:	69fa      	ldr	r2, [r7, #28]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d305      	bcc.n	8007f32 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007f2c:	69fa      	ldr	r2, [r7, #28]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d903      	bls.n	8007f3a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f38:	e0e8      	b.n	800810c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	461c      	mov	r4, r3
 8007f40:	4615      	mov	r5, r2
 8007f42:	f04f 0200 	mov.w	r2, #0
 8007f46:	f04f 0300 	mov.w	r3, #0
 8007f4a:	022b      	lsls	r3, r5, #8
 8007f4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007f50:	0222      	lsls	r2, r4, #8
 8007f52:	68f9      	ldr	r1, [r7, #12]
 8007f54:	6849      	ldr	r1, [r1, #4]
 8007f56:	0849      	lsrs	r1, r1, #1
 8007f58:	2000      	movs	r0, #0
 8007f5a:	4688      	mov	r8, r1
 8007f5c:	4681      	mov	r9, r0
 8007f5e:	eb12 0a08 	adds.w	sl, r2, r8
 8007f62:	eb43 0b09 	adc.w	fp, r3, r9
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	603b      	str	r3, [r7, #0]
 8007f6e:	607a      	str	r2, [r7, #4]
 8007f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f74:	4650      	mov	r0, sl
 8007f76:	4659      	mov	r1, fp
 8007f78:	f7f8 fd80 	bl	8000a7c <__aeabi_uldivmod>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4613      	mov	r3, r2
 8007f82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f8a:	d308      	bcc.n	8007f9e <UART_SetConfig+0x3de>
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f92:	d204      	bcs.n	8007f9e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	60da      	str	r2, [r3, #12]
 8007f9c:	e0b6      	b.n	800810c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007fa4:	e0b2      	b.n	800810c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fae:	d15e      	bne.n	800806e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d828      	bhi.n	800800a <UART_SetConfig+0x44a>
 8007fb8:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <UART_SetConfig+0x400>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	08007fe5 	.word	0x08007fe5
 8007fc4:	08007fed 	.word	0x08007fed
 8007fc8:	08007ff5 	.word	0x08007ff5
 8007fcc:	0800800b 	.word	0x0800800b
 8007fd0:	08007ffb 	.word	0x08007ffb
 8007fd4:	0800800b 	.word	0x0800800b
 8007fd8:	0800800b 	.word	0x0800800b
 8007fdc:	0800800b 	.word	0x0800800b
 8007fe0:	08008003 	.word	0x08008003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fe4:	f7fd fe42 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 8007fe8:	61f8      	str	r0, [r7, #28]
        break;
 8007fea:	e014      	b.n	8008016 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fec:	f7fd fe54 	bl	8005c98 <HAL_RCC_GetPCLK2Freq>
 8007ff0:	61f8      	str	r0, [r7, #28]
        break;
 8007ff2:	e010      	b.n	8008016 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ff4:	4b4d      	ldr	r3, [pc, #308]	; (800812c <UART_SetConfig+0x56c>)
 8007ff6:	61fb      	str	r3, [r7, #28]
        break;
 8007ff8:	e00d      	b.n	8008016 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ffa:	f7fd fd9f 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 8007ffe:	61f8      	str	r0, [r7, #28]
        break;
 8008000:	e009      	b.n	8008016 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008006:	61fb      	str	r3, [r7, #28]
        break;
 8008008:	e005      	b.n	8008016 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008014:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d077      	beq.n	800810c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	005a      	lsls	r2, r3, #1
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	085b      	lsrs	r3, r3, #1
 8008026:	441a      	add	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008030:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	2b0f      	cmp	r3, #15
 8008036:	d916      	bls.n	8008066 <UART_SetConfig+0x4a6>
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800803e:	d212      	bcs.n	8008066 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	b29b      	uxth	r3, r3
 8008044:	f023 030f 	bic.w	r3, r3, #15
 8008048:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	085b      	lsrs	r3, r3, #1
 800804e:	b29b      	uxth	r3, r3
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	b29a      	uxth	r2, r3
 8008056:	8afb      	ldrh	r3, [r7, #22]
 8008058:	4313      	orrs	r3, r2
 800805a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	8afa      	ldrh	r2, [r7, #22]
 8008062:	60da      	str	r2, [r3, #12]
 8008064:	e052      	b.n	800810c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800806c:	e04e      	b.n	800810c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800806e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008072:	2b08      	cmp	r3, #8
 8008074:	d827      	bhi.n	80080c6 <UART_SetConfig+0x506>
 8008076:	a201      	add	r2, pc, #4	; (adr r2, 800807c <UART_SetConfig+0x4bc>)
 8008078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807c:	080080a1 	.word	0x080080a1
 8008080:	080080a9 	.word	0x080080a9
 8008084:	080080b1 	.word	0x080080b1
 8008088:	080080c7 	.word	0x080080c7
 800808c:	080080b7 	.word	0x080080b7
 8008090:	080080c7 	.word	0x080080c7
 8008094:	080080c7 	.word	0x080080c7
 8008098:	080080c7 	.word	0x080080c7
 800809c:	080080bf 	.word	0x080080bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080a0:	f7fd fde4 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 80080a4:	61f8      	str	r0, [r7, #28]
        break;
 80080a6:	e014      	b.n	80080d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080a8:	f7fd fdf6 	bl	8005c98 <HAL_RCC_GetPCLK2Freq>
 80080ac:	61f8      	str	r0, [r7, #28]
        break;
 80080ae:	e010      	b.n	80080d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080b0:	4b1e      	ldr	r3, [pc, #120]	; (800812c <UART_SetConfig+0x56c>)
 80080b2:	61fb      	str	r3, [r7, #28]
        break;
 80080b4:	e00d      	b.n	80080d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080b6:	f7fd fd41 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 80080ba:	61f8      	str	r0, [r7, #28]
        break;
 80080bc:	e009      	b.n	80080d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080c2:	61fb      	str	r3, [r7, #28]
        break;
 80080c4:	e005      	b.n	80080d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80080d0:	bf00      	nop
    }

    if (pclk != 0U)
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d019      	beq.n	800810c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	085a      	lsrs	r2, r3, #1
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	441a      	add	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	2b0f      	cmp	r3, #15
 80080f0:	d909      	bls.n	8008106 <UART_SetConfig+0x546>
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f8:	d205      	bcs.n	8008106 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	60da      	str	r2, [r3, #12]
 8008104:	e002      	b.n	800810c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008118:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800811c:	4618      	mov	r0, r3
 800811e:	3728      	adds	r7, #40	; 0x28
 8008120:	46bd      	mov	sp, r7
 8008122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008126:	bf00      	nop
 8008128:	40008000 	.word	0x40008000
 800812c:	00f42400 	.word	0x00f42400

08008130 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00a      	beq.n	800815a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00a      	beq.n	800819e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	f003 0308 	and.w	r3, r3, #8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	f003 0310 	and.w	r3, r3, #16
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00a      	beq.n	80081e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	430a      	orrs	r2, r1
 8008202:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820c:	2b00      	cmp	r3, #0
 800820e:	d01a      	beq.n	8008246 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800822e:	d10a      	bne.n	8008246 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	605a      	str	r2, [r3, #4]
  }
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af02      	add	r7, sp, #8
 800827a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008284:	f7fc fbfc 	bl	8004a80 <HAL_GetTick>
 8008288:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0308 	and.w	r3, r3, #8
 8008294:	2b08      	cmp	r3, #8
 8008296:	d10e      	bne.n	80082b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f82d 	bl	8008306 <UART_WaitOnFlagUntilTimeout>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e023      	b.n	80082fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	d10e      	bne.n	80082e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f817 	bl	8008306 <UART_WaitOnFlagUntilTimeout>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e00d      	b.n	80082fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2220      	movs	r2, #32
 80082e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2220      	movs	r2, #32
 80082ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b09c      	sub	sp, #112	; 0x70
 800830a:	af00      	add	r7, sp, #0
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	60b9      	str	r1, [r7, #8]
 8008310:	603b      	str	r3, [r7, #0]
 8008312:	4613      	mov	r3, r2
 8008314:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008316:	e0a5      	b.n	8008464 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800831a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800831e:	f000 80a1 	beq.w	8008464 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008322:	f7fc fbad 	bl	8004a80 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800832e:	429a      	cmp	r2, r3
 8008330:	d302      	bcc.n	8008338 <UART_WaitOnFlagUntilTimeout+0x32>
 8008332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008334:	2b00      	cmp	r3, #0
 8008336:	d13e      	bne.n	80083b6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008348:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800834c:	667b      	str	r3, [r7, #100]	; 0x64
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008358:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800835c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e6      	bne.n	8008338 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3308      	adds	r3, #8
 8008370:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	f023 0301 	bic.w	r3, r3, #1
 8008380:	663b      	str	r3, [r7, #96]	; 0x60
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3308      	adds	r3, #8
 8008388:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800838a:	64ba      	str	r2, [r7, #72]	; 0x48
 800838c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e5      	bne.n	800836a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2220      	movs	r2, #32
 80083a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2220      	movs	r2, #32
 80083a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e067      	b.n	8008486 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d04f      	beq.n	8008464 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083d2:	d147      	bne.n	8008464 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083dc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083fc:	637b      	str	r3, [r7, #52]	; 0x34
 80083fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e6      	bne.n	80083de <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3308      	adds	r3, #8
 8008416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	613b      	str	r3, [r7, #16]
   return(result);
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f023 0301 	bic.w	r3, r3, #1
 8008426:	66bb      	str	r3, [r7, #104]	; 0x68
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3308      	adds	r3, #8
 800842e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008430:	623a      	str	r2, [r7, #32]
 8008432:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	69f9      	ldr	r1, [r7, #28]
 8008436:	6a3a      	ldr	r2, [r7, #32]
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	61bb      	str	r3, [r7, #24]
   return(result);
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e5      	bne.n	8008410 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2220      	movs	r2, #32
 8008448:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2220      	movs	r2, #32
 800844e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2220      	movs	r2, #32
 8008454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e010      	b.n	8008486 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	69da      	ldr	r2, [r3, #28]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	4013      	ands	r3, r2
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	429a      	cmp	r2, r3
 8008472:	bf0c      	ite	eq
 8008474:	2301      	moveq	r3, #1
 8008476:	2300      	movne	r3, #0
 8008478:	b2db      	uxtb	r3, r3
 800847a:	461a      	mov	r2, r3
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	429a      	cmp	r2, r3
 8008480:	f43f af4a 	beq.w	8008318 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3770      	adds	r7, #112	; 0x70
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <__NVIC_SetPriority>:
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	6039      	str	r1, [r7, #0]
 800849a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800849c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	db0a      	blt.n	80084ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	490c      	ldr	r1, [pc, #48]	; (80084dc <__NVIC_SetPriority+0x4c>)
 80084aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084ae:	0112      	lsls	r2, r2, #4
 80084b0:	b2d2      	uxtb	r2, r2
 80084b2:	440b      	add	r3, r1
 80084b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80084b8:	e00a      	b.n	80084d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	4908      	ldr	r1, [pc, #32]	; (80084e0 <__NVIC_SetPriority+0x50>)
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	f003 030f 	and.w	r3, r3, #15
 80084c6:	3b04      	subs	r3, #4
 80084c8:	0112      	lsls	r2, r2, #4
 80084ca:	b2d2      	uxtb	r2, r2
 80084cc:	440b      	add	r3, r1
 80084ce:	761a      	strb	r2, [r3, #24]
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	e000e100 	.word	0xe000e100
 80084e0:	e000ed00 	.word	0xe000ed00

080084e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80084e4:	b580      	push	{r7, lr}
 80084e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80084e8:	4b05      	ldr	r3, [pc, #20]	; (8008500 <SysTick_Handler+0x1c>)
 80084ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80084ec:	f002 fb00 	bl	800aaf0 <xTaskGetSchedulerState>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d001      	beq.n	80084fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80084f6:	f003 fb27 	bl	800bb48 <xPortSysTickHandler>
  }
}
 80084fa:	bf00      	nop
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	e000e010 	.word	0xe000e010

08008504 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008504:	b580      	push	{r7, lr}
 8008506:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008508:	2100      	movs	r1, #0
 800850a:	f06f 0004 	mvn.w	r0, #4
 800850e:	f7ff ffbf 	bl	8008490 <__NVIC_SetPriority>
#endif
}
 8008512:	bf00      	nop
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800851e:	f3ef 8305 	mrs	r3, IPSR
 8008522:	603b      	str	r3, [r7, #0]
  return(result);
 8008524:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800852a:	f06f 0305 	mvn.w	r3, #5
 800852e:	607b      	str	r3, [r7, #4]
 8008530:	e00c      	b.n	800854c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008532:	4b0a      	ldr	r3, [pc, #40]	; (800855c <osKernelInitialize+0x44>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d105      	bne.n	8008546 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800853a:	4b08      	ldr	r3, [pc, #32]	; (800855c <osKernelInitialize+0x44>)
 800853c:	2201      	movs	r2, #1
 800853e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008540:	2300      	movs	r3, #0
 8008542:	607b      	str	r3, [r7, #4]
 8008544:	e002      	b.n	800854c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800854a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800854c:	687b      	ldr	r3, [r7, #4]
}
 800854e:	4618      	mov	r0, r3
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	20000280 	.word	0x20000280

08008560 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008566:	f3ef 8305 	mrs	r3, IPSR
 800856a:	603b      	str	r3, [r7, #0]
  return(result);
 800856c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008572:	f06f 0305 	mvn.w	r3, #5
 8008576:	607b      	str	r3, [r7, #4]
 8008578:	e010      	b.n	800859c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800857a:	4b0b      	ldr	r3, [pc, #44]	; (80085a8 <osKernelStart+0x48>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d109      	bne.n	8008596 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008582:	f7ff ffbf 	bl	8008504 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008586:	4b08      	ldr	r3, [pc, #32]	; (80085a8 <osKernelStart+0x48>)
 8008588:	2202      	movs	r2, #2
 800858a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800858c:	f001 fe1e 	bl	800a1cc <vTaskStartScheduler>
      stat = osOK;
 8008590:	2300      	movs	r3, #0
 8008592:	607b      	str	r3, [r7, #4]
 8008594:	e002      	b.n	800859c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800859a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800859c:	687b      	ldr	r3, [r7, #4]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20000280 	.word	0x20000280

080085ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08e      	sub	sp, #56	; 0x38
 80085b0:	af04      	add	r7, sp, #16
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80085b8:	2300      	movs	r3, #0
 80085ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085bc:	f3ef 8305 	mrs	r3, IPSR
 80085c0:	617b      	str	r3, [r7, #20]
  return(result);
 80085c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d17e      	bne.n	80086c6 <osThreadNew+0x11a>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d07b      	beq.n	80086c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80085ce:	2380      	movs	r3, #128	; 0x80
 80085d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80085d2:	2318      	movs	r3, #24
 80085d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80085d6:	2300      	movs	r3, #0
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80085da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d045      	beq.n	8008672 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <osThreadNew+0x48>
        name = attr->name;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d002      	beq.n	8008602 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d008      	beq.n	800861a <osThreadNew+0x6e>
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	2b38      	cmp	r3, #56	; 0x38
 800860c:	d805      	bhi.n	800861a <osThreadNew+0x6e>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <osThreadNew+0x72>
        return (NULL);
 800861a:	2300      	movs	r3, #0
 800861c:	e054      	b.n	80086c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	089b      	lsrs	r3, r3, #2
 800862c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00e      	beq.n	8008654 <osThreadNew+0xa8>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	2bbb      	cmp	r3, #187	; 0xbb
 800863c:	d90a      	bls.n	8008654 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008642:	2b00      	cmp	r3, #0
 8008644:	d006      	beq.n	8008654 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <osThreadNew+0xa8>
        mem = 1;
 800864e:	2301      	movs	r3, #1
 8008650:	61bb      	str	r3, [r7, #24]
 8008652:	e010      	b.n	8008676 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10c      	bne.n	8008676 <osThreadNew+0xca>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d108      	bne.n	8008676 <osThreadNew+0xca>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d104      	bne.n	8008676 <osThreadNew+0xca>
          mem = 0;
 800866c:	2300      	movs	r3, #0
 800866e:	61bb      	str	r3, [r7, #24]
 8008670:	e001      	b.n	8008676 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d110      	bne.n	800869e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008684:	9202      	str	r2, [sp, #8]
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	6a3a      	ldr	r2, [r7, #32]
 8008690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f001 fbae 	bl	8009df4 <xTaskCreateStatic>
 8008698:	4603      	mov	r3, r0
 800869a:	613b      	str	r3, [r7, #16]
 800869c:	e013      	b.n	80086c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d110      	bne.n	80086c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	f107 0310 	add.w	r3, r7, #16
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f001 fbf9 	bl	8009eae <xTaskCreate>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d001      	beq.n	80086c6 <osThreadNew+0x11a>
            hTask = NULL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80086c6:	693b      	ldr	r3, [r7, #16]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3728      	adds	r7, #40	; 0x28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086d8:	f3ef 8305 	mrs	r3, IPSR
 80086dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80086de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <osDelay+0x1c>
    stat = osErrorISR;
 80086e4:	f06f 0305 	mvn.w	r3, #5
 80086e8:	60fb      	str	r3, [r7, #12]
 80086ea:	e007      	b.n	80086fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f001 fd34 	bl	800a164 <vTaskDelay>
    }
  }

  return (stat);
 80086fc:	68fb      	ldr	r3, [r7, #12]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4a07      	ldr	r2, [pc, #28]	; (8008734 <vApplicationGetIdleTaskMemory+0x2c>)
 8008718:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	4a06      	ldr	r2, [pc, #24]	; (8008738 <vApplicationGetIdleTaskMemory+0x30>)
 800871e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2280      	movs	r2, #128	; 0x80
 8008724:	601a      	str	r2, [r3, #0]
}
 8008726:	bf00      	nop
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20000284 	.word	0x20000284
 8008738:	20000340 	.word	0x20000340

0800873c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4a07      	ldr	r2, [pc, #28]	; (8008768 <vApplicationGetTimerTaskMemory+0x2c>)
 800874c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	4a06      	ldr	r2, [pc, #24]	; (800876c <vApplicationGetTimerTaskMemory+0x30>)
 8008752:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800875a:	601a      	str	r2, [r3, #0]
}
 800875c:	bf00      	nop
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	20000540 	.word	0x20000540
 800876c:	200005fc 	.word	0x200005fc

08008770 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f103 0208 	add.w	r2, r3, #8
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008788:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f103 0208 	add.w	r2, r3, #8
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f103 0208 	add.w	r2, r3, #8
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087ca:	b480      	push	{r7}
 80087cc:	b085      	sub	sp, #20
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	689a      	ldr	r2, [r3, #8]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	601a      	str	r2, [r3, #0]
}
 8008806:	bf00      	nop
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008812:	b480      	push	{r7}
 8008814:	b085      	sub	sp, #20
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008828:	d103      	bne.n	8008832 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	e00c      	b.n	800884c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	3308      	adds	r3, #8
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	e002      	b.n	8008840 <vListInsert+0x2e>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	429a      	cmp	r2, r3
 800884a:	d2f6      	bcs.n	800883a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	601a      	str	r2, [r3, #0]
}
 8008878:	bf00      	nop
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6892      	ldr	r2, [r2, #8]
 800889a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	6852      	ldr	r2, [r2, #4]
 80088a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d103      	bne.n	80088b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	1e5a      	subs	r2, r3, #1
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10a      	bne.n	8008902 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80088fe:	bf00      	nop
 8008900:	e7fe      	b.n	8008900 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008902:	f003 f88f 	bl	800ba24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890e:	68f9      	ldr	r1, [r7, #12]
 8008910:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008912:	fb01 f303 	mul.w	r3, r1, r3
 8008916:	441a      	add	r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008932:	3b01      	subs	r3, #1
 8008934:	68f9      	ldr	r1, [r7, #12]
 8008936:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008938:	fb01 f303 	mul.w	r3, r1, r3
 800893c:	441a      	add	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	22ff      	movs	r2, #255	; 0xff
 8008946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	22ff      	movs	r2, #255	; 0xff
 800894e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d114      	bne.n	8008982 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d01a      	beq.n	8008996 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3310      	adds	r3, #16
 8008964:	4618      	mov	r0, r3
 8008966:	f001 fecb 	bl	800a700 <xTaskRemoveFromEventList>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d012      	beq.n	8008996 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008970:	4b0c      	ldr	r3, [pc, #48]	; (80089a4 <xQueueGenericReset+0xcc>)
 8008972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	e009      	b.n	8008996 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	3310      	adds	r3, #16
 8008986:	4618      	mov	r0, r3
 8008988:	f7ff fef2 	bl	8008770 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3324      	adds	r3, #36	; 0x24
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff feed 	bl	8008770 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008996:	f003 f875 	bl	800ba84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800899a:	2301      	movs	r3, #1
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	e000ed04 	.word	0xe000ed04

080089a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08e      	sub	sp, #56	; 0x38
 80089ac:	af02      	add	r7, sp, #8
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10a      	bne.n	80089ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089ea:	bf00      	nop
 80089ec:	e7fe      	b.n	80089ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <xQueueGenericCreateStatic+0x52>
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <xQueueGenericCreateStatic+0x56>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e000      	b.n	8008a00 <xQueueGenericCreateStatic+0x58>
 80089fe:	2300      	movs	r3, #0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10a      	bne.n	8008a1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	623b      	str	r3, [r7, #32]
}
 8008a16:	bf00      	nop
 8008a18:	e7fe      	b.n	8008a18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <xQueueGenericCreateStatic+0x7e>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <xQueueGenericCreateStatic+0x82>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e000      	b.n	8008a2c <xQueueGenericCreateStatic+0x84>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10a      	bne.n	8008a46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	61fb      	str	r3, [r7, #28]
}
 8008a42:	bf00      	nop
 8008a44:	e7fe      	b.n	8008a44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a46:	2350      	movs	r3, #80	; 0x50
 8008a48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2b50      	cmp	r3, #80	; 0x50
 8008a4e:	d00a      	beq.n	8008a66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	61bb      	str	r3, [r7, #24]
}
 8008a62:	bf00      	nop
 8008a64:	e7fe      	b.n	8008a64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00d      	beq.n	8008a8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	4613      	mov	r3, r2
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	68b9      	ldr	r1, [r7, #8]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 f83f 	bl	8008b0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3730      	adds	r7, #48	; 0x30
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08a      	sub	sp, #40	; 0x28
 8008a9c:	af02      	add	r7, sp, #8
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10a      	bne.n	8008ac2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	613b      	str	r3, [r7, #16]
}
 8008abe:	bf00      	nop
 8008ac0:	e7fe      	b.n	8008ac0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	fb02 f303 	mul.w	r3, r2, r3
 8008aca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	3350      	adds	r3, #80	; 0x50
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f003 f8c9 	bl	800bc68 <pvPortMalloc>
 8008ad6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d011      	beq.n	8008b02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	3350      	adds	r3, #80	; 0x50
 8008ae6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008af0:	79fa      	ldrb	r2, [r7, #7]
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	4613      	mov	r3, r2
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	68b9      	ldr	r1, [r7, #8]
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 f805 	bl	8008b0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b02:	69bb      	ldr	r3, [r7, #24]
	}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3720      	adds	r7, #32
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
 8008b18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d103      	bne.n	8008b28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	69ba      	ldr	r2, [r7, #24]
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	e002      	b.n	8008b2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	69b8      	ldr	r0, [r7, #24]
 8008b3e:	f7ff fecb 	bl	80088d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	78fa      	ldrb	r2, [r7, #3]
 8008b46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008b4a:	bf00      	nop
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b082      	sub	sp, #8
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00e      	beq.n	8008b7e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008b72:	2300      	movs	r3, #0
 8008b74:	2200      	movs	r2, #0
 8008b76:	2100      	movs	r1, #0
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f81d 	bl	8008bb8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008b7e:	bf00      	nop
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b086      	sub	sp, #24
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008b90:	2301      	movs	r3, #1
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	2300      	movs	r3, #0
 8008b96:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	6939      	ldr	r1, [r7, #16]
 8008b9e:	6978      	ldr	r0, [r7, #20]
 8008ba0:	f7ff ff7a 	bl	8008a98 <xQueueGenericCreate>
 8008ba4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f7ff ffd3 	bl	8008b52 <prvInitialiseMutex>

		return xNewQueue;
 8008bac:	68fb      	ldr	r3, [r7, #12]
	}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3718      	adds	r7, #24
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08e      	sub	sp, #56	; 0x38
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10a      	bne.n	8008bea <xQueueGenericSend+0x32>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008be6:	bf00      	nop
 8008be8:	e7fe      	b.n	8008be8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d103      	bne.n	8008bf8 <xQueueGenericSend+0x40>
 8008bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <xQueueGenericSend+0x44>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e000      	b.n	8008bfe <xQueueGenericSend+0x46>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10a      	bne.n	8008c18 <xQueueGenericSend+0x60>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c14:	bf00      	nop
 8008c16:	e7fe      	b.n	8008c16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d103      	bne.n	8008c26 <xQueueGenericSend+0x6e>
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d101      	bne.n	8008c2a <xQueueGenericSend+0x72>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e000      	b.n	8008c2c <xQueueGenericSend+0x74>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <xQueueGenericSend+0x8e>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	623b      	str	r3, [r7, #32]
}
 8008c42:	bf00      	nop
 8008c44:	e7fe      	b.n	8008c44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c46:	f001 ff53 	bl	800aaf0 <xTaskGetSchedulerState>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d102      	bne.n	8008c56 <xQueueGenericSend+0x9e>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <xQueueGenericSend+0xa2>
 8008c56:	2301      	movs	r3, #1
 8008c58:	e000      	b.n	8008c5c <xQueueGenericSend+0xa4>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10a      	bne.n	8008c76 <xQueueGenericSend+0xbe>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	61fb      	str	r3, [r7, #28]
}
 8008c72:	bf00      	nop
 8008c74:	e7fe      	b.n	8008c74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c76:	f002 fed5 	bl	800ba24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d302      	bcc.n	8008c8c <xQueueGenericSend+0xd4>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d129      	bne.n	8008ce0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c92:	f000 fbbb 	bl	800940c <prvCopyDataToQueue>
 8008c96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d010      	beq.n	8008cc2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	3324      	adds	r3, #36	; 0x24
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f001 fd2b 	bl	800a700 <xTaskRemoveFromEventList>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d013      	beq.n	8008cd8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008cb0:	4b3f      	ldr	r3, [pc, #252]	; (8008db0 <xQueueGenericSend+0x1f8>)
 8008cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	e00a      	b.n	8008cd8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d007      	beq.n	8008cd8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008cc8:	4b39      	ldr	r3, [pc, #228]	; (8008db0 <xQueueGenericSend+0x1f8>)
 8008cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008cd8:	f002 fed4 	bl	800ba84 <vPortExitCritical>
				return pdPASS;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e063      	b.n	8008da8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d103      	bne.n	8008cee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ce6:	f002 fecd 	bl	800ba84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008cea:	2300      	movs	r3, #0
 8008cec:	e05c      	b.n	8008da8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d106      	bne.n	8008d02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cf4:	f107 0314 	add.w	r3, r7, #20
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f001 fd8b 	bl	800a814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d02:	f002 febf 	bl	800ba84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d06:	f001 fad1 	bl	800a2ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d0a:	f002 fe8b 	bl	800ba24 <vPortEnterCritical>
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d14:	b25b      	sxtb	r3, r3
 8008d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d1a:	d103      	bne.n	8008d24 <xQueueGenericSend+0x16c>
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d2a:	b25b      	sxtb	r3, r3
 8008d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d30:	d103      	bne.n	8008d3a <xQueueGenericSend+0x182>
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d3a:	f002 fea3 	bl	800ba84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d3e:	1d3a      	adds	r2, r7, #4
 8008d40:	f107 0314 	add.w	r3, r7, #20
 8008d44:	4611      	mov	r1, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f001 fd7a 	bl	800a840 <xTaskCheckForTimeOut>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d124      	bne.n	8008d9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d54:	f000 fc52 	bl	80095fc <prvIsQueueFull>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d018      	beq.n	8008d90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d60:	3310      	adds	r3, #16
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	4611      	mov	r1, r2
 8008d66:	4618      	mov	r0, r3
 8008d68:	f001 fc7a 	bl	800a660 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d6e:	f000 fbdd 	bl	800952c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d72:	f001 faa9 	bl	800a2c8 <xTaskResumeAll>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f47f af7c 	bne.w	8008c76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008d7e:	4b0c      	ldr	r3, [pc, #48]	; (8008db0 <xQueueGenericSend+0x1f8>)
 8008d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	e772      	b.n	8008c76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d92:	f000 fbcb 	bl	800952c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d96:	f001 fa97 	bl	800a2c8 <xTaskResumeAll>
 8008d9a:	e76c      	b.n	8008c76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d9e:	f000 fbc5 	bl	800952c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008da2:	f001 fa91 	bl	800a2c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008da6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3738      	adds	r7, #56	; 0x38
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	e000ed04 	.word	0xe000ed04

08008db4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b090      	sub	sp, #64	; 0x40
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10a      	bne.n	8008de2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008dde:	bf00      	nop
 8008de0:	e7fe      	b.n	8008de0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d103      	bne.n	8008df0 <xQueueGenericSendFromISR+0x3c>
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <xQueueGenericSendFromISR+0x40>
 8008df0:	2301      	movs	r3, #1
 8008df2:	e000      	b.n	8008df6 <xQueueGenericSendFromISR+0x42>
 8008df4:	2300      	movs	r3, #0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10a      	bne.n	8008e10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e0c:	bf00      	nop
 8008e0e:	e7fe      	b.n	8008e0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d103      	bne.n	8008e1e <xQueueGenericSendFromISR+0x6a>
 8008e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d101      	bne.n	8008e22 <xQueueGenericSendFromISR+0x6e>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e000      	b.n	8008e24 <xQueueGenericSendFromISR+0x70>
 8008e22:	2300      	movs	r3, #0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10a      	bne.n	8008e3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	623b      	str	r3, [r7, #32]
}
 8008e3a:	bf00      	nop
 8008e3c:	e7fe      	b.n	8008e3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e3e:	f002 fed3 	bl	800bbe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e42:	f3ef 8211 	mrs	r2, BASEPRI
 8008e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	61fa      	str	r2, [r7, #28]
 8008e58:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e5a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d302      	bcc.n	8008e70 <xQueueGenericSendFromISR+0xbc>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d12f      	bne.n	8008ed0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	68b9      	ldr	r1, [r7, #8]
 8008e84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e86:	f000 fac1 	bl	800940c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e92:	d112      	bne.n	8008eba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d016      	beq.n	8008eca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9e:	3324      	adds	r3, #36	; 0x24
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f001 fc2d 	bl	800a700 <xTaskRemoveFromEventList>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00e      	beq.n	8008eca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00b      	beq.n	8008eca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	e007      	b.n	8008eca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008eba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	b25a      	sxtb	r2, r3
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008ece:	e001      	b.n	8008ed4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ede:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3740      	adds	r7, #64	; 0x40
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b08e      	sub	sp, #56	; 0x38
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10a      	bne.n	8008f14 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	623b      	str	r3, [r7, #32]
}
 8008f10:	bf00      	nop
 8008f12:	e7fe      	b.n	8008f12 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00a      	beq.n	8008f32 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	61fb      	str	r3, [r7, #28]
}
 8008f2e:	bf00      	nop
 8008f30:	e7fe      	b.n	8008f30 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d103      	bne.n	8008f42 <xQueueGiveFromISR+0x58>
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <xQueueGiveFromISR+0x5c>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e000      	b.n	8008f48 <xQueueGiveFromISR+0x5e>
 8008f46:	2300      	movs	r3, #0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10a      	bne.n	8008f62 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	61bb      	str	r3, [r7, #24]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f62:	f002 fe41 	bl	800bbe8 <vPortValidateInterruptPriority>
	__asm volatile
 8008f66:	f3ef 8211 	mrs	r2, BASEPRI
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	617a      	str	r2, [r7, #20]
 8008f7c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008f7e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d22b      	bcs.n	8008fea <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	1c5a      	adds	r2, r3, #1
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008fa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fac:	d112      	bne.n	8008fd4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d016      	beq.n	8008fe4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	3324      	adds	r3, #36	; 0x24
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f001 fba0 	bl	800a700 <xTaskRemoveFromEventList>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00e      	beq.n	8008fe4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00b      	beq.n	8008fe4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	e007      	b.n	8008fe4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fd8:	3301      	adds	r3, #1
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	b25a      	sxtb	r2, r3
 8008fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8008fe8:	e001      	b.n	8008fee <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008fea:	2300      	movs	r3, #0
 8008fec:	637b      	str	r3, [r7, #52]	; 0x34
 8008fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f383 8811 	msr	BASEPRI, r3
}
 8008ff8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3738      	adds	r7, #56	; 0x38
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08c      	sub	sp, #48	; 0x30
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009010:	2300      	movs	r3, #0
 8009012:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10a      	bne.n	8009034 <xQueueReceive+0x30>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	623b      	str	r3, [r7, #32]
}
 8009030:	bf00      	nop
 8009032:	e7fe      	b.n	8009032 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d103      	bne.n	8009042 <xQueueReceive+0x3e>
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <xQueueReceive+0x42>
 8009042:	2301      	movs	r3, #1
 8009044:	e000      	b.n	8009048 <xQueueReceive+0x44>
 8009046:	2300      	movs	r3, #0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <xQueueReceive+0x5e>
	__asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	61fb      	str	r3, [r7, #28]
}
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009062:	f001 fd45 	bl	800aaf0 <xTaskGetSchedulerState>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d102      	bne.n	8009072 <xQueueReceive+0x6e>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <xQueueReceive+0x72>
 8009072:	2301      	movs	r3, #1
 8009074:	e000      	b.n	8009078 <xQueueReceive+0x74>
 8009076:	2300      	movs	r3, #0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10a      	bne.n	8009092 <xQueueReceive+0x8e>
	__asm volatile
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	61bb      	str	r3, [r7, #24]
}
 800908e:	bf00      	nop
 8009090:	e7fe      	b.n	8009090 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009092:	f002 fcc7 	bl	800ba24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d01f      	beq.n	80090e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090a2:	68b9      	ldr	r1, [r7, #8]
 80090a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090a6:	f000 fa1b 	bl	80094e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	1e5a      	subs	r2, r3, #1
 80090ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00f      	beq.n	80090da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090bc:	3310      	adds	r3, #16
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 fb1e 	bl	800a700 <xTaskRemoveFromEventList>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d007      	beq.n	80090da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090ca:	4b3d      	ldr	r3, [pc, #244]	; (80091c0 <xQueueReceive+0x1bc>)
 80090cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090da:	f002 fcd3 	bl	800ba84 <vPortExitCritical>
				return pdPASS;
 80090de:	2301      	movs	r3, #1
 80090e0:	e069      	b.n	80091b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d103      	bne.n	80090f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090e8:	f002 fccc 	bl	800ba84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090ec:	2300      	movs	r3, #0
 80090ee:	e062      	b.n	80091b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d106      	bne.n	8009104 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090f6:	f107 0310 	add.w	r3, r7, #16
 80090fa:	4618      	mov	r0, r3
 80090fc:	f001 fb8a 	bl	800a814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009100:	2301      	movs	r3, #1
 8009102:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009104:	f002 fcbe 	bl	800ba84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009108:	f001 f8d0 	bl	800a2ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800910c:	f002 fc8a 	bl	800ba24 <vPortEnterCritical>
 8009110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009116:	b25b      	sxtb	r3, r3
 8009118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800911c:	d103      	bne.n	8009126 <xQueueReceive+0x122>
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800912c:	b25b      	sxtb	r3, r3
 800912e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009132:	d103      	bne.n	800913c <xQueueReceive+0x138>
 8009134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800913c:	f002 fca2 	bl	800ba84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009140:	1d3a      	adds	r2, r7, #4
 8009142:	f107 0310 	add.w	r3, r7, #16
 8009146:	4611      	mov	r1, r2
 8009148:	4618      	mov	r0, r3
 800914a:	f001 fb79 	bl	800a840 <xTaskCheckForTimeOut>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d123      	bne.n	800919c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009156:	f000 fa3b 	bl	80095d0 <prvIsQueueEmpty>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d017      	beq.n	8009190 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	3324      	adds	r3, #36	; 0x24
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	4611      	mov	r1, r2
 8009168:	4618      	mov	r0, r3
 800916a:	f001 fa79 	bl	800a660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800916e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009170:	f000 f9dc 	bl	800952c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009174:	f001 f8a8 	bl	800a2c8 <xTaskResumeAll>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d189      	bne.n	8009092 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800917e:	4b10      	ldr	r3, [pc, #64]	; (80091c0 <xQueueReceive+0x1bc>)
 8009180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	e780      	b.n	8009092 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009192:	f000 f9cb 	bl	800952c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009196:	f001 f897 	bl	800a2c8 <xTaskResumeAll>
 800919a:	e77a      	b.n	8009092 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800919c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800919e:	f000 f9c5 	bl	800952c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091a2:	f001 f891 	bl	800a2c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091a8:	f000 fa12 	bl	80095d0 <prvIsQueueEmpty>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f43f af6f 	beq.w	8009092 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3730      	adds	r7, #48	; 0x30
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	e000ed04 	.word	0xe000ed04

080091c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b08e      	sub	sp, #56	; 0x38
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80091ce:	2300      	movs	r3, #0
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80091d6:	2300      	movs	r3, #0
 80091d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10a      	bne.n	80091f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	623b      	str	r3, [r7, #32]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00a      	beq.n	8009214 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	61fb      	str	r3, [r7, #28]
}
 8009210:	bf00      	nop
 8009212:	e7fe      	b.n	8009212 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009214:	f001 fc6c 	bl	800aaf0 <xTaskGetSchedulerState>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d102      	bne.n	8009224 <xQueueSemaphoreTake+0x60>
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <xQueueSemaphoreTake+0x64>
 8009224:	2301      	movs	r3, #1
 8009226:	e000      	b.n	800922a <xQueueSemaphoreTake+0x66>
 8009228:	2300      	movs	r3, #0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10a      	bne.n	8009244 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	61bb      	str	r3, [r7, #24]
}
 8009240:	bf00      	nop
 8009242:	e7fe      	b.n	8009242 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009244:	f002 fbee 	bl	800ba24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	2b00      	cmp	r3, #0
 8009252:	d024      	beq.n	800929e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	1e5a      	subs	r2, r3, #1
 8009258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800925c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d104      	bne.n	800926e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009264:	f001 fdba 	bl	800addc <pvTaskIncrementMutexHeldCount>
 8009268:	4602      	mov	r2, r0
 800926a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800926e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00f      	beq.n	8009296 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	3310      	adds	r3, #16
 800927a:	4618      	mov	r0, r3
 800927c:	f001 fa40 	bl	800a700 <xTaskRemoveFromEventList>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d007      	beq.n	8009296 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009286:	4b54      	ldr	r3, [pc, #336]	; (80093d8 <xQueueSemaphoreTake+0x214>)
 8009288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009296:	f002 fbf5 	bl	800ba84 <vPortExitCritical>
				return pdPASS;
 800929a:	2301      	movs	r3, #1
 800929c:	e097      	b.n	80093ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d111      	bne.n	80092c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00a      	beq.n	80092c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	617b      	str	r3, [r7, #20]
}
 80092bc:	bf00      	nop
 80092be:	e7fe      	b.n	80092be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80092c0:	f002 fbe0 	bl	800ba84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092c4:	2300      	movs	r3, #0
 80092c6:	e082      	b.n	80093ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d106      	bne.n	80092dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092ce:	f107 030c 	add.w	r3, r7, #12
 80092d2:	4618      	mov	r0, r3
 80092d4:	f001 fa9e 	bl	800a814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092d8:	2301      	movs	r3, #1
 80092da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092dc:	f002 fbd2 	bl	800ba84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092e0:	f000 ffe4 	bl	800a2ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092e4:	f002 fb9e 	bl	800ba24 <vPortEnterCritical>
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092ee:	b25b      	sxtb	r3, r3
 80092f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092f4:	d103      	bne.n	80092fe <xQueueSemaphoreTake+0x13a>
 80092f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009304:	b25b      	sxtb	r3, r3
 8009306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800930a:	d103      	bne.n	8009314 <xQueueSemaphoreTake+0x150>
 800930c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009314:	f002 fbb6 	bl	800ba84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009318:	463a      	mov	r2, r7
 800931a:	f107 030c 	add.w	r3, r7, #12
 800931e:	4611      	mov	r1, r2
 8009320:	4618      	mov	r0, r3
 8009322:	f001 fa8d 	bl	800a840 <xTaskCheckForTimeOut>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d132      	bne.n	8009392 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800932c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800932e:	f000 f94f 	bl	80095d0 <prvIsQueueEmpty>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d026      	beq.n	8009386 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d109      	bne.n	8009354 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009340:	f002 fb70 	bl	800ba24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	4618      	mov	r0, r3
 800934a:	f001 fbef 	bl	800ab2c <xTaskPriorityInherit>
 800934e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009350:	f002 fb98 	bl	800ba84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009356:	3324      	adds	r3, #36	; 0x24
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	4611      	mov	r1, r2
 800935c:	4618      	mov	r0, r3
 800935e:	f001 f97f 	bl	800a660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009364:	f000 f8e2 	bl	800952c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009368:	f000 ffae 	bl	800a2c8 <xTaskResumeAll>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	f47f af68 	bne.w	8009244 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009374:	4b18      	ldr	r3, [pc, #96]	; (80093d8 <xQueueSemaphoreTake+0x214>)
 8009376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	e75e      	b.n	8009244 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009388:	f000 f8d0 	bl	800952c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800938c:	f000 ff9c 	bl	800a2c8 <xTaskResumeAll>
 8009390:	e758      	b.n	8009244 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009394:	f000 f8ca 	bl	800952c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009398:	f000 ff96 	bl	800a2c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800939c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800939e:	f000 f917 	bl	80095d0 <prvIsQueueEmpty>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f43f af4d 	beq.w	8009244 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80093aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00d      	beq.n	80093cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80093b0:	f002 fb38 	bl	800ba24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80093b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093b6:	f000 f811 	bl	80093dc <prvGetDisinheritPriorityAfterTimeout>
 80093ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80093bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093c2:	4618      	mov	r0, r3
 80093c4:	f001 fc88 	bl	800acd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80093c8:	f002 fb5c 	bl	800ba84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3738      	adds	r7, #56	; 0x38
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	e000ed04 	.word	0xe000ed04

080093dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d006      	beq.n	80093fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80093f6:	60fb      	str	r3, [r7, #12]
 80093f8:	e001      	b.n	80093fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80093fe:	68fb      	ldr	r3, [r7, #12]
	}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009418:	2300      	movs	r3, #0
 800941a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009420:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10d      	bne.n	8009446 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d14d      	bne.n	80094ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	4618      	mov	r0, r3
 8009438:	f001 fbe0 	bl	800abfc <xTaskPriorityDisinherit>
 800943c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	609a      	str	r2, [r3, #8]
 8009444:	e043      	b.n	80094ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d119      	bne.n	8009480 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6858      	ldr	r0, [r3, #4]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009454:	461a      	mov	r2, r3
 8009456:	68b9      	ldr	r1, [r7, #8]
 8009458:	f002 fe42 	bl	800c0e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009464:	441a      	add	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	429a      	cmp	r2, r3
 8009474:	d32b      	bcc.n	80094ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	605a      	str	r2, [r3, #4]
 800947e:	e026      	b.n	80094ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	68d8      	ldr	r0, [r3, #12]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009488:	461a      	mov	r2, r3
 800948a:	68b9      	ldr	r1, [r7, #8]
 800948c:	f002 fe28 	bl	800c0e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	68da      	ldr	r2, [r3, #12]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009498:	425b      	negs	r3, r3
 800949a:	441a      	add	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	68da      	ldr	r2, [r3, #12]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d207      	bcs.n	80094bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	689a      	ldr	r2, [r3, #8]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b4:	425b      	negs	r3, r3
 80094b6:	441a      	add	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d105      	bne.n	80094ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	3b01      	subs	r3, #1
 80094cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	1c5a      	adds	r2, r3, #1
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80094d6:	697b      	ldr	r3, [r7, #20]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d018      	beq.n	8009524 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68da      	ldr	r2, [r3, #12]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fa:	441a      	add	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68da      	ldr	r2, [r3, #12]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	429a      	cmp	r2, r3
 800950a:	d303      	bcc.n	8009514 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68d9      	ldr	r1, [r3, #12]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951c:	461a      	mov	r2, r3
 800951e:	6838      	ldr	r0, [r7, #0]
 8009520:	f002 fdde 	bl	800c0e0 <memcpy>
	}
}
 8009524:	bf00      	nop
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009534:	f002 fa76 	bl	800ba24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800953e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009540:	e011      	b.n	8009566 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	2b00      	cmp	r3, #0
 8009548:	d012      	beq.n	8009570 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	3324      	adds	r3, #36	; 0x24
 800954e:	4618      	mov	r0, r3
 8009550:	f001 f8d6 	bl	800a700 <xTaskRemoveFromEventList>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800955a:	f001 f9d3 	bl	800a904 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
 8009560:	3b01      	subs	r3, #1
 8009562:	b2db      	uxtb	r3, r3
 8009564:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800956a:	2b00      	cmp	r3, #0
 800956c:	dce9      	bgt.n	8009542 <prvUnlockQueue+0x16>
 800956e:	e000      	b.n	8009572 <prvUnlockQueue+0x46>
					break;
 8009570:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	22ff      	movs	r2, #255	; 0xff
 8009576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800957a:	f002 fa83 	bl	800ba84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800957e:	f002 fa51 	bl	800ba24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009588:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800958a:	e011      	b.n	80095b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d012      	beq.n	80095ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3310      	adds	r3, #16
 8009598:	4618      	mov	r0, r3
 800959a:	f001 f8b1 	bl	800a700 <xTaskRemoveFromEventList>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80095a4:	f001 f9ae 	bl	800a904 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
 80095aa:	3b01      	subs	r3, #1
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	dce9      	bgt.n	800958c <prvUnlockQueue+0x60>
 80095b8:	e000      	b.n	80095bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80095ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	22ff      	movs	r2, #255	; 0xff
 80095c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80095c4:	f002 fa5e 	bl	800ba84 <vPortExitCritical>
}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095d8:	f002 fa24 	bl	800ba24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d102      	bne.n	80095ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80095e4:	2301      	movs	r3, #1
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	e001      	b.n	80095ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095ee:	f002 fa49 	bl	800ba84 <vPortExitCritical>

	return xReturn;
 80095f2:	68fb      	ldr	r3, [r7, #12]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009604:	f002 fa0e 	bl	800ba24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009610:	429a      	cmp	r2, r3
 8009612:	d102      	bne.n	800961a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009614:	2301      	movs	r3, #1
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	e001      	b.n	800961e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800961a:	2300      	movs	r3, #0
 800961c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800961e:	f002 fa31 	bl	800ba84 <vPortExitCritical>

	return xReturn;
 8009622:	68fb      	ldr	r3, [r7, #12]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009636:	2300      	movs	r3, #0
 8009638:	60fb      	str	r3, [r7, #12]
 800963a:	e014      	b.n	8009666 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800963c:	4a0f      	ldr	r2, [pc, #60]	; (800967c <vQueueAddToRegistry+0x50>)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10b      	bne.n	8009660 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009648:	490c      	ldr	r1, [pc, #48]	; (800967c <vQueueAddToRegistry+0x50>)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009652:	4a0a      	ldr	r2, [pc, #40]	; (800967c <vQueueAddToRegistry+0x50>)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	00db      	lsls	r3, r3, #3
 8009658:	4413      	add	r3, r2
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800965e:	e006      	b.n	800966e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	3301      	adds	r3, #1
 8009664:	60fb      	str	r3, [r7, #12]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2b07      	cmp	r3, #7
 800966a:	d9e7      	bls.n	800963c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800966c:	bf00      	nop
 800966e:	bf00      	nop
 8009670:	3714      	adds	r7, #20
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	200009fc 	.word	0x200009fc

08009680 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009690:	f002 f9c8 	bl	800ba24 <vPortEnterCritical>
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800969a:	b25b      	sxtb	r3, r3
 800969c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096a0:	d103      	bne.n	80096aa <vQueueWaitForMessageRestricted+0x2a>
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096b0:	b25b      	sxtb	r3, r3
 80096b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096b6:	d103      	bne.n	80096c0 <vQueueWaitForMessageRestricted+0x40>
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096c0:	f002 f9e0 	bl	800ba84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d106      	bne.n	80096da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	3324      	adds	r3, #36	; 0x24
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	68b9      	ldr	r1, [r7, #8]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f000 ffe7 	bl	800a6a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80096da:	6978      	ldr	r0, [r7, #20]
 80096dc:	f7ff ff26 	bl	800952c <prvUnlockQueue>
	}
 80096e0:	bf00      	nop
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b08c      	sub	sp, #48	; 0x30
 80096ec:	af02      	add	r7, sp, #8
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d110      	bne.n	800971c <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80096fa:	2301      	movs	r3, #1
 80096fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2b04      	cmp	r3, #4
 8009704:	d81b      	bhi.n	800973e <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	61fb      	str	r3, [r7, #28]
}
 8009718:	bf00      	nop
 800971a:	e7fe      	b.n	800971a <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10a      	bne.n	800973e <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	61bb      	str	r3, [r7, #24]
}
 800973a:	bf00      	nop
 800973c:	e7fe      	b.n	800973c <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	429a      	cmp	r2, r3
 8009744:	d90a      	bls.n	800975c <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	617b      	str	r3, [r7, #20]
}
 8009758:	bf00      	nop
 800975a:	e7fe      	b.n	800975a <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8009762:	2301      	movs	r3, #1
 8009764:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3301      	adds	r3, #1
 800976a:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	3324      	adds	r3, #36	; 0x24
 8009770:	4618      	mov	r0, r3
 8009772:	f002 fa79 	bl	800bc68 <pvPortMalloc>
 8009776:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00a      	beq.n	8009794 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	6a38      	ldr	r0, [r7, #32]
 8009790:	f000 fafd 	bl	8009d8e <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8009794:	6a3b      	ldr	r3, [r7, #32]
	}
 8009796:	4618      	mov	r0, r3
 8009798:	3728      	adds	r7, #40	; 0x28
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800979e:	b480      	push	{r7}
 80097a0:	b087      	sub	sp, #28
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10a      	bne.n	80097c6 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	60fb      	str	r3, [r7, #12]
}
 80097c2:	bf00      	nop
 80097c4:	e7fe      	b.n	80097c4 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	689a      	ldr	r2, [r3, #8]
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4413      	add	r3, r2
 80097d0:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	3b01      	subs	r3, #1
 80097e0:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d304      	bcc.n	80097f6 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 80097f6:	697b      	ldr	r3, [r7, #20]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	371c      	adds	r7, #28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b090      	sub	sp, #64	; 0x40
 8009808:	af02      	add	r7, sp, #8
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8009816:	2300      	movs	r3, #0
 8009818:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <xStreamBufferSend+0x36>
	__asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009836:	bf00      	nop
 8009838:	e7fe      	b.n	8009838 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10a      	bne.n	8009856 <xStreamBufferSend+0x52>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	623b      	str	r3, [r7, #32]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009858:	7f1b      	ldrb	r3, [r3, #28]
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	d011      	beq.n	8009886 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009864:	3304      	adds	r3, #4
 8009866:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8009868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	429a      	cmp	r2, r3
 800986e:	d80a      	bhi.n	8009886 <xStreamBufferSend+0x82>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	61fb      	str	r3, [r7, #28]
}
 8009882:	bf00      	nop
 8009884:	e7fe      	b.n	8009884 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d03e      	beq.n	800990a <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800988c:	f107 0310 	add.w	r3, r7, #16
 8009890:	4618      	mov	r0, r3
 8009892:	f000 ff99 	bl	800a7c8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8009896:	f002 f8c5 	bl	800ba24 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800989a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800989c:	f7ff ff7f 	bl	800979e <xStreamBufferSpacesAvailable>
 80098a0:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 80098a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d217      	bcs.n	80098da <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 80098aa:	2000      	movs	r0, #0
 80098ac:	f001 fbc8 	bl	800b040 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 80098b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00a      	beq.n	80098ce <xStreamBufferSend+0xca>
	__asm volatile
 80098b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098bc:	f383 8811 	msr	BASEPRI, r3
 80098c0:	f3bf 8f6f 	isb	sy
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	61bb      	str	r3, [r7, #24]
}
 80098ca:	bf00      	nop
 80098cc:	e7fe      	b.n	80098cc <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 80098ce:	f001 f8ff 	bl	800aad0 <xTaskGetCurrentTaskHandle>
 80098d2:	4602      	mov	r2, r0
 80098d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d6:	615a      	str	r2, [r3, #20]
 80098d8:	e002      	b.n	80098e0 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 80098da:	f002 f8d3 	bl	800ba84 <vPortExitCritical>
					break;
 80098de:	e014      	b.n	800990a <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 80098e0:	f002 f8d0 	bl	800ba84 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	2200      	movs	r2, #0
 80098e8:	2100      	movs	r1, #0
 80098ea:	2000      	movs	r0, #0
 80098ec:	f001 fa8a 	bl	800ae04 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	2200      	movs	r2, #0
 80098f4:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 80098f6:	463a      	mov	r2, r7
 80098f8:	f107 0310 	add.w	r3, r7, #16
 80098fc:	4611      	mov	r1, r2
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 ff9e 	bl	800a840 <xTaskCheckForTimeOut>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d0c5      	beq.n	8009896 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800990a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800990c:	2b00      	cmp	r3, #0
 800990e:	d103      	bne.n	8009918 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009912:	f7ff ff44 	bl	800979e <xStreamBufferSpacesAvailable>
 8009916:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8009918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	68b9      	ldr	r1, [r7, #8]
 8009922:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009924:	f000 f823 	bl	800996e <prvWriteMessageToBuffer>
 8009928:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992c:	2b00      	cmp	r3, #0
 800992e:	d019      	beq.n	8009964 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8009930:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009932:	f000 fa0c 	bl	8009d4e <prvBytesInBuffer>
 8009936:	4602      	mov	r2, r0
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	429a      	cmp	r2, r3
 800993e:	d311      	bcc.n	8009964 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8009940:	f000 fcb4 	bl	800a2ac <vTaskSuspendAll>
 8009944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d009      	beq.n	8009960 <xStreamBufferSend+0x15c>
 800994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994e:	6918      	ldr	r0, [r3, #16]
 8009950:	2300      	movs	r3, #0
 8009952:	2200      	movs	r2, #0
 8009954:	2100      	movs	r1, #0
 8009956:	f001 fab5 	bl	800aec4 <xTaskGenericNotify>
 800995a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995c:	2200      	movs	r2, #0
 800995e:	611a      	str	r2, [r3, #16]
 8009960:	f000 fcb2 	bl	800a2c8 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8009964:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009966:	4618      	mov	r0, r3
 8009968:	3738      	adds	r7, #56	; 0x38
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b086      	sub	sp, #24
 8009972:	af00      	add	r7, sp, #0
 8009974:	60f8      	str	r0, [r7, #12]
 8009976:	60b9      	str	r1, [r7, #8]
 8009978:	607a      	str	r2, [r7, #4]
 800997a:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d102      	bne.n	8009988 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8009982:	2300      	movs	r3, #0
 8009984:	617b      	str	r3, [r7, #20]
 8009986:	e01d      	b.n	80099c4 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	7f1b      	ldrb	r3, [r3, #28]
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	d108      	bne.n	80099a6 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8009994:	2301      	movs	r3, #1
 8009996:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	4293      	cmp	r3, r2
 800999e:	bf28      	it	cs
 80099a0:	4613      	movcs	r3, r2
 80099a2:	607b      	str	r3, [r7, #4]
 80099a4:	e00e      	b.n	80099c4 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80099a6:	683a      	ldr	r2, [r7, #0]
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d308      	bcc.n	80099c0 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80099ae:	2301      	movs	r3, #1
 80099b0:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80099b2:	1d3b      	adds	r3, r7, #4
 80099b4:	2204      	movs	r2, #4
 80099b6:	4619      	mov	r1, r3
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 f8dc 	bl	8009b76 <prvWriteBytesToBuffer>
 80099be:	e001      	b.n	80099c4 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80099c0:	2300      	movs	r3, #0
 80099c2:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d007      	beq.n	80099da <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	461a      	mov	r2, r3
 80099ce:	68b9      	ldr	r1, [r7, #8]
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 f8d0 	bl	8009b76 <prvWriteBytesToBuffer>
 80099d6:	6138      	str	r0, [r7, #16]
 80099d8:	e001      	b.n	80099de <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80099da:	2300      	movs	r3, #0
 80099dc:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80099de:	693b      	ldr	r3, [r7, #16]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3718      	adds	r7, #24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08e      	sub	sp, #56	; 0x38
 80099ec:	af02      	add	r7, sp, #8
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
 80099f4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80099fa:	2300      	movs	r3, #0
 80099fc:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10a      	bne.n	8009a1a <xStreamBufferReceive+0x32>
	__asm volatile
 8009a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	61fb      	str	r3, [r7, #28]
}
 8009a16:	bf00      	nop
 8009a18:	e7fe      	b.n	8009a18 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <xStreamBufferReceive+0x4e>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	61bb      	str	r3, [r7, #24]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	7f1b      	ldrb	r3, [r3, #28]
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009a42:	2304      	movs	r3, #4
 8009a44:	627b      	str	r3, [r7, #36]	; 0x24
 8009a46:	e001      	b.n	8009a4c <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d034      	beq.n	8009abc <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8009a52:	f001 ffe7 	bl	800ba24 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009a56:	6a38      	ldr	r0, [r7, #32]
 8009a58:	f000 f979 	bl	8009d4e <prvBytesInBuffer>
 8009a5c:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d816      	bhi.n	8009a94 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8009a66:	2000      	movs	r0, #0
 8009a68:	f001 faea 	bl	800b040 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00a      	beq.n	8009a8a <xStreamBufferReceive+0xa2>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	617b      	str	r3, [r7, #20]
}
 8009a86:	bf00      	nop
 8009a88:	e7fe      	b.n	8009a88 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8009a8a:	f001 f821 	bl	800aad0 <xTaskGetCurrentTaskHandle>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009a94:	f001 fff6 	bl	800ba84 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d811      	bhi.n	8009ac4 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	f001 f9ac 	bl	800ae04 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009ab2:	6a38      	ldr	r0, [r7, #32]
 8009ab4:	f000 f94b 	bl	8009d4e <prvBytesInBuffer>
 8009ab8:	62b8      	str	r0, [r7, #40]	; 0x28
 8009aba:	e003      	b.n	8009ac4 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009abc:	6a38      	ldr	r0, [r7, #32]
 8009abe:	f000 f946 	bl	8009d4e <prvBytesInBuffer>
 8009ac2:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8009ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d91d      	bls.n	8009b08 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	68b9      	ldr	r1, [r7, #8]
 8009ad6:	6a38      	ldr	r0, [r7, #32]
 8009ad8:	f000 f81b 	bl	8009b12 <prvReadMessageFromBuffer>
 8009adc:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8009ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d011      	beq.n	8009b08 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8009ae4:	f000 fbe2 	bl	800a2ac <vTaskSuspendAll>
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d009      	beq.n	8009b04 <xStreamBufferReceive+0x11c>
 8009af0:	6a3b      	ldr	r3, [r7, #32]
 8009af2:	6958      	ldr	r0, [r3, #20]
 8009af4:	2300      	movs	r3, #0
 8009af6:	2200      	movs	r2, #0
 8009af8:	2100      	movs	r1, #0
 8009afa:	f001 f9e3 	bl	800aec4 <xTaskGenericNotify>
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	2200      	movs	r2, #0
 8009b02:	615a      	str	r2, [r3, #20]
 8009b04:	f000 fbe0 	bl	800a2c8 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3730      	adds	r7, #48	; 0x30
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b088      	sub	sp, #32
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	607a      	str	r2, [r7, #4]
 8009b1e:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d019      	beq.n	8009b5a <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8009b2c:	f107 0110 	add.w	r1, r7, #16
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f000 f890 	bl	8009c5a <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8009b46:	69fa      	ldr	r2, [r7, #28]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d907      	bls.n	8009b5e <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	69ba      	ldr	r2, [r7, #24]
 8009b52:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	61fb      	str	r3, [r7, #28]
 8009b58:	e001      	b.n	8009b5e <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	69fa      	ldr	r2, [r7, #28]
 8009b62:	68b9      	ldr	r1, [r7, #8]
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 f878 	bl	8009c5a <prvReadBytesFromBuffer>
 8009b6a:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8009b6c:	697b      	ldr	r3, [r7, #20]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3720      	adds	r7, #32
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b08a      	sub	sp, #40	; 0x28
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	60f8      	str	r0, [r7, #12]
 8009b7e:	60b9      	str	r1, [r7, #8]
 8009b80:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	61fb      	str	r3, [r7, #28]
}
 8009b9a:	bf00      	nop
 8009b9c:	e7fe      	b.n	8009b9c <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	689a      	ldr	r2, [r3, #8]
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	bf28      	it	cs
 8009bb2:	4613      	movcs	r3, r2
 8009bb4:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8009bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	441a      	add	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d90a      	bls.n	8009bda <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	61bb      	str	r3, [r7, #24]
}
 8009bd6:	bf00      	nop
 8009bd8:	e7fe      	b.n	8009bd8 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	699a      	ldr	r2, [r3, #24]
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	4413      	add	r3, r2
 8009be2:	6a3a      	ldr	r2, [r7, #32]
 8009be4:	68b9      	ldr	r1, [r7, #8]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f002 fa7a 	bl	800c0e0 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d91c      	bls.n	8009c2e <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	1ad2      	subs	r2, r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d90a      	bls.n	8009c18 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	617b      	str	r3, [r7, #20]
}
 8009c14:	bf00      	nop
 8009c16:	e7fe      	b.n	8009c16 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6998      	ldr	r0, [r3, #24]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	18d1      	adds	r1, r2, r3
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	461a      	mov	r2, r3
 8009c2a:	f002 fa59 	bl	800c0e0 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8009c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4413      	add	r3, r2
 8009c34:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d304      	bcc.n	8009c4a <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c4e:	605a      	str	r2, [r3, #4]

	return xCount;
 8009c50:	687b      	ldr	r3, [r7, #4]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3728      	adds	r7, #40	; 0x28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b08a      	sub	sp, #40	; 0x28
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
 8009c66:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	bf28      	it	cs
 8009c70:	4613      	movcs	r3, r2
 8009c72:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d064      	beq.n	8009d44 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	689a      	ldr	r2, [r3, #8]
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	6a3a      	ldr	r2, [r7, #32]
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	bf28      	it	cs
 8009c8e:	4613      	movcs	r3, r2
 8009c90:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8009c92:	69fa      	ldr	r2, [r7, #28]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d90a      	bls.n	8009cb0 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	61bb      	str	r3, [r7, #24]
}
 8009cac:	bf00      	nop
 8009cae:	e7fe      	b.n	8009cae <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8009cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	441a      	add	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d90a      	bls.n	8009cd4 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	617b      	str	r3, [r7, #20]
}
 8009cd0:	bf00      	nop
 8009cd2:	e7fe      	b.n	8009cd2 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	699a      	ldr	r2, [r3, #24]
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	4413      	add	r3, r2
 8009cdc:	69fa      	ldr	r2, [r7, #28]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	68b8      	ldr	r0, [r7, #8]
 8009ce2:	f002 f9fd 	bl	800c0e0 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8009ce6:	6a3a      	ldr	r2, [r7, #32]
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d919      	bls.n	8009d22 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8009cee:	6a3a      	ldr	r2, [r7, #32]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d90a      	bls.n	8009d0c <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8009cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfa:	f383 8811 	msr	BASEPRI, r3
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	613b      	str	r3, [r7, #16]
}
 8009d08:	bf00      	nop
 8009d0a:	e7fe      	b.n	8009d0a <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	18d0      	adds	r0, r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6999      	ldr	r1, [r3, #24]
 8009d16:	6a3a      	ldr	r2, [r7, #32]
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	f002 f9df 	bl	800c0e0 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8009d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d24:	6a3b      	ldr	r3, [r7, #32]
 8009d26:	4413      	add	r3, r2
 8009d28:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d304      	bcc.n	8009d3e <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d42:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8009d44:	6a3b      	ldr	r3, [r7, #32]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3728      	adds	r7, #40	; 0x28
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b085      	sub	sp, #20
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	689a      	ldr	r2, [r3, #8]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	4413      	add	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d304      	bcc.n	8009d80 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8009d80:	68fb      	ldr	r3, [r7, #12]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3714      	adds	r7, #20
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b086      	sub	sp, #24
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	60f8      	str	r0, [r7, #12]
 8009d96:	60b9      	str	r1, [r7, #8]
 8009d98:	607a      	str	r2, [r7, #4]
 8009d9a:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8009d9c:	2355      	movs	r3, #85	; 0x55
 8009d9e:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	6979      	ldr	r1, [r7, #20]
 8009da4:	68b8      	ldr	r0, [r7, #8]
 8009da6:	f002 f9a9 	bl	800c0fc <memset>
 8009daa:	4602      	mov	r2, r0
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d00a      	beq.n	8009dc8 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8009db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	613b      	str	r3, [r7, #16]
}
 8009dc4:	bf00      	nop
 8009dc6:	e7fe      	b.n	8009dc6 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8009dc8:	2224      	movs	r2, #36	; 0x24
 8009dca:	2100      	movs	r1, #0
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f002 f995 	bl	800c0fc <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009dea:	771a      	strb	r2, [r3, #28]
}
 8009dec:	bf00      	nop
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b08e      	sub	sp, #56	; 0x38
 8009df8:	af04      	add	r7, sp, #16
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
 8009e00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10a      	bne.n	8009e1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	623b      	str	r3, [r7, #32]
}
 8009e1a:	bf00      	nop
 8009e1c:	e7fe      	b.n	8009e1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10a      	bne.n	8009e3a <xTaskCreateStatic+0x46>
	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	61fb      	str	r3, [r7, #28]
}
 8009e36:	bf00      	nop
 8009e38:	e7fe      	b.n	8009e38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e3a:	23bc      	movs	r3, #188	; 0xbc
 8009e3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	2bbc      	cmp	r3, #188	; 0xbc
 8009e42:	d00a      	beq.n	8009e5a <xTaskCreateStatic+0x66>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	61bb      	str	r3, [r7, #24]
}
 8009e56:	bf00      	nop
 8009e58:	e7fe      	b.n	8009e58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d01e      	beq.n	8009ea0 <xTaskCreateStatic+0xac>
 8009e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d01b      	beq.n	8009ea0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e74:	2202      	movs	r2, #2
 8009e76:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	9303      	str	r3, [sp, #12]
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	9302      	str	r3, [sp, #8]
 8009e82:	f107 0314 	add.w	r3, r7, #20
 8009e86:	9301      	str	r3, [sp, #4]
 8009e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	68b9      	ldr	r1, [r7, #8]
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f000 f850 	bl	8009f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e9a:	f000 f8f3 	bl	800a084 <prvAddNewTaskToReadyList>
 8009e9e:	e001      	b.n	8009ea4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ea4:	697b      	ldr	r3, [r7, #20]
	}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3728      	adds	r7, #40	; 0x28
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b08c      	sub	sp, #48	; 0x30
 8009eb2:	af04      	add	r7, sp, #16
 8009eb4:	60f8      	str	r0, [r7, #12]
 8009eb6:	60b9      	str	r1, [r7, #8]
 8009eb8:	603b      	str	r3, [r7, #0]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ebe:	88fb      	ldrh	r3, [r7, #6]
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 fed0 	bl	800bc68 <pvPortMalloc>
 8009ec8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00e      	beq.n	8009eee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ed0:	20bc      	movs	r0, #188	; 0xbc
 8009ed2:	f001 fec9 	bl	800bc68 <pvPortMalloc>
 8009ed6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d003      	beq.n	8009ee6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8009ee4:	e005      	b.n	8009ef2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ee6:	6978      	ldr	r0, [r7, #20]
 8009ee8:	f001 ff8a 	bl	800be00 <vPortFree>
 8009eec:	e001      	b.n	8009ef2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d017      	beq.n	8009f28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f00:	88fa      	ldrh	r2, [r7, #6]
 8009f02:	2300      	movs	r3, #0
 8009f04:	9303      	str	r3, [sp, #12]
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	9302      	str	r3, [sp, #8]
 8009f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0c:	9301      	str	r3, [sp, #4]
 8009f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	68b9      	ldr	r1, [r7, #8]
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f000 f80e 	bl	8009f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f1c:	69f8      	ldr	r0, [r7, #28]
 8009f1e:	f000 f8b1 	bl	800a084 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009f22:	2301      	movs	r3, #1
 8009f24:	61bb      	str	r3, [r7, #24]
 8009f26:	e002      	b.n	8009f2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009f2e:	69bb      	ldr	r3, [r7, #24]
	}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3720      	adds	r7, #32
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b088      	sub	sp, #32
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
 8009f44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	461a      	mov	r2, r3
 8009f50:	21a5      	movs	r1, #165	; 0xa5
 8009f52:	f002 f8d3 	bl	800c0fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f60:	3b01      	subs	r3, #1
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	f023 0307 	bic.w	r3, r3, #7
 8009f6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	f003 0307 	and.w	r3, r3, #7
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00a      	beq.n	8009f90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	617b      	str	r3, [r7, #20]
}
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d01f      	beq.n	8009fd6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f96:	2300      	movs	r3, #0
 8009f98:	61fb      	str	r3, [r7, #28]
 8009f9a:	e012      	b.n	8009fc2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f9c:	68ba      	ldr	r2, [r7, #8]
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	7819      	ldrb	r1, [r3, #0]
 8009fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	4413      	add	r3, r2
 8009faa:	3334      	adds	r3, #52	; 0x34
 8009fac:	460a      	mov	r2, r1
 8009fae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d006      	beq.n	8009fca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	61fb      	str	r3, [r7, #28]
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	2b0f      	cmp	r3, #15
 8009fc6:	d9e9      	bls.n	8009f9c <prvInitialiseNewTask+0x64>
 8009fc8:	e000      	b.n	8009fcc <prvInitialiseNewTask+0x94>
			{
				break;
 8009fca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fd4:	e003      	b.n	8009fde <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe0:	2b37      	cmp	r3, #55	; 0x37
 8009fe2:	d901      	bls.n	8009fe8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009fe4:	2337      	movs	r3, #55	; 0x37
 8009fe6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ff2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fe fbd6 	bl	80087b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	3318      	adds	r3, #24
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fe fbd1 	bl	80087b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a012:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a016:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a022:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	2200      	movs	r2, #0
 800a028:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	3354      	adds	r3, #84	; 0x54
 800a038:	2260      	movs	r2, #96	; 0x60
 800a03a:	2100      	movs	r1, #0
 800a03c:	4618      	mov	r0, r3
 800a03e:	f002 f85d 	bl	800c0fc <memset>
 800a042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a044:	4a0c      	ldr	r2, [pc, #48]	; (800a078 <prvInitialiseNewTask+0x140>)
 800a046:	659a      	str	r2, [r3, #88]	; 0x58
 800a048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04a:	4a0c      	ldr	r2, [pc, #48]	; (800a07c <prvInitialiseNewTask+0x144>)
 800a04c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a050:	4a0b      	ldr	r2, [pc, #44]	; (800a080 <prvInitialiseNewTask+0x148>)
 800a052:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	68f9      	ldr	r1, [r7, #12]
 800a058:	69b8      	ldr	r0, [r7, #24]
 800a05a:	f001 fbb9 	bl	800b7d0 <pxPortInitialiseStack>
 800a05e:	4602      	mov	r2, r0
 800a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a062:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a06e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a070:	bf00      	nop
 800a072:	3720      	adds	r7, #32
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	0800d228 	.word	0x0800d228
 800a07c:	0800d248 	.word	0x0800d248
 800a080:	0800d208 	.word	0x0800d208

0800a084 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a08c:	f001 fcca 	bl	800ba24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a090:	4b2d      	ldr	r3, [pc, #180]	; (800a148 <prvAddNewTaskToReadyList+0xc4>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3301      	adds	r3, #1
 800a096:	4a2c      	ldr	r2, [pc, #176]	; (800a148 <prvAddNewTaskToReadyList+0xc4>)
 800a098:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a09a:	4b2c      	ldr	r3, [pc, #176]	; (800a14c <prvAddNewTaskToReadyList+0xc8>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d109      	bne.n	800a0b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a0a2:	4a2a      	ldr	r2, [pc, #168]	; (800a14c <prvAddNewTaskToReadyList+0xc8>)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a0a8:	4b27      	ldr	r3, [pc, #156]	; (800a148 <prvAddNewTaskToReadyList+0xc4>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d110      	bne.n	800a0d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a0b0:	f000 fc4c 	bl	800a94c <prvInitialiseTaskLists>
 800a0b4:	e00d      	b.n	800a0d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a0b6:	4b26      	ldr	r3, [pc, #152]	; (800a150 <prvAddNewTaskToReadyList+0xcc>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d109      	bne.n	800a0d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a0be:	4b23      	ldr	r3, [pc, #140]	; (800a14c <prvAddNewTaskToReadyList+0xc8>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d802      	bhi.n	800a0d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a0cc:	4a1f      	ldr	r2, [pc, #124]	; (800a14c <prvAddNewTaskToReadyList+0xc8>)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a0d2:	4b20      	ldr	r3, [pc, #128]	; (800a154 <prvAddNewTaskToReadyList+0xd0>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	4a1e      	ldr	r2, [pc, #120]	; (800a154 <prvAddNewTaskToReadyList+0xd0>)
 800a0da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a0dc:	4b1d      	ldr	r3, [pc, #116]	; (800a154 <prvAddNewTaskToReadyList+0xd0>)
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e8:	4b1b      	ldr	r3, [pc, #108]	; (800a158 <prvAddNewTaskToReadyList+0xd4>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d903      	bls.n	800a0f8 <prvAddNewTaskToReadyList+0x74>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f4:	4a18      	ldr	r2, [pc, #96]	; (800a158 <prvAddNewTaskToReadyList+0xd4>)
 800a0f6:	6013      	str	r3, [r2, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4a15      	ldr	r2, [pc, #84]	; (800a15c <prvAddNewTaskToReadyList+0xd8>)
 800a106:	441a      	add	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	3304      	adds	r3, #4
 800a10c:	4619      	mov	r1, r3
 800a10e:	4610      	mov	r0, r2
 800a110:	f7fe fb5b 	bl	80087ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a114:	f001 fcb6 	bl	800ba84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a118:	4b0d      	ldr	r3, [pc, #52]	; (800a150 <prvAddNewTaskToReadyList+0xcc>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00e      	beq.n	800a13e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a120:	4b0a      	ldr	r3, [pc, #40]	; (800a14c <prvAddNewTaskToReadyList+0xc8>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d207      	bcs.n	800a13e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a12e:	4b0c      	ldr	r3, [pc, #48]	; (800a160 <prvAddNewTaskToReadyList+0xdc>)
 800a130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a134:	601a      	str	r2, [r3, #0]
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a13e:	bf00      	nop
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	20000f10 	.word	0x20000f10
 800a14c:	20000a3c 	.word	0x20000a3c
 800a150:	20000f1c 	.word	0x20000f1c
 800a154:	20000f2c 	.word	0x20000f2c
 800a158:	20000f18 	.word	0x20000f18
 800a15c:	20000a40 	.word	0x20000a40
 800a160:	e000ed04 	.word	0xe000ed04

0800a164 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a16c:	2300      	movs	r3, #0
 800a16e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d017      	beq.n	800a1a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a176:	4b13      	ldr	r3, [pc, #76]	; (800a1c4 <vTaskDelay+0x60>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00a      	beq.n	800a194 <vTaskDelay+0x30>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	60bb      	str	r3, [r7, #8]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a194:	f000 f88a 	bl	800a2ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a198:	2100      	movs	r1, #0
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 ff76 	bl	800b08c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1a0:	f000 f892 	bl	800a2c8 <xTaskResumeAll>
 800a1a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d107      	bne.n	800a1bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a1ac:	4b06      	ldr	r3, [pc, #24]	; (800a1c8 <vTaskDelay+0x64>)
 800a1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b2:	601a      	str	r2, [r3, #0]
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1bc:	bf00      	nop
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	20000f38 	.word	0x20000f38
 800a1c8:	e000ed04 	.word	0xe000ed04

0800a1cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08a      	sub	sp, #40	; 0x28
 800a1d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a1da:	463a      	mov	r2, r7
 800a1dc:	1d39      	adds	r1, r7, #4
 800a1de:	f107 0308 	add.w	r3, r7, #8
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fe fa90 	bl	8008708 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	9202      	str	r2, [sp, #8]
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	460a      	mov	r2, r1
 800a1fa:	4924      	ldr	r1, [pc, #144]	; (800a28c <vTaskStartScheduler+0xc0>)
 800a1fc:	4824      	ldr	r0, [pc, #144]	; (800a290 <vTaskStartScheduler+0xc4>)
 800a1fe:	f7ff fdf9 	bl	8009df4 <xTaskCreateStatic>
 800a202:	4603      	mov	r3, r0
 800a204:	4a23      	ldr	r2, [pc, #140]	; (800a294 <vTaskStartScheduler+0xc8>)
 800a206:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a208:	4b22      	ldr	r3, [pc, #136]	; (800a294 <vTaskStartScheduler+0xc8>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a210:	2301      	movs	r3, #1
 800a212:	617b      	str	r3, [r7, #20]
 800a214:	e001      	b.n	800a21a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a216:	2300      	movs	r3, #0
 800a218:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d102      	bne.n	800a226 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a220:	f000 ff88 	bl	800b134 <xTimerCreateTimerTask>
 800a224:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d11b      	bne.n	800a264 <vTaskStartScheduler+0x98>
	__asm volatile
 800a22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	613b      	str	r3, [r7, #16]
}
 800a23e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a240:	4b15      	ldr	r3, [pc, #84]	; (800a298 <vTaskStartScheduler+0xcc>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3354      	adds	r3, #84	; 0x54
 800a246:	4a15      	ldr	r2, [pc, #84]	; (800a29c <vTaskStartScheduler+0xd0>)
 800a248:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a24a:	4b15      	ldr	r3, [pc, #84]	; (800a2a0 <vTaskStartScheduler+0xd4>)
 800a24c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a250:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a252:	4b14      	ldr	r3, [pc, #80]	; (800a2a4 <vTaskStartScheduler+0xd8>)
 800a254:	2201      	movs	r2, #1
 800a256:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a258:	4b13      	ldr	r3, [pc, #76]	; (800a2a8 <vTaskStartScheduler+0xdc>)
 800a25a:	2200      	movs	r2, #0
 800a25c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a25e:	f001 fb3f 	bl	800b8e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a262:	e00e      	b.n	800a282 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a26a:	d10a      	bne.n	800a282 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	60fb      	str	r3, [r7, #12]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <vTaskStartScheduler+0xb4>
}
 800a282:	bf00      	nop
 800a284:	3718      	adds	r7, #24
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	0800d01c 	.word	0x0800d01c
 800a290:	0800a91d 	.word	0x0800a91d
 800a294:	20000f34 	.word	0x20000f34
 800a298:	20000a3c 	.word	0x20000a3c
 800a29c:	20000018 	.word	0x20000018
 800a2a0:	20000f30 	.word	0x20000f30
 800a2a4:	20000f1c 	.word	0x20000f1c
 800a2a8:	20000f14 	.word	0x20000f14

0800a2ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2b0:	4b04      	ldr	r3, [pc, #16]	; (800a2c4 <vTaskSuspendAll+0x18>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	4a03      	ldr	r2, [pc, #12]	; (800a2c4 <vTaskSuspendAll+0x18>)
 800a2b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2ba:	bf00      	nop
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	20000f38 	.word	0x20000f38

0800a2c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2d6:	4b42      	ldr	r3, [pc, #264]	; (800a3e0 <xTaskResumeAll+0x118>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10a      	bne.n	800a2f4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	603b      	str	r3, [r7, #0]
}
 800a2f0:	bf00      	nop
 800a2f2:	e7fe      	b.n	800a2f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a2f4:	f001 fb96 	bl	800ba24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a2f8:	4b39      	ldr	r3, [pc, #228]	; (800a3e0 <xTaskResumeAll+0x118>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	4a38      	ldr	r2, [pc, #224]	; (800a3e0 <xTaskResumeAll+0x118>)
 800a300:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a302:	4b37      	ldr	r3, [pc, #220]	; (800a3e0 <xTaskResumeAll+0x118>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d162      	bne.n	800a3d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a30a:	4b36      	ldr	r3, [pc, #216]	; (800a3e4 <xTaskResumeAll+0x11c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d05e      	beq.n	800a3d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a312:	e02f      	b.n	800a374 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a314:	4b34      	ldr	r3, [pc, #208]	; (800a3e8 <xTaskResumeAll+0x120>)
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	3318      	adds	r3, #24
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe faaf 	bl	8008884 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	3304      	adds	r3, #4
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe faaa 	bl	8008884 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a334:	4b2d      	ldr	r3, [pc, #180]	; (800a3ec <xTaskResumeAll+0x124>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d903      	bls.n	800a344 <xTaskResumeAll+0x7c>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	4a2a      	ldr	r2, [pc, #168]	; (800a3ec <xTaskResumeAll+0x124>)
 800a342:	6013      	str	r3, [r2, #0]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a348:	4613      	mov	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4a27      	ldr	r2, [pc, #156]	; (800a3f0 <xTaskResumeAll+0x128>)
 800a352:	441a      	add	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3304      	adds	r3, #4
 800a358:	4619      	mov	r1, r3
 800a35a:	4610      	mov	r0, r2
 800a35c:	f7fe fa35 	bl	80087ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a364:	4b23      	ldr	r3, [pc, #140]	; (800a3f4 <xTaskResumeAll+0x12c>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d302      	bcc.n	800a374 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a36e:	4b22      	ldr	r3, [pc, #136]	; (800a3f8 <xTaskResumeAll+0x130>)
 800a370:	2201      	movs	r2, #1
 800a372:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a374:	4b1c      	ldr	r3, [pc, #112]	; (800a3e8 <xTaskResumeAll+0x120>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1cb      	bne.n	800a314 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a382:	f000 fb85 	bl	800aa90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a386:	4b1d      	ldr	r3, [pc, #116]	; (800a3fc <xTaskResumeAll+0x134>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d010      	beq.n	800a3b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a392:	f000 f847 	bl	800a424 <xTaskIncrementTick>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a39c:	4b16      	ldr	r3, [pc, #88]	; (800a3f8 <xTaskResumeAll+0x130>)
 800a39e:	2201      	movs	r2, #1
 800a3a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1f1      	bne.n	800a392 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a3ae:	4b13      	ldr	r3, [pc, #76]	; (800a3fc <xTaskResumeAll+0x134>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3b4:	4b10      	ldr	r3, [pc, #64]	; (800a3f8 <xTaskResumeAll+0x130>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d009      	beq.n	800a3d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3c0:	4b0f      	ldr	r3, [pc, #60]	; (800a400 <xTaskResumeAll+0x138>)
 800a3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3d0:	f001 fb58 	bl	800ba84 <vPortExitCritical>

	return xAlreadyYielded;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	20000f38 	.word	0x20000f38
 800a3e4:	20000f10 	.word	0x20000f10
 800a3e8:	20000ed0 	.word	0x20000ed0
 800a3ec:	20000f18 	.word	0x20000f18
 800a3f0:	20000a40 	.word	0x20000a40
 800a3f4:	20000a3c 	.word	0x20000a3c
 800a3f8:	20000f24 	.word	0x20000f24
 800a3fc:	20000f20 	.word	0x20000f20
 800a400:	e000ed04 	.word	0xe000ed04

0800a404 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a40a:	4b05      	ldr	r3, [pc, #20]	; (800a420 <xTaskGetTickCount+0x1c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a410:	687b      	ldr	r3, [r7, #4]
}
 800a412:	4618      	mov	r0, r3
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	20000f14 	.word	0x20000f14

0800a424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a42a:	2300      	movs	r3, #0
 800a42c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a42e:	4b4f      	ldr	r3, [pc, #316]	; (800a56c <xTaskIncrementTick+0x148>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	f040 808f 	bne.w	800a556 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a438:	4b4d      	ldr	r3, [pc, #308]	; (800a570 <xTaskIncrementTick+0x14c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3301      	adds	r3, #1
 800a43e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a440:	4a4b      	ldr	r2, [pc, #300]	; (800a570 <xTaskIncrementTick+0x14c>)
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d120      	bne.n	800a48e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a44c:	4b49      	ldr	r3, [pc, #292]	; (800a574 <xTaskIncrementTick+0x150>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <xTaskIncrementTick+0x48>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	603b      	str	r3, [r7, #0]
}
 800a468:	bf00      	nop
 800a46a:	e7fe      	b.n	800a46a <xTaskIncrementTick+0x46>
 800a46c:	4b41      	ldr	r3, [pc, #260]	; (800a574 <xTaskIncrementTick+0x150>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	60fb      	str	r3, [r7, #12]
 800a472:	4b41      	ldr	r3, [pc, #260]	; (800a578 <xTaskIncrementTick+0x154>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a3f      	ldr	r2, [pc, #252]	; (800a574 <xTaskIncrementTick+0x150>)
 800a478:	6013      	str	r3, [r2, #0]
 800a47a:	4a3f      	ldr	r2, [pc, #252]	; (800a578 <xTaskIncrementTick+0x154>)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	4b3e      	ldr	r3, [pc, #248]	; (800a57c <xTaskIncrementTick+0x158>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3301      	adds	r3, #1
 800a486:	4a3d      	ldr	r2, [pc, #244]	; (800a57c <xTaskIncrementTick+0x158>)
 800a488:	6013      	str	r3, [r2, #0]
 800a48a:	f000 fb01 	bl	800aa90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a48e:	4b3c      	ldr	r3, [pc, #240]	; (800a580 <xTaskIncrementTick+0x15c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	429a      	cmp	r2, r3
 800a496:	d349      	bcc.n	800a52c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a498:	4b36      	ldr	r3, [pc, #216]	; (800a574 <xTaskIncrementTick+0x150>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d104      	bne.n	800a4ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a2:	4b37      	ldr	r3, [pc, #220]	; (800a580 <xTaskIncrementTick+0x15c>)
 800a4a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4a8:	601a      	str	r2, [r3, #0]
					break;
 800a4aa:	e03f      	b.n	800a52c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ac:	4b31      	ldr	r3, [pc, #196]	; (800a574 <xTaskIncrementTick+0x150>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d203      	bcs.n	800a4cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4c4:	4a2e      	ldr	r2, [pc, #184]	; (800a580 <xTaskIncrementTick+0x15c>)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4ca:	e02f      	b.n	800a52c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fe f9d7 	bl	8008884 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d004      	beq.n	800a4e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	3318      	adds	r3, #24
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fe f9ce 	bl	8008884 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ec:	4b25      	ldr	r3, [pc, #148]	; (800a584 <xTaskIncrementTick+0x160>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d903      	bls.n	800a4fc <xTaskIncrementTick+0xd8>
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f8:	4a22      	ldr	r2, [pc, #136]	; (800a584 <xTaskIncrementTick+0x160>)
 800a4fa:	6013      	str	r3, [r2, #0]
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a500:	4613      	mov	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4a1f      	ldr	r2, [pc, #124]	; (800a588 <xTaskIncrementTick+0x164>)
 800a50a:	441a      	add	r2, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	3304      	adds	r3, #4
 800a510:	4619      	mov	r1, r3
 800a512:	4610      	mov	r0, r2
 800a514:	f7fe f959 	bl	80087ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a51c:	4b1b      	ldr	r3, [pc, #108]	; (800a58c <xTaskIncrementTick+0x168>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a522:	429a      	cmp	r2, r3
 800a524:	d3b8      	bcc.n	800a498 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a526:	2301      	movs	r3, #1
 800a528:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a52a:	e7b5      	b.n	800a498 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a52c:	4b17      	ldr	r3, [pc, #92]	; (800a58c <xTaskIncrementTick+0x168>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a532:	4915      	ldr	r1, [pc, #84]	; (800a588 <xTaskIncrementTick+0x164>)
 800a534:	4613      	mov	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	4413      	add	r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	440b      	add	r3, r1
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d901      	bls.n	800a548 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a544:	2301      	movs	r3, #1
 800a546:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a548:	4b11      	ldr	r3, [pc, #68]	; (800a590 <xTaskIncrementTick+0x16c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d007      	beq.n	800a560 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a550:	2301      	movs	r3, #1
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	e004      	b.n	800a560 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a556:	4b0f      	ldr	r3, [pc, #60]	; (800a594 <xTaskIncrementTick+0x170>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3301      	adds	r3, #1
 800a55c:	4a0d      	ldr	r2, [pc, #52]	; (800a594 <xTaskIncrementTick+0x170>)
 800a55e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a560:	697b      	ldr	r3, [r7, #20]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	20000f38 	.word	0x20000f38
 800a570:	20000f14 	.word	0x20000f14
 800a574:	20000ec8 	.word	0x20000ec8
 800a578:	20000ecc 	.word	0x20000ecc
 800a57c:	20000f28 	.word	0x20000f28
 800a580:	20000f30 	.word	0x20000f30
 800a584:	20000f18 	.word	0x20000f18
 800a588:	20000a40 	.word	0x20000a40
 800a58c:	20000a3c 	.word	0x20000a3c
 800a590:	20000f24 	.word	0x20000f24
 800a594:	20000f20 	.word	0x20000f20

0800a598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a59e:	4b2a      	ldr	r3, [pc, #168]	; (800a648 <vTaskSwitchContext+0xb0>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d003      	beq.n	800a5ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5a6:	4b29      	ldr	r3, [pc, #164]	; (800a64c <vTaskSwitchContext+0xb4>)
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5ac:	e046      	b.n	800a63c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a5ae:	4b27      	ldr	r3, [pc, #156]	; (800a64c <vTaskSwitchContext+0xb4>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b4:	4b26      	ldr	r3, [pc, #152]	; (800a650 <vTaskSwitchContext+0xb8>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60fb      	str	r3, [r7, #12]
 800a5ba:	e010      	b.n	800a5de <vTaskSwitchContext+0x46>
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10a      	bne.n	800a5d8 <vTaskSwitchContext+0x40>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	607b      	str	r3, [r7, #4]
}
 800a5d4:	bf00      	nop
 800a5d6:	e7fe      	b.n	800a5d6 <vTaskSwitchContext+0x3e>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	60fb      	str	r3, [r7, #12]
 800a5de:	491d      	ldr	r1, [pc, #116]	; (800a654 <vTaskSwitchContext+0xbc>)
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	440b      	add	r3, r1
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0e4      	beq.n	800a5bc <vTaskSwitchContext+0x24>
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4a15      	ldr	r2, [pc, #84]	; (800a654 <vTaskSwitchContext+0xbc>)
 800a5fe:	4413      	add	r3, r2
 800a600:	60bb      	str	r3, [r7, #8]
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	685a      	ldr	r2, [r3, #4]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	605a      	str	r2, [r3, #4]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	3308      	adds	r3, #8
 800a614:	429a      	cmp	r2, r3
 800a616:	d104      	bne.n	800a622 <vTaskSwitchContext+0x8a>
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	605a      	str	r2, [r3, #4]
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	4a0b      	ldr	r2, [pc, #44]	; (800a658 <vTaskSwitchContext+0xc0>)
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	4a08      	ldr	r2, [pc, #32]	; (800a650 <vTaskSwitchContext+0xb8>)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a632:	4b09      	ldr	r3, [pc, #36]	; (800a658 <vTaskSwitchContext+0xc0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3354      	adds	r3, #84	; 0x54
 800a638:	4a08      	ldr	r2, [pc, #32]	; (800a65c <vTaskSwitchContext+0xc4>)
 800a63a:	6013      	str	r3, [r2, #0]
}
 800a63c:	bf00      	nop
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	20000f38 	.word	0x20000f38
 800a64c:	20000f24 	.word	0x20000f24
 800a650:	20000f18 	.word	0x20000f18
 800a654:	20000a40 	.word	0x20000a40
 800a658:	20000a3c 	.word	0x20000a3c
 800a65c:	20000018 	.word	0x20000018

0800a660 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d10a      	bne.n	800a686 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	60fb      	str	r3, [r7, #12]
}
 800a682:	bf00      	nop
 800a684:	e7fe      	b.n	800a684 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a686:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <vTaskPlaceOnEventList+0x44>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3318      	adds	r3, #24
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7fe f8bf 	bl	8008812 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a694:	2101      	movs	r1, #1
 800a696:	6838      	ldr	r0, [r7, #0]
 800a698:	f000 fcf8 	bl	800b08c <prvAddCurrentTaskToDelayedList>
}
 800a69c:	bf00      	nop
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	20000a3c 	.word	0x20000a3c

0800a6a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d10a      	bne.n	800a6d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	617b      	str	r3, [r7, #20]
}
 800a6cc:	bf00      	nop
 800a6ce:	e7fe      	b.n	800a6ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6d0:	4b0a      	ldr	r3, [pc, #40]	; (800a6fc <vTaskPlaceOnEventListRestricted+0x54>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	3318      	adds	r3, #24
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f7fe f876 	bl	80087ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d002      	beq.n	800a6ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a6e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	68b8      	ldr	r0, [r7, #8]
 800a6ee:	f000 fccd 	bl	800b08c <prvAddCurrentTaskToDelayedList>
	}
 800a6f2:	bf00      	nop
 800a6f4:	3718      	adds	r7, #24
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000a3c 	.word	0x20000a3c

0800a700 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10a      	bne.n	800a72c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	60fb      	str	r3, [r7, #12]
}
 800a728:	bf00      	nop
 800a72a:	e7fe      	b.n	800a72a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	3318      	adds	r3, #24
 800a730:	4618      	mov	r0, r3
 800a732:	f7fe f8a7 	bl	8008884 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a736:	4b1e      	ldr	r3, [pc, #120]	; (800a7b0 <xTaskRemoveFromEventList+0xb0>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d11d      	bne.n	800a77a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	3304      	adds	r3, #4
 800a742:	4618      	mov	r0, r3
 800a744:	f7fe f89e 	bl	8008884 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a74c:	4b19      	ldr	r3, [pc, #100]	; (800a7b4 <xTaskRemoveFromEventList+0xb4>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	429a      	cmp	r2, r3
 800a752:	d903      	bls.n	800a75c <xTaskRemoveFromEventList+0x5c>
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	4a16      	ldr	r2, [pc, #88]	; (800a7b4 <xTaskRemoveFromEventList+0xb4>)
 800a75a:	6013      	str	r3, [r2, #0]
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4a13      	ldr	r2, [pc, #76]	; (800a7b8 <xTaskRemoveFromEventList+0xb8>)
 800a76a:	441a      	add	r2, r3
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	3304      	adds	r3, #4
 800a770:	4619      	mov	r1, r3
 800a772:	4610      	mov	r0, r2
 800a774:	f7fe f829 	bl	80087ca <vListInsertEnd>
 800a778:	e005      	b.n	800a786 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	3318      	adds	r3, #24
 800a77e:	4619      	mov	r1, r3
 800a780:	480e      	ldr	r0, [pc, #56]	; (800a7bc <xTaskRemoveFromEventList+0xbc>)
 800a782:	f7fe f822 	bl	80087ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78a:	4b0d      	ldr	r3, [pc, #52]	; (800a7c0 <xTaskRemoveFromEventList+0xc0>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a790:	429a      	cmp	r2, r3
 800a792:	d905      	bls.n	800a7a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a794:	2301      	movs	r3, #1
 800a796:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a798:	4b0a      	ldr	r3, [pc, #40]	; (800a7c4 <xTaskRemoveFromEventList+0xc4>)
 800a79a:	2201      	movs	r2, #1
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	e001      	b.n	800a7a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7a4:	697b      	ldr	r3, [r7, #20]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20000f38 	.word	0x20000f38
 800a7b4:	20000f18 	.word	0x20000f18
 800a7b8:	20000a40 	.word	0x20000a40
 800a7bc:	20000ed0 	.word	0x20000ed0
 800a7c0:	20000a3c 	.word	0x20000a3c
 800a7c4:	20000f24 	.word	0x20000f24

0800a7c8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10a      	bne.n	800a7ec <vTaskSetTimeOutState+0x24>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	60fb      	str	r3, [r7, #12]
}
 800a7e8:	bf00      	nop
 800a7ea:	e7fe      	b.n	800a7ea <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800a7ec:	f001 f91a 	bl	800ba24 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7f0:	4b06      	ldr	r3, [pc, #24]	; (800a80c <vTaskSetTimeOutState+0x44>)
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a7f8:	4b05      	ldr	r3, [pc, #20]	; (800a810 <vTaskSetTimeOutState+0x48>)
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800a800:	f001 f940 	bl	800ba84 <vPortExitCritical>
}
 800a804:	bf00      	nop
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	20000f28 	.word	0x20000f28
 800a810:	20000f14 	.word	0x20000f14

0800a814 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a81c:	4b06      	ldr	r3, [pc, #24]	; (800a838 <vTaskInternalSetTimeOutState+0x24>)
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a824:	4b05      	ldr	r3, [pc, #20]	; (800a83c <vTaskInternalSetTimeOutState+0x28>)
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	605a      	str	r2, [r3, #4]
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	20000f28 	.word	0x20000f28
 800a83c:	20000f14 	.word	0x20000f14

0800a840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	613b      	str	r3, [r7, #16]
}
 800a862:	bf00      	nop
 800a864:	e7fe      	b.n	800a864 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10a      	bne.n	800a882 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	60fb      	str	r3, [r7, #12]
}
 800a87e:	bf00      	nop
 800a880:	e7fe      	b.n	800a880 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a882:	f001 f8cf 	bl	800ba24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a886:	4b1d      	ldr	r3, [pc, #116]	; (800a8fc <xTaskCheckForTimeOut+0xbc>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	69ba      	ldr	r2, [r7, #24]
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a89e:	d102      	bne.n	800a8a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	61fb      	str	r3, [r7, #28]
 800a8a4:	e023      	b.n	800a8ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	4b15      	ldr	r3, [pc, #84]	; (800a900 <xTaskCheckForTimeOut+0xc0>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d007      	beq.n	800a8c2 <xTaskCheckForTimeOut+0x82>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	69ba      	ldr	r2, [r7, #24]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d302      	bcc.n	800a8c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	61fb      	str	r3, [r7, #28]
 800a8c0:	e015      	b.n	800a8ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d20b      	bcs.n	800a8e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	1ad2      	subs	r2, r2, r3
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7ff ff9b 	bl	800a814 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	61fb      	str	r3, [r7, #28]
 800a8e2:	e004      	b.n	800a8ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8ee:	f001 f8c9 	bl	800ba84 <vPortExitCritical>

	return xReturn;
 800a8f2:	69fb      	ldr	r3, [r7, #28]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3720      	adds	r7, #32
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20000f14 	.word	0x20000f14
 800a900:	20000f28 	.word	0x20000f28

0800a904 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a904:	b480      	push	{r7}
 800a906:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a908:	4b03      	ldr	r3, [pc, #12]	; (800a918 <vTaskMissedYield+0x14>)
 800a90a:	2201      	movs	r2, #1
 800a90c:	601a      	str	r2, [r3, #0]
}
 800a90e:	bf00      	nop
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	20000f24 	.word	0x20000f24

0800a91c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a924:	f000 f852 	bl	800a9cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a928:	4b06      	ldr	r3, [pc, #24]	; (800a944 <prvIdleTask+0x28>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d9f9      	bls.n	800a924 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a930:	4b05      	ldr	r3, [pc, #20]	; (800a948 <prvIdleTask+0x2c>)
 800a932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a936:	601a      	str	r2, [r3, #0]
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a940:	e7f0      	b.n	800a924 <prvIdleTask+0x8>
 800a942:	bf00      	nop
 800a944:	20000a40 	.word	0x20000a40
 800a948:	e000ed04 	.word	0xe000ed04

0800a94c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a952:	2300      	movs	r3, #0
 800a954:	607b      	str	r3, [r7, #4]
 800a956:	e00c      	b.n	800a972 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	4613      	mov	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4413      	add	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4a12      	ldr	r2, [pc, #72]	; (800a9ac <prvInitialiseTaskLists+0x60>)
 800a964:	4413      	add	r3, r2
 800a966:	4618      	mov	r0, r3
 800a968:	f7fd ff02 	bl	8008770 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	3301      	adds	r3, #1
 800a970:	607b      	str	r3, [r7, #4]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2b37      	cmp	r3, #55	; 0x37
 800a976:	d9ef      	bls.n	800a958 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a978:	480d      	ldr	r0, [pc, #52]	; (800a9b0 <prvInitialiseTaskLists+0x64>)
 800a97a:	f7fd fef9 	bl	8008770 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a97e:	480d      	ldr	r0, [pc, #52]	; (800a9b4 <prvInitialiseTaskLists+0x68>)
 800a980:	f7fd fef6 	bl	8008770 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a984:	480c      	ldr	r0, [pc, #48]	; (800a9b8 <prvInitialiseTaskLists+0x6c>)
 800a986:	f7fd fef3 	bl	8008770 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a98a:	480c      	ldr	r0, [pc, #48]	; (800a9bc <prvInitialiseTaskLists+0x70>)
 800a98c:	f7fd fef0 	bl	8008770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a990:	480b      	ldr	r0, [pc, #44]	; (800a9c0 <prvInitialiseTaskLists+0x74>)
 800a992:	f7fd feed 	bl	8008770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a996:	4b0b      	ldr	r3, [pc, #44]	; (800a9c4 <prvInitialiseTaskLists+0x78>)
 800a998:	4a05      	ldr	r2, [pc, #20]	; (800a9b0 <prvInitialiseTaskLists+0x64>)
 800a99a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a99c:	4b0a      	ldr	r3, [pc, #40]	; (800a9c8 <prvInitialiseTaskLists+0x7c>)
 800a99e:	4a05      	ldr	r2, [pc, #20]	; (800a9b4 <prvInitialiseTaskLists+0x68>)
 800a9a0:	601a      	str	r2, [r3, #0]
}
 800a9a2:	bf00      	nop
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	20000a40 	.word	0x20000a40
 800a9b0:	20000ea0 	.word	0x20000ea0
 800a9b4:	20000eb4 	.word	0x20000eb4
 800a9b8:	20000ed0 	.word	0x20000ed0
 800a9bc:	20000ee4 	.word	0x20000ee4
 800a9c0:	20000efc 	.word	0x20000efc
 800a9c4:	20000ec8 	.word	0x20000ec8
 800a9c8:	20000ecc 	.word	0x20000ecc

0800a9cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9d2:	e019      	b.n	800aa08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9d4:	f001 f826 	bl	800ba24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9d8:	4b10      	ldr	r3, [pc, #64]	; (800aa1c <prvCheckTasksWaitingTermination+0x50>)
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fd ff4d 	bl	8008884 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9ea:	4b0d      	ldr	r3, [pc, #52]	; (800aa20 <prvCheckTasksWaitingTermination+0x54>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	4a0b      	ldr	r2, [pc, #44]	; (800aa20 <prvCheckTasksWaitingTermination+0x54>)
 800a9f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9f4:	4b0b      	ldr	r3, [pc, #44]	; (800aa24 <prvCheckTasksWaitingTermination+0x58>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	4a0a      	ldr	r2, [pc, #40]	; (800aa24 <prvCheckTasksWaitingTermination+0x58>)
 800a9fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9fe:	f001 f841 	bl	800ba84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f810 	bl	800aa28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa08:	4b06      	ldr	r3, [pc, #24]	; (800aa24 <prvCheckTasksWaitingTermination+0x58>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1e1      	bne.n	800a9d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa10:	bf00      	nop
 800aa12:	bf00      	nop
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	20000ee4 	.word	0x20000ee4
 800aa20:	20000f10 	.word	0x20000f10
 800aa24:	20000ef8 	.word	0x20000ef8

0800aa28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	3354      	adds	r3, #84	; 0x54
 800aa34:	4618      	mov	r0, r3
 800aa36:	f001 fc57 	bl	800c2e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d108      	bne.n	800aa56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f001 f9d9 	bl	800be00 <vPortFree>
				vPortFree( pxTCB );
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f001 f9d6 	bl	800be00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa54:	e018      	b.n	800aa88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d103      	bne.n	800aa68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f001 f9cd 	bl	800be00 <vPortFree>
	}
 800aa66:	e00f      	b.n	800aa88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d00a      	beq.n	800aa88 <prvDeleteTCB+0x60>
	__asm volatile
 800aa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	60fb      	str	r3, [r7, #12]
}
 800aa84:	bf00      	nop
 800aa86:	e7fe      	b.n	800aa86 <prvDeleteTCB+0x5e>
	}
 800aa88:	bf00      	nop
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa96:	4b0c      	ldr	r3, [pc, #48]	; (800aac8 <prvResetNextTaskUnblockTime+0x38>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d104      	bne.n	800aaaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aaa0:	4b0a      	ldr	r3, [pc, #40]	; (800aacc <prvResetNextTaskUnblockTime+0x3c>)
 800aaa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aaa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aaa8:	e008      	b.n	800aabc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaaa:	4b07      	ldr	r3, [pc, #28]	; (800aac8 <prvResetNextTaskUnblockTime+0x38>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	4a04      	ldr	r2, [pc, #16]	; (800aacc <prvResetNextTaskUnblockTime+0x3c>)
 800aaba:	6013      	str	r3, [r2, #0]
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr
 800aac8:	20000ec8 	.word	0x20000ec8
 800aacc:	20000f30 	.word	0x20000f30

0800aad0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800aad6:	4b05      	ldr	r3, [pc, #20]	; (800aaec <xTaskGetCurrentTaskHandle+0x1c>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	607b      	str	r3, [r7, #4]

		return xReturn;
 800aadc:	687b      	ldr	r3, [r7, #4]
	}
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	20000a3c 	.word	0x20000a3c

0800aaf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aaf6:	4b0b      	ldr	r3, [pc, #44]	; (800ab24 <xTaskGetSchedulerState+0x34>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d102      	bne.n	800ab04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aafe:	2301      	movs	r3, #1
 800ab00:	607b      	str	r3, [r7, #4]
 800ab02:	e008      	b.n	800ab16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab04:	4b08      	ldr	r3, [pc, #32]	; (800ab28 <xTaskGetSchedulerState+0x38>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d102      	bne.n	800ab12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	607b      	str	r3, [r7, #4]
 800ab10:	e001      	b.n	800ab16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab12:	2300      	movs	r3, #0
 800ab14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab16:	687b      	ldr	r3, [r7, #4]
	}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	20000f1c 	.word	0x20000f1c
 800ab28:	20000f38 	.word	0x20000f38

0800ab2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d051      	beq.n	800abe6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab46:	4b2a      	ldr	r3, [pc, #168]	; (800abf0 <xTaskPriorityInherit+0xc4>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d241      	bcs.n	800abd4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	db06      	blt.n	800ab66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab58:	4b25      	ldr	r3, [pc, #148]	; (800abf0 <xTaskPriorityInherit+0xc4>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	6959      	ldr	r1, [r3, #20]
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6e:	4613      	mov	r3, r2
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	4413      	add	r3, r2
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	4a1f      	ldr	r2, [pc, #124]	; (800abf4 <xTaskPriorityInherit+0xc8>)
 800ab78:	4413      	add	r3, r2
 800ab7a:	4299      	cmp	r1, r3
 800ab7c:	d122      	bne.n	800abc4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	3304      	adds	r3, #4
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7fd fe7e 	bl	8008884 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab88:	4b19      	ldr	r3, [pc, #100]	; (800abf0 <xTaskPriorityInherit+0xc4>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab96:	4b18      	ldr	r3, [pc, #96]	; (800abf8 <xTaskPriorityInherit+0xcc>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d903      	bls.n	800aba6 <xTaskPriorityInherit+0x7a>
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba2:	4a15      	ldr	r2, [pc, #84]	; (800abf8 <xTaskPriorityInherit+0xcc>)
 800aba4:	6013      	str	r3, [r2, #0]
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abaa:	4613      	mov	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4a10      	ldr	r2, [pc, #64]	; (800abf4 <xTaskPriorityInherit+0xc8>)
 800abb4:	441a      	add	r2, r3
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	3304      	adds	r3, #4
 800abba:	4619      	mov	r1, r3
 800abbc:	4610      	mov	r0, r2
 800abbe:	f7fd fe04 	bl	80087ca <vListInsertEnd>
 800abc2:	e004      	b.n	800abce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abc4:	4b0a      	ldr	r3, [pc, #40]	; (800abf0 <xTaskPriorityInherit+0xc4>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800abce:	2301      	movs	r3, #1
 800abd0:	60fb      	str	r3, [r7, #12]
 800abd2:	e008      	b.n	800abe6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abd8:	4b05      	ldr	r3, [pc, #20]	; (800abf0 <xTaskPriorityInherit+0xc4>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abde:	429a      	cmp	r2, r3
 800abe0:	d201      	bcs.n	800abe6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800abe2:	2301      	movs	r3, #1
 800abe4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abe6:	68fb      	ldr	r3, [r7, #12]
	}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	20000a3c 	.word	0x20000a3c
 800abf4:	20000a40 	.word	0x20000a40
 800abf8:	20000f18 	.word	0x20000f18

0800abfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d056      	beq.n	800acc0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac12:	4b2e      	ldr	r3, [pc, #184]	; (800accc <xTaskPriorityDisinherit+0xd0>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d00a      	beq.n	800ac32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	60fb      	str	r3, [r7, #12]
}
 800ac2e:	bf00      	nop
 800ac30:	e7fe      	b.n	800ac30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10a      	bne.n	800ac50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ac3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	60bb      	str	r3, [r7, #8]
}
 800ac4c:	bf00      	nop
 800ac4e:	e7fe      	b.n	800ac4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac54:	1e5a      	subs	r2, r3, #1
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d02c      	beq.n	800acc0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d128      	bne.n	800acc0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	3304      	adds	r3, #4
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fd fe06 	bl	8008884 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac90:	4b0f      	ldr	r3, [pc, #60]	; (800acd0 <xTaskPriorityDisinherit+0xd4>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d903      	bls.n	800aca0 <xTaskPriorityDisinherit+0xa4>
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9c:	4a0c      	ldr	r2, [pc, #48]	; (800acd0 <xTaskPriorityDisinherit+0xd4>)
 800ac9e:	6013      	str	r3, [r2, #0]
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca4:	4613      	mov	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4a09      	ldr	r2, [pc, #36]	; (800acd4 <xTaskPriorityDisinherit+0xd8>)
 800acae:	441a      	add	r2, r3
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	3304      	adds	r3, #4
 800acb4:	4619      	mov	r1, r3
 800acb6:	4610      	mov	r0, r2
 800acb8:	f7fd fd87 	bl	80087ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800acbc:	2301      	movs	r3, #1
 800acbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acc0:	697b      	ldr	r3, [r7, #20]
	}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3718      	adds	r7, #24
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	20000a3c 	.word	0x20000a3c
 800acd0:	20000f18 	.word	0x20000f18
 800acd4:	20000a40 	.word	0x20000a40

0800acd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ace6:	2301      	movs	r3, #1
 800ace8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d06a      	beq.n	800adc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10a      	bne.n	800ad0e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	60fb      	str	r3, [r7, #12]
}
 800ad0a:	bf00      	nop
 800ad0c:	e7fe      	b.n	800ad0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d902      	bls.n	800ad1e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	61fb      	str	r3, [r7, #28]
 800ad1c:	e002      	b.n	800ad24 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad28:	69fa      	ldr	r2, [r7, #28]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d04b      	beq.n	800adc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d146      	bne.n	800adc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ad38:	4b25      	ldr	r3, [pc, #148]	; (800add0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	69ba      	ldr	r2, [r7, #24]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d10a      	bne.n	800ad58 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ad42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	60bb      	str	r3, [r7, #8]
}
 800ad54:	bf00      	nop
 800ad56:	e7fe      	b.n	800ad56 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	69fa      	ldr	r2, [r7, #28]
 800ad62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	699b      	ldr	r3, [r3, #24]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	db04      	blt.n	800ad76 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	6959      	ldr	r1, [r3, #20]
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4a13      	ldr	r2, [pc, #76]	; (800add4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ad86:	4413      	add	r3, r2
 800ad88:	4299      	cmp	r1, r3
 800ad8a:	d11c      	bne.n	800adc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fd fd77 	bl	8008884 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad9a:	4b0f      	ldr	r3, [pc, #60]	; (800add8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d903      	bls.n	800adaa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada6:	4a0c      	ldr	r2, [pc, #48]	; (800add8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adae:	4613      	mov	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4a07      	ldr	r2, [pc, #28]	; (800add4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800adb8:	441a      	add	r2, r3
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	3304      	adds	r3, #4
 800adbe:	4619      	mov	r1, r3
 800adc0:	4610      	mov	r0, r2
 800adc2:	f7fd fd02 	bl	80087ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800adc6:	bf00      	nop
 800adc8:	3720      	adds	r7, #32
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	20000a3c 	.word	0x20000a3c
 800add4:	20000a40 	.word	0x20000a40
 800add8:	20000f18 	.word	0x20000f18

0800addc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800addc:	b480      	push	{r7}
 800adde:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ade0:	4b07      	ldr	r3, [pc, #28]	; (800ae00 <pvTaskIncrementMutexHeldCount+0x24>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d004      	beq.n	800adf2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ade8:	4b05      	ldr	r3, [pc, #20]	; (800ae00 <pvTaskIncrementMutexHeldCount+0x24>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adee:	3201      	adds	r2, #1
 800adf0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800adf2:	4b03      	ldr	r3, [pc, #12]	; (800ae00 <pvTaskIncrementMutexHeldCount+0x24>)
 800adf4:	681b      	ldr	r3, [r3, #0]
	}
 800adf6:	4618      	mov	r0, r3
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr
 800ae00:	20000a3c 	.word	0x20000a3c

0800ae04 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
 800ae10:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ae12:	f000 fe07 	bl	800ba24 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ae16:	4b29      	ldr	r3, [pc, #164]	; (800aebc <xTaskNotifyWait+0xb8>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d01c      	beq.n	800ae5e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ae24:	4b25      	ldr	r3, [pc, #148]	; (800aebc <xTaskNotifyWait+0xb8>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	43d2      	mvns	r2, r2
 800ae30:	400a      	ands	r2, r1
 800ae32:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ae36:	4b21      	ldr	r3, [pc, #132]	; (800aebc <xTaskNotifyWait+0xb8>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00b      	beq.n	800ae5e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae46:	2101      	movs	r1, #1
 800ae48:	6838      	ldr	r0, [r7, #0]
 800ae4a:	f000 f91f 	bl	800b08c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ae4e:	4b1c      	ldr	r3, [pc, #112]	; (800aec0 <xTaskNotifyWait+0xbc>)
 800ae50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ae5e:	f000 fe11 	bl	800ba84 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ae62:	f000 fddf 	bl	800ba24 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d005      	beq.n	800ae78 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ae6c:	4b13      	ldr	r3, [pc, #76]	; (800aebc <xTaskNotifyWait+0xb8>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ae78:	4b10      	ldr	r3, [pc, #64]	; (800aebc <xTaskNotifyWait+0xb8>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d002      	beq.n	800ae8c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ae86:	2300      	movs	r3, #0
 800ae88:	617b      	str	r3, [r7, #20]
 800ae8a:	e00a      	b.n	800aea2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ae8c:	4b0b      	ldr	r3, [pc, #44]	; (800aebc <xTaskNotifyWait+0xb8>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	43d2      	mvns	r2, r2
 800ae98:	400a      	ands	r2, r1
 800ae9a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aea2:	4b06      	ldr	r3, [pc, #24]	; (800aebc <xTaskNotifyWait+0xb8>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800aeac:	f000 fdea 	bl	800ba84 <vPortExitCritical>

		return xReturn;
 800aeb0:	697b      	ldr	r3, [r7, #20]
	}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3718      	adds	r7, #24
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	20000a3c 	.word	0x20000a3c
 800aec0:	e000ed04 	.word	0xe000ed04

0800aec4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b08a      	sub	sp, #40	; 0x28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	603b      	str	r3, [r7, #0]
 800aed0:	4613      	mov	r3, r2
 800aed2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800aed4:	2301      	movs	r3, #1
 800aed6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10a      	bne.n	800aef4 <xTaskGenericNotify+0x30>
	__asm volatile
 800aede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	61bb      	str	r3, [r7, #24]
}
 800aef0:	bf00      	nop
 800aef2:	e7fe      	b.n	800aef2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800aef8:	f000 fd94 	bl	800ba24 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d004      	beq.n	800af0c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800af02:	6a3b      	ldr	r3, [r7, #32]
 800af04:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800af0c:	6a3b      	ldr	r3, [r7, #32]
 800af0e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800af12:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800af14:	6a3b      	ldr	r3, [r7, #32]
 800af16:	2202      	movs	r2, #2
 800af18:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800af1c:	79fb      	ldrb	r3, [r7, #7]
 800af1e:	2b04      	cmp	r3, #4
 800af20:	d82d      	bhi.n	800af7e <xTaskGenericNotify+0xba>
 800af22:	a201      	add	r2, pc, #4	; (adr r2, 800af28 <xTaskGenericNotify+0x64>)
 800af24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af28:	0800afa1 	.word	0x0800afa1
 800af2c:	0800af3d 	.word	0x0800af3d
 800af30:	0800af4f 	.word	0x0800af4f
 800af34:	0800af5f 	.word	0x0800af5f
 800af38:	0800af69 	.word	0x0800af69
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	431a      	orrs	r2, r3
 800af46:	6a3b      	ldr	r3, [r7, #32]
 800af48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800af4c:	e02b      	b.n	800afa6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800af4e:	6a3b      	ldr	r3, [r7, #32]
 800af50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af54:	1c5a      	adds	r2, r3, #1
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800af5c:	e023      	b.n	800afa6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800af5e:	6a3b      	ldr	r3, [r7, #32]
 800af60:	68ba      	ldr	r2, [r7, #8]
 800af62:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800af66:	e01e      	b.n	800afa6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800af68:	7ffb      	ldrb	r3, [r7, #31]
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d004      	beq.n	800af78 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800af6e:	6a3b      	ldr	r3, [r7, #32]
 800af70:	68ba      	ldr	r2, [r7, #8]
 800af72:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800af76:	e016      	b.n	800afa6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800af78:	2300      	movs	r3, #0
 800af7a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800af7c:	e013      	b.n	800afa6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800af7e:	6a3b      	ldr	r3, [r7, #32]
 800af80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af88:	d00c      	beq.n	800afa4 <xTaskGenericNotify+0xe0>
	__asm volatile
 800af8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	617b      	str	r3, [r7, #20]
}
 800af9c:	bf00      	nop
 800af9e:	e7fe      	b.n	800af9e <xTaskGenericNotify+0xda>
					break;
 800afa0:	bf00      	nop
 800afa2:	e000      	b.n	800afa6 <xTaskGenericNotify+0xe2>

					break;
 800afa4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800afa6:	7ffb      	ldrb	r3, [r7, #31]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d13a      	bne.n	800b022 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afac:	6a3b      	ldr	r3, [r7, #32]
 800afae:	3304      	adds	r3, #4
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7fd fc67 	bl	8008884 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afba:	4b1d      	ldr	r3, [pc, #116]	; (800b030 <xTaskGenericNotify+0x16c>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d903      	bls.n	800afca <xTaskGenericNotify+0x106>
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc6:	4a1a      	ldr	r2, [pc, #104]	; (800b030 <xTaskGenericNotify+0x16c>)
 800afc8:	6013      	str	r3, [r2, #0]
 800afca:	6a3b      	ldr	r3, [r7, #32]
 800afcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afce:	4613      	mov	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4413      	add	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4a17      	ldr	r2, [pc, #92]	; (800b034 <xTaskGenericNotify+0x170>)
 800afd8:	441a      	add	r2, r3
 800afda:	6a3b      	ldr	r3, [r7, #32]
 800afdc:	3304      	adds	r3, #4
 800afde:	4619      	mov	r1, r3
 800afe0:	4610      	mov	r0, r2
 800afe2:	f7fd fbf2 	bl	80087ca <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00a      	beq.n	800b004 <xTaskGenericNotify+0x140>
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	613b      	str	r3, [r7, #16]
}
 800b000:	bf00      	nop
 800b002:	e7fe      	b.n	800b002 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b004:	6a3b      	ldr	r3, [r7, #32]
 800b006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b008:	4b0b      	ldr	r3, [pc, #44]	; (800b038 <xTaskGenericNotify+0x174>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00e:	429a      	cmp	r2, r3
 800b010:	d907      	bls.n	800b022 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b012:	4b0a      	ldr	r3, [pc, #40]	; (800b03c <xTaskGenericNotify+0x178>)
 800b014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b018:	601a      	str	r2, [r3, #0]
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b022:	f000 fd2f 	bl	800ba84 <vPortExitCritical>

		return xReturn;
 800b026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b028:	4618      	mov	r0, r3
 800b02a:	3728      	adds	r7, #40	; 0x28
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	20000f18 	.word	0x20000f18
 800b034:	20000a40 	.word	0x20000a40
 800b038:	20000a3c 	.word	0x20000a3c
 800b03c:	e000ed04 	.word	0xe000ed04

0800b040 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d102      	bne.n	800b054 <xTaskNotifyStateClear+0x14>
 800b04e:	4b0e      	ldr	r3, [pc, #56]	; (800b088 <xTaskNotifyStateClear+0x48>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	e000      	b.n	800b056 <xTaskNotifyStateClear+0x16>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800b058:	f000 fce4 	bl	800ba24 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b02      	cmp	r3, #2
 800b066:	d106      	bne.n	800b076 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 800b070:	2301      	movs	r3, #1
 800b072:	60fb      	str	r3, [r7, #12]
 800b074:	e001      	b.n	800b07a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800b076:	2300      	movs	r3, #0
 800b078:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800b07a:	f000 fd03 	bl	800ba84 <vPortExitCritical>

		return xReturn;
 800b07e:	68fb      	ldr	r3, [r7, #12]
	}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20000a3c 	.word	0x20000a3c

0800b08c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b096:	4b21      	ldr	r3, [pc, #132]	; (800b11c <prvAddCurrentTaskToDelayedList+0x90>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b09c:	4b20      	ldr	r3, [pc, #128]	; (800b120 <prvAddCurrentTaskToDelayedList+0x94>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fd fbee 	bl	8008884 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0ae:	d10a      	bne.n	800b0c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d007      	beq.n	800b0c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0b6:	4b1a      	ldr	r3, [pc, #104]	; (800b120 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3304      	adds	r3, #4
 800b0bc:	4619      	mov	r1, r3
 800b0be:	4819      	ldr	r0, [pc, #100]	; (800b124 <prvAddCurrentTaskToDelayedList+0x98>)
 800b0c0:	f7fd fb83 	bl	80087ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b0c4:	e026      	b.n	800b114 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b0ce:	4b14      	ldr	r3, [pc, #80]	; (800b120 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b0d6:	68ba      	ldr	r2, [r7, #8]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d209      	bcs.n	800b0f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0de:	4b12      	ldr	r3, [pc, #72]	; (800b128 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	4b0f      	ldr	r3, [pc, #60]	; (800b120 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	4610      	mov	r0, r2
 800b0ec:	f7fd fb91 	bl	8008812 <vListInsert>
}
 800b0f0:	e010      	b.n	800b114 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0f2:	4b0e      	ldr	r3, [pc, #56]	; (800b12c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	4b0a      	ldr	r3, [pc, #40]	; (800b120 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	4610      	mov	r0, r2
 800b100:	f7fd fb87 	bl	8008812 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b104:	4b0a      	ldr	r3, [pc, #40]	; (800b130 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d202      	bcs.n	800b114 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b10e:	4a08      	ldr	r2, [pc, #32]	; (800b130 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	6013      	str	r3, [r2, #0]
}
 800b114:	bf00      	nop
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	20000f14 	.word	0x20000f14
 800b120:	20000a3c 	.word	0x20000a3c
 800b124:	20000efc 	.word	0x20000efc
 800b128:	20000ecc 	.word	0x20000ecc
 800b12c:	20000ec8 	.word	0x20000ec8
 800b130:	20000f30 	.word	0x20000f30

0800b134 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b08a      	sub	sp, #40	; 0x28
 800b138:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b13e:	f000 fb07 	bl	800b750 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b142:	4b1c      	ldr	r3, [pc, #112]	; (800b1b4 <xTimerCreateTimerTask+0x80>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d021      	beq.n	800b18e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b14e:	2300      	movs	r3, #0
 800b150:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b152:	1d3a      	adds	r2, r7, #4
 800b154:	f107 0108 	add.w	r1, r7, #8
 800b158:	f107 030c 	add.w	r3, r7, #12
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fd faed 	bl	800873c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b162:	6879      	ldr	r1, [r7, #4]
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	9202      	str	r2, [sp, #8]
 800b16a:	9301      	str	r3, [sp, #4]
 800b16c:	2302      	movs	r3, #2
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	2300      	movs	r3, #0
 800b172:	460a      	mov	r2, r1
 800b174:	4910      	ldr	r1, [pc, #64]	; (800b1b8 <xTimerCreateTimerTask+0x84>)
 800b176:	4811      	ldr	r0, [pc, #68]	; (800b1bc <xTimerCreateTimerTask+0x88>)
 800b178:	f7fe fe3c 	bl	8009df4 <xTaskCreateStatic>
 800b17c:	4603      	mov	r3, r0
 800b17e:	4a10      	ldr	r2, [pc, #64]	; (800b1c0 <xTimerCreateTimerTask+0x8c>)
 800b180:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b182:	4b0f      	ldr	r3, [pc, #60]	; (800b1c0 <xTimerCreateTimerTask+0x8c>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d001      	beq.n	800b18e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b18a:	2301      	movs	r3, #1
 800b18c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10a      	bne.n	800b1aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	613b      	str	r3, [r7, #16]
}
 800b1a6:	bf00      	nop
 800b1a8:	e7fe      	b.n	800b1a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b1aa:	697b      	ldr	r3, [r7, #20]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3718      	adds	r7, #24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	20000f6c 	.word	0x20000f6c
 800b1b8:	0800d024 	.word	0x0800d024
 800b1bc:	0800b2f9 	.word	0x0800b2f9
 800b1c0:	20000f70 	.word	0x20000f70

0800b1c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b08a      	sub	sp, #40	; 0x28
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	607a      	str	r2, [r7, #4]
 800b1d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10a      	bne.n	800b1f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	623b      	str	r3, [r7, #32]
}
 800b1ee:	bf00      	nop
 800b1f0:	e7fe      	b.n	800b1f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b1f2:	4b1a      	ldr	r3, [pc, #104]	; (800b25c <xTimerGenericCommand+0x98>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d02a      	beq.n	800b250 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	2b05      	cmp	r3, #5
 800b20a:	dc18      	bgt.n	800b23e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b20c:	f7ff fc70 	bl	800aaf0 <xTaskGetSchedulerState>
 800b210:	4603      	mov	r3, r0
 800b212:	2b02      	cmp	r3, #2
 800b214:	d109      	bne.n	800b22a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b216:	4b11      	ldr	r3, [pc, #68]	; (800b25c <xTimerGenericCommand+0x98>)
 800b218:	6818      	ldr	r0, [r3, #0]
 800b21a:	f107 0110 	add.w	r1, r7, #16
 800b21e:	2300      	movs	r3, #0
 800b220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b222:	f7fd fcc9 	bl	8008bb8 <xQueueGenericSend>
 800b226:	6278      	str	r0, [r7, #36]	; 0x24
 800b228:	e012      	b.n	800b250 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b22a:	4b0c      	ldr	r3, [pc, #48]	; (800b25c <xTimerGenericCommand+0x98>)
 800b22c:	6818      	ldr	r0, [r3, #0]
 800b22e:	f107 0110 	add.w	r1, r7, #16
 800b232:	2300      	movs	r3, #0
 800b234:	2200      	movs	r2, #0
 800b236:	f7fd fcbf 	bl	8008bb8 <xQueueGenericSend>
 800b23a:	6278      	str	r0, [r7, #36]	; 0x24
 800b23c:	e008      	b.n	800b250 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b23e:	4b07      	ldr	r3, [pc, #28]	; (800b25c <xTimerGenericCommand+0x98>)
 800b240:	6818      	ldr	r0, [r3, #0]
 800b242:	f107 0110 	add.w	r1, r7, #16
 800b246:	2300      	movs	r3, #0
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	f7fd fdb3 	bl	8008db4 <xQueueGenericSendFromISR>
 800b24e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b252:	4618      	mov	r0, r3
 800b254:	3728      	adds	r7, #40	; 0x28
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	20000f6c 	.word	0x20000f6c

0800b260 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b088      	sub	sp, #32
 800b264:	af02      	add	r7, sp, #8
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b26a:	4b22      	ldr	r3, [pc, #136]	; (800b2f4 <prvProcessExpiredTimer+0x94>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	3304      	adds	r3, #4
 800b278:	4618      	mov	r0, r3
 800b27a:	f7fd fb03 	bl	8008884 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b284:	f003 0304 	and.w	r3, r3, #4
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d022      	beq.n	800b2d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	699a      	ldr	r2, [r3, #24]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	18d1      	adds	r1, r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	6978      	ldr	r0, [r7, #20]
 800b29a:	f000 f8d1 	bl	800b440 <prvInsertTimerInActiveList>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d01f      	beq.n	800b2e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	6978      	ldr	r0, [r7, #20]
 800b2b0:	f7ff ff88 	bl	800b1c4 <xTimerGenericCommand>
 800b2b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d113      	bne.n	800b2e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c0:	f383 8811 	msr	BASEPRI, r3
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	60fb      	str	r3, [r7, #12]
}
 800b2ce:	bf00      	nop
 800b2d0:	e7fe      	b.n	800b2d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2d8:	f023 0301 	bic.w	r3, r3, #1
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	6a1b      	ldr	r3, [r3, #32]
 800b2e8:	6978      	ldr	r0, [r7, #20]
 800b2ea:	4798      	blx	r3
}
 800b2ec:	bf00      	nop
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	20000f64 	.word	0x20000f64

0800b2f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b300:	f107 0308 	add.w	r3, r7, #8
 800b304:	4618      	mov	r0, r3
 800b306:	f000 f857 	bl	800b3b8 <prvGetNextExpireTime>
 800b30a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	4619      	mov	r1, r3
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 f803 	bl	800b31c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b316:	f000 f8d5 	bl	800b4c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b31a:	e7f1      	b.n	800b300 <prvTimerTask+0x8>

0800b31c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b326:	f7fe ffc1 	bl	800a2ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b32a:	f107 0308 	add.w	r3, r7, #8
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 f866 	bl	800b400 <prvSampleTimeNow>
 800b334:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d130      	bne.n	800b39e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10a      	bne.n	800b358 <prvProcessTimerOrBlockTask+0x3c>
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	429a      	cmp	r2, r3
 800b348:	d806      	bhi.n	800b358 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b34a:	f7fe ffbd 	bl	800a2c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b34e:	68f9      	ldr	r1, [r7, #12]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7ff ff85 	bl	800b260 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b356:	e024      	b.n	800b3a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d008      	beq.n	800b370 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b35e:	4b13      	ldr	r3, [pc, #76]	; (800b3ac <prvProcessTimerOrBlockTask+0x90>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d101      	bne.n	800b36c <prvProcessTimerOrBlockTask+0x50>
 800b368:	2301      	movs	r3, #1
 800b36a:	e000      	b.n	800b36e <prvProcessTimerOrBlockTask+0x52>
 800b36c:	2300      	movs	r3, #0
 800b36e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b370:	4b0f      	ldr	r3, [pc, #60]	; (800b3b0 <prvProcessTimerOrBlockTask+0x94>)
 800b372:	6818      	ldr	r0, [r3, #0]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	4619      	mov	r1, r3
 800b37e:	f7fe f97f 	bl	8009680 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b382:	f7fe ffa1 	bl	800a2c8 <xTaskResumeAll>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10a      	bne.n	800b3a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b38c:	4b09      	ldr	r3, [pc, #36]	; (800b3b4 <prvProcessTimerOrBlockTask+0x98>)
 800b38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b392:	601a      	str	r2, [r3, #0]
 800b394:	f3bf 8f4f 	dsb	sy
 800b398:	f3bf 8f6f 	isb	sy
}
 800b39c:	e001      	b.n	800b3a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b39e:	f7fe ff93 	bl	800a2c8 <xTaskResumeAll>
}
 800b3a2:	bf00      	nop
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	20000f68 	.word	0x20000f68
 800b3b0:	20000f6c 	.word	0x20000f6c
 800b3b4:	e000ed04 	.word	0xe000ed04

0800b3b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b3c0:	4b0e      	ldr	r3, [pc, #56]	; (800b3fc <prvGetNextExpireTime+0x44>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d101      	bne.n	800b3ce <prvGetNextExpireTime+0x16>
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	e000      	b.n	800b3d0 <prvGetNextExpireTime+0x18>
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d105      	bne.n	800b3e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3dc:	4b07      	ldr	r3, [pc, #28]	; (800b3fc <prvGetNextExpireTime+0x44>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	60fb      	str	r3, [r7, #12]
 800b3e6:	e001      	b.n	800b3ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3714      	adds	r7, #20
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	20000f64 	.word	0x20000f64

0800b400 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b408:	f7fe fffc 	bl	800a404 <xTaskGetTickCount>
 800b40c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b40e:	4b0b      	ldr	r3, [pc, #44]	; (800b43c <prvSampleTimeNow+0x3c>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	429a      	cmp	r2, r3
 800b416:	d205      	bcs.n	800b424 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b418:	f000 f936 	bl	800b688 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	e002      	b.n	800b42a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b42a:	4a04      	ldr	r2, [pc, #16]	; (800b43c <prvSampleTimeNow+0x3c>)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b430:	68fb      	ldr	r3, [r7, #12]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	20000f74 	.word	0x20000f74

0800b440 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b44e:	2300      	movs	r3, #0
 800b450:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	68ba      	ldr	r2, [r7, #8]
 800b456:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b45e:	68ba      	ldr	r2, [r7, #8]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	429a      	cmp	r2, r3
 800b464:	d812      	bhi.n	800b48c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	1ad2      	subs	r2, r2, r3
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	429a      	cmp	r2, r3
 800b472:	d302      	bcc.n	800b47a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b474:	2301      	movs	r3, #1
 800b476:	617b      	str	r3, [r7, #20]
 800b478:	e01b      	b.n	800b4b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b47a:	4b10      	ldr	r3, [pc, #64]	; (800b4bc <prvInsertTimerInActiveList+0x7c>)
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	3304      	adds	r3, #4
 800b482:	4619      	mov	r1, r3
 800b484:	4610      	mov	r0, r2
 800b486:	f7fd f9c4 	bl	8008812 <vListInsert>
 800b48a:	e012      	b.n	800b4b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	429a      	cmp	r2, r3
 800b492:	d206      	bcs.n	800b4a2 <prvInsertTimerInActiveList+0x62>
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d302      	bcc.n	800b4a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b49c:	2301      	movs	r3, #1
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	e007      	b.n	800b4b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4a2:	4b07      	ldr	r3, [pc, #28]	; (800b4c0 <prvInsertTimerInActiveList+0x80>)
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	3304      	adds	r3, #4
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	4610      	mov	r0, r2
 800b4ae:	f7fd f9b0 	bl	8008812 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b4b2:	697b      	ldr	r3, [r7, #20]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	20000f68 	.word	0x20000f68
 800b4c0:	20000f64 	.word	0x20000f64

0800b4c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08e      	sub	sp, #56	; 0x38
 800b4c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4ca:	e0ca      	b.n	800b662 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	da18      	bge.n	800b504 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b4d2:	1d3b      	adds	r3, r7, #4
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10a      	bne.n	800b4f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	61fb      	str	r3, [r7, #28]
}
 800b4f0:	bf00      	nop
 800b4f2:	e7fe      	b.n	800b4f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4fa:	6850      	ldr	r0, [r2, #4]
 800b4fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4fe:	6892      	ldr	r2, [r2, #8]
 800b500:	4611      	mov	r1, r2
 800b502:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	f2c0 80aa 	blt.w	800b660 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b512:	695b      	ldr	r3, [r3, #20]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d004      	beq.n	800b522 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51a:	3304      	adds	r3, #4
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fd f9b1 	bl	8008884 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b522:	463b      	mov	r3, r7
 800b524:	4618      	mov	r0, r3
 800b526:	f7ff ff6b 	bl	800b400 <prvSampleTimeNow>
 800b52a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b09      	cmp	r3, #9
 800b530:	f200 8097 	bhi.w	800b662 <prvProcessReceivedCommands+0x19e>
 800b534:	a201      	add	r2, pc, #4	; (adr r2, 800b53c <prvProcessReceivedCommands+0x78>)
 800b536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53a:	bf00      	nop
 800b53c:	0800b565 	.word	0x0800b565
 800b540:	0800b565 	.word	0x0800b565
 800b544:	0800b565 	.word	0x0800b565
 800b548:	0800b5d9 	.word	0x0800b5d9
 800b54c:	0800b5ed 	.word	0x0800b5ed
 800b550:	0800b637 	.word	0x0800b637
 800b554:	0800b565 	.word	0x0800b565
 800b558:	0800b565 	.word	0x0800b565
 800b55c:	0800b5d9 	.word	0x0800b5d9
 800b560:	0800b5ed 	.word	0x0800b5ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b566:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b56a:	f043 0301 	orr.w	r3, r3, #1
 800b56e:	b2da      	uxtb	r2, r3
 800b570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b576:	68ba      	ldr	r2, [r7, #8]
 800b578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	18d1      	adds	r1, r2, r3
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b584:	f7ff ff5c 	bl	800b440 <prvInsertTimerInActiveList>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d069      	beq.n	800b662 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b594:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b59c:	f003 0304 	and.w	r3, r3, #4
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d05e      	beq.n	800b662 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b5a4:	68ba      	ldr	r2, [r7, #8]
 800b5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	441a      	add	r2, r3
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5b6:	f7ff fe05 	bl	800b1c4 <xTimerGenericCommand>
 800b5ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d14f      	bne.n	800b662 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c6:	f383 8811 	msr	BASEPRI, r3
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	f3bf 8f4f 	dsb	sy
 800b5d2:	61bb      	str	r3, [r7, #24]
}
 800b5d4:	bf00      	nop
 800b5d6:	e7fe      	b.n	800b5d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5de:	f023 0301 	bic.w	r3, r3, #1
 800b5e2:	b2da      	uxtb	r2, r3
 800b5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b5ea:	e03a      	b.n	800b662 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5f2:	f043 0301 	orr.w	r3, r3, #1
 800b5f6:	b2da      	uxtb	r2, r3
 800b5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b602:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b606:	699b      	ldr	r3, [r3, #24]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10a      	bne.n	800b622 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b610:	f383 8811 	msr	BASEPRI, r3
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	617b      	str	r3, [r7, #20]
}
 800b61e:	bf00      	nop
 800b620:	e7fe      	b.n	800b620 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b624:	699a      	ldr	r2, [r3, #24]
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b628:	18d1      	adds	r1, r2, r3
 800b62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b62e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b630:	f7ff ff06 	bl	800b440 <prvInsertTimerInActiveList>
					break;
 800b634:	e015      	b.n	800b662 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b63c:	f003 0302 	and.w	r3, r3, #2
 800b640:	2b00      	cmp	r3, #0
 800b642:	d103      	bne.n	800b64c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b646:	f000 fbdb 	bl	800be00 <vPortFree>
 800b64a:	e00a      	b.n	800b662 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b652:	f023 0301 	bic.w	r3, r3, #1
 800b656:	b2da      	uxtb	r2, r3
 800b658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b65e:	e000      	b.n	800b662 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b660:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b662:	4b08      	ldr	r3, [pc, #32]	; (800b684 <prvProcessReceivedCommands+0x1c0>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	1d39      	adds	r1, r7, #4
 800b668:	2200      	movs	r2, #0
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fd fcca 	bl	8009004 <xQueueReceive>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	f47f af2a 	bne.w	800b4cc <prvProcessReceivedCommands+0x8>
	}
}
 800b678:	bf00      	nop
 800b67a:	bf00      	nop
 800b67c:	3730      	adds	r7, #48	; 0x30
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	20000f6c 	.word	0x20000f6c

0800b688 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b68e:	e048      	b.n	800b722 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b690:	4b2d      	ldr	r3, [pc, #180]	; (800b748 <prvSwitchTimerLists+0xc0>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b69a:	4b2b      	ldr	r3, [pc, #172]	; (800b748 <prvSwitchTimerLists+0xc0>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	3304      	adds	r3, #4
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7fd f8eb 	bl	8008884 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6bc:	f003 0304 	and.w	r3, r3, #4
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d02e      	beq.n	800b722 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	699b      	ldr	r3, [r3, #24]
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b6ce:	68ba      	ldr	r2, [r7, #8]
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d90e      	bls.n	800b6f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6e2:	4b19      	ldr	r3, [pc, #100]	; (800b748 <prvSwitchTimerLists+0xc0>)
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	f7fd f890 	bl	8008812 <vListInsert>
 800b6f2:	e016      	b.n	800b722 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	693a      	ldr	r2, [r7, #16]
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f7ff fd60 	bl	800b1c4 <xTimerGenericCommand>
 800b704:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10a      	bne.n	800b722 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	603b      	str	r3, [r7, #0]
}
 800b71e:	bf00      	nop
 800b720:	e7fe      	b.n	800b720 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b722:	4b09      	ldr	r3, [pc, #36]	; (800b748 <prvSwitchTimerLists+0xc0>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d1b1      	bne.n	800b690 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b72c:	4b06      	ldr	r3, [pc, #24]	; (800b748 <prvSwitchTimerLists+0xc0>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b732:	4b06      	ldr	r3, [pc, #24]	; (800b74c <prvSwitchTimerLists+0xc4>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a04      	ldr	r2, [pc, #16]	; (800b748 <prvSwitchTimerLists+0xc0>)
 800b738:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b73a:	4a04      	ldr	r2, [pc, #16]	; (800b74c <prvSwitchTimerLists+0xc4>)
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	6013      	str	r3, [r2, #0]
}
 800b740:	bf00      	nop
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	20000f64 	.word	0x20000f64
 800b74c:	20000f68 	.word	0x20000f68

0800b750 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b756:	f000 f965 	bl	800ba24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b75a:	4b15      	ldr	r3, [pc, #84]	; (800b7b0 <prvCheckForValidListAndQueue+0x60>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d120      	bne.n	800b7a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b762:	4814      	ldr	r0, [pc, #80]	; (800b7b4 <prvCheckForValidListAndQueue+0x64>)
 800b764:	f7fd f804 	bl	8008770 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b768:	4813      	ldr	r0, [pc, #76]	; (800b7b8 <prvCheckForValidListAndQueue+0x68>)
 800b76a:	f7fd f801 	bl	8008770 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b76e:	4b13      	ldr	r3, [pc, #76]	; (800b7bc <prvCheckForValidListAndQueue+0x6c>)
 800b770:	4a10      	ldr	r2, [pc, #64]	; (800b7b4 <prvCheckForValidListAndQueue+0x64>)
 800b772:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b774:	4b12      	ldr	r3, [pc, #72]	; (800b7c0 <prvCheckForValidListAndQueue+0x70>)
 800b776:	4a10      	ldr	r2, [pc, #64]	; (800b7b8 <prvCheckForValidListAndQueue+0x68>)
 800b778:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b77a:	2300      	movs	r3, #0
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	4b11      	ldr	r3, [pc, #68]	; (800b7c4 <prvCheckForValidListAndQueue+0x74>)
 800b780:	4a11      	ldr	r2, [pc, #68]	; (800b7c8 <prvCheckForValidListAndQueue+0x78>)
 800b782:	2110      	movs	r1, #16
 800b784:	200a      	movs	r0, #10
 800b786:	f7fd f90f 	bl	80089a8 <xQueueGenericCreateStatic>
 800b78a:	4603      	mov	r3, r0
 800b78c:	4a08      	ldr	r2, [pc, #32]	; (800b7b0 <prvCheckForValidListAndQueue+0x60>)
 800b78e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b790:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <prvCheckForValidListAndQueue+0x60>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d005      	beq.n	800b7a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b798:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <prvCheckForValidListAndQueue+0x60>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	490b      	ldr	r1, [pc, #44]	; (800b7cc <prvCheckForValidListAndQueue+0x7c>)
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fd ff44 	bl	800962c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7a4:	f000 f96e 	bl	800ba84 <vPortExitCritical>
}
 800b7a8:	bf00      	nop
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	20000f6c 	.word	0x20000f6c
 800b7b4:	20000f3c 	.word	0x20000f3c
 800b7b8:	20000f50 	.word	0x20000f50
 800b7bc:	20000f64 	.word	0x20000f64
 800b7c0:	20000f68 	.word	0x20000f68
 800b7c4:	20001018 	.word	0x20001018
 800b7c8:	20000f78 	.word	0x20000f78
 800b7cc:	0800d02c 	.word	0x0800d02c

0800b7d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	3b04      	subs	r3, #4
 800b7e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b7e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3b04      	subs	r3, #4
 800b7ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	f023 0201 	bic.w	r2, r3, #1
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3b04      	subs	r3, #4
 800b7fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b800:	4a0c      	ldr	r2, [pc, #48]	; (800b834 <pxPortInitialiseStack+0x64>)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	3b14      	subs	r3, #20
 800b80a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	3b04      	subs	r3, #4
 800b816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f06f 0202 	mvn.w	r2, #2
 800b81e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	3b20      	subs	r3, #32
 800b824:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b826:	68fb      	ldr	r3, [r7, #12]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr
 800b834:	0800b839 	.word	0x0800b839

0800b838 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b83e:	2300      	movs	r3, #0
 800b840:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b842:	4b12      	ldr	r3, [pc, #72]	; (800b88c <prvTaskExitError+0x54>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b84a:	d00a      	beq.n	800b862 <prvTaskExitError+0x2a>
	__asm volatile
 800b84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b850:	f383 8811 	msr	BASEPRI, r3
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	f3bf 8f4f 	dsb	sy
 800b85c:	60fb      	str	r3, [r7, #12]
}
 800b85e:	bf00      	nop
 800b860:	e7fe      	b.n	800b860 <prvTaskExitError+0x28>
	__asm volatile
 800b862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b866:	f383 8811 	msr	BASEPRI, r3
 800b86a:	f3bf 8f6f 	isb	sy
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	60bb      	str	r3, [r7, #8]
}
 800b874:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b876:	bf00      	nop
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d0fc      	beq.n	800b878 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b87e:	bf00      	nop
 800b880:	bf00      	nop
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	20000014 	.word	0x20000014

0800b890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b890:	4b07      	ldr	r3, [pc, #28]	; (800b8b0 <pxCurrentTCBConst2>)
 800b892:	6819      	ldr	r1, [r3, #0]
 800b894:	6808      	ldr	r0, [r1, #0]
 800b896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89a:	f380 8809 	msr	PSP, r0
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f04f 0000 	mov.w	r0, #0
 800b8a6:	f380 8811 	msr	BASEPRI, r0
 800b8aa:	4770      	bx	lr
 800b8ac:	f3af 8000 	nop.w

0800b8b0 <pxCurrentTCBConst2>:
 800b8b0:	20000a3c 	.word	0x20000a3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b8b4:	bf00      	nop
 800b8b6:	bf00      	nop

0800b8b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b8b8:	4808      	ldr	r0, [pc, #32]	; (800b8dc <prvPortStartFirstTask+0x24>)
 800b8ba:	6800      	ldr	r0, [r0, #0]
 800b8bc:	6800      	ldr	r0, [r0, #0]
 800b8be:	f380 8808 	msr	MSP, r0
 800b8c2:	f04f 0000 	mov.w	r0, #0
 800b8c6:	f380 8814 	msr	CONTROL, r0
 800b8ca:	b662      	cpsie	i
 800b8cc:	b661      	cpsie	f
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	df00      	svc	0
 800b8d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8da:	bf00      	nop
 800b8dc:	e000ed08 	.word	0xe000ed08

0800b8e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b086      	sub	sp, #24
 800b8e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b8e6:	4b46      	ldr	r3, [pc, #280]	; (800ba00 <xPortStartScheduler+0x120>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a46      	ldr	r2, [pc, #280]	; (800ba04 <xPortStartScheduler+0x124>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d10a      	bne.n	800b906 <xPortStartScheduler+0x26>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	613b      	str	r3, [r7, #16]
}
 800b902:	bf00      	nop
 800b904:	e7fe      	b.n	800b904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b906:	4b3e      	ldr	r3, [pc, #248]	; (800ba00 <xPortStartScheduler+0x120>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a3f      	ldr	r2, [pc, #252]	; (800ba08 <xPortStartScheduler+0x128>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d10a      	bne.n	800b926 <xPortStartScheduler+0x46>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	60fb      	str	r3, [r7, #12]
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b926:	4b39      	ldr	r3, [pc, #228]	; (800ba0c <xPortStartScheduler+0x12c>)
 800b928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	22ff      	movs	r2, #255	; 0xff
 800b936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b940:	78fb      	ldrb	r3, [r7, #3]
 800b942:	b2db      	uxtb	r3, r3
 800b944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b948:	b2da      	uxtb	r2, r3
 800b94a:	4b31      	ldr	r3, [pc, #196]	; (800ba10 <xPortStartScheduler+0x130>)
 800b94c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b94e:	4b31      	ldr	r3, [pc, #196]	; (800ba14 <xPortStartScheduler+0x134>)
 800b950:	2207      	movs	r2, #7
 800b952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b954:	e009      	b.n	800b96a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b956:	4b2f      	ldr	r3, [pc, #188]	; (800ba14 <xPortStartScheduler+0x134>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3b01      	subs	r3, #1
 800b95c:	4a2d      	ldr	r2, [pc, #180]	; (800ba14 <xPortStartScheduler+0x134>)
 800b95e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b960:	78fb      	ldrb	r3, [r7, #3]
 800b962:	b2db      	uxtb	r3, r3
 800b964:	005b      	lsls	r3, r3, #1
 800b966:	b2db      	uxtb	r3, r3
 800b968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b96a:	78fb      	ldrb	r3, [r7, #3]
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b972:	2b80      	cmp	r3, #128	; 0x80
 800b974:	d0ef      	beq.n	800b956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b976:	4b27      	ldr	r3, [pc, #156]	; (800ba14 <xPortStartScheduler+0x134>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f1c3 0307 	rsb	r3, r3, #7
 800b97e:	2b04      	cmp	r3, #4
 800b980:	d00a      	beq.n	800b998 <xPortStartScheduler+0xb8>
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	60bb      	str	r3, [r7, #8]
}
 800b994:	bf00      	nop
 800b996:	e7fe      	b.n	800b996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b998:	4b1e      	ldr	r3, [pc, #120]	; (800ba14 <xPortStartScheduler+0x134>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	021b      	lsls	r3, r3, #8
 800b99e:	4a1d      	ldr	r2, [pc, #116]	; (800ba14 <xPortStartScheduler+0x134>)
 800b9a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b9a2:	4b1c      	ldr	r3, [pc, #112]	; (800ba14 <xPortStartScheduler+0x134>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b9aa:	4a1a      	ldr	r2, [pc, #104]	; (800ba14 <xPortStartScheduler+0x134>)
 800b9ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	b2da      	uxtb	r2, r3
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9b6:	4b18      	ldr	r3, [pc, #96]	; (800ba18 <xPortStartScheduler+0x138>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a17      	ldr	r2, [pc, #92]	; (800ba18 <xPortStartScheduler+0x138>)
 800b9bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b9c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9c2:	4b15      	ldr	r3, [pc, #84]	; (800ba18 <xPortStartScheduler+0x138>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a14      	ldr	r2, [pc, #80]	; (800ba18 <xPortStartScheduler+0x138>)
 800b9c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b9cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b9ce:	f000 f8dd 	bl	800bb8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b9d2:	4b12      	ldr	r3, [pc, #72]	; (800ba1c <xPortStartScheduler+0x13c>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b9d8:	f000 f8fc 	bl	800bbd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9dc:	4b10      	ldr	r3, [pc, #64]	; (800ba20 <xPortStartScheduler+0x140>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a0f      	ldr	r2, [pc, #60]	; (800ba20 <xPortStartScheduler+0x140>)
 800b9e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b9e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b9e8:	f7ff ff66 	bl	800b8b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b9ec:	f7fe fdd4 	bl	800a598 <vTaskSwitchContext>
	prvTaskExitError();
 800b9f0:	f7ff ff22 	bl	800b838 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3718      	adds	r7, #24
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	e000ed00 	.word	0xe000ed00
 800ba04:	410fc271 	.word	0x410fc271
 800ba08:	410fc270 	.word	0x410fc270
 800ba0c:	e000e400 	.word	0xe000e400
 800ba10:	20001068 	.word	0x20001068
 800ba14:	2000106c 	.word	0x2000106c
 800ba18:	e000ed20 	.word	0xe000ed20
 800ba1c:	20000014 	.word	0x20000014
 800ba20:	e000ef34 	.word	0xe000ef34

0800ba24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
	__asm volatile
 800ba2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2e:	f383 8811 	msr	BASEPRI, r3
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	f3bf 8f4f 	dsb	sy
 800ba3a:	607b      	str	r3, [r7, #4]
}
 800ba3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba3e:	4b0f      	ldr	r3, [pc, #60]	; (800ba7c <vPortEnterCritical+0x58>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3301      	adds	r3, #1
 800ba44:	4a0d      	ldr	r2, [pc, #52]	; (800ba7c <vPortEnterCritical+0x58>)
 800ba46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba48:	4b0c      	ldr	r3, [pc, #48]	; (800ba7c <vPortEnterCritical+0x58>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d10f      	bne.n	800ba70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba50:	4b0b      	ldr	r3, [pc, #44]	; (800ba80 <vPortEnterCritical+0x5c>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00a      	beq.n	800ba70 <vPortEnterCritical+0x4c>
	__asm volatile
 800ba5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5e:	f383 8811 	msr	BASEPRI, r3
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	603b      	str	r3, [r7, #0]
}
 800ba6c:	bf00      	nop
 800ba6e:	e7fe      	b.n	800ba6e <vPortEnterCritical+0x4a>
	}
}
 800ba70:	bf00      	nop
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr
 800ba7c:	20000014 	.word	0x20000014
 800ba80:	e000ed04 	.word	0xe000ed04

0800ba84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba8a:	4b12      	ldr	r3, [pc, #72]	; (800bad4 <vPortExitCritical+0x50>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10a      	bne.n	800baa8 <vPortExitCritical+0x24>
	__asm volatile
 800ba92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba96:	f383 8811 	msr	BASEPRI, r3
 800ba9a:	f3bf 8f6f 	isb	sy
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	607b      	str	r3, [r7, #4]
}
 800baa4:	bf00      	nop
 800baa6:	e7fe      	b.n	800baa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800baa8:	4b0a      	ldr	r3, [pc, #40]	; (800bad4 <vPortExitCritical+0x50>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	3b01      	subs	r3, #1
 800baae:	4a09      	ldr	r2, [pc, #36]	; (800bad4 <vPortExitCritical+0x50>)
 800bab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bab2:	4b08      	ldr	r3, [pc, #32]	; (800bad4 <vPortExitCritical+0x50>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d105      	bne.n	800bac6 <vPortExitCritical+0x42>
 800baba:	2300      	movs	r3, #0
 800babc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	f383 8811 	msr	BASEPRI, r3
}
 800bac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bac6:	bf00      	nop
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	20000014 	.word	0x20000014
	...

0800bae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bae0:	f3ef 8009 	mrs	r0, PSP
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	4b15      	ldr	r3, [pc, #84]	; (800bb40 <pxCurrentTCBConst>)
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	f01e 0f10 	tst.w	lr, #16
 800baf0:	bf08      	it	eq
 800baf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800baf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafa:	6010      	str	r0, [r2, #0]
 800bafc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bb04:	f380 8811 	msr	BASEPRI, r0
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f7fe fd42 	bl	800a598 <vTaskSwitchContext>
 800bb14:	f04f 0000 	mov.w	r0, #0
 800bb18:	f380 8811 	msr	BASEPRI, r0
 800bb1c:	bc09      	pop	{r0, r3}
 800bb1e:	6819      	ldr	r1, [r3, #0]
 800bb20:	6808      	ldr	r0, [r1, #0]
 800bb22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb26:	f01e 0f10 	tst.w	lr, #16
 800bb2a:	bf08      	it	eq
 800bb2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb30:	f380 8809 	msr	PSP, r0
 800bb34:	f3bf 8f6f 	isb	sy
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	f3af 8000 	nop.w

0800bb40 <pxCurrentTCBConst>:
 800bb40:	20000a3c 	.word	0x20000a3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb44:	bf00      	nop
 800bb46:	bf00      	nop

0800bb48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	607b      	str	r3, [r7, #4]
}
 800bb60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb62:	f7fe fc5f 	bl	800a424 <xTaskIncrementTick>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d003      	beq.n	800bb74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb6c:	4b06      	ldr	r3, [pc, #24]	; (800bb88 <xPortSysTickHandler+0x40>)
 800bb6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	2300      	movs	r3, #0
 800bb76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	f383 8811 	msr	BASEPRI, r3
}
 800bb7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb80:	bf00      	nop
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	e000ed04 	.word	0xe000ed04

0800bb8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb90:	4b0b      	ldr	r3, [pc, #44]	; (800bbc0 <vPortSetupTimerInterrupt+0x34>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb96:	4b0b      	ldr	r3, [pc, #44]	; (800bbc4 <vPortSetupTimerInterrupt+0x38>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb9c:	4b0a      	ldr	r3, [pc, #40]	; (800bbc8 <vPortSetupTimerInterrupt+0x3c>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a0a      	ldr	r2, [pc, #40]	; (800bbcc <vPortSetupTimerInterrupt+0x40>)
 800bba2:	fba2 2303 	umull	r2, r3, r2, r3
 800bba6:	099b      	lsrs	r3, r3, #6
 800bba8:	4a09      	ldr	r2, [pc, #36]	; (800bbd0 <vPortSetupTimerInterrupt+0x44>)
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bbae:	4b04      	ldr	r3, [pc, #16]	; (800bbc0 <vPortSetupTimerInterrupt+0x34>)
 800bbb0:	2207      	movs	r2, #7
 800bbb2:	601a      	str	r2, [r3, #0]
}
 800bbb4:	bf00      	nop
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	e000e010 	.word	0xe000e010
 800bbc4:	e000e018 	.word	0xe000e018
 800bbc8:	20000000 	.word	0x20000000
 800bbcc:	10624dd3 	.word	0x10624dd3
 800bbd0:	e000e014 	.word	0xe000e014

0800bbd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bbd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bbe4 <vPortEnableVFP+0x10>
 800bbd8:	6801      	ldr	r1, [r0, #0]
 800bbda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bbde:	6001      	str	r1, [r0, #0]
 800bbe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bbe2:	bf00      	nop
 800bbe4:	e000ed88 	.word	0xe000ed88

0800bbe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bbee:	f3ef 8305 	mrs	r3, IPSR
 800bbf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2b0f      	cmp	r3, #15
 800bbf8:	d914      	bls.n	800bc24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbfa:	4a17      	ldr	r2, [pc, #92]	; (800bc58 <vPortValidateInterruptPriority+0x70>)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	4413      	add	r3, r2
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bc04:	4b15      	ldr	r3, [pc, #84]	; (800bc5c <vPortValidateInterruptPriority+0x74>)
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	7afa      	ldrb	r2, [r7, #11]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d20a      	bcs.n	800bc24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc12:	f383 8811 	msr	BASEPRI, r3
 800bc16:	f3bf 8f6f 	isb	sy
 800bc1a:	f3bf 8f4f 	dsb	sy
 800bc1e:	607b      	str	r3, [r7, #4]
}
 800bc20:	bf00      	nop
 800bc22:	e7fe      	b.n	800bc22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc24:	4b0e      	ldr	r3, [pc, #56]	; (800bc60 <vPortValidateInterruptPriority+0x78>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bc2c:	4b0d      	ldr	r3, [pc, #52]	; (800bc64 <vPortValidateInterruptPriority+0x7c>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d90a      	bls.n	800bc4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	603b      	str	r3, [r7, #0]
}
 800bc46:	bf00      	nop
 800bc48:	e7fe      	b.n	800bc48 <vPortValidateInterruptPriority+0x60>
	}
 800bc4a:	bf00      	nop
 800bc4c:	3714      	adds	r7, #20
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	e000e3f0 	.word	0xe000e3f0
 800bc5c:	20001068 	.word	0x20001068
 800bc60:	e000ed0c 	.word	0xe000ed0c
 800bc64:	2000106c 	.word	0x2000106c

0800bc68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b08a      	sub	sp, #40	; 0x28
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc70:	2300      	movs	r3, #0
 800bc72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc74:	f7fe fb1a 	bl	800a2ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc78:	4b5b      	ldr	r3, [pc, #364]	; (800bde8 <pvPortMalloc+0x180>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d101      	bne.n	800bc84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc80:	f000 f920 	bl	800bec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc84:	4b59      	ldr	r3, [pc, #356]	; (800bdec <pvPortMalloc+0x184>)
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f040 8093 	bne.w	800bdb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d01d      	beq.n	800bcd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bc98:	2208      	movs	r2, #8
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f003 0307 	and.w	r3, r3, #7
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d014      	beq.n	800bcd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f023 0307 	bic.w	r3, r3, #7
 800bcb0:	3308      	adds	r3, #8
 800bcb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f003 0307 	and.w	r3, r3, #7
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00a      	beq.n	800bcd4 <pvPortMalloc+0x6c>
	__asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	617b      	str	r3, [r7, #20]
}
 800bcd0:	bf00      	nop
 800bcd2:	e7fe      	b.n	800bcd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d06e      	beq.n	800bdb8 <pvPortMalloc+0x150>
 800bcda:	4b45      	ldr	r3, [pc, #276]	; (800bdf0 <pvPortMalloc+0x188>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d869      	bhi.n	800bdb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bce4:	4b43      	ldr	r3, [pc, #268]	; (800bdf4 <pvPortMalloc+0x18c>)
 800bce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bce8:	4b42      	ldr	r3, [pc, #264]	; (800bdf4 <pvPortMalloc+0x18c>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcee:	e004      	b.n	800bcfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d903      	bls.n	800bd0c <pvPortMalloc+0xa4>
 800bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1f1      	bne.n	800bcf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd0c:	4b36      	ldr	r3, [pc, #216]	; (800bde8 <pvPortMalloc+0x180>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d050      	beq.n	800bdb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd16:	6a3b      	ldr	r3, [r7, #32]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2208      	movs	r2, #8
 800bd1c:	4413      	add	r3, r2
 800bd1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	6a3b      	ldr	r3, [r7, #32]
 800bd26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2a:	685a      	ldr	r2, [r3, #4]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	1ad2      	subs	r2, r2, r3
 800bd30:	2308      	movs	r3, #8
 800bd32:	005b      	lsls	r3, r3, #1
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d91f      	bls.n	800bd78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	f003 0307 	and.w	r3, r3, #7
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00a      	beq.n	800bd60 <pvPortMalloc+0xf8>
	__asm volatile
 800bd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4e:	f383 8811 	msr	BASEPRI, r3
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	613b      	str	r3, [r7, #16]
}
 800bd5c:	bf00      	nop
 800bd5e:	e7fe      	b.n	800bd5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd62:	685a      	ldr	r2, [r3, #4]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	1ad2      	subs	r2, r2, r3
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd72:	69b8      	ldr	r0, [r7, #24]
 800bd74:	f000 f908 	bl	800bf88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd78:	4b1d      	ldr	r3, [pc, #116]	; (800bdf0 <pvPortMalloc+0x188>)
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	1ad3      	subs	r3, r2, r3
 800bd82:	4a1b      	ldr	r2, [pc, #108]	; (800bdf0 <pvPortMalloc+0x188>)
 800bd84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd86:	4b1a      	ldr	r3, [pc, #104]	; (800bdf0 <pvPortMalloc+0x188>)
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	4b1b      	ldr	r3, [pc, #108]	; (800bdf8 <pvPortMalloc+0x190>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d203      	bcs.n	800bd9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd92:	4b17      	ldr	r3, [pc, #92]	; (800bdf0 <pvPortMalloc+0x188>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a18      	ldr	r2, [pc, #96]	; (800bdf8 <pvPortMalloc+0x190>)
 800bd98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	4b13      	ldr	r3, [pc, #76]	; (800bdec <pvPortMalloc+0x184>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	431a      	orrs	r2, r3
 800bda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdaa:	2200      	movs	r2, #0
 800bdac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bdae:	4b13      	ldr	r3, [pc, #76]	; (800bdfc <pvPortMalloc+0x194>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	4a11      	ldr	r2, [pc, #68]	; (800bdfc <pvPortMalloc+0x194>)
 800bdb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bdb8:	f7fe fa86 	bl	800a2c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	f003 0307 	and.w	r3, r3, #7
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00a      	beq.n	800bddc <pvPortMalloc+0x174>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	60fb      	str	r3, [r7, #12]
}
 800bdd8:	bf00      	nop
 800bdda:	e7fe      	b.n	800bdda <pvPortMalloc+0x172>
	return pvReturn;
 800bddc:	69fb      	ldr	r3, [r7, #28]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3728      	adds	r7, #40	; 0x28
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	20006e38 	.word	0x20006e38
 800bdec:	20006e4c 	.word	0x20006e4c
 800bdf0:	20006e3c 	.word	0x20006e3c
 800bdf4:	20006e30 	.word	0x20006e30
 800bdf8:	20006e40 	.word	0x20006e40
 800bdfc:	20006e44 	.word	0x20006e44

0800be00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b086      	sub	sp, #24
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d04d      	beq.n	800beae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be12:	2308      	movs	r3, #8
 800be14:	425b      	negs	r3, r3
 800be16:	697a      	ldr	r2, [r7, #20]
 800be18:	4413      	add	r3, r2
 800be1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	685a      	ldr	r2, [r3, #4]
 800be24:	4b24      	ldr	r3, [pc, #144]	; (800beb8 <vPortFree+0xb8>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4013      	ands	r3, r2
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10a      	bne.n	800be44 <vPortFree+0x44>
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	60fb      	str	r3, [r7, #12]
}
 800be40:	bf00      	nop
 800be42:	e7fe      	b.n	800be42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d00a      	beq.n	800be62 <vPortFree+0x62>
	__asm volatile
 800be4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	60bb      	str	r3, [r7, #8]
}
 800be5e:	bf00      	nop
 800be60:	e7fe      	b.n	800be60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	685a      	ldr	r2, [r3, #4]
 800be66:	4b14      	ldr	r3, [pc, #80]	; (800beb8 <vPortFree+0xb8>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4013      	ands	r3, r2
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d01e      	beq.n	800beae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d11a      	bne.n	800beae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	685a      	ldr	r2, [r3, #4]
 800be7c:	4b0e      	ldr	r3, [pc, #56]	; (800beb8 <vPortFree+0xb8>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	43db      	mvns	r3, r3
 800be82:	401a      	ands	r2, r3
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be88:	f7fe fa10 	bl	800a2ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	685a      	ldr	r2, [r3, #4]
 800be90:	4b0a      	ldr	r3, [pc, #40]	; (800bebc <vPortFree+0xbc>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4413      	add	r3, r2
 800be96:	4a09      	ldr	r2, [pc, #36]	; (800bebc <vPortFree+0xbc>)
 800be98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be9a:	6938      	ldr	r0, [r7, #16]
 800be9c:	f000 f874 	bl	800bf88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bea0:	4b07      	ldr	r3, [pc, #28]	; (800bec0 <vPortFree+0xc0>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	3301      	adds	r3, #1
 800bea6:	4a06      	ldr	r2, [pc, #24]	; (800bec0 <vPortFree+0xc0>)
 800bea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800beaa:	f7fe fa0d 	bl	800a2c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800beae:	bf00      	nop
 800beb0:	3718      	adds	r7, #24
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	20006e4c 	.word	0x20006e4c
 800bebc:	20006e3c 	.word	0x20006e3c
 800bec0:	20006e48 	.word	0x20006e48

0800bec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800beca:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 800bece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bed0:	4b27      	ldr	r3, [pc, #156]	; (800bf70 <prvHeapInit+0xac>)
 800bed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f003 0307 	and.w	r3, r3, #7
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00c      	beq.n	800bef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3307      	adds	r3, #7
 800bee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f023 0307 	bic.w	r3, r3, #7
 800beea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800beec:	68ba      	ldr	r2, [r7, #8]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	1ad3      	subs	r3, r2, r3
 800bef2:	4a1f      	ldr	r2, [pc, #124]	; (800bf70 <prvHeapInit+0xac>)
 800bef4:	4413      	add	r3, r2
 800bef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800befc:	4a1d      	ldr	r2, [pc, #116]	; (800bf74 <prvHeapInit+0xb0>)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf02:	4b1c      	ldr	r3, [pc, #112]	; (800bf74 <prvHeapInit+0xb0>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf10:	2208      	movs	r2, #8
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	1a9b      	subs	r3, r3, r2
 800bf16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f023 0307 	bic.w	r3, r3, #7
 800bf1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	4a15      	ldr	r2, [pc, #84]	; (800bf78 <prvHeapInit+0xb4>)
 800bf24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf26:	4b14      	ldr	r3, [pc, #80]	; (800bf78 <prvHeapInit+0xb4>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf2e:	4b12      	ldr	r3, [pc, #72]	; (800bf78 <prvHeapInit+0xb4>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	2200      	movs	r2, #0
 800bf34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	1ad2      	subs	r2, r2, r3
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf44:	4b0c      	ldr	r3, [pc, #48]	; (800bf78 <prvHeapInit+0xb4>)
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	4a0a      	ldr	r2, [pc, #40]	; (800bf7c <prvHeapInit+0xb8>)
 800bf52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	4a09      	ldr	r2, [pc, #36]	; (800bf80 <prvHeapInit+0xbc>)
 800bf5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf5c:	4b09      	ldr	r3, [pc, #36]	; (800bf84 <prvHeapInit+0xc0>)
 800bf5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf62:	601a      	str	r2, [r3, #0]
}
 800bf64:	bf00      	nop
 800bf66:	3714      	adds	r7, #20
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr
 800bf70:	20001070 	.word	0x20001070
 800bf74:	20006e30 	.word	0x20006e30
 800bf78:	20006e38 	.word	0x20006e38
 800bf7c:	20006e40 	.word	0x20006e40
 800bf80:	20006e3c 	.word	0x20006e3c
 800bf84:	20006e4c 	.word	0x20006e4c

0800bf88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf90:	4b28      	ldr	r3, [pc, #160]	; (800c034 <prvInsertBlockIntoFreeList+0xac>)
 800bf92:	60fb      	str	r3, [r7, #12]
 800bf94:	e002      	b.n	800bf9c <prvInsertBlockIntoFreeList+0x14>
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	60fb      	str	r3, [r7, #12]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d8f7      	bhi.n	800bf96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d108      	bne.n	800bfca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	441a      	add	r2, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	441a      	add	r2, r3
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d118      	bne.n	800c010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	4b15      	ldr	r3, [pc, #84]	; (800c038 <prvInsertBlockIntoFreeList+0xb0>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d00d      	beq.n	800c006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	441a      	add	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	601a      	str	r2, [r3, #0]
 800c004:	e008      	b.n	800c018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c006:	4b0c      	ldr	r3, [pc, #48]	; (800c038 <prvInsertBlockIntoFreeList+0xb0>)
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	601a      	str	r2, [r3, #0]
 800c00e:	e003      	b.n	800c018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d002      	beq.n	800c026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c026:	bf00      	nop
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	20006e30 	.word	0x20006e30
 800c038:	20006e38 	.word	0x20006e38

0800c03c <atoi>:
 800c03c:	220a      	movs	r2, #10
 800c03e:	2100      	movs	r1, #0
 800c040:	f000 ba78 	b.w	800c534 <strtol>

0800c044 <__errno>:
 800c044:	4b01      	ldr	r3, [pc, #4]	; (800c04c <__errno+0x8>)
 800c046:	6818      	ldr	r0, [r3, #0]
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop
 800c04c:	20000018 	.word	0x20000018

0800c050 <__libc_init_array>:
 800c050:	b570      	push	{r4, r5, r6, lr}
 800c052:	4d0d      	ldr	r5, [pc, #52]	; (800c088 <__libc_init_array+0x38>)
 800c054:	4c0d      	ldr	r4, [pc, #52]	; (800c08c <__libc_init_array+0x3c>)
 800c056:	1b64      	subs	r4, r4, r5
 800c058:	10a4      	asrs	r4, r4, #2
 800c05a:	2600      	movs	r6, #0
 800c05c:	42a6      	cmp	r6, r4
 800c05e:	d109      	bne.n	800c074 <__libc_init_array+0x24>
 800c060:	4d0b      	ldr	r5, [pc, #44]	; (800c090 <__libc_init_array+0x40>)
 800c062:	4c0c      	ldr	r4, [pc, #48]	; (800c094 <__libc_init_array+0x44>)
 800c064:	f000 ff46 	bl	800cef4 <_init>
 800c068:	1b64      	subs	r4, r4, r5
 800c06a:	10a4      	asrs	r4, r4, #2
 800c06c:	2600      	movs	r6, #0
 800c06e:	42a6      	cmp	r6, r4
 800c070:	d105      	bne.n	800c07e <__libc_init_array+0x2e>
 800c072:	bd70      	pop	{r4, r5, r6, pc}
 800c074:	f855 3b04 	ldr.w	r3, [r5], #4
 800c078:	4798      	blx	r3
 800c07a:	3601      	adds	r6, #1
 800c07c:	e7ee      	b.n	800c05c <__libc_init_array+0xc>
 800c07e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c082:	4798      	blx	r3
 800c084:	3601      	adds	r6, #1
 800c086:	e7f2      	b.n	800c06e <__libc_init_array+0x1e>
 800c088:	0800d3b8 	.word	0x0800d3b8
 800c08c:	0800d3b8 	.word	0x0800d3b8
 800c090:	0800d3b8 	.word	0x0800d3b8
 800c094:	0800d3bc 	.word	0x0800d3bc

0800c098 <__itoa>:
 800c098:	1e93      	subs	r3, r2, #2
 800c09a:	2b22      	cmp	r3, #34	; 0x22
 800c09c:	b510      	push	{r4, lr}
 800c09e:	460c      	mov	r4, r1
 800c0a0:	d904      	bls.n	800c0ac <__itoa+0x14>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	700b      	strb	r3, [r1, #0]
 800c0a6:	461c      	mov	r4, r3
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	bd10      	pop	{r4, pc}
 800c0ac:	2a0a      	cmp	r2, #10
 800c0ae:	d109      	bne.n	800c0c4 <__itoa+0x2c>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	da07      	bge.n	800c0c4 <__itoa+0x2c>
 800c0b4:	232d      	movs	r3, #45	; 0x2d
 800c0b6:	700b      	strb	r3, [r1, #0]
 800c0b8:	4240      	negs	r0, r0
 800c0ba:	2101      	movs	r1, #1
 800c0bc:	4421      	add	r1, r4
 800c0be:	f000 fa43 	bl	800c548 <__utoa>
 800c0c2:	e7f1      	b.n	800c0a8 <__itoa+0x10>
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	e7f9      	b.n	800c0bc <__itoa+0x24>

0800c0c8 <itoa>:
 800c0c8:	f7ff bfe6 	b.w	800c098 <__itoa>

0800c0cc <__retarget_lock_acquire_recursive>:
 800c0cc:	4770      	bx	lr

0800c0ce <__retarget_lock_release_recursive>:
 800c0ce:	4770      	bx	lr

0800c0d0 <malloc>:
 800c0d0:	4b02      	ldr	r3, [pc, #8]	; (800c0dc <malloc+0xc>)
 800c0d2:	4601      	mov	r1, r0
 800c0d4:	6818      	ldr	r0, [r3, #0]
 800c0d6:	f000 b885 	b.w	800c1e4 <_malloc_r>
 800c0da:	bf00      	nop
 800c0dc:	20000018 	.word	0x20000018

0800c0e0 <memcpy>:
 800c0e0:	440a      	add	r2, r1
 800c0e2:	4291      	cmp	r1, r2
 800c0e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c0e8:	d100      	bne.n	800c0ec <memcpy+0xc>
 800c0ea:	4770      	bx	lr
 800c0ec:	b510      	push	{r4, lr}
 800c0ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0f6:	4291      	cmp	r1, r2
 800c0f8:	d1f9      	bne.n	800c0ee <memcpy+0xe>
 800c0fa:	bd10      	pop	{r4, pc}

0800c0fc <memset>:
 800c0fc:	4402      	add	r2, r0
 800c0fe:	4603      	mov	r3, r0
 800c100:	4293      	cmp	r3, r2
 800c102:	d100      	bne.n	800c106 <memset+0xa>
 800c104:	4770      	bx	lr
 800c106:	f803 1b01 	strb.w	r1, [r3], #1
 800c10a:	e7f9      	b.n	800c100 <memset+0x4>

0800c10c <_free_r>:
 800c10c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c10e:	2900      	cmp	r1, #0
 800c110:	d044      	beq.n	800c19c <_free_r+0x90>
 800c112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c116:	9001      	str	r0, [sp, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f1a1 0404 	sub.w	r4, r1, #4
 800c11e:	bfb8      	it	lt
 800c120:	18e4      	addlt	r4, r4, r3
 800c122:	f000 fa53 	bl	800c5cc <__malloc_lock>
 800c126:	4a1e      	ldr	r2, [pc, #120]	; (800c1a0 <_free_r+0x94>)
 800c128:	9801      	ldr	r0, [sp, #4]
 800c12a:	6813      	ldr	r3, [r2, #0]
 800c12c:	b933      	cbnz	r3, 800c13c <_free_r+0x30>
 800c12e:	6063      	str	r3, [r4, #4]
 800c130:	6014      	str	r4, [r2, #0]
 800c132:	b003      	add	sp, #12
 800c134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c138:	f000 ba4e 	b.w	800c5d8 <__malloc_unlock>
 800c13c:	42a3      	cmp	r3, r4
 800c13e:	d908      	bls.n	800c152 <_free_r+0x46>
 800c140:	6825      	ldr	r5, [r4, #0]
 800c142:	1961      	adds	r1, r4, r5
 800c144:	428b      	cmp	r3, r1
 800c146:	bf01      	itttt	eq
 800c148:	6819      	ldreq	r1, [r3, #0]
 800c14a:	685b      	ldreq	r3, [r3, #4]
 800c14c:	1949      	addeq	r1, r1, r5
 800c14e:	6021      	streq	r1, [r4, #0]
 800c150:	e7ed      	b.n	800c12e <_free_r+0x22>
 800c152:	461a      	mov	r2, r3
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	b10b      	cbz	r3, 800c15c <_free_r+0x50>
 800c158:	42a3      	cmp	r3, r4
 800c15a:	d9fa      	bls.n	800c152 <_free_r+0x46>
 800c15c:	6811      	ldr	r1, [r2, #0]
 800c15e:	1855      	adds	r5, r2, r1
 800c160:	42a5      	cmp	r5, r4
 800c162:	d10b      	bne.n	800c17c <_free_r+0x70>
 800c164:	6824      	ldr	r4, [r4, #0]
 800c166:	4421      	add	r1, r4
 800c168:	1854      	adds	r4, r2, r1
 800c16a:	42a3      	cmp	r3, r4
 800c16c:	6011      	str	r1, [r2, #0]
 800c16e:	d1e0      	bne.n	800c132 <_free_r+0x26>
 800c170:	681c      	ldr	r4, [r3, #0]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	6053      	str	r3, [r2, #4]
 800c176:	4421      	add	r1, r4
 800c178:	6011      	str	r1, [r2, #0]
 800c17a:	e7da      	b.n	800c132 <_free_r+0x26>
 800c17c:	d902      	bls.n	800c184 <_free_r+0x78>
 800c17e:	230c      	movs	r3, #12
 800c180:	6003      	str	r3, [r0, #0]
 800c182:	e7d6      	b.n	800c132 <_free_r+0x26>
 800c184:	6825      	ldr	r5, [r4, #0]
 800c186:	1961      	adds	r1, r4, r5
 800c188:	428b      	cmp	r3, r1
 800c18a:	bf04      	itt	eq
 800c18c:	6819      	ldreq	r1, [r3, #0]
 800c18e:	685b      	ldreq	r3, [r3, #4]
 800c190:	6063      	str	r3, [r4, #4]
 800c192:	bf04      	itt	eq
 800c194:	1949      	addeq	r1, r1, r5
 800c196:	6021      	streq	r1, [r4, #0]
 800c198:	6054      	str	r4, [r2, #4]
 800c19a:	e7ca      	b.n	800c132 <_free_r+0x26>
 800c19c:	b003      	add	sp, #12
 800c19e:	bd30      	pop	{r4, r5, pc}
 800c1a0:	20006e54 	.word	0x20006e54

0800c1a4 <sbrk_aligned>:
 800c1a4:	b570      	push	{r4, r5, r6, lr}
 800c1a6:	4e0e      	ldr	r6, [pc, #56]	; (800c1e0 <sbrk_aligned+0x3c>)
 800c1a8:	460c      	mov	r4, r1
 800c1aa:	6831      	ldr	r1, [r6, #0]
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	b911      	cbnz	r1, 800c1b6 <sbrk_aligned+0x12>
 800c1b0:	f000 f8f6 	bl	800c3a0 <_sbrk_r>
 800c1b4:	6030      	str	r0, [r6, #0]
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	f000 f8f1 	bl	800c3a0 <_sbrk_r>
 800c1be:	1c43      	adds	r3, r0, #1
 800c1c0:	d00a      	beq.n	800c1d8 <sbrk_aligned+0x34>
 800c1c2:	1cc4      	adds	r4, r0, #3
 800c1c4:	f024 0403 	bic.w	r4, r4, #3
 800c1c8:	42a0      	cmp	r0, r4
 800c1ca:	d007      	beq.n	800c1dc <sbrk_aligned+0x38>
 800c1cc:	1a21      	subs	r1, r4, r0
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	f000 f8e6 	bl	800c3a0 <_sbrk_r>
 800c1d4:	3001      	adds	r0, #1
 800c1d6:	d101      	bne.n	800c1dc <sbrk_aligned+0x38>
 800c1d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c1dc:	4620      	mov	r0, r4
 800c1de:	bd70      	pop	{r4, r5, r6, pc}
 800c1e0:	20006e58 	.word	0x20006e58

0800c1e4 <_malloc_r>:
 800c1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e8:	1ccd      	adds	r5, r1, #3
 800c1ea:	f025 0503 	bic.w	r5, r5, #3
 800c1ee:	3508      	adds	r5, #8
 800c1f0:	2d0c      	cmp	r5, #12
 800c1f2:	bf38      	it	cc
 800c1f4:	250c      	movcc	r5, #12
 800c1f6:	2d00      	cmp	r5, #0
 800c1f8:	4607      	mov	r7, r0
 800c1fa:	db01      	blt.n	800c200 <_malloc_r+0x1c>
 800c1fc:	42a9      	cmp	r1, r5
 800c1fe:	d905      	bls.n	800c20c <_malloc_r+0x28>
 800c200:	230c      	movs	r3, #12
 800c202:	603b      	str	r3, [r7, #0]
 800c204:	2600      	movs	r6, #0
 800c206:	4630      	mov	r0, r6
 800c208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c20c:	4e2e      	ldr	r6, [pc, #184]	; (800c2c8 <_malloc_r+0xe4>)
 800c20e:	f000 f9dd 	bl	800c5cc <__malloc_lock>
 800c212:	6833      	ldr	r3, [r6, #0]
 800c214:	461c      	mov	r4, r3
 800c216:	bb34      	cbnz	r4, 800c266 <_malloc_r+0x82>
 800c218:	4629      	mov	r1, r5
 800c21a:	4638      	mov	r0, r7
 800c21c:	f7ff ffc2 	bl	800c1a4 <sbrk_aligned>
 800c220:	1c43      	adds	r3, r0, #1
 800c222:	4604      	mov	r4, r0
 800c224:	d14d      	bne.n	800c2c2 <_malloc_r+0xde>
 800c226:	6834      	ldr	r4, [r6, #0]
 800c228:	4626      	mov	r6, r4
 800c22a:	2e00      	cmp	r6, #0
 800c22c:	d140      	bne.n	800c2b0 <_malloc_r+0xcc>
 800c22e:	6823      	ldr	r3, [r4, #0]
 800c230:	4631      	mov	r1, r6
 800c232:	4638      	mov	r0, r7
 800c234:	eb04 0803 	add.w	r8, r4, r3
 800c238:	f000 f8b2 	bl	800c3a0 <_sbrk_r>
 800c23c:	4580      	cmp	r8, r0
 800c23e:	d13a      	bne.n	800c2b6 <_malloc_r+0xd2>
 800c240:	6821      	ldr	r1, [r4, #0]
 800c242:	3503      	adds	r5, #3
 800c244:	1a6d      	subs	r5, r5, r1
 800c246:	f025 0503 	bic.w	r5, r5, #3
 800c24a:	3508      	adds	r5, #8
 800c24c:	2d0c      	cmp	r5, #12
 800c24e:	bf38      	it	cc
 800c250:	250c      	movcc	r5, #12
 800c252:	4629      	mov	r1, r5
 800c254:	4638      	mov	r0, r7
 800c256:	f7ff ffa5 	bl	800c1a4 <sbrk_aligned>
 800c25a:	3001      	adds	r0, #1
 800c25c:	d02b      	beq.n	800c2b6 <_malloc_r+0xd2>
 800c25e:	6823      	ldr	r3, [r4, #0]
 800c260:	442b      	add	r3, r5
 800c262:	6023      	str	r3, [r4, #0]
 800c264:	e00e      	b.n	800c284 <_malloc_r+0xa0>
 800c266:	6822      	ldr	r2, [r4, #0]
 800c268:	1b52      	subs	r2, r2, r5
 800c26a:	d41e      	bmi.n	800c2aa <_malloc_r+0xc6>
 800c26c:	2a0b      	cmp	r2, #11
 800c26e:	d916      	bls.n	800c29e <_malloc_r+0xba>
 800c270:	1961      	adds	r1, r4, r5
 800c272:	42a3      	cmp	r3, r4
 800c274:	6025      	str	r5, [r4, #0]
 800c276:	bf18      	it	ne
 800c278:	6059      	strne	r1, [r3, #4]
 800c27a:	6863      	ldr	r3, [r4, #4]
 800c27c:	bf08      	it	eq
 800c27e:	6031      	streq	r1, [r6, #0]
 800c280:	5162      	str	r2, [r4, r5]
 800c282:	604b      	str	r3, [r1, #4]
 800c284:	4638      	mov	r0, r7
 800c286:	f104 060b 	add.w	r6, r4, #11
 800c28a:	f000 f9a5 	bl	800c5d8 <__malloc_unlock>
 800c28e:	f026 0607 	bic.w	r6, r6, #7
 800c292:	1d23      	adds	r3, r4, #4
 800c294:	1af2      	subs	r2, r6, r3
 800c296:	d0b6      	beq.n	800c206 <_malloc_r+0x22>
 800c298:	1b9b      	subs	r3, r3, r6
 800c29a:	50a3      	str	r3, [r4, r2]
 800c29c:	e7b3      	b.n	800c206 <_malloc_r+0x22>
 800c29e:	6862      	ldr	r2, [r4, #4]
 800c2a0:	42a3      	cmp	r3, r4
 800c2a2:	bf0c      	ite	eq
 800c2a4:	6032      	streq	r2, [r6, #0]
 800c2a6:	605a      	strne	r2, [r3, #4]
 800c2a8:	e7ec      	b.n	800c284 <_malloc_r+0xa0>
 800c2aa:	4623      	mov	r3, r4
 800c2ac:	6864      	ldr	r4, [r4, #4]
 800c2ae:	e7b2      	b.n	800c216 <_malloc_r+0x32>
 800c2b0:	4634      	mov	r4, r6
 800c2b2:	6876      	ldr	r6, [r6, #4]
 800c2b4:	e7b9      	b.n	800c22a <_malloc_r+0x46>
 800c2b6:	230c      	movs	r3, #12
 800c2b8:	603b      	str	r3, [r7, #0]
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	f000 f98c 	bl	800c5d8 <__malloc_unlock>
 800c2c0:	e7a1      	b.n	800c206 <_malloc_r+0x22>
 800c2c2:	6025      	str	r5, [r4, #0]
 800c2c4:	e7de      	b.n	800c284 <_malloc_r+0xa0>
 800c2c6:	bf00      	nop
 800c2c8:	20006e54 	.word	0x20006e54

0800c2cc <cleanup_glue>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	6809      	ldr	r1, [r1, #0]
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	b109      	cbz	r1, 800c2da <cleanup_glue+0xe>
 800c2d6:	f7ff fff9 	bl	800c2cc <cleanup_glue>
 800c2da:	4621      	mov	r1, r4
 800c2dc:	4628      	mov	r0, r5
 800c2de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2e2:	f7ff bf13 	b.w	800c10c <_free_r>
	...

0800c2e8 <_reclaim_reent>:
 800c2e8:	4b2c      	ldr	r3, [pc, #176]	; (800c39c <_reclaim_reent+0xb4>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4283      	cmp	r3, r0
 800c2ee:	b570      	push	{r4, r5, r6, lr}
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	d051      	beq.n	800c398 <_reclaim_reent+0xb0>
 800c2f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c2f6:	b143      	cbz	r3, 800c30a <_reclaim_reent+0x22>
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d14a      	bne.n	800c394 <_reclaim_reent+0xac>
 800c2fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c300:	6819      	ldr	r1, [r3, #0]
 800c302:	b111      	cbz	r1, 800c30a <_reclaim_reent+0x22>
 800c304:	4620      	mov	r0, r4
 800c306:	f7ff ff01 	bl	800c10c <_free_r>
 800c30a:	6961      	ldr	r1, [r4, #20]
 800c30c:	b111      	cbz	r1, 800c314 <_reclaim_reent+0x2c>
 800c30e:	4620      	mov	r0, r4
 800c310:	f7ff fefc 	bl	800c10c <_free_r>
 800c314:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c316:	b111      	cbz	r1, 800c31e <_reclaim_reent+0x36>
 800c318:	4620      	mov	r0, r4
 800c31a:	f7ff fef7 	bl	800c10c <_free_r>
 800c31e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c320:	b111      	cbz	r1, 800c328 <_reclaim_reent+0x40>
 800c322:	4620      	mov	r0, r4
 800c324:	f7ff fef2 	bl	800c10c <_free_r>
 800c328:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c32a:	b111      	cbz	r1, 800c332 <_reclaim_reent+0x4a>
 800c32c:	4620      	mov	r0, r4
 800c32e:	f7ff feed 	bl	800c10c <_free_r>
 800c332:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c334:	b111      	cbz	r1, 800c33c <_reclaim_reent+0x54>
 800c336:	4620      	mov	r0, r4
 800c338:	f7ff fee8 	bl	800c10c <_free_r>
 800c33c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c33e:	b111      	cbz	r1, 800c346 <_reclaim_reent+0x5e>
 800c340:	4620      	mov	r0, r4
 800c342:	f7ff fee3 	bl	800c10c <_free_r>
 800c346:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c348:	b111      	cbz	r1, 800c350 <_reclaim_reent+0x68>
 800c34a:	4620      	mov	r0, r4
 800c34c:	f7ff fede 	bl	800c10c <_free_r>
 800c350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c352:	b111      	cbz	r1, 800c35a <_reclaim_reent+0x72>
 800c354:	4620      	mov	r0, r4
 800c356:	f7ff fed9 	bl	800c10c <_free_r>
 800c35a:	69a3      	ldr	r3, [r4, #24]
 800c35c:	b1e3      	cbz	r3, 800c398 <_reclaim_reent+0xb0>
 800c35e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c360:	4620      	mov	r0, r4
 800c362:	4798      	blx	r3
 800c364:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c366:	b1b9      	cbz	r1, 800c398 <_reclaim_reent+0xb0>
 800c368:	4620      	mov	r0, r4
 800c36a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c36e:	f7ff bfad 	b.w	800c2cc <cleanup_glue>
 800c372:	5949      	ldr	r1, [r1, r5]
 800c374:	b941      	cbnz	r1, 800c388 <_reclaim_reent+0xa0>
 800c376:	3504      	adds	r5, #4
 800c378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c37a:	2d80      	cmp	r5, #128	; 0x80
 800c37c:	68d9      	ldr	r1, [r3, #12]
 800c37e:	d1f8      	bne.n	800c372 <_reclaim_reent+0x8a>
 800c380:	4620      	mov	r0, r4
 800c382:	f7ff fec3 	bl	800c10c <_free_r>
 800c386:	e7ba      	b.n	800c2fe <_reclaim_reent+0x16>
 800c388:	680e      	ldr	r6, [r1, #0]
 800c38a:	4620      	mov	r0, r4
 800c38c:	f7ff febe 	bl	800c10c <_free_r>
 800c390:	4631      	mov	r1, r6
 800c392:	e7ef      	b.n	800c374 <_reclaim_reent+0x8c>
 800c394:	2500      	movs	r5, #0
 800c396:	e7ef      	b.n	800c378 <_reclaim_reent+0x90>
 800c398:	bd70      	pop	{r4, r5, r6, pc}
 800c39a:	bf00      	nop
 800c39c:	20000018 	.word	0x20000018

0800c3a0 <_sbrk_r>:
 800c3a0:	b538      	push	{r3, r4, r5, lr}
 800c3a2:	4d06      	ldr	r5, [pc, #24]	; (800c3bc <_sbrk_r+0x1c>)
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	4608      	mov	r0, r1
 800c3aa:	602b      	str	r3, [r5, #0]
 800c3ac:	f7f5 fbaa 	bl	8001b04 <_sbrk>
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	d102      	bne.n	800c3ba <_sbrk_r+0x1a>
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	b103      	cbz	r3, 800c3ba <_sbrk_r+0x1a>
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	bd38      	pop	{r3, r4, r5, pc}
 800c3bc:	20006e5c 	.word	0x20006e5c

0800c3c0 <siscanf>:
 800c3c0:	b40e      	push	{r1, r2, r3}
 800c3c2:	b510      	push	{r4, lr}
 800c3c4:	b09f      	sub	sp, #124	; 0x7c
 800c3c6:	ac21      	add	r4, sp, #132	; 0x84
 800c3c8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c3cc:	f854 2b04 	ldr.w	r2, [r4], #4
 800c3d0:	9201      	str	r2, [sp, #4]
 800c3d2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c3d6:	9004      	str	r0, [sp, #16]
 800c3d8:	9008      	str	r0, [sp, #32]
 800c3da:	f7f3 ff03 	bl	80001e4 <strlen>
 800c3de:	4b0c      	ldr	r3, [pc, #48]	; (800c410 <siscanf+0x50>)
 800c3e0:	9005      	str	r0, [sp, #20]
 800c3e2:	9009      	str	r0, [sp, #36]	; 0x24
 800c3e4:	930d      	str	r3, [sp, #52]	; 0x34
 800c3e6:	480b      	ldr	r0, [pc, #44]	; (800c414 <siscanf+0x54>)
 800c3e8:	9a01      	ldr	r2, [sp, #4]
 800c3ea:	6800      	ldr	r0, [r0, #0]
 800c3ec:	9403      	str	r4, [sp, #12]
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	9311      	str	r3, [sp, #68]	; 0x44
 800c3f2:	9316      	str	r3, [sp, #88]	; 0x58
 800c3f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c3fc:	a904      	add	r1, sp, #16
 800c3fe:	4623      	mov	r3, r4
 800c400:	f000 f94a 	bl	800c698 <__ssvfiscanf_r>
 800c404:	b01f      	add	sp, #124	; 0x7c
 800c406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c40a:	b003      	add	sp, #12
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	0800c419 	.word	0x0800c419
 800c414:	20000018 	.word	0x20000018

0800c418 <__seofread>:
 800c418:	2000      	movs	r0, #0
 800c41a:	4770      	bx	lr

0800c41c <strcpy>:
 800c41c:	4603      	mov	r3, r0
 800c41e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c422:	f803 2b01 	strb.w	r2, [r3], #1
 800c426:	2a00      	cmp	r2, #0
 800c428:	d1f9      	bne.n	800c41e <strcpy+0x2>
 800c42a:	4770      	bx	lr

0800c42c <_strtol_l.constprop.0>:
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c432:	d001      	beq.n	800c438 <_strtol_l.constprop.0+0xc>
 800c434:	2b24      	cmp	r3, #36	; 0x24
 800c436:	d906      	bls.n	800c446 <_strtol_l.constprop.0+0x1a>
 800c438:	f7ff fe04 	bl	800c044 <__errno>
 800c43c:	2316      	movs	r3, #22
 800c43e:	6003      	str	r3, [r0, #0]
 800c440:	2000      	movs	r0, #0
 800c442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c446:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c52c <_strtol_l.constprop.0+0x100>
 800c44a:	460d      	mov	r5, r1
 800c44c:	462e      	mov	r6, r5
 800c44e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c452:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c456:	f017 0708 	ands.w	r7, r7, #8
 800c45a:	d1f7      	bne.n	800c44c <_strtol_l.constprop.0+0x20>
 800c45c:	2c2d      	cmp	r4, #45	; 0x2d
 800c45e:	d132      	bne.n	800c4c6 <_strtol_l.constprop.0+0x9a>
 800c460:	782c      	ldrb	r4, [r5, #0]
 800c462:	2701      	movs	r7, #1
 800c464:	1cb5      	adds	r5, r6, #2
 800c466:	2b00      	cmp	r3, #0
 800c468:	d05b      	beq.n	800c522 <_strtol_l.constprop.0+0xf6>
 800c46a:	2b10      	cmp	r3, #16
 800c46c:	d109      	bne.n	800c482 <_strtol_l.constprop.0+0x56>
 800c46e:	2c30      	cmp	r4, #48	; 0x30
 800c470:	d107      	bne.n	800c482 <_strtol_l.constprop.0+0x56>
 800c472:	782c      	ldrb	r4, [r5, #0]
 800c474:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c478:	2c58      	cmp	r4, #88	; 0x58
 800c47a:	d14d      	bne.n	800c518 <_strtol_l.constprop.0+0xec>
 800c47c:	786c      	ldrb	r4, [r5, #1]
 800c47e:	2310      	movs	r3, #16
 800c480:	3502      	adds	r5, #2
 800c482:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c486:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c48a:	f04f 0c00 	mov.w	ip, #0
 800c48e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c492:	4666      	mov	r6, ip
 800c494:	fb03 8a19 	mls	sl, r3, r9, r8
 800c498:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c49c:	f1be 0f09 	cmp.w	lr, #9
 800c4a0:	d816      	bhi.n	800c4d0 <_strtol_l.constprop.0+0xa4>
 800c4a2:	4674      	mov	r4, lr
 800c4a4:	42a3      	cmp	r3, r4
 800c4a6:	dd24      	ble.n	800c4f2 <_strtol_l.constprop.0+0xc6>
 800c4a8:	f1bc 0f00 	cmp.w	ip, #0
 800c4ac:	db1e      	blt.n	800c4ec <_strtol_l.constprop.0+0xc0>
 800c4ae:	45b1      	cmp	r9, r6
 800c4b0:	d31c      	bcc.n	800c4ec <_strtol_l.constprop.0+0xc0>
 800c4b2:	d101      	bne.n	800c4b8 <_strtol_l.constprop.0+0x8c>
 800c4b4:	45a2      	cmp	sl, r4
 800c4b6:	db19      	blt.n	800c4ec <_strtol_l.constprop.0+0xc0>
 800c4b8:	fb06 4603 	mla	r6, r6, r3, r4
 800c4bc:	f04f 0c01 	mov.w	ip, #1
 800c4c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4c4:	e7e8      	b.n	800c498 <_strtol_l.constprop.0+0x6c>
 800c4c6:	2c2b      	cmp	r4, #43	; 0x2b
 800c4c8:	bf04      	itt	eq
 800c4ca:	782c      	ldrbeq	r4, [r5, #0]
 800c4cc:	1cb5      	addeq	r5, r6, #2
 800c4ce:	e7ca      	b.n	800c466 <_strtol_l.constprop.0+0x3a>
 800c4d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c4d4:	f1be 0f19 	cmp.w	lr, #25
 800c4d8:	d801      	bhi.n	800c4de <_strtol_l.constprop.0+0xb2>
 800c4da:	3c37      	subs	r4, #55	; 0x37
 800c4dc:	e7e2      	b.n	800c4a4 <_strtol_l.constprop.0+0x78>
 800c4de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c4e2:	f1be 0f19 	cmp.w	lr, #25
 800c4e6:	d804      	bhi.n	800c4f2 <_strtol_l.constprop.0+0xc6>
 800c4e8:	3c57      	subs	r4, #87	; 0x57
 800c4ea:	e7db      	b.n	800c4a4 <_strtol_l.constprop.0+0x78>
 800c4ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c4f0:	e7e6      	b.n	800c4c0 <_strtol_l.constprop.0+0x94>
 800c4f2:	f1bc 0f00 	cmp.w	ip, #0
 800c4f6:	da05      	bge.n	800c504 <_strtol_l.constprop.0+0xd8>
 800c4f8:	2322      	movs	r3, #34	; 0x22
 800c4fa:	6003      	str	r3, [r0, #0]
 800c4fc:	4646      	mov	r6, r8
 800c4fe:	b942      	cbnz	r2, 800c512 <_strtol_l.constprop.0+0xe6>
 800c500:	4630      	mov	r0, r6
 800c502:	e79e      	b.n	800c442 <_strtol_l.constprop.0+0x16>
 800c504:	b107      	cbz	r7, 800c508 <_strtol_l.constprop.0+0xdc>
 800c506:	4276      	negs	r6, r6
 800c508:	2a00      	cmp	r2, #0
 800c50a:	d0f9      	beq.n	800c500 <_strtol_l.constprop.0+0xd4>
 800c50c:	f1bc 0f00 	cmp.w	ip, #0
 800c510:	d000      	beq.n	800c514 <_strtol_l.constprop.0+0xe8>
 800c512:	1e69      	subs	r1, r5, #1
 800c514:	6011      	str	r1, [r2, #0]
 800c516:	e7f3      	b.n	800c500 <_strtol_l.constprop.0+0xd4>
 800c518:	2430      	movs	r4, #48	; 0x30
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1b1      	bne.n	800c482 <_strtol_l.constprop.0+0x56>
 800c51e:	2308      	movs	r3, #8
 800c520:	e7af      	b.n	800c482 <_strtol_l.constprop.0+0x56>
 800c522:	2c30      	cmp	r4, #48	; 0x30
 800c524:	d0a5      	beq.n	800c472 <_strtol_l.constprop.0+0x46>
 800c526:	230a      	movs	r3, #10
 800c528:	e7ab      	b.n	800c482 <_strtol_l.constprop.0+0x56>
 800c52a:	bf00      	nop
 800c52c:	0800d28e 	.word	0x0800d28e

0800c530 <_strtol_r>:
 800c530:	f7ff bf7c 	b.w	800c42c <_strtol_l.constprop.0>

0800c534 <strtol>:
 800c534:	4613      	mov	r3, r2
 800c536:	460a      	mov	r2, r1
 800c538:	4601      	mov	r1, r0
 800c53a:	4802      	ldr	r0, [pc, #8]	; (800c544 <strtol+0x10>)
 800c53c:	6800      	ldr	r0, [r0, #0]
 800c53e:	f7ff bf75 	b.w	800c42c <_strtol_l.constprop.0>
 800c542:	bf00      	nop
 800c544:	20000018 	.word	0x20000018

0800c548 <__utoa>:
 800c548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c54a:	4c1f      	ldr	r4, [pc, #124]	; (800c5c8 <__utoa+0x80>)
 800c54c:	b08b      	sub	sp, #44	; 0x2c
 800c54e:	4605      	mov	r5, r0
 800c550:	460b      	mov	r3, r1
 800c552:	466e      	mov	r6, sp
 800c554:	f104 0c20 	add.w	ip, r4, #32
 800c558:	6820      	ldr	r0, [r4, #0]
 800c55a:	6861      	ldr	r1, [r4, #4]
 800c55c:	4637      	mov	r7, r6
 800c55e:	c703      	stmia	r7!, {r0, r1}
 800c560:	3408      	adds	r4, #8
 800c562:	4564      	cmp	r4, ip
 800c564:	463e      	mov	r6, r7
 800c566:	d1f7      	bne.n	800c558 <__utoa+0x10>
 800c568:	7921      	ldrb	r1, [r4, #4]
 800c56a:	7139      	strb	r1, [r7, #4]
 800c56c:	1e91      	subs	r1, r2, #2
 800c56e:	6820      	ldr	r0, [r4, #0]
 800c570:	6038      	str	r0, [r7, #0]
 800c572:	2922      	cmp	r1, #34	; 0x22
 800c574:	f04f 0100 	mov.w	r1, #0
 800c578:	d904      	bls.n	800c584 <__utoa+0x3c>
 800c57a:	7019      	strb	r1, [r3, #0]
 800c57c:	460b      	mov	r3, r1
 800c57e:	4618      	mov	r0, r3
 800c580:	b00b      	add	sp, #44	; 0x2c
 800c582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c584:	1e58      	subs	r0, r3, #1
 800c586:	4684      	mov	ip, r0
 800c588:	fbb5 f7f2 	udiv	r7, r5, r2
 800c58c:	fb02 5617 	mls	r6, r2, r7, r5
 800c590:	3628      	adds	r6, #40	; 0x28
 800c592:	446e      	add	r6, sp
 800c594:	460c      	mov	r4, r1
 800c596:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c59a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c59e:	462e      	mov	r6, r5
 800c5a0:	42b2      	cmp	r2, r6
 800c5a2:	f101 0101 	add.w	r1, r1, #1
 800c5a6:	463d      	mov	r5, r7
 800c5a8:	d9ee      	bls.n	800c588 <__utoa+0x40>
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	545a      	strb	r2, [r3, r1]
 800c5ae:	1919      	adds	r1, r3, r4
 800c5b0:	1aa5      	subs	r5, r4, r2
 800c5b2:	42aa      	cmp	r2, r5
 800c5b4:	dae3      	bge.n	800c57e <__utoa+0x36>
 800c5b6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c5ba:	780e      	ldrb	r6, [r1, #0]
 800c5bc:	7006      	strb	r6, [r0, #0]
 800c5be:	3201      	adds	r2, #1
 800c5c0:	f801 5901 	strb.w	r5, [r1], #-1
 800c5c4:	e7f4      	b.n	800c5b0 <__utoa+0x68>
 800c5c6:	bf00      	nop
 800c5c8:	0800d268 	.word	0x0800d268

0800c5cc <__malloc_lock>:
 800c5cc:	4801      	ldr	r0, [pc, #4]	; (800c5d4 <__malloc_lock+0x8>)
 800c5ce:	f7ff bd7d 	b.w	800c0cc <__retarget_lock_acquire_recursive>
 800c5d2:	bf00      	nop
 800c5d4:	20006e50 	.word	0x20006e50

0800c5d8 <__malloc_unlock>:
 800c5d8:	4801      	ldr	r0, [pc, #4]	; (800c5e0 <__malloc_unlock+0x8>)
 800c5da:	f7ff bd78 	b.w	800c0ce <__retarget_lock_release_recursive>
 800c5de:	bf00      	nop
 800c5e0:	20006e50 	.word	0x20006e50

0800c5e4 <_sungetc_r>:
 800c5e4:	b538      	push	{r3, r4, r5, lr}
 800c5e6:	1c4b      	adds	r3, r1, #1
 800c5e8:	4614      	mov	r4, r2
 800c5ea:	d103      	bne.n	800c5f4 <_sungetc_r+0x10>
 800c5ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	bd38      	pop	{r3, r4, r5, pc}
 800c5f4:	8993      	ldrh	r3, [r2, #12]
 800c5f6:	f023 0320 	bic.w	r3, r3, #32
 800c5fa:	8193      	strh	r3, [r2, #12]
 800c5fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c5fe:	6852      	ldr	r2, [r2, #4]
 800c600:	b2cd      	uxtb	r5, r1
 800c602:	b18b      	cbz	r3, 800c628 <_sungetc_r+0x44>
 800c604:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c606:	4293      	cmp	r3, r2
 800c608:	dd08      	ble.n	800c61c <_sungetc_r+0x38>
 800c60a:	6823      	ldr	r3, [r4, #0]
 800c60c:	1e5a      	subs	r2, r3, #1
 800c60e:	6022      	str	r2, [r4, #0]
 800c610:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c614:	6863      	ldr	r3, [r4, #4]
 800c616:	3301      	adds	r3, #1
 800c618:	6063      	str	r3, [r4, #4]
 800c61a:	e7e9      	b.n	800c5f0 <_sungetc_r+0xc>
 800c61c:	4621      	mov	r1, r4
 800c61e:	f000 fbb1 	bl	800cd84 <__submore>
 800c622:	2800      	cmp	r0, #0
 800c624:	d0f1      	beq.n	800c60a <_sungetc_r+0x26>
 800c626:	e7e1      	b.n	800c5ec <_sungetc_r+0x8>
 800c628:	6921      	ldr	r1, [r4, #16]
 800c62a:	6823      	ldr	r3, [r4, #0]
 800c62c:	b151      	cbz	r1, 800c644 <_sungetc_r+0x60>
 800c62e:	4299      	cmp	r1, r3
 800c630:	d208      	bcs.n	800c644 <_sungetc_r+0x60>
 800c632:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c636:	42a9      	cmp	r1, r5
 800c638:	d104      	bne.n	800c644 <_sungetc_r+0x60>
 800c63a:	3b01      	subs	r3, #1
 800c63c:	3201      	adds	r2, #1
 800c63e:	6023      	str	r3, [r4, #0]
 800c640:	6062      	str	r2, [r4, #4]
 800c642:	e7d5      	b.n	800c5f0 <_sungetc_r+0xc>
 800c644:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c64c:	6363      	str	r3, [r4, #52]	; 0x34
 800c64e:	2303      	movs	r3, #3
 800c650:	63a3      	str	r3, [r4, #56]	; 0x38
 800c652:	4623      	mov	r3, r4
 800c654:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c658:	6023      	str	r3, [r4, #0]
 800c65a:	2301      	movs	r3, #1
 800c65c:	e7dc      	b.n	800c618 <_sungetc_r+0x34>

0800c65e <__ssrefill_r>:
 800c65e:	b510      	push	{r4, lr}
 800c660:	460c      	mov	r4, r1
 800c662:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c664:	b169      	cbz	r1, 800c682 <__ssrefill_r+0x24>
 800c666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c66a:	4299      	cmp	r1, r3
 800c66c:	d001      	beq.n	800c672 <__ssrefill_r+0x14>
 800c66e:	f7ff fd4d 	bl	800c10c <_free_r>
 800c672:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c674:	6063      	str	r3, [r4, #4]
 800c676:	2000      	movs	r0, #0
 800c678:	6360      	str	r0, [r4, #52]	; 0x34
 800c67a:	b113      	cbz	r3, 800c682 <__ssrefill_r+0x24>
 800c67c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c67e:	6023      	str	r3, [r4, #0]
 800c680:	bd10      	pop	{r4, pc}
 800c682:	6923      	ldr	r3, [r4, #16]
 800c684:	6023      	str	r3, [r4, #0]
 800c686:	2300      	movs	r3, #0
 800c688:	6063      	str	r3, [r4, #4]
 800c68a:	89a3      	ldrh	r3, [r4, #12]
 800c68c:	f043 0320 	orr.w	r3, r3, #32
 800c690:	81a3      	strh	r3, [r4, #12]
 800c692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c696:	e7f3      	b.n	800c680 <__ssrefill_r+0x22>

0800c698 <__ssvfiscanf_r>:
 800c698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c69c:	460c      	mov	r4, r1
 800c69e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c6a8:	49a6      	ldr	r1, [pc, #664]	; (800c944 <__ssvfiscanf_r+0x2ac>)
 800c6aa:	91a0      	str	r1, [sp, #640]	; 0x280
 800c6ac:	f10d 0804 	add.w	r8, sp, #4
 800c6b0:	49a5      	ldr	r1, [pc, #660]	; (800c948 <__ssvfiscanf_r+0x2b0>)
 800c6b2:	4fa6      	ldr	r7, [pc, #664]	; (800c94c <__ssvfiscanf_r+0x2b4>)
 800c6b4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c950 <__ssvfiscanf_r+0x2b8>
 800c6b8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c6bc:	4606      	mov	r6, r0
 800c6be:	91a1      	str	r1, [sp, #644]	; 0x284
 800c6c0:	9300      	str	r3, [sp, #0]
 800c6c2:	7813      	ldrb	r3, [r2, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f000 815a 	beq.w	800c97e <__ssvfiscanf_r+0x2e6>
 800c6ca:	5dd9      	ldrb	r1, [r3, r7]
 800c6cc:	f011 0108 	ands.w	r1, r1, #8
 800c6d0:	f102 0501 	add.w	r5, r2, #1
 800c6d4:	d019      	beq.n	800c70a <__ssvfiscanf_r+0x72>
 800c6d6:	6863      	ldr	r3, [r4, #4]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	dd0f      	ble.n	800c6fc <__ssvfiscanf_r+0x64>
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	781a      	ldrb	r2, [r3, #0]
 800c6e0:	5cba      	ldrb	r2, [r7, r2]
 800c6e2:	0712      	lsls	r2, r2, #28
 800c6e4:	d401      	bmi.n	800c6ea <__ssvfiscanf_r+0x52>
 800c6e6:	462a      	mov	r2, r5
 800c6e8:	e7eb      	b.n	800c6c2 <__ssvfiscanf_r+0x2a>
 800c6ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c6ec:	3201      	adds	r2, #1
 800c6ee:	9245      	str	r2, [sp, #276]	; 0x114
 800c6f0:	6862      	ldr	r2, [r4, #4]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	3a01      	subs	r2, #1
 800c6f6:	6062      	str	r2, [r4, #4]
 800c6f8:	6023      	str	r3, [r4, #0]
 800c6fa:	e7ec      	b.n	800c6d6 <__ssvfiscanf_r+0x3e>
 800c6fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c6fe:	4621      	mov	r1, r4
 800c700:	4630      	mov	r0, r6
 800c702:	4798      	blx	r3
 800c704:	2800      	cmp	r0, #0
 800c706:	d0e9      	beq.n	800c6dc <__ssvfiscanf_r+0x44>
 800c708:	e7ed      	b.n	800c6e6 <__ssvfiscanf_r+0x4e>
 800c70a:	2b25      	cmp	r3, #37	; 0x25
 800c70c:	d012      	beq.n	800c734 <__ssvfiscanf_r+0x9c>
 800c70e:	469a      	mov	sl, r3
 800c710:	6863      	ldr	r3, [r4, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	f340 8091 	ble.w	800c83a <__ssvfiscanf_r+0x1a2>
 800c718:	6822      	ldr	r2, [r4, #0]
 800c71a:	7813      	ldrb	r3, [r2, #0]
 800c71c:	4553      	cmp	r3, sl
 800c71e:	f040 812e 	bne.w	800c97e <__ssvfiscanf_r+0x2e6>
 800c722:	6863      	ldr	r3, [r4, #4]
 800c724:	3b01      	subs	r3, #1
 800c726:	6063      	str	r3, [r4, #4]
 800c728:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c72a:	3201      	adds	r2, #1
 800c72c:	3301      	adds	r3, #1
 800c72e:	6022      	str	r2, [r4, #0]
 800c730:	9345      	str	r3, [sp, #276]	; 0x114
 800c732:	e7d8      	b.n	800c6e6 <__ssvfiscanf_r+0x4e>
 800c734:	9141      	str	r1, [sp, #260]	; 0x104
 800c736:	9143      	str	r1, [sp, #268]	; 0x10c
 800c738:	7853      	ldrb	r3, [r2, #1]
 800c73a:	2b2a      	cmp	r3, #42	; 0x2a
 800c73c:	bf02      	ittt	eq
 800c73e:	2310      	moveq	r3, #16
 800c740:	1c95      	addeq	r5, r2, #2
 800c742:	9341      	streq	r3, [sp, #260]	; 0x104
 800c744:	220a      	movs	r2, #10
 800c746:	46aa      	mov	sl, r5
 800c748:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c74c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c750:	2b09      	cmp	r3, #9
 800c752:	d91d      	bls.n	800c790 <__ssvfiscanf_r+0xf8>
 800c754:	487e      	ldr	r0, [pc, #504]	; (800c950 <__ssvfiscanf_r+0x2b8>)
 800c756:	2203      	movs	r2, #3
 800c758:	f7f3 fd52 	bl	8000200 <memchr>
 800c75c:	b140      	cbz	r0, 800c770 <__ssvfiscanf_r+0xd8>
 800c75e:	2301      	movs	r3, #1
 800c760:	eba0 0009 	sub.w	r0, r0, r9
 800c764:	fa03 f000 	lsl.w	r0, r3, r0
 800c768:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c76a:	4318      	orrs	r0, r3
 800c76c:	9041      	str	r0, [sp, #260]	; 0x104
 800c76e:	4655      	mov	r5, sl
 800c770:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c774:	2b78      	cmp	r3, #120	; 0x78
 800c776:	d806      	bhi.n	800c786 <__ssvfiscanf_r+0xee>
 800c778:	2b57      	cmp	r3, #87	; 0x57
 800c77a:	d810      	bhi.n	800c79e <__ssvfiscanf_r+0x106>
 800c77c:	2b25      	cmp	r3, #37	; 0x25
 800c77e:	d0c6      	beq.n	800c70e <__ssvfiscanf_r+0x76>
 800c780:	d856      	bhi.n	800c830 <__ssvfiscanf_r+0x198>
 800c782:	2b00      	cmp	r3, #0
 800c784:	d064      	beq.n	800c850 <__ssvfiscanf_r+0x1b8>
 800c786:	2303      	movs	r3, #3
 800c788:	9347      	str	r3, [sp, #284]	; 0x11c
 800c78a:	230a      	movs	r3, #10
 800c78c:	9342      	str	r3, [sp, #264]	; 0x108
 800c78e:	e071      	b.n	800c874 <__ssvfiscanf_r+0x1dc>
 800c790:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c792:	fb02 1103 	mla	r1, r2, r3, r1
 800c796:	3930      	subs	r1, #48	; 0x30
 800c798:	9143      	str	r1, [sp, #268]	; 0x10c
 800c79a:	4655      	mov	r5, sl
 800c79c:	e7d3      	b.n	800c746 <__ssvfiscanf_r+0xae>
 800c79e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c7a2:	2a20      	cmp	r2, #32
 800c7a4:	d8ef      	bhi.n	800c786 <__ssvfiscanf_r+0xee>
 800c7a6:	a101      	add	r1, pc, #4	; (adr r1, 800c7ac <__ssvfiscanf_r+0x114>)
 800c7a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c7ac:	0800c85f 	.word	0x0800c85f
 800c7b0:	0800c787 	.word	0x0800c787
 800c7b4:	0800c787 	.word	0x0800c787
 800c7b8:	0800c8bd 	.word	0x0800c8bd
 800c7bc:	0800c787 	.word	0x0800c787
 800c7c0:	0800c787 	.word	0x0800c787
 800c7c4:	0800c787 	.word	0x0800c787
 800c7c8:	0800c787 	.word	0x0800c787
 800c7cc:	0800c787 	.word	0x0800c787
 800c7d0:	0800c787 	.word	0x0800c787
 800c7d4:	0800c787 	.word	0x0800c787
 800c7d8:	0800c8d3 	.word	0x0800c8d3
 800c7dc:	0800c8a9 	.word	0x0800c8a9
 800c7e0:	0800c837 	.word	0x0800c837
 800c7e4:	0800c837 	.word	0x0800c837
 800c7e8:	0800c837 	.word	0x0800c837
 800c7ec:	0800c787 	.word	0x0800c787
 800c7f0:	0800c8ad 	.word	0x0800c8ad
 800c7f4:	0800c787 	.word	0x0800c787
 800c7f8:	0800c787 	.word	0x0800c787
 800c7fc:	0800c787 	.word	0x0800c787
 800c800:	0800c787 	.word	0x0800c787
 800c804:	0800c8e3 	.word	0x0800c8e3
 800c808:	0800c8b5 	.word	0x0800c8b5
 800c80c:	0800c857 	.word	0x0800c857
 800c810:	0800c787 	.word	0x0800c787
 800c814:	0800c787 	.word	0x0800c787
 800c818:	0800c8df 	.word	0x0800c8df
 800c81c:	0800c787 	.word	0x0800c787
 800c820:	0800c8a9 	.word	0x0800c8a9
 800c824:	0800c787 	.word	0x0800c787
 800c828:	0800c787 	.word	0x0800c787
 800c82c:	0800c85f 	.word	0x0800c85f
 800c830:	3b45      	subs	r3, #69	; 0x45
 800c832:	2b02      	cmp	r3, #2
 800c834:	d8a7      	bhi.n	800c786 <__ssvfiscanf_r+0xee>
 800c836:	2305      	movs	r3, #5
 800c838:	e01b      	b.n	800c872 <__ssvfiscanf_r+0x1da>
 800c83a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c83c:	4621      	mov	r1, r4
 800c83e:	4630      	mov	r0, r6
 800c840:	4798      	blx	r3
 800c842:	2800      	cmp	r0, #0
 800c844:	f43f af68 	beq.w	800c718 <__ssvfiscanf_r+0x80>
 800c848:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c84a:	2800      	cmp	r0, #0
 800c84c:	f040 808d 	bne.w	800c96a <__ssvfiscanf_r+0x2d2>
 800c850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c854:	e08f      	b.n	800c976 <__ssvfiscanf_r+0x2de>
 800c856:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c858:	f042 0220 	orr.w	r2, r2, #32
 800c85c:	9241      	str	r2, [sp, #260]	; 0x104
 800c85e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c864:	9241      	str	r2, [sp, #260]	; 0x104
 800c866:	2210      	movs	r2, #16
 800c868:	2b6f      	cmp	r3, #111	; 0x6f
 800c86a:	9242      	str	r2, [sp, #264]	; 0x108
 800c86c:	bf34      	ite	cc
 800c86e:	2303      	movcc	r3, #3
 800c870:	2304      	movcs	r3, #4
 800c872:	9347      	str	r3, [sp, #284]	; 0x11c
 800c874:	6863      	ldr	r3, [r4, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	dd42      	ble.n	800c900 <__ssvfiscanf_r+0x268>
 800c87a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c87c:	0659      	lsls	r1, r3, #25
 800c87e:	d404      	bmi.n	800c88a <__ssvfiscanf_r+0x1f2>
 800c880:	6823      	ldr	r3, [r4, #0]
 800c882:	781a      	ldrb	r2, [r3, #0]
 800c884:	5cba      	ldrb	r2, [r7, r2]
 800c886:	0712      	lsls	r2, r2, #28
 800c888:	d441      	bmi.n	800c90e <__ssvfiscanf_r+0x276>
 800c88a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	dc50      	bgt.n	800c932 <__ssvfiscanf_r+0x29a>
 800c890:	466b      	mov	r3, sp
 800c892:	4622      	mov	r2, r4
 800c894:	a941      	add	r1, sp, #260	; 0x104
 800c896:	4630      	mov	r0, r6
 800c898:	f000 f876 	bl	800c988 <_scanf_chars>
 800c89c:	2801      	cmp	r0, #1
 800c89e:	d06e      	beq.n	800c97e <__ssvfiscanf_r+0x2e6>
 800c8a0:	2802      	cmp	r0, #2
 800c8a2:	f47f af20 	bne.w	800c6e6 <__ssvfiscanf_r+0x4e>
 800c8a6:	e7cf      	b.n	800c848 <__ssvfiscanf_r+0x1b0>
 800c8a8:	220a      	movs	r2, #10
 800c8aa:	e7dd      	b.n	800c868 <__ssvfiscanf_r+0x1d0>
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	9342      	str	r3, [sp, #264]	; 0x108
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	e7de      	b.n	800c872 <__ssvfiscanf_r+0x1da>
 800c8b4:	2308      	movs	r3, #8
 800c8b6:	9342      	str	r3, [sp, #264]	; 0x108
 800c8b8:	2304      	movs	r3, #4
 800c8ba:	e7da      	b.n	800c872 <__ssvfiscanf_r+0x1da>
 800c8bc:	4629      	mov	r1, r5
 800c8be:	4640      	mov	r0, r8
 800c8c0:	f000 f9b4 	bl	800cc2c <__sccl>
 800c8c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c8c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8ca:	9341      	str	r3, [sp, #260]	; 0x104
 800c8cc:	4605      	mov	r5, r0
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e7cf      	b.n	800c872 <__ssvfiscanf_r+0x1da>
 800c8d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8d8:	9341      	str	r3, [sp, #260]	; 0x104
 800c8da:	2300      	movs	r3, #0
 800c8dc:	e7c9      	b.n	800c872 <__ssvfiscanf_r+0x1da>
 800c8de:	2302      	movs	r3, #2
 800c8e0:	e7c7      	b.n	800c872 <__ssvfiscanf_r+0x1da>
 800c8e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c8e4:	06c3      	lsls	r3, r0, #27
 800c8e6:	f53f aefe 	bmi.w	800c6e6 <__ssvfiscanf_r+0x4e>
 800c8ea:	9b00      	ldr	r3, [sp, #0]
 800c8ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c8ee:	1d19      	adds	r1, r3, #4
 800c8f0:	9100      	str	r1, [sp, #0]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f010 0f01 	tst.w	r0, #1
 800c8f8:	bf14      	ite	ne
 800c8fa:	801a      	strhne	r2, [r3, #0]
 800c8fc:	601a      	streq	r2, [r3, #0]
 800c8fe:	e6f2      	b.n	800c6e6 <__ssvfiscanf_r+0x4e>
 800c900:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c902:	4621      	mov	r1, r4
 800c904:	4630      	mov	r0, r6
 800c906:	4798      	blx	r3
 800c908:	2800      	cmp	r0, #0
 800c90a:	d0b6      	beq.n	800c87a <__ssvfiscanf_r+0x1e2>
 800c90c:	e79c      	b.n	800c848 <__ssvfiscanf_r+0x1b0>
 800c90e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c910:	3201      	adds	r2, #1
 800c912:	9245      	str	r2, [sp, #276]	; 0x114
 800c914:	6862      	ldr	r2, [r4, #4]
 800c916:	3a01      	subs	r2, #1
 800c918:	2a00      	cmp	r2, #0
 800c91a:	6062      	str	r2, [r4, #4]
 800c91c:	dd02      	ble.n	800c924 <__ssvfiscanf_r+0x28c>
 800c91e:	3301      	adds	r3, #1
 800c920:	6023      	str	r3, [r4, #0]
 800c922:	e7ad      	b.n	800c880 <__ssvfiscanf_r+0x1e8>
 800c924:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c926:	4621      	mov	r1, r4
 800c928:	4630      	mov	r0, r6
 800c92a:	4798      	blx	r3
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d0a7      	beq.n	800c880 <__ssvfiscanf_r+0x1e8>
 800c930:	e78a      	b.n	800c848 <__ssvfiscanf_r+0x1b0>
 800c932:	2b04      	cmp	r3, #4
 800c934:	dc0e      	bgt.n	800c954 <__ssvfiscanf_r+0x2bc>
 800c936:	466b      	mov	r3, sp
 800c938:	4622      	mov	r2, r4
 800c93a:	a941      	add	r1, sp, #260	; 0x104
 800c93c:	4630      	mov	r0, r6
 800c93e:	f000 f87d 	bl	800ca3c <_scanf_i>
 800c942:	e7ab      	b.n	800c89c <__ssvfiscanf_r+0x204>
 800c944:	0800c5e5 	.word	0x0800c5e5
 800c948:	0800c65f 	.word	0x0800c65f
 800c94c:	0800d28e 	.word	0x0800d28e
 800c950:	0800d38e 	.word	0x0800d38e
 800c954:	4b0b      	ldr	r3, [pc, #44]	; (800c984 <__ssvfiscanf_r+0x2ec>)
 800c956:	2b00      	cmp	r3, #0
 800c958:	f43f aec5 	beq.w	800c6e6 <__ssvfiscanf_r+0x4e>
 800c95c:	466b      	mov	r3, sp
 800c95e:	4622      	mov	r2, r4
 800c960:	a941      	add	r1, sp, #260	; 0x104
 800c962:	4630      	mov	r0, r6
 800c964:	f3af 8000 	nop.w
 800c968:	e798      	b.n	800c89c <__ssvfiscanf_r+0x204>
 800c96a:	89a3      	ldrh	r3, [r4, #12]
 800c96c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c970:	bf18      	it	ne
 800c972:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800c976:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c97e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c980:	e7f9      	b.n	800c976 <__ssvfiscanf_r+0x2de>
 800c982:	bf00      	nop
 800c984:	00000000 	.word	0x00000000

0800c988 <_scanf_chars>:
 800c988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c98c:	4615      	mov	r5, r2
 800c98e:	688a      	ldr	r2, [r1, #8]
 800c990:	4680      	mov	r8, r0
 800c992:	460c      	mov	r4, r1
 800c994:	b932      	cbnz	r2, 800c9a4 <_scanf_chars+0x1c>
 800c996:	698a      	ldr	r2, [r1, #24]
 800c998:	2a00      	cmp	r2, #0
 800c99a:	bf0c      	ite	eq
 800c99c:	2201      	moveq	r2, #1
 800c99e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800c9a2:	608a      	str	r2, [r1, #8]
 800c9a4:	6822      	ldr	r2, [r4, #0]
 800c9a6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ca38 <_scanf_chars+0xb0>
 800c9aa:	06d1      	lsls	r1, r2, #27
 800c9ac:	bf5f      	itttt	pl
 800c9ae:	681a      	ldrpl	r2, [r3, #0]
 800c9b0:	1d11      	addpl	r1, r2, #4
 800c9b2:	6019      	strpl	r1, [r3, #0]
 800c9b4:	6816      	ldrpl	r6, [r2, #0]
 800c9b6:	2700      	movs	r7, #0
 800c9b8:	69a0      	ldr	r0, [r4, #24]
 800c9ba:	b188      	cbz	r0, 800c9e0 <_scanf_chars+0x58>
 800c9bc:	2801      	cmp	r0, #1
 800c9be:	d107      	bne.n	800c9d0 <_scanf_chars+0x48>
 800c9c0:	682a      	ldr	r2, [r5, #0]
 800c9c2:	7811      	ldrb	r1, [r2, #0]
 800c9c4:	6962      	ldr	r2, [r4, #20]
 800c9c6:	5c52      	ldrb	r2, [r2, r1]
 800c9c8:	b952      	cbnz	r2, 800c9e0 <_scanf_chars+0x58>
 800c9ca:	2f00      	cmp	r7, #0
 800c9cc:	d031      	beq.n	800ca32 <_scanf_chars+0xaa>
 800c9ce:	e022      	b.n	800ca16 <_scanf_chars+0x8e>
 800c9d0:	2802      	cmp	r0, #2
 800c9d2:	d120      	bne.n	800ca16 <_scanf_chars+0x8e>
 800c9d4:	682b      	ldr	r3, [r5, #0]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c9dc:	071b      	lsls	r3, r3, #28
 800c9de:	d41a      	bmi.n	800ca16 <_scanf_chars+0x8e>
 800c9e0:	6823      	ldr	r3, [r4, #0]
 800c9e2:	06da      	lsls	r2, r3, #27
 800c9e4:	bf5e      	ittt	pl
 800c9e6:	682b      	ldrpl	r3, [r5, #0]
 800c9e8:	781b      	ldrbpl	r3, [r3, #0]
 800c9ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c9ee:	682a      	ldr	r2, [r5, #0]
 800c9f0:	686b      	ldr	r3, [r5, #4]
 800c9f2:	3201      	adds	r2, #1
 800c9f4:	602a      	str	r2, [r5, #0]
 800c9f6:	68a2      	ldr	r2, [r4, #8]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	3a01      	subs	r2, #1
 800c9fc:	606b      	str	r3, [r5, #4]
 800c9fe:	3701      	adds	r7, #1
 800ca00:	60a2      	str	r2, [r4, #8]
 800ca02:	b142      	cbz	r2, 800ca16 <_scanf_chars+0x8e>
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	dcd7      	bgt.n	800c9b8 <_scanf_chars+0x30>
 800ca08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ca0c:	4629      	mov	r1, r5
 800ca0e:	4640      	mov	r0, r8
 800ca10:	4798      	blx	r3
 800ca12:	2800      	cmp	r0, #0
 800ca14:	d0d0      	beq.n	800c9b8 <_scanf_chars+0x30>
 800ca16:	6823      	ldr	r3, [r4, #0]
 800ca18:	f013 0310 	ands.w	r3, r3, #16
 800ca1c:	d105      	bne.n	800ca2a <_scanf_chars+0xa2>
 800ca1e:	68e2      	ldr	r2, [r4, #12]
 800ca20:	3201      	adds	r2, #1
 800ca22:	60e2      	str	r2, [r4, #12]
 800ca24:	69a2      	ldr	r2, [r4, #24]
 800ca26:	b102      	cbz	r2, 800ca2a <_scanf_chars+0xa2>
 800ca28:	7033      	strb	r3, [r6, #0]
 800ca2a:	6923      	ldr	r3, [r4, #16]
 800ca2c:	443b      	add	r3, r7
 800ca2e:	6123      	str	r3, [r4, #16]
 800ca30:	2000      	movs	r0, #0
 800ca32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca36:	bf00      	nop
 800ca38:	0800d28e 	.word	0x0800d28e

0800ca3c <_scanf_i>:
 800ca3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca40:	4698      	mov	r8, r3
 800ca42:	4b76      	ldr	r3, [pc, #472]	; (800cc1c <_scanf_i+0x1e0>)
 800ca44:	460c      	mov	r4, r1
 800ca46:	4682      	mov	sl, r0
 800ca48:	4616      	mov	r6, r2
 800ca4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca4e:	b087      	sub	sp, #28
 800ca50:	ab03      	add	r3, sp, #12
 800ca52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ca56:	4b72      	ldr	r3, [pc, #456]	; (800cc20 <_scanf_i+0x1e4>)
 800ca58:	69a1      	ldr	r1, [r4, #24]
 800ca5a:	4a72      	ldr	r2, [pc, #456]	; (800cc24 <_scanf_i+0x1e8>)
 800ca5c:	2903      	cmp	r1, #3
 800ca5e:	bf18      	it	ne
 800ca60:	461a      	movne	r2, r3
 800ca62:	68a3      	ldr	r3, [r4, #8]
 800ca64:	9201      	str	r2, [sp, #4]
 800ca66:	1e5a      	subs	r2, r3, #1
 800ca68:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ca6c:	bf88      	it	hi
 800ca6e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ca72:	4627      	mov	r7, r4
 800ca74:	bf82      	ittt	hi
 800ca76:	eb03 0905 	addhi.w	r9, r3, r5
 800ca7a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ca7e:	60a3      	strhi	r3, [r4, #8]
 800ca80:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ca84:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ca88:	bf98      	it	ls
 800ca8a:	f04f 0900 	movls.w	r9, #0
 800ca8e:	6023      	str	r3, [r4, #0]
 800ca90:	463d      	mov	r5, r7
 800ca92:	f04f 0b00 	mov.w	fp, #0
 800ca96:	6831      	ldr	r1, [r6, #0]
 800ca98:	ab03      	add	r3, sp, #12
 800ca9a:	7809      	ldrb	r1, [r1, #0]
 800ca9c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800caa0:	2202      	movs	r2, #2
 800caa2:	f7f3 fbad 	bl	8000200 <memchr>
 800caa6:	b328      	cbz	r0, 800caf4 <_scanf_i+0xb8>
 800caa8:	f1bb 0f01 	cmp.w	fp, #1
 800caac:	d159      	bne.n	800cb62 <_scanf_i+0x126>
 800caae:	6862      	ldr	r2, [r4, #4]
 800cab0:	b92a      	cbnz	r2, 800cabe <_scanf_i+0x82>
 800cab2:	6822      	ldr	r2, [r4, #0]
 800cab4:	2308      	movs	r3, #8
 800cab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800caba:	6063      	str	r3, [r4, #4]
 800cabc:	6022      	str	r2, [r4, #0]
 800cabe:	6822      	ldr	r2, [r4, #0]
 800cac0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cac4:	6022      	str	r2, [r4, #0]
 800cac6:	68a2      	ldr	r2, [r4, #8]
 800cac8:	1e51      	subs	r1, r2, #1
 800caca:	60a1      	str	r1, [r4, #8]
 800cacc:	b192      	cbz	r2, 800caf4 <_scanf_i+0xb8>
 800cace:	6832      	ldr	r2, [r6, #0]
 800cad0:	1c51      	adds	r1, r2, #1
 800cad2:	6031      	str	r1, [r6, #0]
 800cad4:	7812      	ldrb	r2, [r2, #0]
 800cad6:	f805 2b01 	strb.w	r2, [r5], #1
 800cada:	6872      	ldr	r2, [r6, #4]
 800cadc:	3a01      	subs	r2, #1
 800cade:	2a00      	cmp	r2, #0
 800cae0:	6072      	str	r2, [r6, #4]
 800cae2:	dc07      	bgt.n	800caf4 <_scanf_i+0xb8>
 800cae4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cae8:	4631      	mov	r1, r6
 800caea:	4650      	mov	r0, sl
 800caec:	4790      	blx	r2
 800caee:	2800      	cmp	r0, #0
 800caf0:	f040 8085 	bne.w	800cbfe <_scanf_i+0x1c2>
 800caf4:	f10b 0b01 	add.w	fp, fp, #1
 800caf8:	f1bb 0f03 	cmp.w	fp, #3
 800cafc:	d1cb      	bne.n	800ca96 <_scanf_i+0x5a>
 800cafe:	6863      	ldr	r3, [r4, #4]
 800cb00:	b90b      	cbnz	r3, 800cb06 <_scanf_i+0xca>
 800cb02:	230a      	movs	r3, #10
 800cb04:	6063      	str	r3, [r4, #4]
 800cb06:	6863      	ldr	r3, [r4, #4]
 800cb08:	4947      	ldr	r1, [pc, #284]	; (800cc28 <_scanf_i+0x1ec>)
 800cb0a:	6960      	ldr	r0, [r4, #20]
 800cb0c:	1ac9      	subs	r1, r1, r3
 800cb0e:	f000 f88d 	bl	800cc2c <__sccl>
 800cb12:	f04f 0b00 	mov.w	fp, #0
 800cb16:	68a3      	ldr	r3, [r4, #8]
 800cb18:	6822      	ldr	r2, [r4, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d03d      	beq.n	800cb9a <_scanf_i+0x15e>
 800cb1e:	6831      	ldr	r1, [r6, #0]
 800cb20:	6960      	ldr	r0, [r4, #20]
 800cb22:	f891 c000 	ldrb.w	ip, [r1]
 800cb26:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cb2a:	2800      	cmp	r0, #0
 800cb2c:	d035      	beq.n	800cb9a <_scanf_i+0x15e>
 800cb2e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cb32:	d124      	bne.n	800cb7e <_scanf_i+0x142>
 800cb34:	0510      	lsls	r0, r2, #20
 800cb36:	d522      	bpl.n	800cb7e <_scanf_i+0x142>
 800cb38:	f10b 0b01 	add.w	fp, fp, #1
 800cb3c:	f1b9 0f00 	cmp.w	r9, #0
 800cb40:	d003      	beq.n	800cb4a <_scanf_i+0x10e>
 800cb42:	3301      	adds	r3, #1
 800cb44:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800cb48:	60a3      	str	r3, [r4, #8]
 800cb4a:	6873      	ldr	r3, [r6, #4]
 800cb4c:	3b01      	subs	r3, #1
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	6073      	str	r3, [r6, #4]
 800cb52:	dd1b      	ble.n	800cb8c <_scanf_i+0x150>
 800cb54:	6833      	ldr	r3, [r6, #0]
 800cb56:	3301      	adds	r3, #1
 800cb58:	6033      	str	r3, [r6, #0]
 800cb5a:	68a3      	ldr	r3, [r4, #8]
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	60a3      	str	r3, [r4, #8]
 800cb60:	e7d9      	b.n	800cb16 <_scanf_i+0xda>
 800cb62:	f1bb 0f02 	cmp.w	fp, #2
 800cb66:	d1ae      	bne.n	800cac6 <_scanf_i+0x8a>
 800cb68:	6822      	ldr	r2, [r4, #0]
 800cb6a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cb6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cb72:	d1bf      	bne.n	800caf4 <_scanf_i+0xb8>
 800cb74:	2310      	movs	r3, #16
 800cb76:	6063      	str	r3, [r4, #4]
 800cb78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb7c:	e7a2      	b.n	800cac4 <_scanf_i+0x88>
 800cb7e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cb82:	6022      	str	r2, [r4, #0]
 800cb84:	780b      	ldrb	r3, [r1, #0]
 800cb86:	f805 3b01 	strb.w	r3, [r5], #1
 800cb8a:	e7de      	b.n	800cb4a <_scanf_i+0x10e>
 800cb8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cb90:	4631      	mov	r1, r6
 800cb92:	4650      	mov	r0, sl
 800cb94:	4798      	blx	r3
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d0df      	beq.n	800cb5a <_scanf_i+0x11e>
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	05db      	lsls	r3, r3, #23
 800cb9e:	d50d      	bpl.n	800cbbc <_scanf_i+0x180>
 800cba0:	42bd      	cmp	r5, r7
 800cba2:	d909      	bls.n	800cbb8 <_scanf_i+0x17c>
 800cba4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cbac:	4632      	mov	r2, r6
 800cbae:	4650      	mov	r0, sl
 800cbb0:	4798      	blx	r3
 800cbb2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800cbb6:	464d      	mov	r5, r9
 800cbb8:	42bd      	cmp	r5, r7
 800cbba:	d02d      	beq.n	800cc18 <_scanf_i+0x1dc>
 800cbbc:	6822      	ldr	r2, [r4, #0]
 800cbbe:	f012 0210 	ands.w	r2, r2, #16
 800cbc2:	d113      	bne.n	800cbec <_scanf_i+0x1b0>
 800cbc4:	702a      	strb	r2, [r5, #0]
 800cbc6:	6863      	ldr	r3, [r4, #4]
 800cbc8:	9e01      	ldr	r6, [sp, #4]
 800cbca:	4639      	mov	r1, r7
 800cbcc:	4650      	mov	r0, sl
 800cbce:	47b0      	blx	r6
 800cbd0:	6821      	ldr	r1, [r4, #0]
 800cbd2:	f8d8 3000 	ldr.w	r3, [r8]
 800cbd6:	f011 0f20 	tst.w	r1, #32
 800cbda:	d013      	beq.n	800cc04 <_scanf_i+0x1c8>
 800cbdc:	1d1a      	adds	r2, r3, #4
 800cbde:	f8c8 2000 	str.w	r2, [r8]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	6018      	str	r0, [r3, #0]
 800cbe6:	68e3      	ldr	r3, [r4, #12]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	60e3      	str	r3, [r4, #12]
 800cbec:	1bed      	subs	r5, r5, r7
 800cbee:	44ab      	add	fp, r5
 800cbf0:	6925      	ldr	r5, [r4, #16]
 800cbf2:	445d      	add	r5, fp
 800cbf4:	6125      	str	r5, [r4, #16]
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	b007      	add	sp, #28
 800cbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbfe:	f04f 0b00 	mov.w	fp, #0
 800cc02:	e7ca      	b.n	800cb9a <_scanf_i+0x15e>
 800cc04:	1d1a      	adds	r2, r3, #4
 800cc06:	f8c8 2000 	str.w	r2, [r8]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f011 0f01 	tst.w	r1, #1
 800cc10:	bf14      	ite	ne
 800cc12:	8018      	strhne	r0, [r3, #0]
 800cc14:	6018      	streq	r0, [r3, #0]
 800cc16:	e7e6      	b.n	800cbe6 <_scanf_i+0x1aa>
 800cc18:	2001      	movs	r0, #1
 800cc1a:	e7ed      	b.n	800cbf8 <_scanf_i+0x1bc>
 800cc1c:	0800d034 	.word	0x0800d034
 800cc20:	0800cd81 	.word	0x0800cd81
 800cc24:	0800c531 	.word	0x0800c531
 800cc28:	0800d3ab 	.word	0x0800d3ab

0800cc2c <__sccl>:
 800cc2c:	b570      	push	{r4, r5, r6, lr}
 800cc2e:	780b      	ldrb	r3, [r1, #0]
 800cc30:	4604      	mov	r4, r0
 800cc32:	2b5e      	cmp	r3, #94	; 0x5e
 800cc34:	bf0b      	itete	eq
 800cc36:	784b      	ldrbeq	r3, [r1, #1]
 800cc38:	1c48      	addne	r0, r1, #1
 800cc3a:	1c88      	addeq	r0, r1, #2
 800cc3c:	2200      	movne	r2, #0
 800cc3e:	bf08      	it	eq
 800cc40:	2201      	moveq	r2, #1
 800cc42:	1e61      	subs	r1, r4, #1
 800cc44:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cc48:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cc4c:	42a9      	cmp	r1, r5
 800cc4e:	d1fb      	bne.n	800cc48 <__sccl+0x1c>
 800cc50:	b90b      	cbnz	r3, 800cc56 <__sccl+0x2a>
 800cc52:	3801      	subs	r0, #1
 800cc54:	bd70      	pop	{r4, r5, r6, pc}
 800cc56:	f082 0201 	eor.w	r2, r2, #1
 800cc5a:	54e2      	strb	r2, [r4, r3]
 800cc5c:	4605      	mov	r5, r0
 800cc5e:	4628      	mov	r0, r5
 800cc60:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cc64:	292d      	cmp	r1, #45	; 0x2d
 800cc66:	d006      	beq.n	800cc76 <__sccl+0x4a>
 800cc68:	295d      	cmp	r1, #93	; 0x5d
 800cc6a:	d0f3      	beq.n	800cc54 <__sccl+0x28>
 800cc6c:	b909      	cbnz	r1, 800cc72 <__sccl+0x46>
 800cc6e:	4628      	mov	r0, r5
 800cc70:	e7f0      	b.n	800cc54 <__sccl+0x28>
 800cc72:	460b      	mov	r3, r1
 800cc74:	e7f1      	b.n	800cc5a <__sccl+0x2e>
 800cc76:	786e      	ldrb	r6, [r5, #1]
 800cc78:	2e5d      	cmp	r6, #93	; 0x5d
 800cc7a:	d0fa      	beq.n	800cc72 <__sccl+0x46>
 800cc7c:	42b3      	cmp	r3, r6
 800cc7e:	dcf8      	bgt.n	800cc72 <__sccl+0x46>
 800cc80:	3502      	adds	r5, #2
 800cc82:	4619      	mov	r1, r3
 800cc84:	3101      	adds	r1, #1
 800cc86:	428e      	cmp	r6, r1
 800cc88:	5462      	strb	r2, [r4, r1]
 800cc8a:	dcfb      	bgt.n	800cc84 <__sccl+0x58>
 800cc8c:	1af1      	subs	r1, r6, r3
 800cc8e:	3901      	subs	r1, #1
 800cc90:	1c58      	adds	r0, r3, #1
 800cc92:	42b3      	cmp	r3, r6
 800cc94:	bfa8      	it	ge
 800cc96:	2100      	movge	r1, #0
 800cc98:	1843      	adds	r3, r0, r1
 800cc9a:	e7e0      	b.n	800cc5e <__sccl+0x32>

0800cc9c <_strtoul_l.constprop.0>:
 800cc9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cca0:	4f36      	ldr	r7, [pc, #216]	; (800cd7c <_strtoul_l.constprop.0+0xe0>)
 800cca2:	4686      	mov	lr, r0
 800cca4:	460d      	mov	r5, r1
 800cca6:	4628      	mov	r0, r5
 800cca8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccac:	5de6      	ldrb	r6, [r4, r7]
 800ccae:	f016 0608 	ands.w	r6, r6, #8
 800ccb2:	d1f8      	bne.n	800cca6 <_strtoul_l.constprop.0+0xa>
 800ccb4:	2c2d      	cmp	r4, #45	; 0x2d
 800ccb6:	d12f      	bne.n	800cd18 <_strtoul_l.constprop.0+0x7c>
 800ccb8:	782c      	ldrb	r4, [r5, #0]
 800ccba:	2601      	movs	r6, #1
 800ccbc:	1c85      	adds	r5, r0, #2
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d057      	beq.n	800cd72 <_strtoul_l.constprop.0+0xd6>
 800ccc2:	2b10      	cmp	r3, #16
 800ccc4:	d109      	bne.n	800ccda <_strtoul_l.constprop.0+0x3e>
 800ccc6:	2c30      	cmp	r4, #48	; 0x30
 800ccc8:	d107      	bne.n	800ccda <_strtoul_l.constprop.0+0x3e>
 800ccca:	7828      	ldrb	r0, [r5, #0]
 800cccc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ccd0:	2858      	cmp	r0, #88	; 0x58
 800ccd2:	d149      	bne.n	800cd68 <_strtoul_l.constprop.0+0xcc>
 800ccd4:	786c      	ldrb	r4, [r5, #1]
 800ccd6:	2310      	movs	r3, #16
 800ccd8:	3502      	adds	r5, #2
 800ccda:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ccde:	2700      	movs	r7, #0
 800cce0:	fbb8 f8f3 	udiv	r8, r8, r3
 800cce4:	fb03 f908 	mul.w	r9, r3, r8
 800cce8:	ea6f 0909 	mvn.w	r9, r9
 800ccec:	4638      	mov	r0, r7
 800ccee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ccf2:	f1bc 0f09 	cmp.w	ip, #9
 800ccf6:	d814      	bhi.n	800cd22 <_strtoul_l.constprop.0+0x86>
 800ccf8:	4664      	mov	r4, ip
 800ccfa:	42a3      	cmp	r3, r4
 800ccfc:	dd22      	ble.n	800cd44 <_strtoul_l.constprop.0+0xa8>
 800ccfe:	2f00      	cmp	r7, #0
 800cd00:	db1d      	blt.n	800cd3e <_strtoul_l.constprop.0+0xa2>
 800cd02:	4580      	cmp	r8, r0
 800cd04:	d31b      	bcc.n	800cd3e <_strtoul_l.constprop.0+0xa2>
 800cd06:	d101      	bne.n	800cd0c <_strtoul_l.constprop.0+0x70>
 800cd08:	45a1      	cmp	r9, r4
 800cd0a:	db18      	blt.n	800cd3e <_strtoul_l.constprop.0+0xa2>
 800cd0c:	fb00 4003 	mla	r0, r0, r3, r4
 800cd10:	2701      	movs	r7, #1
 800cd12:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd16:	e7ea      	b.n	800ccee <_strtoul_l.constprop.0+0x52>
 800cd18:	2c2b      	cmp	r4, #43	; 0x2b
 800cd1a:	bf04      	itt	eq
 800cd1c:	782c      	ldrbeq	r4, [r5, #0]
 800cd1e:	1c85      	addeq	r5, r0, #2
 800cd20:	e7cd      	b.n	800ccbe <_strtoul_l.constprop.0+0x22>
 800cd22:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cd26:	f1bc 0f19 	cmp.w	ip, #25
 800cd2a:	d801      	bhi.n	800cd30 <_strtoul_l.constprop.0+0x94>
 800cd2c:	3c37      	subs	r4, #55	; 0x37
 800cd2e:	e7e4      	b.n	800ccfa <_strtoul_l.constprop.0+0x5e>
 800cd30:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cd34:	f1bc 0f19 	cmp.w	ip, #25
 800cd38:	d804      	bhi.n	800cd44 <_strtoul_l.constprop.0+0xa8>
 800cd3a:	3c57      	subs	r4, #87	; 0x57
 800cd3c:	e7dd      	b.n	800ccfa <_strtoul_l.constprop.0+0x5e>
 800cd3e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cd42:	e7e6      	b.n	800cd12 <_strtoul_l.constprop.0+0x76>
 800cd44:	2f00      	cmp	r7, #0
 800cd46:	da07      	bge.n	800cd58 <_strtoul_l.constprop.0+0xbc>
 800cd48:	2322      	movs	r3, #34	; 0x22
 800cd4a:	f8ce 3000 	str.w	r3, [lr]
 800cd4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd52:	b932      	cbnz	r2, 800cd62 <_strtoul_l.constprop.0+0xc6>
 800cd54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd58:	b106      	cbz	r6, 800cd5c <_strtoul_l.constprop.0+0xc0>
 800cd5a:	4240      	negs	r0, r0
 800cd5c:	2a00      	cmp	r2, #0
 800cd5e:	d0f9      	beq.n	800cd54 <_strtoul_l.constprop.0+0xb8>
 800cd60:	b107      	cbz	r7, 800cd64 <_strtoul_l.constprop.0+0xc8>
 800cd62:	1e69      	subs	r1, r5, #1
 800cd64:	6011      	str	r1, [r2, #0]
 800cd66:	e7f5      	b.n	800cd54 <_strtoul_l.constprop.0+0xb8>
 800cd68:	2430      	movs	r4, #48	; 0x30
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1b5      	bne.n	800ccda <_strtoul_l.constprop.0+0x3e>
 800cd6e:	2308      	movs	r3, #8
 800cd70:	e7b3      	b.n	800ccda <_strtoul_l.constprop.0+0x3e>
 800cd72:	2c30      	cmp	r4, #48	; 0x30
 800cd74:	d0a9      	beq.n	800ccca <_strtoul_l.constprop.0+0x2e>
 800cd76:	230a      	movs	r3, #10
 800cd78:	e7af      	b.n	800ccda <_strtoul_l.constprop.0+0x3e>
 800cd7a:	bf00      	nop
 800cd7c:	0800d28e 	.word	0x0800d28e

0800cd80 <_strtoul_r>:
 800cd80:	f7ff bf8c 	b.w	800cc9c <_strtoul_l.constprop.0>

0800cd84 <__submore>:
 800cd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd88:	460c      	mov	r4, r1
 800cd8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cd8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd90:	4299      	cmp	r1, r3
 800cd92:	d11d      	bne.n	800cdd0 <__submore+0x4c>
 800cd94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cd98:	f7ff fa24 	bl	800c1e4 <_malloc_r>
 800cd9c:	b918      	cbnz	r0, 800cda6 <__submore+0x22>
 800cd9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cda2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdaa:	63a3      	str	r3, [r4, #56]	; 0x38
 800cdac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cdb0:	6360      	str	r0, [r4, #52]	; 0x34
 800cdb2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cdb6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cdba:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cdbe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cdc2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cdc6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cdca:	6020      	str	r0, [r4, #0]
 800cdcc:	2000      	movs	r0, #0
 800cdce:	e7e8      	b.n	800cda2 <__submore+0x1e>
 800cdd0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cdd2:	0077      	lsls	r7, r6, #1
 800cdd4:	463a      	mov	r2, r7
 800cdd6:	f000 f80f 	bl	800cdf8 <_realloc_r>
 800cdda:	4605      	mov	r5, r0
 800cddc:	2800      	cmp	r0, #0
 800cdde:	d0de      	beq.n	800cd9e <__submore+0x1a>
 800cde0:	eb00 0806 	add.w	r8, r0, r6
 800cde4:	4601      	mov	r1, r0
 800cde6:	4632      	mov	r2, r6
 800cde8:	4640      	mov	r0, r8
 800cdea:	f7ff f979 	bl	800c0e0 <memcpy>
 800cdee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cdf2:	f8c4 8000 	str.w	r8, [r4]
 800cdf6:	e7e9      	b.n	800cdcc <__submore+0x48>

0800cdf8 <_realloc_r>:
 800cdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdfc:	4680      	mov	r8, r0
 800cdfe:	4614      	mov	r4, r2
 800ce00:	460e      	mov	r6, r1
 800ce02:	b921      	cbnz	r1, 800ce0e <_realloc_r+0x16>
 800ce04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce08:	4611      	mov	r1, r2
 800ce0a:	f7ff b9eb 	b.w	800c1e4 <_malloc_r>
 800ce0e:	b92a      	cbnz	r2, 800ce1c <_realloc_r+0x24>
 800ce10:	f7ff f97c 	bl	800c10c <_free_r>
 800ce14:	4625      	mov	r5, r4
 800ce16:	4628      	mov	r0, r5
 800ce18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce1c:	f000 f81b 	bl	800ce56 <_malloc_usable_size_r>
 800ce20:	4284      	cmp	r4, r0
 800ce22:	4607      	mov	r7, r0
 800ce24:	d802      	bhi.n	800ce2c <_realloc_r+0x34>
 800ce26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce2a:	d812      	bhi.n	800ce52 <_realloc_r+0x5a>
 800ce2c:	4621      	mov	r1, r4
 800ce2e:	4640      	mov	r0, r8
 800ce30:	f7ff f9d8 	bl	800c1e4 <_malloc_r>
 800ce34:	4605      	mov	r5, r0
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d0ed      	beq.n	800ce16 <_realloc_r+0x1e>
 800ce3a:	42bc      	cmp	r4, r7
 800ce3c:	4622      	mov	r2, r4
 800ce3e:	4631      	mov	r1, r6
 800ce40:	bf28      	it	cs
 800ce42:	463a      	movcs	r2, r7
 800ce44:	f7ff f94c 	bl	800c0e0 <memcpy>
 800ce48:	4631      	mov	r1, r6
 800ce4a:	4640      	mov	r0, r8
 800ce4c:	f7ff f95e 	bl	800c10c <_free_r>
 800ce50:	e7e1      	b.n	800ce16 <_realloc_r+0x1e>
 800ce52:	4635      	mov	r5, r6
 800ce54:	e7df      	b.n	800ce16 <_realloc_r+0x1e>

0800ce56 <_malloc_usable_size_r>:
 800ce56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce5a:	1f18      	subs	r0, r3, #4
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	bfbc      	itt	lt
 800ce60:	580b      	ldrlt	r3, [r1, r0]
 800ce62:	18c0      	addlt	r0, r0, r3
 800ce64:	4770      	bx	lr
	...

0800ce68 <round>:
 800ce68:	ec51 0b10 	vmov	r0, r1, d0
 800ce6c:	b570      	push	{r4, r5, r6, lr}
 800ce6e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800ce72:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800ce76:	2c13      	cmp	r4, #19
 800ce78:	ee10 2a10 	vmov	r2, s0
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	dc19      	bgt.n	800ceb4 <round+0x4c>
 800ce80:	2c00      	cmp	r4, #0
 800ce82:	da09      	bge.n	800ce98 <round+0x30>
 800ce84:	3401      	adds	r4, #1
 800ce86:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800ce8a:	d103      	bne.n	800ce94 <round+0x2c>
 800ce8c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ce90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ce94:	2200      	movs	r2, #0
 800ce96:	e028      	b.n	800ceea <round+0x82>
 800ce98:	4d15      	ldr	r5, [pc, #84]	; (800cef0 <round+0x88>)
 800ce9a:	4125      	asrs	r5, r4
 800ce9c:	ea01 0605 	and.w	r6, r1, r5
 800cea0:	4332      	orrs	r2, r6
 800cea2:	d00e      	beq.n	800cec2 <round+0x5a>
 800cea4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800cea8:	fa42 f404 	asr.w	r4, r2, r4
 800ceac:	4423      	add	r3, r4
 800ceae:	ea23 0305 	bic.w	r3, r3, r5
 800ceb2:	e7ef      	b.n	800ce94 <round+0x2c>
 800ceb4:	2c33      	cmp	r4, #51	; 0x33
 800ceb6:	dd07      	ble.n	800cec8 <round+0x60>
 800ceb8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800cebc:	d101      	bne.n	800cec2 <round+0x5a>
 800cebe:	f7f3 f9f5 	bl	80002ac <__adddf3>
 800cec2:	ec41 0b10 	vmov	d0, r0, r1
 800cec6:	bd70      	pop	{r4, r5, r6, pc}
 800cec8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800cecc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ced0:	40f5      	lsrs	r5, r6
 800ced2:	4228      	tst	r0, r5
 800ced4:	d0f5      	beq.n	800cec2 <round+0x5a>
 800ced6:	2101      	movs	r1, #1
 800ced8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800cedc:	fa01 f404 	lsl.w	r4, r1, r4
 800cee0:	1912      	adds	r2, r2, r4
 800cee2:	bf28      	it	cs
 800cee4:	185b      	addcs	r3, r3, r1
 800cee6:	ea22 0205 	bic.w	r2, r2, r5
 800ceea:	4619      	mov	r1, r3
 800ceec:	4610      	mov	r0, r2
 800ceee:	e7e8      	b.n	800cec2 <round+0x5a>
 800cef0:	000fffff 	.word	0x000fffff

0800cef4 <_init>:
 800cef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef6:	bf00      	nop
 800cef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cefa:	bc08      	pop	{r3}
 800cefc:	469e      	mov	lr, r3
 800cefe:	4770      	bx	lr

0800cf00 <_fini>:
 800cf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf02:	bf00      	nop
 800cf04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf06:	bc08      	pop	{r3}
 800cf08:	469e      	mov	lr, r3
 800cf0a:	4770      	bx	lr
